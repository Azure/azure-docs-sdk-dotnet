<Type Name="DocumentClient" FullName="Microsoft.Azure.Documents.Client.DocumentClient">
  <TypeSignature Language="C#" Value="public sealed class DocumentClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DocumentClient extends System.Object implements class Microsoft.Azure.Documents.IDocumentClient, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.Client.DocumentClient" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
    <AssemblyVersion>1.14.0.0</AssemblyVersion>
    <AssemblyVersion>1.16.0.0</AssemblyVersion>
    <AssemblyVersion>1.17.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Provides a client-side logical representation for the Azure DocumentDB database service. 
            This client is used to configure and execute requests against the service.
            </summary>
    <remarks>
            The service client that encapsulates the endpoint and credentials and connection policy used to access the DocumentDB service.
            It is recommended to cache and reuse this instance within your application rather than creating a new instance for every operation.  
            
            <para>
            When your app uses DocumentClient, you should call its IDisposable.Dispose implementation when you are finished using it.  
            Depending on your programming technique, you can do this in one of two ways: 
            </para><para>
            1. By using a language construct such as the using statement in C#. 
            The using statement is actually a syntactic convenience. 
            At compile time, the language compiler implements the intermediate language (IL) for a try/catch block.
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            {
                ...
            }
            ]]></code></para><para>
            2. By wrapping the call to the IDisposable.Dispose implementation in a try/catch block. 
            The following example replaces the using block in the previous example with a try/catch/finally block.
            <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("endpoint"), "authKey"))
            try{
                ...               
            }
            finally{
                if (client != null) client.Dispose();
            }
            ]]></code></para></remarks>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
    <threadSafety>
            This type is thread safe.
            </threadSafety>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, System.Collections.Generic.IDictionary&lt;string,string&gt; resourceTokens, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; resourceTokens, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use the constructor that takes a permission list or a resource token list.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="resourceTokens" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
        <param name="resourceTokens">A dictionary of resource ids and resource tokens.</param>
        <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
        <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
        <summary>
            Initializes a new instance of the Microsoft.Azure.Documents.Client.DocumentClient class using the 
            specified Azure DocumentDB database service endpoint, a dictionary of resource tokens and a connection policy.
            </summary>
        <remarks>Using Direct connectivity, wherever possible, is recommended</remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, System.Collections.Generic.IList&lt;Microsoft.Azure.Documents.Permission&gt; permissionFeed, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Documents.Permission&gt; permissionFeed, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Collections.Generic.IList{Microsoft.Azure.Documents.Permission},Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="permissionFeed" Type="System.Collections.Generic.IList&lt;Microsoft.Azure.Documents.Permission&gt;" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
        <param name="permissionFeed">A list of Permission objects to use to create the client.</param>
        <param name="connectionPolicy">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy" /> to use for this connection.</param>
        <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified DocumentDB service endpoint for the Azure DocumentDB database service, a list of permission objects and a connection policy.
            </summary>
        <remarks>
            If no <paramref name="connectionPolicy" /> is provided, then the default <see cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy" /> will be used.
            Using Direct connectivity, wherever possible, is recommended.
            </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permissionFeed" /> is not supplied.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="permissionFeed" /> is not a valid permission link.</exception>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, System.Security.SecureString authKey, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, class System.Security.SecureString authKey, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKey" Type="System.Security.SecureString" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
        <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
        <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" /></param>
        <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified DocumentDB service endpoint, key, and connection policy for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Security.SecureString" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, string authKeyOrResourceToken, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, string authKeyOrResourceToken, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKeyOrResourceToken" Type="System.String" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
        <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
        <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
        <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified service endpoint, an authorization key (or resource token) and a connection policy
            for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken" /> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, System.Security.SecureString authKey, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel, Newtonsoft.Json.JsonSerializerSettings serializerSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, class System.Security.SecureString authKey, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel, class Newtonsoft.Json.JsonSerializerSettings serializerSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use the constructor that takes JsonSerializerSettings as the third parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKey" Type="System.Security.SecureString" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
        <Parameter Name="serializerSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
        <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
        <param name="connectionPolicy">
            The connection policy for the client.
            </param>
        <param name="desiredConsistencyLevel">
            This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
        <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified DocumentDB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Security.SecureString" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
        <altmember cref="T:Newtonsoft.Json.JsonSerializerSettings" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, System.Security.SecureString authKey, Newtonsoft.Json.JsonSerializerSettings serializerSettings, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, class System.Security.SecureString authKey, class Newtonsoft.Json.JsonSerializerSettings serializerSettings, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.Security.SecureString,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKey" Type="System.Security.SecureString" />
        <Parameter Name="serializerSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">
            The service endpoint to use to create the client.
            </param>
        <param name="authKey">
            The list of Permission objects to use to create the client.
            </param>
        <param name="serializerSettings">
            The custom JsonSerializer settings to be used for serialization/derialization.
            </param>
        <param name="connectionPolicy">
            (Optional) The connection policy for the client. If none is passed, the default is used <see cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" /></param>
        <param name="desiredConsistencyLevel">
            (Optional) This can be used to weaken the database account consistency level for read operations. 
            If this is not set the database account consistency level will be used for all requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified DocumentDB service endpoint, key, connection policy and a custom JsonSerializerSettings
            for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint and the authorization key can be obtained from the Azure Management Portal. 
            The authKey used here is encrypted for privacy when being used, and deleted from computer memory when no longer needed
            <para>
            Using Direct connectivity, wherever possible, is recommended
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:System.Security.SecureString" />
        <altmember cref="T:Newtonsoft.Json.JsonSerializerSettings" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, string authKeyOrResourceToken, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel, Newtonsoft.Json.JsonSerializerSettings serializerSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, string authKeyOrResourceToken, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel, class Newtonsoft.Json.JsonSerializerSettings serializerSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel},Newtonsoft.Json.JsonSerializerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use the constructor that takes JsonSerializerSettings as the third parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKeyOrResourceToken" Type="System.String" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
        <Parameter Name="serializerSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
        <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
        <param name="connectionPolicy">The connection policy for the client.</param>
        <param name="desiredConsistencyLevel">The default consistency policy for client operations.</param>
        <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken" /> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
        <altmember cref="T:Newtonsoft.Json.JsonSerializerSettings" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentClient (Uri serviceEndpoint, string authKeyOrResourceToken, Newtonsoft.Json.JsonSerializerSettings serializerSettings, Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy = null, Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri serviceEndpoint, string authKeyOrResourceToken, class Newtonsoft.Json.JsonSerializerSettings serializerSettings, class Microsoft.Azure.Documents.Client.ConnectionPolicy connectionPolicy, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Documents.ConsistencyLevel&gt; desiredConsistencyLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.#ctor(System.Uri,System.String,Newtonsoft.Json.JsonSerializerSettings,Microsoft.Azure.Documents.Client.ConnectionPolicy,System.Nullable{Microsoft.Azure.Documents.ConsistencyLevel})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceEndpoint" Type="System.Uri" />
        <Parameter Name="authKeyOrResourceToken" Type="System.String" />
        <Parameter Name="serializerSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
        <Parameter Name="connectionPolicy" Type="Microsoft.Azure.Documents.Client.ConnectionPolicy" />
        <Parameter Name="desiredConsistencyLevel" Type="System.Nullable&lt;Microsoft.Azure.Documents.ConsistencyLevel&gt;" />
      </Parameters>
      <Docs>
        <param name="serviceEndpoint">The service endpoint to use to create the client.</param>
        <param name="authKeyOrResourceToken">The authorization key or resource token to use to create the client.</param>
        <param name="serializerSettings">The custom JsonSerializer settings to be used for serialization/derialization.</param>
        <param name="connectionPolicy">(Optional) The connection policy for the client.</param>
        <param name="desiredConsistencyLevel">(Optional) The default consistency policy for client operations.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Client.DocumentClient" /> class using the 
            specified service endpoint, an authorization key (or resource token), a connection policy
            and a custom JsonSerializerSettings for the Azure DocumentDB database service.
            </summary>
        <remarks>
            The service endpoint can be obtained from the Azure Management Portal. 
            If you are connecting using one of the Master Keys, these can be obtained along with the endpoint from the Azure Management Portal
            If however you are connecting as a specific DocumentDB User, the value passed to <paramref name="authKeyOrResourceToken" /> is the ResourceToken obtained from the permission feed for the user.
            <para>
            Using Direct connectivity, wherever possible, is recommended.
            </para></remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="T:Newtonsoft.Json.JsonSerializerSettings" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
        <altmember cref="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName="AuthKey">
      <MemberSignature Language="C#" Value="public System.Security.SecureString AuthKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.SecureString AuthKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.AuthKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the AuthKey used by the client from the Azure DocumentDB database service.
            </summary>
        <value>
            The AuthKey used by the client.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Security.SecureString" />
      </Docs>
    </Member>
    <Member MemberName="ConnectionPolicy">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Documents.Client.ConnectionPolicy ConnectionPolicy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Documents.Client.ConnectionPolicy ConnectionPolicy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.ConnectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Documents.Client.ConnectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Connection policy used by the client from the Azure DocumentDB database service.
            </summary>
        <value>
            The Connection policy used by the client.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Azure.Documents.Client.ConnectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="ConsistencyLevel">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Documents.ConsistencyLevel ConsistencyLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Documents.ConsistencyLevel ConsistencyLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.ConsistencyLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Documents.ConsistencyLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the configured consistency level of the client from the Azure DocumentDB database service. 
            </summary>
        <value>
            The configured <see cref="T:Microsoft.Azure.Documents.ConsistencyLevel" /> of the client.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Azure.Documents.ConsistencyLevel" />
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync (string documentLink, object attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync(string documentLink, object attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="attachment" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
        <param name="attachment">The attachment object.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.
            </returns>
        <remarks />
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
        <example>
            The example below creates a new document, and then creates a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Create an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.CreateAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            //Because Attachment is a Dynamic object you can use SetPropertyValue method to any property you like
            //Even if that property doesn't exist. Here we are creating two new properties on the Attachment we created above.
            a.SetPropertyValue("Foo", "some value");
            a.SetPropertyValue("Bar", "some value");
            
            //Now update the Attachment object in the database to persist the new properties on the object
            client.ReplaceAttachmentAsync(a);
            
            //Let's now create another Attachment except this time we're going to use a Dynamic object instead 
            //of a <see cref="Microsoft.Azure.Documents.Attachment"/> as we did above.
            var b = await client.CreateAttachmentAsync(doc.SelfLink, new { id = "foo", contentType = "text/plain", media="link to your media", a = 5, b = 6 });
            
            //Now you will have a Document in your database with two attachments.
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync (Uri documentUri, object attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync(class System.Uri documentUri, object attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="attachment" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to create an attachment for.</param>
        <param name="attachment">the attachment object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync (string attachmentsLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options = null, Microsoft.Azure.Documents.Client.RequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync(string attachmentsLink, class System.IO.Stream mediaStream, class Microsoft.Azure.Documents.Client.MediaOptions options, class Microsoft.Azure.Documents.Client.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsLink" Type="System.String" />
        <Parameter Name="mediaStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.MediaOptions" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
        <param name="mediaStream">the <see cref="T:System.IO.Stream" /> of the attachment media.</param>
        <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions" /> for the request.</param>
        <param name="requestOptions">Request options.</param>
        <summary>
            Creates an <see cref="T:Microsoft.Azure.Documents.Attachment" /> with the contents of the provided <paramref name="mediaStream" /> as an asynchronous operation
             in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink" /> or <paramref name="mediaStream" /> is not set.</exception>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Create the attachment
                Attachment attachment = await client.CreateAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync (Uri documentUri, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options = null, Microsoft.Azure.Documents.Client.RequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; CreateAttachmentAsync(class System.Uri documentUri, class System.IO.Stream mediaStream, class Microsoft.Azure.Documents.Client.MediaOptions options, class Microsoft.Azure.Documents.Client.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="mediaStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.MediaOptions" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to create an attachment for.</param>
        <param name="mediaStream">the stream of the attachment media.</param>
        <param name="options">the media options for the request.</param>
        <param name="requestOptions">The request options for the request.</param>
        <summary>
            Creates an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Attachment&gt; CreateAttachmentQuery (string documentLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Attachment&gt; CreateAttachmentQuery(string documentLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link to the parent document</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service. It returns an IOrderedQueryable{Attachment}.
            </summary>
        <returns>An IOrderedQueryable{Attachments} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using LINQ.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink).Where(a => a.ContentType == "text/plain"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Attachment&gt; CreateAttachmentQuery (Uri attachmentsUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Attachment&gt; CreateAttachmentQuery(class System.Uri attachmentsUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Attachment&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateAttachmentQuery (string documentLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateAttachmentQuery(string documentLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link to the parent document resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
              Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
             </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.priority = @priority", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@priority", Value = 0 } }));
            
             foreach (dynamic attachment in client.CreateAttachmentQuery<dynamic>(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateAttachmentQuery (string documentLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateAttachmentQuery(string documentLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link to the parent document.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery<dynamic>(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.priority = 0"))
            {
                Console.WriteLine("Id: {0}, Priority:{1}", attachment.id, attachment.priority);
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateAttachmentQuery (Uri attachmentsUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateAttachmentQuery(class System.Uri attachmentsUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateAttachmentQuery (Uri attachmentsUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateAttachmentQuery(class System.Uri attachmentsUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (string documentLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(string documentLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="documentLink">The link of the parent document.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries against attachments of custom types.
            <code language="c#"><![CDATA[
            public class PriorityAttachment : Attachment
            {
                [JsonProperty("priority")]
                public int Priority;
            }
            
            foreach (PriorityAttachment attachment in 
                client.CreateAttachmentQuery<PriorityAttachment>(document.SelfLink).Where(a => a.Priority == 0))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (Uri attachmentsUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(class System.Uri attachmentsUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (string documentLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(string documentLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="documentLink">The link of the parent document.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
              Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement with parameterized values.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
             </summary>
        <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
        <example>
             This example below queries for plain text attachments using a parameterized SQL query string.
             <code language="c#"><![CDATA[
             var query = new SqlQuerySpec(
                 "SELECT * FROM attachments a WHERE a.contentType = @contentType", 
                 new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@contentType", Value = "text/plain" } }));
            
             foreach (Attachment attachment in client.CreateAttachmentQuery(document.SelfLink, query))
             {
                 Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (string documentLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(string documentLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="documentLink">The link of the parent document.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for attachments in the Azure DocumentDB database service by using a SQL statement. 
            </summary>
        <returns>An IQueryable{T} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
        <example>
            This example below queries for plain text attachments using a SQL query string.
            <code language="c#"><![CDATA[
            foreach (Attachment attachment in client.CreateAttachmentQuery(
                document.SelfLink, 
                "SELECT * FROM attachments a WHERE a.contentType = 'text/plain'"))
            {
                Console.WriteLine("Id: {0}, MediaLink:{1}", attachment.Id, attachment.MediaLink);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (Uri attachmentsUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(class System.Uri attachmentsUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttachmentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateAttachmentQuery&lt;T&gt; (Uri attachmentsUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateAttachmentQuery&lt;T&gt;(class System.Uri attachmentsUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateAttachmentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="attachmentsUri">the URI to the attachments.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for attachments in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Conflict&gt; CreateConflictQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Conflict&gt; CreateConflictQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Conflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{Conflict}.
            </summary>
        <returns>An IOrderedQueryable{Conflict} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            Conflict conflict = client.CreateConflictQuery(collectionLink).Where(c => c.Id == "summary").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Conflict&gt; CreateConflictQuery (Uri conflictsUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Conflict&gt; CreateConflictQuery(class System.Uri conflictsUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Conflict&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictsUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="conflictsUri">the URI to the conflicts.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateConflictQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateConflictQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            dynamic conflict = client.CreateConflictQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateConflictQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateConflictQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for conflicts under a collection in an Azure DocumentDB database service. It returns an IQueryable{Conflict}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for conflicts by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM conflicts c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "summary" }}));
            Conflict conflict = client.CreateConflictQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateConflictQuery (Uri conflictsUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateConflictQuery(class System.Uri conflictsUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictsUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="conflictsUri">the URI to the conflicts.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConflictQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateConflictQuery (Uri conflictsUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateConflictQuery(class System.Uri conflictsUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateConflictQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictsUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="conflictsUri">the URI to the conflicts.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for conflicts in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; CreateDatabaseAsync (Microsoft.Azure.Documents.Database database, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; CreateDatabaseAsync(class Microsoft.Azure.Documents.Database database, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="Microsoft.Azure.Documents.Database" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database" /> to create.</param>
        <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> for the request.</param>
        <summary>
            Creates a database resource as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.Database" /> that was created within a task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="database" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Database are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the database object supplied. It is likely that an id was not supplied for the new Database.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Database" /> with an id matching the id field of <paramref name="database" /> already existed.</description></item></list></exception>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; CreateDatabaseIfNotExistsAsync (Microsoft.Azure.Documents.Database database, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; CreateDatabaseIfNotExistsAsync(class Microsoft.Azure.Documents.Database database, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseIfNotExistsAsync(Microsoft.Azure.Documents.Database,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="Microsoft.Azure.Documents.Database" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="database">The specification for the <see cref="T:Microsoft.Azure.Documents.Database" /> to create.</param>
        <param name="options">(Optional) The <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> for the request.</param>
        <summary>
            Creates(if doesn't exist) or gets(if already exists) a database resource as an asychronous operation in the Azure DocumentDB database service.
            You can check the status code from the response to determine whether the database was newly created(201) or existing database was returned(200)
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.Database" /> that was created within a task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="database" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.</exception>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
        <example>
            The example below creates a new <see cref="T:Microsoft.Azure.Documents.Database" /> with an Id property of 'MyDatabase'
            This code snippet is intended to be used from within an asynchronous method as it uses the await keyword
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
        <example>
            If you would like to construct a <see cref="T:Microsoft.Azure.Documents.Database" /> from within a synchronous method then you need to use the following code
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = "MyDatabase" }).Result;
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Database&gt; CreateDatabaseQuery (Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Database&gt; CreateDatabaseQuery(class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Database&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for database resources under an account in the Azure DocumentDB database service. It returns An IOrderedQueryable{Database}.
            </summary>
        <returns>An IOrderedQueryable{Database} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "mydb").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDatabaseQuery (Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDatabaseQuery(class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for database resources under an Azure DocumentDB database account by using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM dbs d WHERE d.id = @id",
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mydb" }}));
            dynamic database = client.CreateDatabaseQuery<dynamic>(query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDatabaseQuery (string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDatabaseQuery(string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDatabaseQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for database resources under an Azure DocumentDB database account by using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for databases by id.
            <code language="c#"><![CDATA[
            Database database = client.CreateDatabaseQuery("SELECT * FROM dbs d WHERE d.id = 'mydb'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; CreateDocumentAsync (string documentsFeedOrDatabaseLink, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null, bool disableAutomaticIdGeneration = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; CreateDocumentAsync(string documentsFeedOrDatabaseLink, object document, class Microsoft.Azure.Documents.Client.RequestOptions options, bool disableAutomaticIdGeneration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentsFeedOrDatabaseLink" Type="System.String" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="disableAutomaticIdGeneration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to create the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
        <param name="document">The document object to create.</param>
        <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /></param>
        <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
        <summary>
            Creates a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.Document" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink" /> or <paramref name="document" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration" /> was true and an id was not supplied</description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document" /> with an id matching the id field of <paramref name="document" /> already existed</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document" /> exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            Finally, a Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Create a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.CreateDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; CreateDocumentAsync (Uri documentCollectionUri, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null, bool disableAutomaticIdGeneration = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; CreateDocumentAsync(class System.Uri documentCollectionUri, object document, class Microsoft.Azure.Documents.Client.RequestOptions options, bool disableAutomaticIdGeneration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="disableAutomaticIdGeneration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to create the document in.</param>
        <param name="document">the document object.</param>
        <param name="options">The request options for the request.</param>
        <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
        <summary>
            Creates a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentChangeFeedQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentChangeFeedQuery (string collectionLink, Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Azure.Documents.Linq.IDocumentQuery`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentChangeFeedQuery(string collectionLink, class Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentChangeFeedQuery(System.String,Microsoft.Azure.Documents.Client.ChangeFeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.ChangeFeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">Specifies the collection to read documents from.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Overloaded. This method creates a change feed query for documents under a collection in an Azure DocumentDB database service.
            </summary>
        <returns>the query result set.</returns>
        <remarks>ChangeFeedOptions.PartitionKeyRangeId must be provided.</remarks>
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery`1" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ChangeFeedOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.PartitionKeyRange" />
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            string partitionKeyRangeId = "0";   // Use client.ReadPartitionKeyRangeFeedAsync() to obtain the ranges.
            string checkpointContinuation = null;
            ChangeFeedOptions options = new ChangeFeedOptions
            {
                PartitionKeyRangeId = partitionKeyRangeId,
                RequestContinuation = checkpointContinuation,
                StartFromBeginning = true,
            };
            using(var query = client.CreateDocumentChangeFeedQuery(collection.SelfLink, options))
            {
                while (true)
                {
                    do
                    {
                        var response = await query.ExecuteNextAsync<Document>();
                        if (response.Count > 0)
                        {
                            var docs = new List<Document>();
                            docs.AddRange(response);
                            // Process the documents.
                            // Checkpoint response.ResponseContinuation.
                        }
                    }
                    while (query.HasMoreResults);
                    Task.Delay(TimeSpan.FromMilliseconds(500)); // Or break here and use checkpointed continuation token later.
                }       
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentChangeFeedQuery">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentChangeFeedQuery (Uri collectionLink, Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Azure.Documents.Linq.IDocumentQuery`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentChangeFeedQuery(class System.Uri collectionLink, class Microsoft.Azure.Documents.Client.ChangeFeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentChangeFeedQuery(System.Uri,Microsoft.Azure.Documents.Client.ChangeFeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Documents.Linq.IDocumentQuery&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.ChangeFeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">Specifies the collection to read documents from.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a change feed query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>the query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionAsync (string databaseLink, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionAsync(string databaseLink, class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
        <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> object.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
        <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink" /> or <paramref name="documentCollection" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a collection are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.OfferV2" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionAsync (Uri databaseUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI of the database to create the collection in.</param>
        <param name="documentCollection">the Microsoft.Azure.Documents.DocumentCollection object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionIfNotExistsAsync (string databaseLink, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionIfNotExistsAsync(string databaseLink, class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.String,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the database to create the collection in. E.g. dbs/db_rid/.</param>
        <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> object.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
        <summary>
            Creates(if doesn't exist) or gets(if already exists) a collection as an asychronous operation in the Azure DocumentDB database service.
            You can check the status code from the response to determine whether the collection was newly created(201) or existing collection was returned(200).
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink" /> or <paramref name="documentCollection" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a DocumentCollection are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new collection.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for collections. Contact support to have this quota increased.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.OfferV2" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                //Create a new collection with an OfferThroughput set to 10000
                //Not passing in RequestOptions.OfferThroughput will result in a collection with the default OfferThroughput set. 
                DocumentCollection coll = await client.CreateDocumentCollectionIfNotExistsAsync(databaseLink,
                    new DocumentCollection { Id = "My Collection" }, 
                    new RequestOptions { OfferThroughput = 10000} );
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionIfNotExistsAsync (Uri databaseUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; CreateDocumentCollectionIfNotExistsAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionIfNotExistsAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI of the database to create the collection in.</param>
        <param name="documentCollection">The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> object.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> you wish to provide when creating a Collection. E.g. RequestOptions.OfferThroughput = 400. </param>
        <summary>
            Creates(if doesn't exist) or gets(if already exists) a collection as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.DocumentCollection&gt; CreateDocumentCollectionQuery (string databaseLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt; CreateDocumentCollectionQuery(string databaseLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.DocumentCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link to the parent database resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database database. It returns An IOrderedQueryable{DocumentCollection}.
            </summary>
        <returns>An IOrderedQueryable{DocumentCollection} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink).Where(c => c.Id == "myColl").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.DocumentCollection&gt; CreateDocumentCollectionQuery (Uri databaseUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt; CreateDocumentCollectionQuery(class System.Uri databaseUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.DocumentCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI to the database.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentCollectionQuery (string databaseLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentCollectionQuery(string databaseLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link to the parent database resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM colls c WHERE c.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "mycoll" }}));
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentCollectionQuery (string databaseLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentCollectionQuery(string databaseLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link to the parent database resource.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for collections under an Azure DocumentDB database using a SQL statement.   It returns an IQueryable{DocumentCollection}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for collections by id.
            <code language="c#"><![CDATA[
            DocumentCollection collection = client.CreateDocumentCollectionQuery(databaseLink, "SELECT * FROM colls c WHERE c.id = 'mycoll'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentCollectionQuery (Uri databaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentCollectionQuery(class System.Uri databaseUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI to the database.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentCollectionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentCollectionQuery (Uri databaseUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentCollectionQuery(class System.Uri databaseUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentCollectionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI to the database.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for document collections in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent document collection.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
             Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service. It returns IOrderedQueryable{Document}.
             </summary>
        <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
        <remarks>
             This overload should be used when the schema of the queried documents is unknown or when querying by ID and replacing/deleting documents.
             Since Document is a DynamicObject, it can be dynamically cast back to the original C# object.
             </remarks>
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
        <example>
             This example below queries for documents by id.
             <code language="c#"><![CDATA[
             Document document = client.CreateDocumentQuery<Document>(collectionLink)
                 .Where(d => d.Id == "War and Peace").AsEnumerable().FirstOrDefault();
            
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">Optional partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service. It returns IOrderedQueryable{Document}.
            </summary>
        <returns>An IOrderedQueryable{Document} that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent document collection.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent document collection.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for book documents.
            <code language="c#"><![CDATA[
            // SQL querying allows dynamic property access
            dynamic document = client.CreateDocumentQuery<dynamic>(collectionLink,
                "SELECT * FROM books b WHERE b.title == 'War and Peace'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Document&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Document&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateDocumentQuery (Uri documentCollectionOrDatabaseUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;object&gt; CreateDocumentQuery(class System.Uri documentCollectionOrDatabaseUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service.
            </summary>
        <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
        <remarks>
            The DocumentDB LINQ provider compiles LINQ to SQL statements. Refer to http://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql for the list of expressions supported by the DocumentDB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The DocumentDB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
            </remarks>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
             
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Title == "War and Peace").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Author.FirstName == "Leo").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(collectionLink).Where(b => b.Price > 100))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(
                collectionLink,
                new FeedOptions { MaxItemCount = 10 })
                .Where(b => b.Title == "War and Peace")
                .AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="documentCollectionUri">The URI of the document collection.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string documentsFeedOrDatabaseLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string documentsFeedOrDatabaseLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentsFeedOrDatabaseLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="documentsFeedOrDatabaseLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database service.
            </summary>
        <returns>An IOrderedQueryable{T} that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="collectionLink">The link to the parent document collection.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{T} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query using Title
            Book book, otherBook;
            
            var query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
            book = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Author.FirstName = @firstName", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@firstName", Value = "Leo" }}));
            otherBook = client.CreateDocumentQuery<Book>(collectionLink, query).AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.Price > @minPrice", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@minPrice", Value = 1000 }}));
            foreach (Book b in client.CreateDocumentQuery<Book>(
                collectionLink, query))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            query = new SqlQuerySpec(
                "SELECT * FROM books b WHERE b.title = @title", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@title", Value = "War and Peace" }}));
                
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, query, 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="collectionLink">The link to the parent collection.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
        <returns>An IQueryable{T} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
        <example>
            This example below queries for some book documents.
            <code language="c#"><![CDATA[
            public class Book 
            {
                [JsonProperty("title")]
                public string Title {get; set;}
                
                public Author Author {get; set;}
                
                public int Price {get; set;}
            }
            
            public class Author
            {
                public string FirstName {get; set;}
                public string LastName {get; set;}
            }
            
            // Query by the Title property
            Book book = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'").AsEnumerable().FirstOrDefault();
            
            // Query a nested property
            Book otherBook = client.CreateDocumentQuery<Book>(collectionLink,
                "SELECT * FROM books b WHERE b.Author.FirstName = 'Leo'").AsEnumerable().FirstOrDefault();
            
            // Perform a range query (needs an IndexType.Range on price or FeedOptions.EnableScansInQuery)
            foreach (Book matchingBook in client.CreateDocumentQuery<Book>(
                collectionLink, "SELECT * FROM books b where b.Price > 1000"))
            {
                // Iterate through books
            }
            
            // Query asychronously. Optionally set FeedOptions.MaxItemCount to control page size
            using (var queryable = client.CreateDocumentQuery<Book>(collectionLink, 
                "SELECT * FROM books b WHERE b.title  = 'War and Peace'", 
                new FeedOptions { MaxItemCount = 10 }).AsDocumentQuery())
            {
                while (queryable.HasMoreResults) 
                {
                    foreach(Book b in await queryable.ExecuteNextAsync<Book>())
                    {
                        // Iterate through books
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionOrDatabaseUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionOrDatabaseUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">the type of object to query.</typeparam>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="collectionLink">The link to the parent document collection.
            Alternatively, this can be a path link to the database when using an IPartitionResolver.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{T}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{T} that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="collectionLink">The path link for the documents under a collection, e.g. dbs/db_rid/colls/coll_rid/docs/. 
            Alternatively, this can be a path link to the database when using an IPartitionResolver, e.g. dbs/db_rid/</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Overloaded. This method creates a query for documents under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{T}.
            </summary>
        <returns>An IQueryable{T} that can evaluate the query.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionOrDatabaseUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionOrDatabaseUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents for the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;T&gt; CreateDocumentQuery&lt;T&gt; (Uri documentCollectionOrDatabaseUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!!T&gt; CreateDocumentQuery&lt;T&gt;(class System.Uri documentCollectionOrDatabaseUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions, object partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateDocumentQuery``1(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput. Please use the override that does not take a partitionKey parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentCollectionOrDatabaseUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
        <Parameter Name="partitionKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="documentCollectionOrDatabaseUri">The URI of the document collection, e.g. dbs/db_rid/colls/coll_rid/. 
            Alternatively, this can be a URI of the database when using an <see cref="T:Microsoft.Azure.Documents.Client.IPartitionResolver" />, e.g. dbs/db_rid/</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <param name="partitionKey">The partition key that can be used with an IPartitionResolver.</param>
        <summary>
            Extension method to create a query for documents in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>
            Support for IPartitionResolver based method overloads is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOfferQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Offer&gt; CreateOfferQuery (Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Offer&gt; CreateOfferQuery(class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Offer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account. It returns IOrderedQueryable{Offer}.
            </summary>
        <returns>An IOrderedQueryable{Offer} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Offer" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery().Where(o => o.OfferType == "S3").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery().Where(o => o.Resource == collectionSelfLink).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOfferQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateOfferQuery (Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateOfferQuery(class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account using a SQL statement with parameterized values. It returns IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Offer" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = @offerType",
            new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@offerType", Value = "S3" }}))
            .AsEnumerable().FirstOrDefault();
            
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOfferQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateOfferQuery (string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateOfferQuery(string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateOfferQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for offers under an Azure DocumentDB database account using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
        <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Offer" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for offers
            <code language="c#"><![CDATA[
            // Find the first collection with the S3 offer type
            Offer offer = client.CreateOfferQuery("SELECT * FROM offers o WHERE o.offerType = 'S3'").AsEnumerable().FirstOrDefault();
            
            // Find the offer for the collection by SelfLink
            Offer offer = client.CreateOfferQuery(
                string.Format("SELECT * FROM offers o WHERE o.resource = '{0}'", collectionSelfLink)).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; CreatePermissionAsync (string userLink, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; CreatePermissionAsync(string userLink, class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userLink" Type="System.String" />
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userLink">The link of the user to create the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
        <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission" /> object.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Creates a permission on a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.Permission" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink" /> or <paramref name="permission" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a read-only permission object for a specific user
            Permission p = await client.CreatePermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; CreatePermissionAsync (Uri userUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; CreatePermissionAsync(class System.Uri userUri, class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userUri" Type="System.Uri" />
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userUri">the URI of the user to create the permission for.</param>
        <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Permission&gt; CreatePermissionQuery (string permissionsLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Permission&gt; CreatePermissionQuery(string permissionsLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Permission&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database service. It returns IOrderedQueryable{Permission}.
            </summary>
        <returns>An IOrderedQueryable{Permission} that can evaluate the query.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink).Where(p => p.id == "readonly").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Permission&gt; CreatePermissionQuery (Uri permissionsUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Permission&gt; CreatePermissionQuery(class System.Uri permissionsUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Permission&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsUri">the URI to the permissions.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreatePermissionQuery (string permissionsLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreatePermissionQuery(string permissionsLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM perms p WHERE p.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "readonly" }}));
                
            Permission perm = client.CreatePermissionQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreatePermissionQuery (string permissionsLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreatePermissionQuery(string permissionsLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsLink">The path link for the persmissions under a user, e.g. dbs/db_rid/users/user_rid/permissions/.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for permissions under a user in an Azure DocumentDB database using a SQL statement. It returns IQueryable{dynamic}.
            </summary>
        <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for permissions by id.
            <code language="c#"><![CDATA[
            Permission perm = client.CreatePermissionQuery(userLink, 
                "SELECT * FROM perms p WHERE p.id = 'readonly'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreatePermissionQuery (Uri permissionsUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreatePermissionQuery(class System.Uri permissionsUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsUri">the URI to the permissions.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreatePermissionQuery (Uri permissionsUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreatePermissionQuery(class System.Uri permissionsUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreatePermissionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsUri">the URI to the permissions.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for permissions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; CreateStoredProcedureAsync (string collectionLink, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; CreateStoredProcedureAsync(string collectionLink, class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the collection to create the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
        <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> object to create.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="storedProcedure" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> you tried to create was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.CreateStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; CreateStoredProcedureAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; CreateStoredProcedureAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to create the stored procedure in.</param>
        <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.StoredProcedure&gt; CreateStoredProcedureQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt; CreateStoredProcedureQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.StoredProcedure&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{StoredProcedure}.
            </summary>
        <returns>An IOrderedQueryable{StoredProcedure} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink).Where(c => c.Id == "helloWorld").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.StoredProcedure&gt; CreateStoredProcedureQuery (Uri storedProceduresUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt; CreateStoredProcedureQuery(class System.Uri storedProceduresUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.StoredProcedure&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProceduresUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="storedProceduresUri">the URI to the stored procedures.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateStoredProcedureQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateStoredProcedureQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database using a SQL statement using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM sprocs s WHERE s.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateStoredProcedureQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateStoredProcedureQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for stored procedures under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for stored procedures by id.
            <code language="c#"><![CDATA[
            StoredProcedure storedProcedure = client.CreateStoredProcedureQuery(collectionLink, "SELECT * FROM sprocs s WHERE s.id = 'HelloWorld'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateStoredProcedureQuery (Uri storedProceduresUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateStoredProcedureQuery(class System.Uri storedProceduresUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProceduresUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="storedProceduresUri">the URI to the stored procedures.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateStoredProcedureQuery (Uri storedProceduresUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateStoredProcedureQuery(class System.Uri storedProceduresUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateStoredProcedureQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProceduresUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="storedProceduresUri">the URI to the stored procedures.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for stored procedures in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; CreateTriggerAsync (string collectionLink, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; CreateTriggerAsync(string collectionLink, class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to create the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
        <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger" /> object to create.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="trigger" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger" /> you tried to create was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.CreateTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; CreateTriggerAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; CreateTriggerAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to create the trigger in.</param>
        <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Trigger&gt; CreateTriggerQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Trigger&gt; CreateTriggerQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Trigger&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{Trigger}.
            </summary>
        <returns>An IOrderedQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink).Where(t => t.Id == "validate").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Trigger&gt; CreateTriggerQuery (Uri triggersUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.Trigger&gt; CreateTriggerQuery(class System.Uri triggersUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.Trigger&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggersUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="triggersUri">the URI to the triggers.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateTriggerQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateTriggerQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{Trigger} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM triggers t WHERE t.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "HelloWorld" }}));
            Trigger trigger = client.CreateTriggerQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateTriggerQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateTriggerQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for triggers under a collection in an Azure DocumentDB database service. It returns an IQueryable{dynamic}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for triggers by id.
            <code language="c#"><![CDATA[
            Trigger trigger = client.CreateTriggerQuery(collectionLink, "SELECT * FROM triggers t WHERE t.id = 'validate'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateTriggerQuery (Uri triggersUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateTriggerQuery(class System.Uri triggersUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggersUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="triggersUri">the URI to the triggers.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateTriggerQuery (Uri triggersUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateTriggerQuery(class System.Uri triggersUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateTriggerQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggersUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="triggersUri">the URI to the triggers.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create query for triggers in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; CreateUserAsync (string databaseLink, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; CreateUserAsync(string databaseLink, class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the database to create the user in. E.g. dbs/db_rid/ </param>
        <param name="user">The <see cref="T:Microsoft.Azure.Documents.User" /> object to create.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Creates a user object as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation which contains the created <see cref="T:Microsoft.Azure.Documents.User" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink" /> or <paramref name="user" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a new user called joeBloggs in the specified database
            User user = await client.CreateUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; CreateUserAsync (Uri databaseUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; CreateUserAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI of the database to create the user in.</param>
        <param name="user">the Microsoft.Azure.Documents.User object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a user as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; CreateUserDefinedFunctionAsync (string collectionLink, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; CreateUserDefinedFunctionAsync(string collectionLink, class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to create the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
        <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> object to create.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="function" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> you tried to create was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Create a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.CreateUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; CreateUserDefinedFunctionAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; CreateUserDefinedFunctionAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to create the user defined function in.</param>
        <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Creates a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt; CreateUserDefinedFunctionQuery (string collectionLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt; CreateUserDefinedFunctionQuery(string collectionLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database service. It returns An IOrderedQueryable{UserDefinedFunction}.
            </summary>
        <returns>An IOrderedQueryable{UserDefinedFunction} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink).Where(u => u.Id == "sqrt").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt; CreateUserDefinedFunctionQuery (Uri userDefinedFunctionsUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt; CreateUserDefinedFunctionQuery(class System.Uri userDefinedFunctionsUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionsUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserDefinedFunctionQuery (string collectionLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserDefinedFunctionQuery(string collectionLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database with parameterized values. It returns an IQueryable{dynamic}.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec("SELECT * FROM udfs u WHERE u.id = @id", new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "sqrt" }}));
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserDefinedFunctionQuery (string collectionLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserDefinedFunctionQuery(string collectionLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link to the parent collection resource.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for udfs under a collection in an Azure DocumentDB database using a SQL statement. It returns an IQueryable{dynamic}.
            </summary>
        <returns>An IQueryable{dynamic} that can evaluate the query with the provided SQL statement.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for user-defined functions by id.
            <code language="c#"><![CDATA[
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(collectionLink, "SELECT * FROM udfs u WHERE u.id = 'sqrt'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserDefinedFunctionQuery (Uri userDefinedFunctionsUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserDefinedFunctionQuery(class System.Uri userDefinedFunctionsUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionsUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserDefinedFunctionQuery (Uri userDefinedFunctionsUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserDefinedFunctionQuery(class System.Uri userDefinedFunctionsUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserDefinedFunctionQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionsUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionsUri">the URI to the user-defined functions.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for user-defined functions in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.User&gt; CreateUserQuery (string usersLink, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.User&gt; CreateUserQuery(string usersLink, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.User&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersLink" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IOrderedQueryable{User}.
            </summary>
        <returns>An IOrderedQueryable{User} that can evaluate the query.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink).Where(u => u.Id == "userid5").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.User&gt; CreateUserQuery (Uri usersUri, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;class Microsoft.Azure.Documents.User&gt; CreateUserQuery(class System.Uri usersUri, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;Microsoft.Azure.Documents.User&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersUri" Type="System.Uri" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersUri">the URI to the users.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserQuery (string usersLink, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserQuery(string usersLink, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersLink" Type="System.String" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
        <param name="querySpec">The SqlQuerySpec instance containing the SQL expression.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database using a SQL statement with parameterized values. It returns an IQueryable{dynamic}.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Documents.SqlQuerySpec" />.
            </summary>
        <returns>an IQueryable{dynamic&gt; that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            var query = new SqlQuerySpec(
                "SELECT * FROM users u WHERE u.id = @id", 
                new SqlParameterCollection(new SqlParameter[] { new SqlParameter { Name = "@id", Value = "userid5" }}));
                
            User user = client.CreateUserQuery(usersLink, query).AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserQuery (string usersLink, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserQuery(string usersLink, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.String,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersLink" Type="System.String" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersLink">The path link for the users under a database, e.g. dbs/db_rid/users/.</param>
        <param name="sqlExpression">The SQL statement.</param>
        <param name="feedOptions">The options for processing the query result feed. For details, see <see cref="T:Microsoft.Azure.Documents.Client.FeedOptions" /></param>
        <summary>
            Overloaded. This method creates a query for users under an Azure DocumentDB database service. It returns IQueryable{dyanamic}.
            </summary>
        <returns>an IQueryable{dynamic} that can evaluate the query.</returns>
        <remarks>Refer to https://msdn.microsoft.com/en-us/library/azure/dn782250.aspx and http://azure.microsoft.com/documentation/articles/documentdb-sql-query/ for syntax and examples.</remarks>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Linq.IDocumentQuery" />
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
        <example>
            This example below queries for users by id.
            <code language="c#"><![CDATA[
            User user = client.CreateUserQuery(usersLink, "SELECT * FROM users u WHERE u.id = 'userid5'").AsEnumerable().FirstOrDefault();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserQuery (Uri usersUri, Microsoft.Azure.Documents.SqlQuerySpec querySpec, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserQuery(class System.Uri usersUri, class Microsoft.Azure.Documents.SqlQuerySpec querySpec, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,Microsoft.Azure.Documents.SqlQuerySpec,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersUri" Type="System.Uri" />
        <Parameter Name="querySpec" Type="Microsoft.Azure.Documents.SqlQuerySpec" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersUri">the URI to the users.</param>
        <param name="querySpec">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserQuery">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;dynamic&gt; CreateUserQuery (Uri usersUri, string sqlExpression, Microsoft.Azure.Documents.Client.FeedOptions feedOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;object&gt; CreateUserQuery(class System.Uri usersUri, string sqlExpression, class Microsoft.Azure.Documents.Client.FeedOptions feedOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.CreateUserQuery(System.Uri,System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersUri" Type="System.Uri" />
        <Parameter Name="sqlExpression" Type="System.String" />
        <Parameter Name="feedOptions" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersUri">the URI to the users.</param>
        <param name="sqlExpression">The sql query.</param>
        <param name="feedOptions">The options for processing the query results feed.</param>
        <summary>
            Extension method to create a query for users in the Azure DocumentDB database service.
            </summary>
        <returns>The query result set.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; DeleteAttachmentAsync (string attachmentLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; DeleteAttachmentAsync(string attachmentLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Attachment" /> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/attachment_rid/ </param>
        <param name="options">(Optional) Any options you wish to set for this request.</param>
        <summary>
            Delete an <see cref="T:Microsoft.Azure.Documents.Attachment" /> from the the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <returns />
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete an attachment using its selfLink property
            //To get the attachmentLink you would have to query for the Attachment, using CreateAttachmentQuery(),  and then refer to its .SelfLink property
            await client.DeleteAttachmentAsync(attachmentLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; DeleteAttachmentAsync (Uri attachmentUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; DeleteAttachmentAsync(class System.Uri attachmentUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentUri">the URI of the attachment to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete an attachment as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteConflictAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; DeleteConflictAsync (string conflictLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; DeleteConflictAsync(string conflictLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="conflictLink">The link of the <see cref="T:Microsoft.Azure.Documents.Conflict" /> to delete. E.g. dbs/db_rid/colls/coll_rid/conflicts/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Conflict" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a conflict using its selfLink property.
            //To get the conflictLink you would have to query for the Conflict object, using CreateConflictQuery(), and then refer to its .SelfLink property
            await client.DeleteConflictAsync(conflictLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteConflictAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; DeleteConflictAsync (Uri conflictUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; DeleteConflictAsync(class System.Uri conflictUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="conflictUri">the URI of the conflict to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a conflict as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; DeleteDatabaseAsync (string databaseLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; DeleteDatabaseAsync(string databaseLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.Database" /> to delete. E.g. dbs/db_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Database" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a database using its selfLink property
            //To get the databaseLink you would have to query for the Database, using CreateDatabaseQuery(),  and then refer to its .SelfLink property
            await client.DeleteDatabaseAsync(databaseLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; DeleteDatabaseAsync (Uri databaseUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; DeleteDatabaseAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI of the database to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; DeleteDocumentAsync (string documentLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; DeleteDocumentAsync(string documentLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document" /> to delete. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Document" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a document using its selfLink property
            //To get the documentLink you would have to query for the Document, using CreateDocumentQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentAsync(documentLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; DeleteDocumentAsync (Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; DeleteDocumentAsync(class System.Uri documentUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a document as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; DeleteDocumentCollectionAsync (string documentCollectionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; DeleteDocumentCollectionAsync(string documentCollectionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Document" /> to delete. E.g. dbs/db_rid/colls/col_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a collection using its selfLink property
            //To get the collectionLink you would have to query for the Collection, using CreateDocumentCollectionQuery(),  and then refer to its .SelfLink property
            await client.DeleteDocumentCollectionAsync(collectionLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; DeleteDocumentCollectionAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; DeleteDocumentCollectionAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; DeletePermissionAsync (string permissionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; DeletePermissionAsync(string permissionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permissionLink">The link of the <see cref="T:Microsoft.Azure.Documents.Permission" /> to delete. E.g. dbs/db_rid/users/user_rid/permissions/permission_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Permission" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a permission using its selfLink property.
            //To get the permissionLink you would have to query for the Permission object, using CreateStoredProcedureQuery(), and then refer to its .SelfLink property
            await client.DeletePermissionAsync(permissionLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeletePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; DeletePermissionAsync (Uri permissionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; DeletePermissionAsync(class System.Uri permissionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeletePermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permissionUri">the URI of the permission to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a permission as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; DeleteStoredProcedureAsync (string storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; DeleteStoredProcedureAsync(string storedProcedureLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedureLink">The link of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> to delete. E.g. dbs/db_rid/colls/col_rid/sprocs/sproc_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a stored procedure using its selfLink property.
            //To get the sprocLink you would have to query for the Stored Procedure, using CreateStoredProcedureQuery(),  and then refer to its .SelfLink property
            await client.DeleteStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; DeleteStoredProcedureAsync (Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; DeleteStoredProcedureAsync(class System.Uri storedProcedureUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedureUri">the URI of the stored procedure to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a stored procedure as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; DeleteTriggerAsync (string triggerLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; DeleteTriggerAsync(string triggerLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="triggerLink">The link of the <see cref="T:Microsoft.Azure.Documents.Trigger" /> to delete. E.g. dbs/db_rid/colls/col_rid/triggers/trigger_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.Trigger" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a trigger using its selfLink property.
            //To get the triggerLink you would have to query for the Trigger, using CreateTriggerQuery(),  and then refer to its .SelfLink property
            await client.DeleteTriggerAsync(triggerLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; DeleteTriggerAsync (Uri triggerUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; DeleteTriggerAsync(class System.Uri triggerUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="triggerUri">the URI of the trigger to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a trigger as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; DeleteUserAsync (string userLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; DeleteUserAsync(string userLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userLink">The link of the <see cref="T:Microsoft.Azure.Documents.User" /> to delete. E.g. dbs/db_rid/users/user_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.User" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="userLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user using its selfLink property.
            //To get the userLink you would have to query for the User object, using CreateUserQuery(), and then refer to its .SelfLink property
            await client.DeleteUserAsync(userLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; DeleteUserAsync (Uri userUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; DeleteUserAsync(class System.Uri userUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userUri">the URI of the user to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a user as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; DeleteUserDefinedFunctionAsync (string functionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; DeleteUserDefinedFunctionAsync(string functionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="functionLink">The link of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> to delete. E.g. dbs/db_rid/colls/col_rid/udfs/udf_rid/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Delete a user defined function using its selfLink property.
            //To get the functionLink you would have to query for the User Defined Function, using CreateUserDefinedFunctionQuery(),  and then refer to its .SelfLink property
            await client.DeleteUserDefinedFunctionAsync(functionLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; DeleteUserDefinedFunctionAsync (Uri functionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; DeleteUserDefinedFunctionAsync(class System.Uri functionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.DeleteUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="functionUri">the URI of the user defined function to delete.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Delete a user defined function as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the client for the Azure DocumentDB database service.
            </summary>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"); 
            if (client != null) client.Dispose();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt; (string storedProcedureLink, object[] procedureParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.StoredProcedureResponse`1&lt;!!TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt;(string storedProcedureLink, object[] procedureParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storedProcedureLink" Type="System.String" />
        <Parameter Name="procedureParams" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
        <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
        <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
        <summary>
            Executes a stored procedure against a collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink" /> is not set.</exception>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/",
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt; (Uri storedProcedureUri, object[] procedureParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.StoredProcedureResponse`1&lt;!!TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt;(class System.Uri storedProcedureUri, object[] procedureParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storedProcedureUri" Type="System.Uri" />
        <Parameter Name="procedureParams" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
        <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
        <param name="procedureParams">the parameters for the stored procedure execution.</param>
        <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt; (string storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options, object[] procedureParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.StoredProcedureResponse`1&lt;!!TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt;(string storedProcedureLink, class Microsoft.Azure.Documents.Client.RequestOptions options, object[] procedureParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storedProcedureLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="procedureParams" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">The type of the stored procedure's return value.</typeparam>
        <param name="storedProcedureLink">The link to the stored procedure to execute.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <param name="procedureParams">(Optional) An array of dynamic objects representing the parameters for the stored procedure.</param>
        <summary>
            Executes a stored procedure against a partitioned collection in the Azure DocumentDB database service as an asynchronous operation, specifiying a target partition.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink" /> is not set.</exception>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.StoredProcedureResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Execute a StoredProcedure with ResourceId of "sproc_rid" that takes two "Player" documents, does some stuff, and returns a bool
            StoredProcedureResponse<bool> sprocResponse = await client.ExecuteStoredProcedureAsync<bool>(
                                                                    "/dbs/db_rid/colls/col_rid/sprocs/sproc_rid/", 
                                                                    new RequestOptions { PartitionKey = new PartitionKey(1) },
                                                                    new Player { id="1", name="joe" } , 
                                                                    new Player { id="2", name="john" } 
                                                                );
                                                                
            if (sprocResponse.Response) Console.WriteLine("Congrats, the stored procedure did some stuff");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt; (Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options, object[] procedureParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.StoredProcedureResponse`1&lt;!!TValue&gt;&gt; ExecuteStoredProcedureAsync&lt;TValue&gt;(class System.Uri storedProcedureUri, class Microsoft.Azure.Documents.Client.RequestOptions options, object[] procedureParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ExecuteStoredProcedureAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.StoredProcedureResponse&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="storedProcedureUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="procedureParams" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">the type of the stored procedure's return value.</typeparam>
        <param name="storedProcedureUri">the URI of the stored procedure to be executed.</param>
        <param name="options">The request options for the request.</param>
        <param name="procedureParams">the parameters for the stored procedure execution.</param>
        <summary>
            Executes a stored procedure against a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~DocumentClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Class destructor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseAccountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.DatabaseAccount&gt; GetDatabaseAccountAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.DatabaseAccount&gt; GetDatabaseAccountAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.GetDatabaseAccountAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.DatabaseAccount&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Read the <see cref="T:Microsoft.Azure.Documents.DatabaseAccount" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:Microsoft.Azure.Documents.DatabaseAccount" /> wrapped in a <see cref="T:System.Threading.Tasks.Task" /> object.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken token = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task OpenAsync(valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.OpenAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>
            Open the connection to validate that the client initialization is successful in the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> object.
            </returns>
        <remarks>
            This method is recommended to be called, after the constructor, but before calling any other methods on the DocumentClient instance.
            If there are any initialization exceptions, this method will throw them (set on the task). 
            Alternately, calling any API will throw initialization exception at the first call.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                await client.OpenAsync();
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="PartitionResolvers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Microsoft.Azure.Documents.Client.IPartitionResolver&gt; PartitionResolvers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Azure.Documents.Client.IPartitionResolver&gt; PartitionResolvers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.PartitionResolvers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Support for IPartitionResolver is now obsolete. It's recommended that you use partitioned collections for higher storage and throughput.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Azure.Documents.Client.IPartitionResolver&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Partition resolvers are a dictionary of database links to IPartitionResolver to be used in partitioning for the Azure DocumentDB database service.
            </summary>
        <value>To be added.</value>
        <remarks>
            Support for IPartitionResolver is now obsolete. It's recommended that you use 
            <a href="https://azure.microsoft.com/documentation/articles/documentdb-partition-data">Partitioned Collections</a> for higher storage and throughput.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentAsync (string attachmentLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentAsync(string attachmentLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentLink">The link to the attachment to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="attachmentLink" /> is always "/dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}/attachments/{attachment identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - sample_db is the ID property of the Database
            // - sample_coll is the ID property of the DocumentCollection
            // - sample_doc is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = "/dbs/sample_db/colls/sample_coll/docs/sample_doc/attachments/attachment_id/";
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentAsync (Uri attachmentUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentAsync(class System.Uri attachmentUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentUri">A URI to the Attachment resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Attachment" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps an <see cref="T:Microsoft.Azure.Documents.Attachment" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Attachment resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document
            // - attachment_id is the ID property of the Attachment resource you wish to read. 
            var attachLink = UriFactory.CreateAttachmentUri("db_id", "coll_id", "doc_id", "attachment_id");
            Attachment attachment = await client.ReadAttachmentAsync(attachLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadAttachmentFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentFeedAsync (string attachmentsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentFeedAsync(string attachmentsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Attachment" /> for a document from the Azure DocumentDB database service 
            as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="attachmentsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read Attachment feed 10 items at a time until there are no more to read
                FeedResponse<Attachment> response = await client.ReadAttachmentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/ ", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadAttachmentFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentFeedAsync (Uri attachmentsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReadAttachmentFeedAsync(class System.Uri attachmentsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadAttachmentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsUri">the URI for the attachments.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of attachments for a document as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadConflictAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictAsync (string conflictLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictAsync(string conflictLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="conflictLink">The link to the Conflict to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Conflict if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="conflictLink" /> is always "/dbs/{db identifier}/colls/{collectioon identifier}/conflicts/{conflict identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="conflictLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource from a Database
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - conflict_id is the ID of the conflict to be read
            var conflictLink = "/dbs/sample_database/colls/sample_collection/conflicts/conflict_id";
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadConflictAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictAsync (Uri conflictUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictAsync(class System.Uri conflictUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="conflictUri">A URI to the Conflict resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Conflict" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="conflictUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Conflict resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - conflict_id is the ID property of the Conflict you wish to read. 
            var conflictLink = UriFactory.CreateConflictUri("db_id", "coll_id", "conflict_id");
            Conflict conflict = await client.ReadConflictAsync(conflictLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadConflictFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictFeedAsync (string conflictsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictFeedAsync(string conflictsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="conflictsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/conflicts/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Conflict" /> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Conflict" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="conflictsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Conflict> response = await client.ReadConflictAsync("/dbs/db_rid/colls/coll_rid/conflicts/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadConflictFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictFeedAsync (Uri conflictsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Conflict&gt;&gt; ReadConflictFeedAsync(class System.Uri conflictsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadConflictFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Conflict&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflictsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="conflictsUri">the URI for the conflicts.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of conflicts for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseAsync (string databaseLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseAsync(string databaseLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the Database resource to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Database" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Database if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="databaseLink" /> is always "/dbs/{db identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="databaseLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - database_id is the ID property of the Database resource you wish to read. 
            var dbLink = "/dbs/database_id";
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDatabaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseAsync (Uri databaseUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">A URI to the Database resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Database" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Database" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="databaseUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where 
            // - db_id is the ID property of the Database you wish to read. 
            var dbLink = UriFactory.CreateDatabaseUri("db_id");
            Database database = await client.ReadDatabaseAsync(dbLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDatabaseFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseFeedAsync (Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Database&gt;&gt; ReadDatabaseFeedAsync(class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDatabaseFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Database&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Database" /> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Database" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Database" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Database> response = await client.ReadDatabaseFeedAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; ReadDocumentAsync (string documentLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; ReadDocumentAsync(string documentLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link for the document to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink" /> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Document doc = await client.ReadDocumentAsync(docLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; ReadDocumentAsync (Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; ReadDocumentAsync(class System.Uri documentUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">A URI to the Document resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Document document = await client.ReadDocumentAsync(docUri);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.DocumentResponse&lt;T&gt;&gt; ReadDocumentAsync&lt;T&gt; (string documentLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.DocumentResponse`1&lt;!!T&gt;&gt; ReadDocumentAsync&lt;T&gt;(string documentLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync``1(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.DocumentResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="documentLink">The link for the document to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document" /> as a generic type T from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Document if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentLink" /> is always "dbs/{db identifier}/colls/{coll identifier}/docs/{doc identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a document record from a database & collection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - document_id is the ID of the document resource
            var docLink = "dbs/sample_database/colls/sample_collection/docs/document_id";
            Customer customer = await client.ReadDocumentAsync<Customer>(docLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.DocumentResponse&lt;T&gt;&gt; ReadDocumentAsync&lt;T&gt; (Uri documentUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.DocumentResponse`1&lt;!!T&gt;&gt; ReadDocumentAsync&lt;T&gt;(class System.Uri documentUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentAsync``1(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.DocumentResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="documentUri">A URI to the Document resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Document" /> as a generic type T from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when reading a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.DocumentResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection
            // - doc_id is the ID property of the Document you wish to read. 
            var docUri = UriFactory.CreateDocumentUri("db_id", "coll_id", "doc_id");
            Customer customer = await client.ReadDocumentAsync<Customer>(docUri);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionAsync (string documentCollectionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionAsync(string documentCollectionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionLink">The link for the DocumentCollection to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the DocumentCollection if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="documentCollectionLink" /> is always "/dbs/{db identifier}/colls/{coll identifier}" only 
            the values within the {} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This reads a DocumentCollection record from a database where 
            // - sample_database is the ID of the database
            // - collection_id is the ID of the collection resource to be read
            var collLink = "/dbs/sample_database/colls/collection_id";
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">A URI to the DocumentCollection resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentCollectionUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Document resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection you wish to read. 
            var collLink = UriFactory.CreateCollectionUri("db_id", "coll_id");
            DocumentCollection coll = await client.ReadDocumentCollectionAsync(collLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentCollectionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionFeedAsync (string collectionsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionFeedAsync(string collectionsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="collectionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> for a database from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="collectionsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<DocumentCollection> response = await client.ReadDocumentCollectionFeedAsync("/dbs/db_rid/colls/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentCollectionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionFeedAsync (Uri documentCollectionsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReadDocumentCollectionFeedAsync(class System.Uri documentCollectionsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentCollectionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionsUri">the URI for the document collections.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of collections for a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;dynamic&gt;&gt; ReadDocumentFeedAsync (string documentsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;object&gt;&gt; ReadDocumentFeedAsync(string documentsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/coll_rid/docs/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of documents for a specified collection from the Azure DocumentDB database service.
            This takes returns a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which will contain an enumerable list of dynamic objects.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> containing dynamic objects representing the items in the feed.
            </returns>
        <remarks>
            Instead of FeedResponse{Document} this method takes advantage of dynamic objects in .NET. This way a single feed result can contain any kind of Document, or POCO object. 
            This is important becuse a DocumentCollection can contain different kinds of documents.
            </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="documentsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<dynamic> response = await client.ReadDocumentFeedAsync("/dbs/db_rid/colls/coll_rid/docs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadDocumentFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;dynamic&gt;&gt; ReadDocumentFeedAsync (Uri documentsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;object&gt;&gt; ReadDocumentFeedAsync(class System.Uri documentsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadDocumentFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="documentsUri">the URI for the documents.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of documents for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEndpoint">
      <MemberSignature Language="C#" Value="public Uri ReadEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ReadEndpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.ReadEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current read endpoint chosen based on availability and preference from the Azure DocumentDB database service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadMediaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt; ReadMediaAsync (string mediaLink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.MediaResponse&gt; ReadMediaAsync(string mediaLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mediaLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mediaLink">The link for the media to read. E.g. /medias/media_rid</param>
        <summary>
            Retrieves the specified attachment content (aka media) from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink" /> is not set.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="mediaLink" /> is not in the form of /medias/{mediaId}.</exception>
        <altmember cref="T:Microsoft.Azure.Documents.Client.MediaResponse" />
        <altmember cref="T:System.Threading.Tasks.Task" />
      </Docs>
    </Member>
    <Member MemberName="ReadMediaMetadataAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt; ReadMediaMetadataAsync (string mediaLink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.MediaResponse&gt; ReadMediaMetadataAsync(string mediaLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadMediaMetadataAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mediaLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mediaLink">The link for the media to read metadata for. E.g. /medias/media_rid </param>
        <summary>
            Retrieves the metadata associated with the specified attachment content (aka media) as an asynchronous operation
             from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="mediaLink" /> is not set.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="mediaLink" /> is not in the form of /medias/{mediaId}.</exception>
        <altmember cref="T:Microsoft.Azure.Documents.Client.MediaResponse" />
        <altmember cref="T:System.Threading.Tasks.Task" />
      </Docs>
    </Member>
    <Member MemberName="ReadOfferAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt; ReadOfferAsync (string offerLink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Offer&gt;&gt; ReadOfferAsync(string offerLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOfferAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offerLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="offerLink">The link to the Offer to be read.</param>
        <summary>
            Reads an <see cref="T:Microsoft.Azure.Documents.Offer" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            For an Offer, id is always generated internally by the system when the linked resource is created. id and _rid are always the same for Offer.
            </para>
          <para>
            The format for <paramref name="offerLink" /> is always "/offers/{offer identifier}" 
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="offerLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Conflict" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads an Offer resource from a Database
            // - offer_id is the ID of the conflict to be read
            var offerLink = "/offers/offer_id";
            Offer offer = await client.ReadOfferAsync(offerLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadOffersFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt; ReadOffersFeedAsync (Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Offer&gt;&gt; ReadOffersFeedAsync(class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadOffersFeedAsync(Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Offer" /> for a database account from the Azure DocumentDB database service 
            as an asynchronous operation. 
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Offer" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Offer> response = await client.ReadOfferAsync(new FeedOptions 
                                                                            { 
                                                                                MaxItemCount = 10, 
                                                                                RequestContinuation = continuation 
                                                                            });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPartitionKeyRangeFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt; ReadPartitionKeyRangeFeedAsync (string partitionKeyRangesOrCollectionLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt; ReadPartitionKeyRangeFeedAsync(string partitionKeyRangesOrCollectionLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKeyRangesOrCollectionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="partitionKeyRangesOrCollectionLink">The link of the resources to be read, or owner collection link, SelfLink or AltLink. E.g. /dbs/db_rid/colls/coll_rid/pkranges</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange" /> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Database" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.PartitionKeyRange" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.FeedOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(collection.SelfLink, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPartitionKeyRangeFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt; ReadPartitionKeyRangeFeedAsync (Uri partitionKeyRangesOrCollectionUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt; ReadPartitionKeyRangeFeedAsync(class System.Uri partitionKeyRangesOrCollectionUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPartitionKeyRangeFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.PartitionKeyRange&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKeyRangesOrCollectionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="partitionKeyRangesOrCollectionUri">The Uri for partition key ranges, or owner collection.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange" /> for a database account from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.PartitionKeyRange" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.PartitionKeyRange" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.FeedOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.FeedResponse`1" />
        <altmember cref="M:Microsoft.Azure.Documents.Client.UriFactory.CreatePartitionKeyRangesUri(System.String,System.String)" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            Uri partitionKeyRangesUri = UriFactory.CreatePartitionKeyRangesUri(database.Id, collection.Id);
            FeedResponse<PartitionKeyRange> response = null;
            List<string> ids = new List<string>();
            do
            {
                response = await client.ReadPartitionKeyRangeFeedAsync(partitionKeyRangesUri, new FeedOptions { MaxItemCount = 1000 });
                foreach (var item in response)
                {
                    ids.Add(item.Id);
                }
            }
            while (!string.IsNullOrEmpty(response.ResponseContinuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionAsync (string permissionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionAsync(string permissionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permissionLink">The link for the Permission resource to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Permission if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="permissionLink" /> is always "/dbs/{db identifier}/users/{user identifier}/permissions/{permission identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permissionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource from a Database and User where 
            // - sample_database is the ID of the database
            // - sample_user is the ID of the user
            // - permission_id is the ID of the permission to be read
            var permissionLink = "/dbs/sample_database/users/sample_user/permissions/permission_id";
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionAsync (Uri permissionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionAsync(class System.Uri permissionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permissionUri">A URI to the Permission resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Permission" /> resource as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permissionUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Permission resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User 
            // - permission_id is the ID property of the Permission you wish to read. 
            var permissionLink = UriFactory.CreatePermissionUri("db_id", "coll_id", "user_id");
            Permission permission = await client.ReadPermissionAsync(permissionLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPermissionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionFeedAsync (string permissionsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionFeedAsync(string permissionsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/user_rid/permissions/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Permission" /> for a user from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permissionsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Permission> response = await client.ReadPermissionFeedAsync("/dbs/db_rid/users/user_rid/permissions/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadPermissionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionFeedAsync (Uri permissionsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReadPermissionFeedAsync(class System.Uri permissionsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadPermissionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="permissionsUri">the URI for the permissions.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of permissions for a user as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureAsync (string storedProcedureLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureAsync(string storedProcedureLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedureLink">The link of the stored procedure to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Stored Procedure if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="storedProcedureLink" /> is always "/dbs/{db identifier}/colls/{coll identifier}/sprocs/{sproc identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - sproc_id is the ID of the stored procedure to be read
            var sprocLink = "/dbs/sample_database/colls/sample_collection/sprocs/sproc_id";
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureAsync (Uri storedProcedureUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureAsync(class System.Uri storedProcedureUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedureUri">A URI to the StoredProcedure resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a StoredProcedure resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - sproc_id is the ID property of the StoredProcedure you wish to read. 
            var sprocLink = UriFactory.CreateStoredProcedureUri("db_id", "coll_id", "sproc_id");
            StoredProcedure sproc = await client.ReadStoredProcedureAsync(sprocLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadStoredProcedureFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureFeedAsync (string storedProceduresLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureFeedAsync(string storedProceduresLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProceduresLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="storedProceduresLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/sprocs/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProceduresLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<StoredProcedure> response = await client.ReadStoredProcedureFeedAsync("/dbs/db_rid/colls/col_rid/sprocs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadStoredProcedureFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureFeedAsync (Uri storedProceduresUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReadStoredProcedureFeedAsync(class System.Uri storedProceduresUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadStoredProcedureFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProceduresUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="storedProceduresUri">the URI for the stored procedures.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of stored procedures for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerAsync (string triggerLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerAsync(string triggerLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="triggerLink">The link to the Trigger to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the Trigger if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="triggerLink" /> is always "/dbs/{db identifier}/colls/{coll identifier}/triggers/{trigger identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggerLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - trigger_id is the ID of the trigger to be read
            var triggerLink = "/dbs/sample_database/colls/sample_collection/triggers/trigger_id";
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerAsync (Uri triggerUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerAsync(class System.Uri triggerUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="triggerUri">A URI to the Trigger resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.Trigger" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggerUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Trigger resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - trigger_id is the ID property of the Trigger you wish to read. 
            var triggerLink = UriFactory.CreateTriggerUri("db_id", "coll_id", "trigger_id");
            Trigger trigger = await client.ReadTriggerAsync(triggerLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTriggerFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerFeedAsync (string triggersLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerFeedAsync(string triggersLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggersLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="triggersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/triggers/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.Trigger" /> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggersLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<Trigger> response = await client.ReadTriggerFeedAsync("/dbs/db_rid/colls/col_rid/triggers/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadTriggerFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerFeedAsync (Uri triggersUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReadTriggerFeedAsync(class System.Uri triggersUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadTriggerFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggersUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="triggersUri">the URI for the triggers.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of triggers for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReadUserAsync (string userLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReadUserAsync(string userLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userLink">The link to the User resource to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.User" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the User if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="userLink" /> is always "/dbs/{db identifier}/users/{user identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="userLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource from a Database
            // - sample_database is the ID of the database
            // - user_id is the ID of the user to be read
            var userLink = "/dbs/sample_database/users/user_id";
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReadUserAsync (Uri userUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReadUserAsync(class System.Uri userUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userUri">A URI to the User resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.User" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.User" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="userUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User resource where 
            // - db_id is the ID property of the Database
            // - user_id is the ID property of the User you wish to read. 
            var userLink = UriFactory.CreateUserUri("db_id", "user_id");
            User user = await client.ReadUserAsync(userLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionAsync (string functionLink, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionAsync(string functionLink, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="functionLink">The link to the User Defined Function to be read.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
          <para>
            The example shown uses ID-based links, where the link is composed of the ID properties used when the resources were created.
            You can still use the <see cref="P:Microsoft.Azure.Documents.Resource.SelfLink" /> property of the User Defined Function if you prefer. A self-link is a URI for a resource that is made up of Resource Identifiers  (or the _rid properties).
            ID-based links and SelfLink will both work.
            The format for <paramref name="functionLink" /> is always "/dbs/{db identifier}/colls/{coll identifier}/udfs/{udf identifier}" 
            only the values within the {...} change depending on which method you wish to use to address the resource.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="functionLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <altmember cref="T:System.Uri" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a User Defined Function from a Database and DocumentCollection where 
            // - sample_database is the ID of the database
            // - sample_collection is the ID of the collection
            // - udf_id is the ID of the user-defined function to be read
            var udfLink = "/dbs/sample_database/colls/sample_collection/udfs/udf_id";
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionAsync (Uri functionUri, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionAsync(class System.Uri functionUri, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="functionUri">A URI to the User Defined Function resource to be read.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the service. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="functionUri" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Reads a UserDefinedFunction resource where 
            // - db_id is the ID property of the Database
            // - coll_id is the ID property of the DocumentCollection 
            // - udf_id is the ID property of the UserDefinedFunction you wish to read. 
            var udfLink = UriFactory.CreateUserDefinedFunctionUri("db_id", "coll_id", "udf_id");
            UserDefinedFunction udf = await client.ReadUserDefinedFunctionAsync(udfLink);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserDefinedFunctionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionFeedAsync (string userDefinedFunctionsLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionFeedAsync(string userDefinedFunctionsLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionsLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionsLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/colls/col_rid/udfs/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> for a collection from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionsLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<UserDefinedFunction> response = await client.ReadUserDefinedFunctionFeedAsync("/dbs/db_rid/colls/col_rid/udfs/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserDefinedFunctionFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionFeedAsync (Uri userDefinedFunctionsUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReadUserDefinedFunctionFeedAsync(class System.Uri userDefinedFunctionsUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserDefinedFunctionFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionsUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionsUri">the URI for the user defined functions.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of user defined functions for a collection as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUserFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReadUserFeedAsync (string usersLink, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReadUserFeedAsync(string usersLink, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.String,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersLink" Type="System.String" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersLink">The SelfLink of the resources to be read. E.g. /dbs/db_rid/users/ </param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of <see cref="T:Microsoft.Azure.Documents.User" /> for a database from the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.User" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="usersLink" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource feed you tried to read did not exist. Check the parent rids are correct.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            int count = 0;
            string continuation = string.Empty;            
            do
            {
                // Read the feed 10 items at a time until there are no more items to read
                FeedResponse<User> response = await client.ReadUserFeedAsync("/dbs/db_rid/users/", 
                                                                new FeedOptions 
                                                                { 
                                                                    MaxItemCount = 10, 
                                                                    RequestContinuation = continuation 
                                                                });
                
                // Append the item count
                count += response.Count;
                
                // Get the continuation so that we know when to stop.
                 continuation = response.ResponseContinuation;
            } while (!string.IsNullOrEmpty(continuation));
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserFeedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReadUserFeedAsync (Uri usersUri, Microsoft.Azure.Documents.Client.FeedOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.FeedResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReadUserFeedAsync(class System.Uri usersUri, class Microsoft.Azure.Documents.Client.FeedOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReadUserFeedAsync(System.Uri,Microsoft.Azure.Documents.Client.FeedOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.FeedResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usersUri" Type="System.Uri" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.FeedOptions" />
      </Parameters>
      <Docs>
        <param name="usersUri">the URI for the users.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Reads the feed (sequence) of users for a database as an asynchronous operation from the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReplaceAttachmentAsync (Microsoft.Azure.Documents.Attachment attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReplaceAttachmentAsync(class Microsoft.Azure.Documents.Attachment attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="Microsoft.Azure.Documents.Attachment" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachment">The updated <see cref="T:Microsoft.Azure.Documents.Attachment" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Attachment" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Attachment" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="attachment" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the item to be updated
            Attachment attachment = client.CreateAttachmentQuery(attachmentLink)
                                        .Where(r => r.Id == "attachment id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            attachment.MediaLink = "updated value";
            
            //Now persist these changes to the database by replacing the original resource
            Attachment updated = await client.ReplaceAttachmentAsync(attachment);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; ReplaceAttachmentAsync (Uri attachmentUri, Microsoft.Azure.Documents.Attachment attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; ReplaceAttachmentAsync(class System.Uri attachmentUri, class Microsoft.Azure.Documents.Attachment attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceAttachmentAsync(System.Uri,Microsoft.Azure.Documents.Attachment,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentUri" Type="System.Uri" />
        <Parameter Name="attachment" Type="Microsoft.Azure.Documents.Attachment" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentUri">the URI of the attachment to be updated.</param>
        <param name="attachment">the attachment resource.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync (Microsoft.Azure.Documents.Document document, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync(class Microsoft.Azure.Documents.Document document, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(Microsoft.Azure.Documents.Document,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="Microsoft.Azure.Documents.Document" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="document" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
        <example>
            This example uses <see cref="T:Microsoft.Azure.Documents.Document" /> and takes advantage of the fact that it is a dynamic object and uses SetProperty to dynamically update properties on the document
            <code language="c#"><![CDATA[
            //Fetch the Document to be updated
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                        .Where(r => r.Id == "doc id")    
                                        .AsEnumerable()
                                        .SingleOrDefault();
                   
            //Update some properties on the found resource
            doc.SetPropertyValue("MyProperty", "updated value");
            
            //Now persist these changes to the database by replacing the original resource
            Document updated = await client.ReplaceDocumentAsync(doc);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync (string documentLink, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync(string documentLink, object document, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link of the document to be updated. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
        <param name="document">The updated <see cref="T:Microsoft.Azure.Documents.Document" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Document" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Document" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="documentLink" /> or <paramref name="document" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
        <example>
            In this example, instead of using a strongly typed <see cref="T:Microsoft.Azure.Documents.Document" />, we will work with our own POCO object and not rely on the dynamic nature of the Document class.
            <code language="c#"><![CDATA[
            public class MyPoco
            {
                public string Id {get; set;}
                public string MyProperty {get; set;}
            }
            
            //Get the doc back as a Document so you have access to doc.SelfLink
            Document doc = client.CreateDocumentQuery<Document>(collectionLink)
                                   .Where(r => r.Id == "doc id")    
                                   .AsEnumerable()
                                   .SingleOrDefault();
                   
            //Now dynamically cast doc back to your MyPoco
            MyPoco poco = (dynamic)doc;
            
            //Update some properties of the poco object
            poco.MyProperty = "updated value";
                   
            //Now persist these changes to the database using doc.SelLink and the update poco object
            Document updated = await client.ReplaceDocumentAsync(doc.SelfLink, poco);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync (Uri documentUri, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; ReplaceDocumentAsync(class System.Uri documentUri, object document, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to be updated.</param>
        <param name="document">the updated document.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a document as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReplaceDocumentCollectionAsync (Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReplaceDocumentCollectionAsync(class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollection">the updated document collection.</param>
        <param name="options">the request options for the request.</param>
        <summary>
            Replaces a document collection in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDocumentCollectionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReplaceDocumentCollectionAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.DocumentCollection documentCollection, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.DocumentCollection&gt;&gt; ReplaceDocumentCollectionAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.DocumentCollection documentCollection, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceDocumentCollectionAsync(System.Uri,Microsoft.Azure.Documents.DocumentCollection,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.DocumentCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="documentCollection" Type="Microsoft.Azure.Documents.DocumentCollection" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to be updated.</param>
        <param name="documentCollection">the updated document collection.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a document collection as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceOfferAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt; ReplaceOfferAsync (Microsoft.Azure.Documents.Offer offer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Offer&gt;&gt; ReplaceOfferAsync(class Microsoft.Azure.Documents.Offer offer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceOfferAsync(Microsoft.Azure.Documents.Offer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Offer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offer" Type="Microsoft.Azure.Documents.Offer" />
      </Parameters>
      <Docs>
        <param name="offer">The updated <see cref="T:Microsoft.Azure.Documents.Offer" /> to replace the existing resource with.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Offer" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Offer" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="offer" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Offer" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Offer offer = client.CreateOfferQuery()
                                     .Where(r => r.ResourceLink == "collection selfLink")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            offer.OfferType = "S3";
                    
            //Now persist these changes to the database by replacing the original resource
            Offer updated = await client.ReplaceOfferAsync(offer);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReplacePermissionAsync (Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReplacePermissionAsync(class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permission">The updated <see cref="T:Microsoft.Azure.Documents.Permission" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Permission" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Permission" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="permission" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Permission permission = client.CreatePermissionQuery(permissionsLink)
                                                .Where(r => r.Id == "permission id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Change the permission mode to All
            permission.PermissionMode = PermissionMode.All;
                    
            //Now persist these changes to the database by replacing the original resource
            Permission updated = await client.ReplacePermissionAsync(permission);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; ReplacePermissionAsync (Uri permissionUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; ReplacePermissionAsync(class System.Uri permissionUri, class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplacePermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionUri" Type="System.Uri" />
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="permissionUri">the URI for the permission to be updated.</param>
        <param name="permission">the updated permission.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a permission as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReplaceStoredProcedureAsync (Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReplaceStoredProcedureAsync(class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedure">The updated <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedure" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            StoredProcedure sproc = client.CreateStoredProcedureQuery(sprocsLink)
                                             .Where(r => r.Id == "sproc id")    
                                             .AsEnumerable()
                                             .SingleOrDefault();
                          
            //Update some properties on the found resource
            sproc.Body = "function () {new javascript body for sproc}";
                    
            //Now persist these changes to the database by replacing the original resource
            StoredProcedure updated = await client.ReplaceStoredProcedureAsync(sproc);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReplaceStoredProcedureAsync (Uri storedProcedureUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; ReplaceStoredProcedureAsync(class System.Uri storedProcedureUri, class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureUri" Type="System.Uri" />
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="storedProcedureUri">the URI for the stored procedure to be updated.</param>
        <param name="storedProcedure">the updated stored procedure.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replace the specified stored procedure in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReplaceTriggerAsync (Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReplaceTriggerAsync(class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="trigger">The updated <see cref="T:Microsoft.Azure.Documents.Trigger" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.Trigger" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.Trigger" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="trigger" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            Trigger trigger = client.CreateTriggerQuery(sprocsLink)
                                          .Where(r => r.Id == "trigger id")    
                                          .AsEnumerable()
                                          .SingleOrDefault();
                          
            //Update some properties on the found resource
            trigger.Body = "function () {new javascript body for trigger}";
                    
            //Now persist these changes to the database by replacing the original resource
            Trigger updated = await client.ReplaceTriggerAsync(sproc);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; ReplaceTriggerAsync (Uri triggerUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; ReplaceTriggerAsync(class System.Uri triggerUri, class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerUri" Type="System.Uri" />
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="triggerUri">the URI for the trigger to be updated.</param>
        <param name="trigger">the updated trigger.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a trigger as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReplaceUserAsync (Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReplaceUserAsync(class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="user">The updated <see cref="T:Microsoft.Azure.Documents.User" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.User" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.User" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="user" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            User user = client.CreateUserQuery(usersLink)
                                     .Where(r => r.Id == "user id")    
                                     .AsEnumerable()
                                     .SingleOrDefault();
                          
            //Change the user mode to All
            user.Id = "some new method";
                    
            //Now persist these changes to the database by replacing the original resource
            User updated = await client.ReplaceUserAsync(user);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; ReplaceUserAsync (Uri userUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; ReplaceUserAsync(class System.Uri userUri, class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userUri" Type="System.Uri" />
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userUri">the URI for the user to be updated.</param>
        <param name="user">the updated user.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a user as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReplaceUserDefinedFunctionAsync (Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReplaceUserDefinedFunctionAsync(class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="function">The updated <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> to replace the existing resource with.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> in the Azure DocumentDB database service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="N:System.Threading.Tasks" /> containing a <see cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" /> which wraps a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="function" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Fetch the resource to be updated
            UserDefinedFunction udf = client.CreateUserDefinedFunctionQuery(functionsLink)
                                                .Where(r => r.Id == "udf id")    
                                                .AsEnumerable()
                                                .SingleOrDefault();
                          
            //Update some properties on the found resource
            udf.Body = "function () {new javascript body for udf}";
                    
            //Now persist these changes to the database by replacing the original resource
            UserDefinedFunction updated = await client.ReplaceUserDefinedFunctionAsync(udf);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReplaceUserDefinedFunctionAsync (Uri userDefinedFunctionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; ReplaceUserDefinedFunctionAsync(class System.Uri userDefinedFunctionUri, class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.ReplaceUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionUri" Type="System.Uri" />
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionUri">the URI for the user defined function to be updated.</param>
        <param name="function">the updated user defined function.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Replaces a user defined function as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceTokens">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; ResourceTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; ResourceTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.ResourceTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a dictionary of resource tokens used by the client from the Azure DocumentDB database service.
            </summary>
        <value>
            A dictionary of resource tokens used by the client.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="ServiceEndpoint">
      <MemberSignature Language="C#" Value="public Uri ServiceEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ServiceEndpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.ServiceEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the endpoint Uri for the service endpoint from the Azure DocumentDB database service.
            </summary>
        <value>
            The Uri for the service endpoint.
            </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public object Session { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the session object used for session consistency version tracking in the Azure DocumentDB database service.
            </summary>
        <value>To be added.</value>
        <remarks>
          <value>
            The session object used for version tracking when the consistency level is set to Session.
            </value>
            The session object can be saved and shared between two DocumentClient instances within the same AppDomain.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMediaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt; UpdateMediaAsync (string mediaLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.MediaResponse&gt; UpdateMediaAsync(string mediaLink, class System.IO.Stream mediaStream, class Microsoft.Azure.Documents.Client.MediaOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpdateMediaAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.MediaResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mediaLink" Type="System.String" />
        <Parameter Name="mediaStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.MediaOptions" />
      </Parameters>
      <Docs>
        <param name="mediaLink">The link for the media to be updated. /medias/media_rid </param>
        <param name="mediaStream">The <see cref="T:System.IO.Stream" /> of the attachment media.</param>
        <param name="options">The <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions" /> for the request.</param>
        <summary>
            Replaces the specified media's content as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="mediaLink" /> or <paramref name="mediaStream" /> is not set.</exception>
        <exception cref="T:System.ArgumentException">If <paramref name="mediaLink" /> is not in the form of /medias/{mediaId}.</exception>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Client.MediaOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.MediaResponse" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Update the attachment media
                await client.UpdateMediaAsync("/medias/media_rid", fileStream, 
                                new MediaOptions 
                                { 
                                    ContentType = "application/pdf", 
                                    Slug = "something.pdf" 
                                });
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync (string documentLink, object attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync(string documentLink, object attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentLink" Type="System.String" />
        <Parameter Name="attachment" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentLink">The link of the parent document for this new attachment. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/ </param>
        <param name="attachment">The attachment object.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.
            </returns>
        <remarks />
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
        <example>
            The example below creates a new document, and then upserts a new attachment for that document
            <code language="c#"><![CDATA[
            dynamic d = new 
            {
                id = "DOC1800243243470"
            };
                
            Document doc = await client.CreateDocumentAsync(collectionSelfLink, d);
            
            //Upsert an Attachment which links to binary content stored somewhere else
            //Use the MediaLink property of Attachment to set where the binary resides
            //MediaLink can also point at another Attachment within DocumentDB.
            Attachment a = await client.UpsertAttachmentAsync(doc.SelfLink, new Attachment { Id = "foo", ContentType = "text/plain", MediaLink = "link to your media" });
            
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpsertAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync (Uri documentUri, object attachment, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync(class System.Uri documentUri, object attachment, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="attachment" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to upsert an attachment for.</param>
        <param name="attachment">the attachment object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts an attachment as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync (string attachmentsLink, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options = null, Microsoft.Azure.Documents.Client.RequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync(string attachmentsLink, class System.IO.Stream mediaStream, class Microsoft.Azure.Documents.Client.MediaOptions options, class Microsoft.Azure.Documents.Client.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.String,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentsLink" Type="System.String" />
        <Parameter Name="mediaStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.MediaOptions" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="attachmentsLink">The attachments link for the document. E.g. dbs/db_rid/colls/col_rid/docs/doc_rid/attachments/ </param>
        <param name="mediaStream">the <see cref="T:System.IO.Stream" /> of the attachment media.</param>
        <param name="options">the <see cref="T:Microsoft.Azure.Documents.Client.MediaOptions" /> for the request.</param>
        <param name="requestOptions">the <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /> for the request.</param>
        <summary>
            Upserts an <see cref="T:Microsoft.Azure.Documents.Attachment" /> with the contents of the provided <paramref name="mediaStream" /> as an asynchronous operation
             in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="attachmentsLink" /> or <paramref name="mediaStream" /> is not set.</exception>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Attachment" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //This attachment could be any binary you want to attach. Like images, videos, word documents, pdfs etc. it doesn't matter
            using (FileStream fileStream = new FileStream(@".\something.pdf", FileMode.Open))
            {
                //Upsert the attachment
                Attachment attachment = await client.UpsertAttachmentAsync("dbs/db_rid/colls/coll_rid/docs/doc_rid/attachments/", 
                                                    fileStream, 
                                                    new MediaOptions 
                                                    { 
                                                        ContentType = "application/pdf", 
                                                        Slug = "something.pdf" 
                                                    });
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertAttachmentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync (Uri documentUri, System.IO.Stream mediaStream, Microsoft.Azure.Documents.Client.MediaOptions options = null, Microsoft.Azure.Documents.Client.RequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Attachment&gt;&gt; UpsertAttachmentAsync(class System.Uri documentUri, class System.IO.Stream mediaStream, class Microsoft.Azure.Documents.Client.MediaOptions options, class Microsoft.Azure.Documents.Client.RequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertAttachmentAsync(System.Uri,System.IO.Stream,Microsoft.Azure.Documents.Client.MediaOptions,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Attachment&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUri" Type="System.Uri" />
        <Parameter Name="mediaStream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.MediaOptions" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentUri">the URI of the document to upsert an attachment for.</param>
        <param name="mediaStream">the stream of the attachment media.</param>
        <param name="options">the media options for the request.</param>
        <param name="requestOptions">Request options for the request.</param>
        <summary>
            Upserts an attachment as an asynchronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; UpsertDocumentAsync (string documentsFeedOrDatabaseLink, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null, bool disableAutomaticIdGeneration = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; UpsertDocumentAsync(string documentsFeedOrDatabaseLink, object document, class Microsoft.Azure.Documents.Client.RequestOptions options, bool disableAutomaticIdGeneration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.String,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentsFeedOrDatabaseLink" Type="System.String" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="disableAutomaticIdGeneration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="documentsFeedOrDatabaseLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to upsert the document in. E.g. dbs/db_rid/colls/coll_rid/ </param>
        <param name="document">The document object to upsert.</param>
        <param name="options">(Optional) Any request options you wish to set. E.g. Specifying a Trigger to execute when creating the document. <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" /></param>
        <param name="disableAutomaticIdGeneration">(Optional) Disables the automatic id generation, If this is True the system will throw an exception if the id property is missing from the Document.</param>
        <summary>
            Upserts a Document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.Document" /> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="documentsFeedOrDatabaseLink" /> or <paramref name="document" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied. It is likely that <paramref name="disableAutomaticIdGeneration" /> was true and an id was not supplied</description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Document" /> with an id matching the id field of <paramref name="document" /> already existed</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the <see cref="T:Microsoft.Azure.Documents.Document" /> exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <altmember cref="T:Microsoft.Azure.Documents.Document" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
        <example>
            DocumentDB supports a number of different ways to work with documents. A document can extend <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyObject : Resource
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyObject { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A document can be any POCO object that can be serialized to JSON, even if it doesn't extend from <see cref="T:Microsoft.Azure.Documents.Resource" /><code language="c#"><![CDATA[
            public class MyPOCO
            {
                public string MyProperty {get; set;}
            }
            
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new MyPOCO { MyProperty = "A Value" });
            }
            ]]></code></example>
        <example>
            A Document can also be a dynamic object
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync("dbs/db_rid/colls/coll_rid/", new { SomeProperty = "A Value" } );
            }
            ]]></code></example>
        <example>
            Upsert a Document and execute a Pre and Post Trigger
            <code language="c#"><![CDATA[
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Document doc = await client.UpsertDocumentAsync(
                    "dbs/db_rid/colls/coll_rid/",
                    new { id = "DOC123213443" },
                    new RequestOptions
                    {
                        PreTriggerInclude = new List<string> { "MyPreTrigger" },
                        PostTriggerInclude = new List<string> { "MyPostTrigger" }
                    });
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpsertDocumentAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt; UpsertDocumentAsync (Uri documentCollectionUri, object document, Microsoft.Azure.Documents.Client.RequestOptions options = null, bool disableAutomaticIdGeneration = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Document&gt;&gt; UpsertDocumentAsync(class System.Uri documentCollectionUri, object document, class Microsoft.Azure.Documents.Client.RequestOptions options, bool disableAutomaticIdGeneration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertDocumentAsync(System.Uri,System.Object,Microsoft.Azure.Documents.Client.RequestOptions,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Document&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="document" Type="System.Object" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
        <Parameter Name="disableAutomaticIdGeneration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to upsert the document in.</param>
        <param name="document">the document object.</param>
        <param name="options">The request options for the request.</param>
        <param name="disableAutomaticIdGeneration">Disables the automatic id generation, will throw an exception if id is missing.</param>
        <summary>
            Upserts a document as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertPermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; UpsertPermissionAsync (string userLink, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; UpsertPermissionAsync(string userLink, class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.String,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userLink" Type="System.String" />
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userLink">The link of the user to Upsert the permission for. E.g. dbs/db_rid/users/user_rid/ </param>
        <param name="permission">The <see cref="T:Microsoft.Azure.Documents.Permission" /> object.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Upserts a permission on a user object in the Azure DocumentDB database service as an asychronous operation.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.Permission" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="userLink" /> or <paramref name="permission" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of permission objects. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Permission" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Permission" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a read-only permission object for a specific user
            Permission p = await client.UpsertPermissionAsync(userLink, new Permission { Id = "ReadPermission", PermissionMode = PermissionMode.Read });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertPermissionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt; UpsertPermissionAsync (Uri userUri, Microsoft.Azure.Documents.Permission permission, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Permission&gt;&gt; UpsertPermissionAsync(class System.Uri userUri, class Microsoft.Azure.Documents.Permission permission, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertPermissionAsync(System.Uri,Microsoft.Azure.Documents.Permission,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Permission&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userUri" Type="System.Uri" />
        <Parameter Name="permission" Type="Microsoft.Azure.Documents.Permission" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="userUri">the URI of the user to upsert the permission for.</param>
        <param name="permission">the Microsoft.Azure.Documents.Permission object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts a permission as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; UpsertStoredProcedureAsync (string collectionLink, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; UpsertStoredProcedureAsync(string collectionLink, class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.String,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the collection to upsert the stored procedure in. E.g. dbs/db_rid/colls/col_rid/</param>
        <param name="storedProcedure">The <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> object to upsert.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="storedProcedure" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.StoredProcedure" /> you tried to upsert was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.StoredProcedure" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new stored procedure called "HelloWorldSproc" that takes in a single param called "name".
            StoredProcedure sproc = await client.UpsertStoredProcedureAsync(collectionLink, new StoredProcedure
            {
               Id = "HelloWorldSproc",
               Body = @"function (name){
                           var response = getContext().getResponse();
                           response.setBody('Hello ' + name);
                        }"
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt; UpsertStoredProcedureAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.StoredProcedure storedProcedure, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.StoredProcedure&gt;&gt; UpsertStoredProcedureAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.StoredProcedure storedProcedure, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertStoredProcedureAsync(System.Uri,Microsoft.Azure.Documents.StoredProcedure,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.StoredProcedure&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="storedProcedure" Type="Microsoft.Azure.Documents.StoredProcedure" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to upsert the stored procedure in.</param>
        <param name="storedProcedure">the Microsoft.Azure.Documents.StoredProcedure object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts a stored procedure as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; UpsertTriggerAsync (string collectionLink, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; UpsertTriggerAsync(string collectionLink, class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.String,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to upsert the trigger in. E.g. dbs/db_rid/colls/col_rid/ </param>
        <param name="trigger">The <see cref="T:Microsoft.Azure.Documents.Trigger" /> object to upsert.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="trigger" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.Trigger" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.Trigger" /> you tried to upsert was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.Trigger" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a trigger that validates the contents of a document as it is created and adds a 'timestamp' property if one was not found. 
            Trigger trig = await client.UpsertTriggerAsync(collectionLink, new Trigger
            {
                Id = "ValidateDocuments",
                Body = @"function validate() {
                                    var context = getContext();
                                    var request = context.getRequest();                                                             
                                    var documentToCreate = request.getBody();
                                    
                                    // validate properties
                                    if (!('timestamp' in documentToCreate)) {
                                        var ts = new Date();
                                        documentToCreate['timestamp'] = ts.getTime();
                                    }
                                    
                                    // update the document that will be created
                                    request.setBody(documentToCreate);
                                  }",
                TriggerType = TriggerType.Pre,
                TriggerOperation = TriggerOperation.Create
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertTriggerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt; UpsertTriggerAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.Trigger trigger, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.Trigger&gt;&gt; UpsertTriggerAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.Trigger trigger, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertTriggerAsync(System.Uri,Microsoft.Azure.Documents.Trigger,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.Trigger&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="trigger" Type="Microsoft.Azure.Documents.Trigger" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to upsert the trigger in.</param>
        <param name="trigger">the Microsoft.Azure.Documents.Trigger object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts a trigger as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; UpsertUserAsync (string databaseLink, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; UpsertUserAsync(string databaseLink, class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.String,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseLink" Type="System.String" />
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseLink">The link of the database to upsert the user in. E.g. dbs/db_rid/ </param>
        <param name="user">The <see cref="T:Microsoft.Azure.Documents.User" /> object to upsert.</param>
        <param name="options">(Optional) The request options for the request.</param>
        <summary>
            Upserts a permission on a user object in the Azure DocumentDB database service as an asychronous operation.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation which contains the upserted <see cref="T:Microsoft.Azure.Documents.User" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="databaseLink" /> or <paramref name="user" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of user objects for this database. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.User" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.User" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a new user called joeBloggs in the specified database
            User user = await client.UpsertUserAsync(databaseLink, new User { Id = "joeBloggs" });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt; UpsertUserAsync (Uri databaseUri, Microsoft.Azure.Documents.User user, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.User&gt;&gt; UpsertUserAsync(class System.Uri databaseUri, class Microsoft.Azure.Documents.User user, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserAsync(System.Uri,Microsoft.Azure.Documents.User,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.User&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseUri" Type="System.Uri" />
        <Parameter Name="user" Type="Microsoft.Azure.Documents.User" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="databaseUri">the URI of the database to upsert the user in.</param>
        <param name="user">the Microsoft.Azure.Documents.User object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts a user as an asychronous operation  in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; UpsertUserDefinedFunctionAsync (string collectionLink, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; UpsertUserDefinedFunctionAsync(string collectionLink, class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.String,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionLink" Type="System.String" />
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="collectionLink">The link of the <see cref="T:Microsoft.Azure.Documents.DocumentCollection" /> to upsert the user defined function in. E.g. dbs/db_rid/colls/col_rid/ </param>
        <param name="function">The <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> object to upsert.</param>
        <param name="options">(Optional) Any <see cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />for this request.</param>
        <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="collectionLink" /> or <paramref name="function" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occured during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Documents.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Documents.UserDefinedFunction" /> you tried to upsert was too large.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <altmember cref="T:Microsoft.Azure.Documents.UserDefinedFunction" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.RequestOptions" />
        <altmember cref="T:Microsoft.Azure.Documents.Client.ResourceResponse`1" />
        <altmember cref="T:System.Threading.Tasks.Task" />
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
        <example>
          <code language="c#"><![CDATA[
            //Upsert a user defined function that converts a string to upper case
            UserDefinedFunction udf = client.UpsertUserDefinedFunctionAsync(collectionLink, new UserDefinedFunction
            {
               Id = "ToUpper",
               Body = @"function toUpper(input) {
                                   return input.toUpperCase();
                                }",
            });
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; UpsertUserDefinedFunctionAsync (Uri documentCollectionUri, Microsoft.Azure.Documents.UserDefinedFunction function, Microsoft.Azure.Documents.Client.RequestOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.Client.ResourceResponse`1&lt;class Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt; UpsertUserDefinedFunctionAsync(class System.Uri documentCollectionUri, class Microsoft.Azure.Documents.UserDefinedFunction function, class Microsoft.Azure.Documents.Client.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Client.DocumentClient.UpsertUserDefinedFunctionAsync(System.Uri,Microsoft.Azure.Documents.UserDefinedFunction,Microsoft.Azure.Documents.Client.RequestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.Client.ResourceResponse&lt;Microsoft.Azure.Documents.UserDefinedFunction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentCollectionUri" Type="System.Uri" />
        <Parameter Name="function" Type="Microsoft.Azure.Documents.UserDefinedFunction" />
        <Parameter Name="options" Type="Microsoft.Azure.Documents.Client.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="documentCollectionUri">the URI of the document collection to upsert the user defined function in.</param>
        <param name="function">the Microsoft.Azure.Documents.UserDefinedFunction object.</param>
        <param name="options">The request options for the request.</param>
        <summary>
            Upserts a user defined function as an asychronous operation in the Azure DocumentDB database service.
            </summary>
        <returns>The task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndpoint">
      <MemberSignature Language="C#" Value="public Uri WriteEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri WriteEndpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Client.DocumentClient.WriteEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current write endpoint chosen based on availability and preference from the Azure DocumentDB database service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>