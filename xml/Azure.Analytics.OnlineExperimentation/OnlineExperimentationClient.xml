<Type Name="OnlineExperimentationClient" FullName="Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient">
  <TypeSignature Language="C#" Value="public class OnlineExperimentationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OnlineExperimentationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class OnlineExperimentationClient" />
  <TypeSignature Language="F#" Value="type OnlineExperimentationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The OnlineExperimentation service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OnlineExperimentationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of OnlineExperimentationClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OnlineExperimentationClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient" Usage="new Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Endpoint URL for the Online Experimentation workspace. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of OnlineExperimentationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OnlineExperimentationClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.OnlineExperimentation.OnlineExperimentationClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.OnlineExperimentation.OnlineExperimentationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.OnlineExperimentation.OnlineExperimentationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As OnlineExperimentationClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.OnlineExperimentation.OnlineExperimentationClientOptions -&gt; Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient" Usage="new Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.OnlineExperimentation.OnlineExperimentationClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Endpoint URL for the Online Experimentation workspace. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of OnlineExperimentationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ActivateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; ActivateMetric (string experimentMetricId, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; ActivateMetric(string experimentMetricId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ActivateMetric(System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ActivateMetric (experimentMetricId As String, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member ActivateMetric : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.ActivateMetric : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.ActivateMetric (experimentMetricId, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Update <see cref="P:Azure.Analytics.OnlineExperimentation.ExperimentMetric.Lifecycle" /> to <see cref="P:Azure.Analytics.OnlineExperimentation.LifecycleStage.Active" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ActivateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; ActivateMetricAsync (string experimentMetricId, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; ActivateMetricAsync(string experimentMetricId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ActivateMetricAsync(System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ActivateMetricAsync (experimentMetricId As String, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member ActivateMetricAsync : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.ActivateMetricAsync : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.ActivateMetricAsync (experimentMetricId, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Update <see cref="P:Azure.Analytics.OnlineExperimentation.ExperimentMetric.Lifecycle" /> to <see cref="P:Azure.Analytics.OnlineExperimentation.LifecycleStage.Active" />.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; CreateMetric (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; CreateMetric(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateMetric(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMetric (experimentMetricId As String, metric As ExperimentMetric, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member CreateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.CreateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.CreateMetric (experimentMetricId, metric, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A ExperimentMetric object that describes the metric. </param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Creates an experiment metric.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; CreateMetricAsync (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; CreateMetricAsync(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateMetricAsync(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMetricAsync (experimentMetricId As String, metric As ExperimentMetric, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member CreateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.CreateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.CreateMetricAsync (experimentMetricId, metric, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A ExperimentMetric object that describes the metric. </param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Creates an experiment metric asynchronously.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdateMetric (string experimentMetricId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdateMetric(string experimentMetricId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateOrUpdateMetric(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateMetric (experimentMetricId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateMetric : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdateMetric : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="onlineExperimentationClient.CreateOrUpdateMetric (experimentMetricId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or updates an experiment metric.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Average revenue per purchase [USD]",
    description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Average",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
            filter = "Revenue > 0",
        },
    },
});
Response response = client.CreateOrUpdateMetric("avg_purchase_revenue", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Number of purchases (credit card)",
    description = "The number of purchase transactions made with credit card. Refund transactions are excluded from this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new Dictionary<string, object>
    {
        ["type"] = "EventCount",
        ["event"] = new
        {
            eventName = "Transaction",
            filter = "Revenue > 0 and ['payment.method'] == 'credit_card'",
        }
    },
});
Response response = client.CreateOrUpdateMetric("events_purchase_creditcard", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Refund rate",
    description = "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Neutral",
    definition = new Dictionary<string, object>
    {
        ["type"] = "EventRate",
        ["event"] = new
        {
            eventName = "Transaction",
        },
        ["rateCondition"] = "Revenue < 0"
    },
});
Response response = client.CreateOrUpdateMetric("rate_refund", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "95th percentile of page load time [ms]",
    description = "The 95th percentile of the page load time for all pages. Measured in milliseconds. Review page-specific metric results to identify pages that need optimization.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Performance",
        "Important"
    },
    desiredDirection = "Decrease",
    definition = new
    {
        type = "Percentile",
        value = new
        {
            eventName = "PageLoad",
            eventProperty = "LoadTime_ms",
        },
        percentile = 95,
    },
});
Response response = client.CreateOrUpdateMetric("p95_page_load_time", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Total revenue [USD]",
    description = "The total revenue in USD. Refund transactions contribute negatively to this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization",
        "Important"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Sum",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
        },
    },
});
Response response = client.CreateOrUpdateMetric("sum_revenue", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Users with purchase",
    description = "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new Dictionary<string, object>
    {
        ["type"] = "UserCount",
        ["event"] = new
        {
            eventName = "Transaction",
            filter = "Revenue > 0",
        }
    },
});
Response response = client.CreateOrUpdateMetric("users_purchase", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Subscription ad conversion rate",
    description = "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "UserRate",
        startEvent = new
        {
            eventName = "AdView",
            filter = "Source == 'subscription_promo'",
        },
        endEvent = new
        {
            eventName = "Subscribe",
            filter = "Status == 'Success'",
        },
    },
});
Response response = client.CreateOrUpdateMetric("rate_subscription_ad", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; CreateOrUpdateMetric (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, Azure.ETag? ifMatch = default, Azure.ETag? ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; CreateOrUpdateMetric(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateOrUpdateMetric(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Nullable{Azure.ETag},System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateMetric (experimentMetricId As String, metric As ExperimentMetric, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * Nullable&lt;Azure.ETag&gt; * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.CreateOrUpdateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * Nullable&lt;Azure.ETag&gt; * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.CreateOrUpdateMetric (experimentMetricId, metric, ifMatch, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A ExperimentMetric object that describes the metric. </param>
        <param name="ifMatch"> Optionally limit requests to resources that have a matching ETag. </param>
        <param name="ifNoneMatch"> Optionally limit requests to resources that do not match the ETag. </param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Create or update an experiment metric.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateMetricAsync (string experimentMetricId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateMetricAsync(string experimentMetricId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateOrUpdateMetricAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateMetricAsync (experimentMetricId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateMetricAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateMetricAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="onlineExperimentationClient.CreateOrUpdateMetricAsync (experimentMetricId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or updates an experiment metric.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Average revenue per purchase [USD]",
    description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Average",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
            filter = "Revenue > 0",
        },
    },
});
Response response = await client.CreateOrUpdateMetricAsync("avg_purchase_revenue", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Number of purchases (credit card)",
    description = "The number of purchase transactions made with credit card. Refund transactions are excluded from this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new Dictionary<string, object>
    {
        ["type"] = "EventCount",
        ["event"] = new
        {
            eventName = "Transaction",
            filter = "Revenue > 0 and ['payment.method'] == 'credit_card'",
        }
    },
});
Response response = await client.CreateOrUpdateMetricAsync("events_purchase_creditcard", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Refund rate",
    description = "The percentage of transactions that are refunds. This metric is calculated as the number of refund transactions divided by the total number of transactions.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Neutral",
    definition = new Dictionary<string, object>
    {
        ["type"] = "EventRate",
        ["event"] = new
        {
            eventName = "Transaction",
        },
        ["rateCondition"] = "Revenue < 0"
    },
});
Response response = await client.CreateOrUpdateMetricAsync("rate_refund", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "95th percentile of page load time [ms]",
    description = "The 95th percentile of the page load time for all pages. Measured in milliseconds. Review page-specific metric results to identify pages that need optimization.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Performance",
        "Important"
    },
    desiredDirection = "Decrease",
    definition = new
    {
        type = "Percentile",
        value = new
        {
            eventName = "PageLoad",
            eventProperty = "LoadTime_ms",
        },
        percentile = 95,
    },
});
Response response = await client.CreateOrUpdateMetricAsync("p95_page_load_time", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Total revenue [USD]",
    description = "The total revenue in USD. Refund transactions contribute negatively to this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization",
        "Important"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Sum",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
        },
    },
});
Response response = await client.CreateOrUpdateMetricAsync("sum_revenue", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Users with purchase",
    description = "The number of users who have made at least one purchase transaction. Refund transactions are excluded from this metric. As the analysis period grows, this metric begins to saturate as users making multiple purchases no longer contribute.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new Dictionary<string, object>
    {
        ["type"] = "UserCount",
        ["event"] = new
        {
            eventName = "Transaction",
            filter = "Revenue > 0",
        }
    },
});
Response response = await client.CreateOrUpdateMetricAsync("users_purchase", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code>
This sample shows how to call CreateOrUpdateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Subscription ad conversion rate",
    description = "The percentage of users who saw an advertisement for a subscription promotion and then later successfully subscribed. This metric is calculated as the number of users who successfully subscribed after seeing the advert divided by the total number of users who saw the advert. Users who saw multiple adverts or subscribed multiple times are counted only once. Users who saw the advert before the analysis period starts are excluded from this metric.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "UserRate",
        startEvent = new
        {
            eventName = "AdView",
            filter = "Source == 'subscription_promo'",
        },
        endEvent = new
        {
            eventName = "Subscribe",
            filter = "Status == 'Success'",
        },
    },
});
Response response = await client.CreateOrUpdateMetricAsync("rate_subscription_ad", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; CreateOrUpdateMetricAsync (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, Azure.ETag? ifMatch = default, Azure.ETag? ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; CreateOrUpdateMetricAsync(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetric metric, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.CreateOrUpdateMetricAsync(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Nullable{Azure.ETag},System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateMetricAsync (experimentMetricId As String, metric As ExperimentMetric, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * Nullable&lt;Azure.ETag&gt; * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.CreateOrUpdateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetric * Nullable&lt;Azure.ETag&gt; * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.CreateOrUpdateMetricAsync (experimentMetricId, metric, ifMatch, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A ExperimentMetric object that describes the metric. </param>
        <param name="ifMatch"> Optionally limit requests to resources that have a matching ETag. </param>
        <param name="ifNoneMatch"> Optionally limit requests to resources that do not match the ETag. </param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Creates or update an experiment metric asynchronously.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeactivateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; DeactivateMetric (string experimentMetricId, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; DeactivateMetric(string experimentMetricId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.DeactivateMetric(System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeactivateMetric (experimentMetricId As String, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member DeactivateMetric : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.DeactivateMetric : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.DeactivateMetric (experimentMetricId, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Update <see cref="P:Azure.Analytics.OnlineExperimentation.ExperimentMetric.Lifecycle" /> to <see cref="P:Azure.Analytics.OnlineExperimentation.LifecycleStage.Inactive" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeactivateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; DeactivateMetricAsync (string experimentMetricId, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; DeactivateMetricAsync(string experimentMetricId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.DeactivateMetricAsync(System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeactivateMetricAsync (experimentMetricId As String, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member DeactivateMetricAsync : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.DeactivateMetricAsync : string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.DeactivateMetricAsync (experimentMetricId, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Update <see cref="P:Azure.Analytics.OnlineExperimentation.ExperimentMetric.Lifecycle" /> to <see cref="P:Azure.Analytics.OnlineExperimentation.LifecycleStage.Inactive" />.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteMetric (string experimentMetricId, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteMetric(string experimentMetricId, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.DeleteMetric(System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteMetric (experimentMetricId As String, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteMetric : string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteMetric : string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="onlineExperimentationClient.DeleteMetric (experimentMetricId, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes an experiment metric.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteMetric.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response response = client.DeleteMetric("avg_purchase_revenue");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteMetricAsync (string experimentMetricId, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteMetricAsync(string experimentMetricId, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.DeleteMetricAsync(System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteMetricAsync (experimentMetricId As String, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteMetricAsync : string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteMetricAsync : string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="onlineExperimentationClient.DeleteMetricAsync (experimentMetricId, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes an experiment metric.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteMetricAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response response = await client.DeleteMetricAsync("avg_purchase_revenue");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetMetric (string experimentMetricId, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetMetric(string experimentMetricId, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetric(System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetric (experimentMetricId As String, requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetMetric : string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetMetric : string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="onlineExperimentationClient.GetMetric (experimentMetricId, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Fetches an experiment metric by ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetric(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response response = client.GetMetric("events_purchase_creditcard", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetric (string experimentMetricId, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetric(string experimentMetricId, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetric(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetric (experimentMetricId As String, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member GetMetric : string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.GetMetric : string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.GetMetric (experimentMetricId, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Fetches an experiment metric by ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetMetric.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response<ExperimentMetric> response = client.GetMetric("events_purchase_creditcard");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetMetricAsync (string experimentMetricId, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetMetricAsync(string experimentMetricId, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricAsync(System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricAsync (experimentMetricId As String, requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetMetricAsync : string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetMetricAsync : string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="onlineExperimentationClient.GetMetricAsync (experimentMetricId, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Fetches an experiment metric by ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response response = await client.GetMetricAsync("events_purchase_creditcard", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("lifecycle").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("categories")[0].ToString());
Console.WriteLine(result.GetProperty("desiredDirection").ToString());
Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; GetMetricAsync (string experimentMetricId, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; GetMetricAsync(string experimentMetricId, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricAsync(System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricAsync (experimentMetricId As String, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member GetMetricAsync : string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.GetMetricAsync : string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.GetMetricAsync (experimentMetricId, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Fetches an experiment metric by ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="experimentMetricId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="experimentMetricId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetMetricAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

Response<ExperimentMetric> response = await client.GetMetricAsync("events_purchase_creditcard");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetMetrics (int? maxCount, int? skip, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetMetrics(valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetrics(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetrics (maxCount As Nullable(Of Integer), skip As Nullable(Of Integer), maxpagesize As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetrics : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetMetrics : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="onlineExperimentationClient.GetMetrics (maxCount, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists experiment metrics.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetrics(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetMetrics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

foreach (BinaryData item in client.GetMetrics(null, 15, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("lifecycle").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("categories")[0].ToString());
    Console.WriteLine(result.GetProperty("desiredDirection").ToString());
    Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetrics (int? maxCount = default, int? skip = default, int? maxpagesize = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetrics(valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetrics(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetrics (Optional maxCount As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member GetMetrics : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.GetMetrics : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.GetMetrics (maxCount, skip, maxpagesize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists experiment metrics. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetMetrics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

foreach (ExperimentMetric item in client.GetMetrics())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetMetricsAsync (int? maxCount, int? skip, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetMetricsAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricsAsync (maxCount As Nullable(Of Integer), skip As Nullable(Of Integer), maxpagesize As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="onlineExperimentationClient.GetMetricsAsync (maxCount, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists experiment metrics.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetMetricsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

await foreach (BinaryData item in client.GetMetricsAsync(null, 15, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("lifecycle").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("categories")[0].ToString());
    Console.WriteLine(result.GetProperty("desiredDirection").ToString());
    Console.WriteLine(result.GetProperty("definition").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("lastModifiedAt").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetricsAsync (int? maxCount = default, int? skip = default, int? maxpagesize = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; GetMetricsAsync(valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.GetMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricsAsync (Optional maxCount As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member GetMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.GetMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.GetMetricsAsync (maxCount, skip, maxpagesize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists experiment metrics. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetMetricsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

await foreach (ExperimentMetric item in client.GetMetricsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; UpdateMetric (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate metric, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt; UpdateMetric(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate metric, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.UpdateMetric(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetric (experimentMetricId As String, metric As ExperimentMetricUpdate, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetric)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&#xA;override this.UpdateMetric : string * Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;" Usage="onlineExperimentationClient.UpdateMetric (experimentMetricId, metric, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A partial <see cref="T:Azure.Analytics.OnlineExperimentation.ExperimentMetric" /> definition for incremental updates. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Updates an experiment metric.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; UpdateMetricAsync (string experimentMetricId, Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate metric, Azure.ETag? ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt; UpdateMetricAsync(string experimentMetricId, class Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate metric, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.UpdateMetricAsync(System.String,Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetricAsync (experimentMetricId As String, metric As ExperimentMetricUpdate, Optional ifMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetric))" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;&#xA;override this.UpdateMetricAsync : string * Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;" Usage="onlineExperimentationClient.UpdateMetricAsync (experimentMetricId, metric, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetric&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="experimentMetricId" Type="System.String" />
        <Parameter Name="metric" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetricUpdate" />
        <Parameter Name="ifMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="experimentMetricId"> Identifier for this experiment metric. Must start with a lowercase letter and contain only lowercase letters, numbers, and underscores. </param>
        <param name="metric"> A partial <see cref="T:Azure.Analytics.OnlineExperimentation.ExperimentMetric" /> definition for incremental updates. </param>
        <param name="ifMatch">Optionally limit requests to resources that have a matching ETag.</param>
        <param name="cancellationToken"> The token to check for cancellation. </param>
        <summary>
            Updates an experiment metric asynchronously.
            </summary>
        <returns>An awaitable task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="experimentMetricId" /> or <paramref name="metric" /> parameter is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="experimentMetricId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt; ValidateMetric (Azure.Analytics.OnlineExperimentation.ExperimentMetric body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt; ValidateMetric(class Azure.Analytics.OnlineExperimentation.ExperimentMetric body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetric(Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateMetric (body As ExperimentMetric, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExperimentMetricValidationResult)" />
      <MemberSignature Language="F#" Value="abstract member ValidateMetric : Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&#xA;override this.ValidateMetric : Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;" Usage="onlineExperimentationClient.ValidateMetric (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Experiment metric input to validate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Validates an experiment metric definition. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call ValidateMetric.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

ExperimentMetric body = new ExperimentMetric(
LifecycleStage.Active,
"Average revenue per purchase [USD]",
"The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
new string[] { "Monetization" },
DesiredDirection.Increase,
new AverageMetricDefinition(new AggregatedValue("Transaction", "Revenue")
{
    Filter = "Revenue >",
}));
Response<ExperimentMetricValidationResult> response = client.ValidateMetric(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ValidateMetric">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ValidateMetric (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ValidateMetric(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetric(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateMetric (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ValidateMetric : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ValidateMetric : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="onlineExperimentationClient.ValidateMetric (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Validates an experiment metric definition.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetric(Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ValidateMetric and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Average revenue per purchase [USD]",
    description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Average",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
            filter = "Revenue >",
        },
    },
});
Response response = client.ValidateMetric(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isValid").ToString());
Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("code").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ValidateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&gt; ValidateMetricAsync (Azure.Analytics.OnlineExperimentation.ExperimentMetric body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&gt; ValidateMetricAsync(class Azure.Analytics.OnlineExperimentation.ExperimentMetric body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetricAsync(Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateMetricAsync (body As ExperimentMetric, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExperimentMetricValidationResult))" />
      <MemberSignature Language="F#" Value="abstract member ValidateMetricAsync : Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&gt;&#xA;override this.ValidateMetricAsync : Azure.Analytics.OnlineExperimentation.ExperimentMetric * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&gt;" Usage="onlineExperimentationClient.ValidateMetricAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.OnlineExperimentation.ExperimentMetricValidationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.OnlineExperimentation.ExperimentMetric" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Experiment metric input to validate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Validates an experiment metric definition. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call ValidateMetricAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

ExperimentMetric body = new ExperimentMetric(
LifecycleStage.Active,
"Average revenue per purchase [USD]",
"The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
new string[] { "Monetization" },
DesiredDirection.Increase,
new AverageMetricDefinition(new AggregatedValue("Transaction", "Revenue")
{
    Filter = "Revenue >",
}));
Response<ExperimentMetricValidationResult> response = await client.ValidateMetricAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ValidateMetricAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ValidateMetricAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ValidateMetricAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetricAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateMetricAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ValidateMetricAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ValidateMetricAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="onlineExperimentationClient.ValidateMetricAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.OnlineExperimentation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Validates an experiment metric definition.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.OnlineExperimentation.OnlineExperimentationClient.ValidateMetricAsync(Azure.Analytics.OnlineExperimentation.ExperimentMetric,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ValidateMetricAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
OnlineExperimentationClient client = new OnlineExperimentationClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    displayName = "Average revenue per purchase [USD]",
    description = "The average revenue per purchase transaction in USD. Refund transactions are excluded from this metric. The total revenue might increase while this metric decreases if the number of purchases increases.",
    lifecycle = "Active",
    categories = new object[]
    {
        "Monetization"
    },
    desiredDirection = "Increase",
    definition = new
    {
        type = "Average",
        value = new
        {
            eventName = "Transaction",
            eventProperty = "Revenue",
            filter = "Revenue >",
        },
    },
});
Response response = await client.ValidateMetricAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isValid").ToString());
Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("diagnostics")[0].GetProperty("code").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
