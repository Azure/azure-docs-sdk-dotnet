<Type Name="EventGridReceiverClient" FullName="Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient">
  <TypeSignature Language="C#" Value="public class EventGridReceiverClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventGridReceiverClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient" />
  <TypeSignature Language="VB.NET" Value="Public Class EventGridReceiverClient" />
  <TypeSignature Language="F#" Value="type EventGridReceiverClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The EventGridReceiver service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventGridReceiverClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of EventGridReceiverClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridReceiverClient (Uri endpoint, string topicName, string subscriptionName, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string topicName, string subscriptionName, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.#ctor(System.Uri,System.String,System.String,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, topicName As String, subscriptionName As String, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient : Uri * string * string * Azure.AzureKeyCredential -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient (endpoint, topicName, subscriptionName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="topicName"> The topic to receive from.</param>
        <param name="subscriptionName"> The subscription to receive from within the topic. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EventGridReceiverClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridReceiverClient (Uri endpoint, string topicName, string subscriptionName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string topicName, string subscriptionName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, topicName As String, subscriptionName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient : Uri * string * string * Azure.Core.TokenCredential -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient (endpoint, topicName, subscriptionName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="topicName"> The topic to receive from.</param>
        <param name="subscriptionName"> The subscription to receive from within the topic. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EventGridReceiverClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridReceiverClient (Uri endpoint, string topicName, string subscriptionName, Azure.AzureKeyCredential credential, Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string topicName, string subscriptionName, class Azure.AzureKeyCredential credential, class Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.#ctor(System.Uri,System.String,System.String,Azure.AzureKeyCredential,Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, topicName As String, subscriptionName As String, credential As AzureKeyCredential, options As EventGridReceiverClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient : Uri * string * string * Azure.AzureKeyCredential * Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient (endpoint, topicName, subscriptionName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="topicName"> The topic to receive from.</param>
        <param name="subscriptionName"> The subscription to receive from within the topic. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EventGridReceiverClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridReceiverClient (Uri endpoint, string topicName, string subscriptionName, Azure.Core.TokenCredential credential, Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string topicName, string subscriptionName, class Azure.Core.TokenCredential credential, class Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.#ctor(System.Uri,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, topicName As String, subscriptionName As String, credential As TokenCredential, options As EventGridReceiverClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient : Uri * string * string * Azure.Core.TokenCredential * Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient (endpoint, topicName, subscriptionName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="topicName"> The topic to receive from.</param>
        <param name="subscriptionName"> The subscription to receive from within the topic. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EventGridReceiverClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Acknowledge">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Acknowledge (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Acknowledge(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Acknowledge(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Acknowledge (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Acknowledge : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Acknowledge : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridReceiverClient.Acknowledge (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged events will no longer be available to be received by any consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Acknowledge(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Acknowledge">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt; Acknowledge (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt; Acknowledge(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Acknowledge(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Acknowledge (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of AcknowledgeResult)" />
      <MemberSignature Language="F#" Value="abstract member Acknowledge : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&#xA;override this.Acknowledge : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;" Usage="eventGridReceiverClient.Acknowledge (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged events will no longer be available to be received by any consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AcknowledgeAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AcknowledgeAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.AcknowledgeAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AcknowledgeAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridReceiverClient.AcknowledgeAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged events will no longer be available to be received by any consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.AcknowledgeAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt; AcknowledgeAsync (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt; AcknowledgeAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.AcknowledgeAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeAsync (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AcknowledgeResult))" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;&#xA;override this.AcknowledgeAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;" Usage="eventGridReceiverClient.AcknowledgeAsync (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Acknowledge a batch of Cloud Events. The response will include the set of successfully acknowledged lock tokens, along with other failed lock tokens with their corresponding error information. Successfully acknowledged events will no longer be available to be received by any consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Receive (int? maxEvents, TimeSpan? maxWaitTime, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Receive(valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Receive(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Receive (maxEvents As Nullable(Of Integer), maxWaitTime As Nullable(Of TimeSpan), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member Receive : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Receive : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridReceiverClient.Receive (maxEvents, maxWaitTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Receive a batch of Cloud Events from a subscription.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Receive(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt; Receive (int? maxEvents = default, TimeSpan? maxWaitTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt; Receive(valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Receive(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Receive (Optional maxEvents As Nullable(Of Integer) = Nothing, Optional maxWaitTime As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReceiveResult)" />
      <MemberSignature Language="F#" Value="abstract member Receive : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&#xA;override this.Receive : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;" Usage="eventGridReceiverClient.Receive (maxEvents, maxWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Receive a batch of Cloud Events from a subscription. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReceiveAsync (int? maxEvents, TimeSpan? maxWaitTime, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReceiveAsync(valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReceiveAsync(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveAsync (maxEvents As Nullable(Of Integer), maxWaitTime As Nullable(Of TimeSpan), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReceiveAsync : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReceiveAsync : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridReceiverClient.ReceiveAsync (maxEvents, maxWaitTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Receive a batch of Cloud Events from a subscription.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReceiveAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt; ReceiveAsync (int? maxEvents = default, TimeSpan? maxWaitTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt; ReceiveAsync(valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReceiveAsync(System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveAsync (Optional maxEvents As Nullable(Of Integer) = Nothing, Optional maxWaitTime As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReceiveResult))" />
      <MemberSignature Language="F#" Value="abstract member ReceiveAsync : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;&#xA;override this.ReceiveAsync : Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;" Usage="eventGridReceiverClient.ReceiveAsync (maxEvents, maxWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Receive a batch of Cloud Events from a subscription. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reject">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Reject (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Reject(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Reject(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reject (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Reject : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Reject : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridReceiverClient.Reject (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered and can no longer be received by a consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Reject(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Reject">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt; Reject (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RejectResult&gt; Reject(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Reject(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reject (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of RejectResult)" />
      <MemberSignature Language="F#" Value="abstract member Reject : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&#xA;override this.Reject : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;" Usage="eventGridReceiverClient.Reject (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered and can no longer be received by a consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RejectAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RejectAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RejectAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RejectAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RejectAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridReceiverClient.RejectAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered and can no longer be received by a consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RejectAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt; RejectAsync (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt; RejectAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RejectAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectAsync (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RejectResult))" />
      <MemberSignature Language="F#" Value="abstract member RejectAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;&#xA;override this.RejectAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;" Usage="eventGridReceiverClient.RejectAsync (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reject a batch of Cloud Events. The response will include the set of successfully rejected lock tokens, along with other failed lock tokens with their corresponding error information. Successfully rejected events will be dead-lettered and can no longer be received by a consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Release (Azure.Core.RequestContent content, string releaseDelayInSeconds = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Release(class Azure.Core.RequestContent content, string releaseDelayInSeconds, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Release(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Release (content As RequestContent, Optional releaseDelayInSeconds As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Release : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Release : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridReceiverClient.Release (content, releaseDelayInSeconds, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="releaseDelayInSeconds" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. Allowed values: "0" | "10" | "60" | "600" | "3600". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along with other failed lock tokens with their corresponding error information. Successfully released events can be received by consumers.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Release(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt; Release (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, Azure.Messaging.EventGrid.Namespaces.ReleaseDelay? delay = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt; Release(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Nullable`1&lt;valuetype Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.Release(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Release (lockTokens As IEnumerable(Of String), Optional delay As Nullable(Of ReleaseDelay) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReleaseResult)" />
      <MemberSignature Language="F#" Value="abstract member Release : seq&lt;string&gt; * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&#xA;override this.Release : seq&lt;string&gt; * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;" Usage="eventGridReceiverClient.Release (lockTokens, delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="delay" Type="System.Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="delay"> Release cloud events with the specified delay in seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along with other failed lock tokens with their corresponding error information. Successfully released events can be received by consumers. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReleaseAsync (Azure.Core.RequestContent content, string releaseDelayInSeconds = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReleaseAsync(class Azure.Core.RequestContent content, string releaseDelayInSeconds, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReleaseAsync(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseAsync (content As RequestContent, Optional releaseDelayInSeconds As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReleaseAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridReceiverClient.ReleaseAsync (content, releaseDelayInSeconds, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="releaseDelayInSeconds" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. Allowed values: "0" | "10" | "60" | "600" | "3600". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along with other failed lock tokens with their corresponding error information. Successfully released events can be received by consumers.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReleaseAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt; ReleaseAsync (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, Azure.Messaging.EventGrid.Namespaces.ReleaseDelay? delay = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt; ReleaseAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Nullable`1&lt;valuetype Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.ReleaseAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseAsync (lockTokens As IEnumerable(Of String), Optional delay As Nullable(Of ReleaseDelay) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReleaseResult))" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAsync : seq&lt;string&gt; * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;&#xA;override this.ReleaseAsync : seq&lt;string&gt; * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;" Usage="eventGridReceiverClient.ReleaseAsync (lockTokens, delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="delay" Type="System.Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="delay"> Release cloud events with the specified delay in seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Release a batch of Cloud Events. The response will include the set of successfully released lock tokens, along with other failed lock tokens with their corresponding error information. Successfully released events can be received by consumers. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewLocks">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RenewLocks (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RenewLocks(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocks(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewLocks (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RenewLocks : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RenewLocks : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridReceiverClient.RenewLocks (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens, along with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure that the associated event is only available to the consumer that holds the renewed lock.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocks(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewLocks">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt; RenewLocks (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt; RenewLocks(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocks(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewLocks (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of RenewLocksResult)" />
      <MemberSignature Language="F#" Value="abstract member RenewLocks : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&#xA;override this.RenewLocks : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;" Usage="eventGridReceiverClient.RenewLocks (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens, along with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure that the associated event is only available to the consumer that holds the renewed lock. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewLocksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenewLocksAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenewLocksAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocksAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewLocksAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenewLocksAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenewLocksAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridReceiverClient.RenewLocksAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens, along with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure that the associated event is only available to the consumer that holds the renewed lock.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocksAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewLocksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&gt; RenewLocksAsync (System.Collections.Generic.IEnumerable&lt;string&gt; lockTokens, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&gt; RenewLocksAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; lockTokens, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridReceiverClient.RenewLocksAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewLocksAsync (lockTokens As IEnumerable(Of String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RenewLocksResult))" />
      <MemberSignature Language="F#" Value="abstract member RenewLocksAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&gt;&#xA;override this.RenewLocksAsync : seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&gt;" Usage="eventGridReceiverClient.RenewLocksAsync (lockTokens, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewLocksResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTokens" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="lockTokens"> Array of lock tokens. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renew locks for a batch of Cloud Events. The response will include the set of successfully renewed lock tokens, along with other failed lock tokens with their corresponding error information. Successfully renewed locks will ensure that the associated event is only available to the consumer that holds the renewed lock. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="lockTokens" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
