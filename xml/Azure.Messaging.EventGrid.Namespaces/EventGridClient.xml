<Type Name="EventGridClient" FullName="Azure.Messaging.EventGrid.Namespaces.EventGridClient">
  <TypeSignature Language="C#" Value="public class EventGridClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventGridClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Messaging.EventGrid.Namespaces.EventGridClient" />
  <TypeSignature Language="VB.NET" Value="Public Class EventGridClient" />
  <TypeSignature Language="F#" Value="type EventGridClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
    <AssemblyVersion>4.22.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Azure Messaging EventGrid Client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EventGridClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of EventGridClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridClient : Uri * Azure.AzureKeyCredential -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EventGridClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EventGridClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As EventGridClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridClient : Uri * Azure.AzureKeyCredential * Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EventGridClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventGridClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As EventGridClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventGrid.Namespaces.EventGridClient : Uri * Azure.Core.TokenCredential * Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions -&gt; Azure.Messaging.EventGrid.Namespaces.EventGridClient" Usage="new Azure.Messaging.EventGrid.Namespaces.EventGridClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Messaging.EventGrid.Namespaces.EventGridClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EventGridClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AcknowledgeCloudEvents (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AcknowledgeCloudEvents(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEvents(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeCloudEvents (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeCloudEvents : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AcknowledgeCloudEvents : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.AcknowledgeCloudEvents (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call AcknowledgeCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt; AcknowledgeCloudEvents (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions acknowledgeOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt; AcknowledgeCloudEvents(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions acknowledgeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeCloudEvents (topicName As String, eventSubscriptionName As String, acknowledgeOptions As AcknowledgeOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AcknowledgeResult)" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&#xA;override this.AcknowledgeCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;" Usage="eventGridClient.AcknowledgeCloudEvents (topicName, eventSubscriptionName, acknowledgeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="acknowledgeOptions" Type="Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="acknowledgeOptions"> AcknowledgeOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call AcknowledgeCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code>
This sample shows how to call AcknowledgeCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = client.AcknowledgeCloudEvents("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="acknowledgeOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AcknowledgeCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AcknowledgeCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEventsAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeCloudEventsAsync (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeCloudEventsAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AcknowledgeCloudEventsAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.AcknowledgeCloudEventsAsync (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call AcknowledgeCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call AcknowledgeCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt; AcknowledgeCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions acknowledgeOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt; AcknowledgeCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions acknowledgeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.AcknowledgeCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcknowledgeCloudEventsAsync (topicName As String, eventSubscriptionName As String, acknowledgeOptions As AcknowledgeOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AcknowledgeResult))" />
      <MemberSignature Language="F#" Value="abstract member AcknowledgeCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;&#xA;override this.AcknowledgeCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;" Usage="eventGridClient.AcknowledgeCloudEventsAsync (topicName, eventSubscriptionName, acknowledgeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.AcknowledgeResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="acknowledgeOptions" Type="Azure.Messaging.EventGrid.Namespaces.AcknowledgeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="acknowledgeOptions"> AcknowledgeOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available to any consumer. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call AcknowledgeCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code>
This sample shows how to call AcknowledgeCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

AcknowledgeOptions acknowledgeOptions = new AcknowledgeOptions(new string[] { "<lockTokens>" });
Response<AcknowledgeResult> response = await client.AcknowledgeCloudEventsAsync("<topicName>", "<eventSubscriptionName>", acknowledgeOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="acknowledgeOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Messaging.EventGrid.Namespaces.EventGridClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Messaging.EventGrid.Namespaces.EventGridClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEvent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PublishCloudEvent (string topicName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PublishCloudEvent(string topicName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEvent(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEvent (topicName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEvent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PublishCloudEvent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.PublishCloudEvent (topicName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEvent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt; PublishCloudEvent (string topicName, Azure.Messaging.CloudEvent event, bool binaryMode = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.PublishResult&gt; PublishCloudEvent(string topicName, class Azure.Messaging.CloudEvent event, bool binaryMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEvent(System.String,Azure.Messaging.CloudEvent,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEvent (topicName As String, event As CloudEvent, Optional binaryMode As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PublishResult)" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEvent : string * Azure.Messaging.CloudEvent * bool * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&#xA;override this.PublishCloudEvent : string * Azure.Messaging.CloudEvent * bool * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;" Usage="eventGridClient.PublishCloudEvent (topicName, event, binaryMode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="cloudEvent" Type="Azure.Messaging.CloudEvent" />
        <Parameter Name="binaryMode" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="cloudEvent">To be added.</param>
        <param name="binaryMode" />
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="cloudEvent" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PublishCloudEventAsync (string topicName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PublishCloudEventAsync(string topicName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEventAsync (topicName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEventAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PublishCloudEventAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.PublishCloudEventAsync (topicName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt; PublishCloudEventAsync (string topicName, Azure.Messaging.CloudEvent event, bool binaryMode = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt; PublishCloudEventAsync(string topicName, class Azure.Messaging.CloudEvent event, bool binaryMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventAsync(System.String,Azure.Messaging.CloudEvent,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEventAsync (topicName As String, event As CloudEvent, Optional binaryMode As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PublishResult))" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEventAsync : string * Azure.Messaging.CloudEvent * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;&#xA;override this.PublishCloudEventAsync : string * Azure.Messaging.CloudEvent * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;" Usage="eventGridClient.PublishCloudEventAsync (topicName, event, binaryMode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="cloudEvent" Type="Azure.Messaging.CloudEvent" />
        <Parameter Name="binaryMode" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="cloudEvent">To be added.</param>
        <param name="binaryMode" />
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="cloudEvent" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PublishCloudEvents (string topicName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PublishCloudEvents(string topicName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEvents(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEvents (topicName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEvents : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PublishCloudEvents : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.PublishCloudEvents (topicName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt; PublishCloudEvents (string topicName, System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt; events, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.PublishResult&gt; PublishCloudEvents(string topicName, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.CloudEvent&gt; events, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEvents(System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.CloudEvent},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEvents (topicName As String, events As IEnumerable(Of CloudEvent), Optional cancellationToken As CancellationToken = Nothing) As Response(Of PublishResult)" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEvents : string * seq&lt;Azure.Messaging.CloudEvent&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&#xA;override this.PublishCloudEvents : string * seq&lt;Azure.Messaging.CloudEvent&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;" Usage="eventGridClient.PublishCloudEvents (topicName, events, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="events" Type="System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="events"> Array of Cloud Events being published. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="events" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PublishCloudEventsAsync (string topicName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PublishCloudEventsAsync(string topicName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEventsAsync (topicName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEventsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PublishCloudEventsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.PublishCloudEventsAsync (topicName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="PublishCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt; PublishCloudEventsAsync (string topicName, System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt; events, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt; PublishCloudEventsAsync(string topicName, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.CloudEvent&gt; events, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.CloudEvent},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PublishCloudEventsAsync (topicName As String, events As IEnumerable(Of CloudEvent), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PublishResult))" />
      <MemberSignature Language="F#" Value="abstract member PublishCloudEventsAsync : string * seq&lt;Azure.Messaging.CloudEvent&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;&#xA;override this.PublishCloudEventsAsync : string * seq&lt;Azure.Messaging.CloudEvent&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;" Usage="eventGridClient.PublishCloudEventsAsync (topicName, events, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.PublishResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="events" Type="System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="events"> Array of Cloud Events being published. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="events" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReceiveCloudEvents (string topicName, string eventSubscriptionName, int? maxEvents, TimeSpan? maxWaitTime, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReceiveCloudEvents(string topicName, string eventSubscriptionName, valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEvents(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveCloudEvents (topicName As String, eventSubscriptionName As String, maxEvents As Nullable(Of Integer), maxWaitTime As Nullable(Of TimeSpan), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReceiveCloudEvents : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReceiveCloudEvents : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.ReceiveCloudEvents (topicName, eventSubscriptionName, maxEvents, maxWaitTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Receive Batch of Cloud Events from the Event Subscription.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEvents(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt; ReceiveCloudEvents (string topicName, string eventSubscriptionName, int? maxEvents = default, TimeSpan? maxWaitTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt; ReceiveCloudEvents(string topicName, string eventSubscriptionName, valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEvents(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveCloudEvents (topicName As String, eventSubscriptionName As String, Optional maxEvents As Nullable(Of Integer) = Nothing, Optional maxWaitTime As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReceiveResult)" />
      <MemberSignature Language="F#" Value="abstract member ReceiveCloudEvents : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&#xA;override this.ReceiveCloudEvents : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;" Usage="eventGridClient.ReceiveCloudEvents (topicName, eventSubscriptionName, maxEvents, maxWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Receive Batch of Cloud Events from the Event Subscription. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReceiveCloudEventsAsync (string topicName, string eventSubscriptionName, int? maxEvents, TimeSpan? maxWaitTime, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReceiveCloudEventsAsync(string topicName, string eventSubscriptionName, valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveCloudEventsAsync (topicName As String, eventSubscriptionName As String, maxEvents As Nullable(Of Integer), maxWaitTime As Nullable(Of TimeSpan), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReceiveCloudEventsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReceiveCloudEventsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.ReceiveCloudEventsAsync (topicName, eventSubscriptionName, maxEvents, maxWaitTime, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Receive Batch of Cloud Events from the Event Subscription.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt; ReceiveCloudEventsAsync (string topicName, string eventSubscriptionName, int? maxEvents = default, TimeSpan? maxWaitTime = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt; ReceiveCloudEventsAsync(string topicName, string eventSubscriptionName, valuetype System.Nullable`1&lt;int32&gt; maxEvents, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; maxWaitTime, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReceiveCloudEventsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReceiveCloudEventsAsync (topicName As String, eventSubscriptionName As String, Optional maxEvents As Nullable(Of Integer) = Nothing, Optional maxWaitTime As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReceiveResult))" />
      <MemberSignature Language="F#" Value="abstract member ReceiveCloudEventsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;&#xA;override this.ReceiveCloudEventsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;" Usage="eventGridClient.ReceiveCloudEventsAsync (topicName, eventSubscriptionName, maxEvents, maxWaitTime, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReceiveResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="maxEvents" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxWaitTime" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="maxEvents"> Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1. </param>
        <param name="maxWaitTime"> Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Receive Batch of Cloud Events from the Event Subscription. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RejectCloudEvents (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RejectCloudEvents(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEvents(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectCloudEvents (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RejectCloudEvents : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RejectCloudEvents : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.RejectCloudEvents (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully rejected lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RejectOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RejectCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt; RejectCloudEvents (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.RejectOptions rejectOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RejectResult&gt; RejectCloudEvents(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.RejectOptions rejectOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RejectOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectCloudEvents (topicName As String, eventSubscriptionName As String, rejectOptions As RejectOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RejectResult)" />
      <MemberSignature Language="F#" Value="abstract member RejectCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.RejectOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&#xA;override this.RejectCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.RejectOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;" Usage="eventGridClient.RejectCloudEvents (topicName, eventSubscriptionName, rejectOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="rejectOptions" Type="Azure.Messaging.EventGrid.Namespaces.RejectOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="rejectOptions"> RejectOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully rejected lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RejectCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code>
This sample shows how to call RejectCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = client.RejectCloudEvents("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="rejectOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RejectCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RejectCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEventsAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectCloudEventsAsync (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RejectCloudEventsAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RejectCloudEventsAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.RejectCloudEventsAsync (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully rejected lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RejectOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RejectCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RejectCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RejectCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt; RejectCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.RejectOptions rejectOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt; RejectCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.RejectOptions rejectOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RejectCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RejectOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RejectCloudEventsAsync (topicName As String, eventSubscriptionName As String, rejectOptions As RejectOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RejectResult))" />
      <MemberSignature Language="F#" Value="abstract member RejectCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.RejectOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;&#xA;override this.RejectCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.RejectOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;" Usage="eventGridClient.RejectCloudEventsAsync (topicName, eventSubscriptionName, rejectOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RejectResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="rejectOptions" Type="Azure.Messaging.EventGrid.Namespaces.RejectOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="rejectOptions"> RejectOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully rejected lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RejectCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code>
This sample shows how to call RejectCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RejectOptions rejectOptions = new RejectOptions(new string[] { "<lockTokens>" });
Response<RejectResult> response = await client.RejectCloudEventsAsync("<topicName>", "<eventSubscriptionName>", rejectOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="rejectOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReleaseCloudEvents (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, int? releaseDelayInSeconds = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReleaseCloudEvents(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; releaseDelayInSeconds, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEvents(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseCloudEvents (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional releaseDelayInSeconds As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCloudEvents : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReleaseCloudEvents : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.ReleaseCloudEvents (topicName, eventSubscriptionName, content, releaseDelayInSeconds, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="releaseDelayInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. Allowed values: "0" | "10" | "60" | "600" | "3600". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.ReleaseOptions,System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call ReleaseCloudEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEvents with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", content, releaseDelayInSeconds: 0);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseCloudEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt; ReleaseCloudEvents (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.ReleaseOptions releaseOptions, Azure.Messaging.EventGrid.Namespaces.ReleaseDelay? releaseDelayInSeconds = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt; ReleaseCloudEvents(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.ReleaseOptions releaseOptions, valuetype System.Nullable`1&lt;valuetype Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; releaseDelayInSeconds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEvents(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.ReleaseOptions,System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseCloudEvents (topicName As String, eventSubscriptionName As String, releaseOptions As ReleaseOptions, Optional releaseDelayInSeconds As Nullable(Of ReleaseDelay) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReleaseResult)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.ReleaseOptions * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&#xA;override this.ReleaseCloudEvents : string * string * Azure.Messaging.EventGrid.Namespaces.ReleaseOptions * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;" Usage="eventGridClient.ReleaseCloudEvents (topicName, eventSubscriptionName, releaseOptions, releaseDelayInSeconds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="releaseOptions" Type="Azure.Messaging.EventGrid.Namespaces.ReleaseOptions" />
        <Parameter Name="releaseDelayInSeconds" Type="System.Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="releaseOptions"> ReleaseOptions. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call ReleaseCloudEvents.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", releaseOptions);
]]></code>
This sample shows how to call ReleaseCloudEvents with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = client.ReleaseCloudEvents("<topicName>", "<eventSubscriptionName>", releaseOptions, releaseDelayInSeconds: ReleaseDelay.By0Seconds);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="releaseOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReleaseCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, int? releaseDelayInSeconds = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReleaseCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; releaseDelayInSeconds, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEventsAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseCloudEventsAsync (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional releaseDelayInSeconds As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCloudEventsAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReleaseCloudEventsAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.ReleaseCloudEventsAsync (topicName, eventSubscriptionName, content, releaseDelayInSeconds, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="releaseDelayInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. Allowed values: "0" | "10" | "60" | "600" | "3600". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.ReleaseOptions,System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call ReleaseCloudEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call ReleaseCloudEventsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", content, releaseDelayInSeconds: 0);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseCloudEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt; ReleaseCloudEventsAsync (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.ReleaseOptions releaseOptions, Azure.Messaging.EventGrid.Namespaces.ReleaseDelay? releaseDelayInSeconds = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt; ReleaseCloudEventsAsync(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.ReleaseOptions releaseOptions, valuetype System.Nullable`1&lt;valuetype Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; releaseDelayInSeconds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.ReleaseCloudEventsAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.ReleaseOptions,System.Nullable{Azure.Messaging.EventGrid.Namespaces.ReleaseDelay},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReleaseCloudEventsAsync (topicName As String, eventSubscriptionName As String, releaseOptions As ReleaseOptions, Optional releaseDelayInSeconds As Nullable(Of ReleaseDelay) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReleaseResult))" />
      <MemberSignature Language="F#" Value="abstract member ReleaseCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.ReleaseOptions * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;&#xA;override this.ReleaseCloudEventsAsync : string * string * Azure.Messaging.EventGrid.Namespaces.ReleaseOptions * Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;" Usage="eventGridClient.ReleaseCloudEventsAsync (topicName, eventSubscriptionName, releaseOptions, releaseDelayInSeconds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="releaseOptions" Type="Azure.Messaging.EventGrid.Namespaces.ReleaseOptions" />
        <Parameter Name="releaseDelayInSeconds" Type="System.Nullable&lt;Azure.Messaging.EventGrid.Namespaces.ReleaseDelay&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="releaseOptions"> ReleaseOptions. </param>
        <param name="releaseDelayInSeconds"> Release cloud events with the specified delay in seconds. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully released lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call ReleaseCloudEventsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", releaseOptions);
]]></code>
This sample shows how to call ReleaseCloudEventsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

ReleaseOptions releaseOptions = new ReleaseOptions(new string[] { "<lockTokens>" });
Response<ReleaseResult> response = await client.ReleaseCloudEventsAsync("<topicName>", "<eventSubscriptionName>", releaseOptions, releaseDelayInSeconds: ReleaseDelay.By0Seconds);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="releaseOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCloudEventLocks">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RenewCloudEventLocks (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RenewCloudEventLocks(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocks(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCloudEventLocks (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RenewCloudEventLocks : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RenewCloudEventLocks : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="eventGridClient.RenewCloudEventLocks (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renew lock for batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully renewed lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocks(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RenewLockOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RenewCloudEventLocks and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RenewCloudEventLocks with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCloudEventLocks">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt; RenewCloudEventLocks (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.RenewLockOptions renewLockOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt; RenewCloudEventLocks(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.RenewLockOptions renewLockOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocks(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RenewLockOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCloudEventLocks (topicName As String, eventSubscriptionName As String, renewLockOptions As RenewLockOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RenewCloudEventLocksResult)" />
      <MemberSignature Language="F#" Value="abstract member RenewCloudEventLocks : string * string * Azure.Messaging.EventGrid.Namespaces.RenewLockOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&#xA;override this.RenewCloudEventLocks : string * string * Azure.Messaging.EventGrid.Namespaces.RenewLockOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;" Usage="eventGridClient.RenewCloudEventLocks (topicName, eventSubscriptionName, renewLockOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="renewLockOptions" Type="Azure.Messaging.EventGrid.Namespaces.RenewLockOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="renewLockOptions"> RenewLockOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renew lock for batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully renewed lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RenewCloudEventLocks.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code>
This sample shows how to call RenewCloudEventLocks with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = client.RenewCloudEventLocks("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="renewLockOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCloudEventLocksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenewCloudEventLocksAsync (string topicName, string eventSubscriptionName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenewCloudEventLocksAsync(string topicName, string eventSubscriptionName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocksAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCloudEventLocksAsync (topicName As String, eventSubscriptionName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenewCloudEventLocksAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenewCloudEventLocksAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="eventGridClient.RenewCloudEventLocksAsync (topicName, eventSubscriptionName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renew lock for batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully renewed lockTokens, along with other failed lockTokens with their corresponding error information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocksAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RenewLockOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RenewCloudEventLocksAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code>
This sample shows how to call RenewCloudEventLocksAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    lockTokens = new object[]
    {
        "<lockTokens>"
    },
});
Response response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("lockToken").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("failedLockTokens")[0].GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("succeededLockTokens")[0].ToString());
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCloudEventLocksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&gt; RenewCloudEventLocksAsync (string topicName, string eventSubscriptionName, Azure.Messaging.EventGrid.Namespaces.RenewLockOptions renewLockOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&gt; RenewCloudEventLocksAsync(string topicName, string eventSubscriptionName, class Azure.Messaging.EventGrid.Namespaces.RenewLockOptions renewLockOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.RenewCloudEventLocksAsync(System.String,System.String,Azure.Messaging.EventGrid.Namespaces.RenewLockOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCloudEventLocksAsync (topicName As String, eventSubscriptionName As String, renewLockOptions As RenewLockOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RenewCloudEventLocksResult))" />
      <MemberSignature Language="F#" Value="abstract member RenewCloudEventLocksAsync : string * string * Azure.Messaging.EventGrid.Namespaces.RenewLockOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&gt;&#xA;override this.RenewCloudEventLocksAsync : string * string * Azure.Messaging.EventGrid.Namespaces.RenewLockOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&gt;" Usage="eventGridClient.RenewCloudEventLocksAsync (topicName, eventSubscriptionName, renewLockOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid</AssemblyName>
        <AssemblyVersion>4.22.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventGrid.Namespaces</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Messaging.EventGrid.Namespaces.RenewCloudEventLocksResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="renewLockOptions" Type="Azure.Messaging.EventGrid.Namespaces.RenewLockOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Topic Name. </param>
        <param name="eventSubscriptionName"> Event Subscription Name. </param>
        <param name="renewLockOptions"> RenewLockOptions. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Renew lock for batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully accepted. The response body will include the set of successfully renewed lockTokens, along with other failed lockTokens with their corresponding error information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call RenewCloudEventLocksAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code>
This sample shows how to call RenewCloudEventLocksAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
EventGridClient client = new EventGridClient(endpoint, credential);

RenewLockOptions renewLockOptions = new RenewLockOptions(new string[] { "<lockTokens>" });
Response<RenewCloudEventLocksResult> response = await client.RenewCloudEventLocksAsync("<topicName>", "<eventSubscriptionName>", renewLockOptions);
]]></code></example>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" />, <paramref name="eventSubscriptionName" /> or <paramref name="renewLockOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> or <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
