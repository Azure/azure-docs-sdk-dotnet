<Type Name="FeedIterator&lt;T&gt;" FullName="Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class FeedIterator&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FeedIterator`1&lt;T&gt; extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.FeedIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FeedIterator(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type FeedIterator&lt;'T&gt; = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.4.1.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>3.5.1.0</AssemblyVersion>
    <AssemblyVersion>3.6.0.0</AssemblyVersion>
    <AssemblyVersion>3.7.0.0</AssemblyVersion>
    <AssemblyVersion>3.8.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.1.0</AssemblyVersion>
    <AssemblyVersion>3.10.1.0</AssemblyVersion>
    <AssemblyVersion>3.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            Cosmos Result set iterator that keeps track of the continuation token when retrieving results form a query.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Example on how to fully drain the query results.
            <code language="c#"><![CDATA[
            QueryDefinition queryDefinition = new QueryDefinition("select c.id From c where c.status = @status")
                          .WithParameter("@status", "Failure");
            using (FeedIterator<MyItem> feedIterator = this.Container.GetItemQueryIterator<MyItem>(
                queryDefinition))
            {
                while (feedIterator.HasMoreResults)
                {
                    FeedResponse<MyItem> response = await feedIterator.ReadNextAsync();
                    foreach (var item in response)
                    {
                        Console.WriteLine(item);
                    }
                }
            }
            ]]></code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FeedIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.FeedIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.FeedIterator`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="feedIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases the unmanaged resources used by the FeedIterator and optionally
            releases the managed resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.FeedIterator`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="feedIterator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>
            Releases the unmanaged resources used by the FeedIterator and optionally
            releases the managed resources.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMoreResults">
      <MemberSignature Language="C#" Value="public abstract bool HasMoreResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMoreResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.FeedIterator`1.HasMoreResults" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property HasMoreResults As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasMoreResults : bool" Usage="Microsoft.Azure.Cosmos.FeedIterator&lt;'T&gt;.HasMoreResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Tells if there is more results that need to be retrieved from the service
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
            Example on how to fully drain the query results.
            <code language="c#"><![CDATA[
            QueryDefinition queryDefinition = new QueryDefinition("select c.id From c where c.status = @status")
                          .WithParameter("@status", "Failure");
            using (FeedIterator<MyItem> feedIterator = this.Container.GetItemQueryIterator<MyItem>(
                queryDefinition))
            {
                while (feedIterator.HasMoreResults)
                {
                    FeedResponse<MyItem> response = await feedIterator.ReadNextAsync();
                    foreach (var item in response)
                    {
                        Console.WriteLine(item);
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadNextAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.FeedResponse&lt;T&gt;&gt; ReadNextAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.FeedResponse`1&lt;!T&gt;&gt; ReadNextAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.FeedIterator`1.ReadNextAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadNextAsync (Optional cancellationToken As CancellationToken = null) As Task(Of FeedResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member ReadNextAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.FeedResponse&lt;'T&gt;&gt;" Usage="feedIterator.ReadNextAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.FeedResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Get the next set of results from the cosmos service
            </summary>
        <returns>A query response from cosmos service</returns>
        <remarks>To be added.</remarks>
        <example>
            Example on how to fully drain the query results.
            <code language="c#"><![CDATA[
            QueryDefinition queryDefinition = new QueryDefinition("select c.id From c where c.status = @status")
                          .WithParameter("@status", "Failure");
            using (FeedIterator<MyItem> feedIterator = this.Container.GetItemQueryIterator<MyItem>(
                queryDefinition))
            {
                while (feedIterator.HasMoreResults)
                {
                    FeedResponse<MyItem> response = await feedIterator.ReadNextAsync();
                    foreach (var item in response)
                    {
                        Console.WriteLine(item);
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
