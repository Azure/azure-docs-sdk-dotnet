<Type Name="UniqueKeyPolicy" FullName="Microsoft.Azure.Cosmos.UniqueKeyPolicy">
  <TypeSignature Language="C#" Value="public sealed class UniqueKeyPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit UniqueKeyPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.UniqueKeyPolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UniqueKeyPolicy" />
  <TypeSignature Language="F#" Value="type UniqueKeyPolicy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.4.1.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>3.5.1.0</AssemblyVersion>
    <AssemblyVersion>3.6.0.0</AssemblyVersion>
    <AssemblyVersion>3.7.0.0</AssemblyVersion>
    <AssemblyVersion>3.8.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.1.0</AssemblyVersion>
    <AssemblyVersion>3.10.1.0</AssemblyVersion>
    <AssemblyVersion>3.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents the unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
            </summary>
    <remarks>
            Unique key policies add a layer of data integrity to an Azure Cosmos container. They cannot be modified once the container is created.
            <para>
            Refer to <see>https://docs.microsoft.com/en-us/azure/cosmos-db/unique-keys</see> for additional information on how to specify
            unique key policies.
            </para></remarks>
    <example><![CDATA[
             var collectionSpec = new DocumentCollection
             {
                 Id = "Collection with unique keys",
                 UniqueKeyPolicy = new UniqueKeyPolicy
                 {
                     UniqueKeys = new Collection<UniqueKey> {
                         // pair </name/first, name/last> is unique.
                         new UniqueKey { Paths = new Collection<string> { "/name/first", "/name/last" } },
                         // /address is unique.
                         new UniqueKey { Paths = new Collection<string> { "/address" } },
                     }
                 }
             };
             DocumentCollection collection = await client.CreateDocumentCollectionAsync(databaseLink, collectionSpec });
            
             var doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith\" }");
             await client.CreateDocumentAsync(collection.SelfLink, doc);
            
             doc = JObject.Parse("{\"name\": { \"first\": \"James\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");
             await client.CreateDocumentAsync(collection.SelfLink, doc);
            
             try
             {
                 // Error: first+last name is not unique.
                 doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith1\" }");
                 await client.CreateDocumentAsync(collection.SelfLink, doc);
                 throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
             }
             catch (DocumentClientException ex)
             {
                 if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
             }
            
             try
             {
                 // Error: alias is not unique.
                 doc = JObject.Parse("{\"name\": { \"first\": \"James Jr\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");
                 await client.CreateDocumentAsync(collection.SelfLink, doc);
                 throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
             }
             catch (DocumentClientException ex)
             {
                 if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
             }
             ]]></example>
    <altmember cref="T:Microsoft.Azure.Cosmos.ContainerProperties" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UniqueKeyPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.UniqueKeyPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueKeys">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;Microsoft.Azure.Cosmos.UniqueKey&gt; UniqueKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class Microsoft.Azure.Cosmos.UniqueKey&gt; UniqueKeys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.UniqueKeyPolicy.UniqueKeys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniqueKeys As Collection(Of UniqueKey)" />
      <MemberSignature Language="F#" Value="member this.UniqueKeys : System.Collections.ObjectModel.Collection&lt;Microsoft.Azure.Cosmos.UniqueKey&gt;" Usage="Microsoft.Azure.Cosmos.UniqueKeyPolicy.UniqueKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="uniqueKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;Microsoft.Azure.Cosmos.UniqueKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets collection of <see cref="T:Microsoft.Azure.Cosmos.UniqueKey" /> that guarantee uniqueness of documents in collection in the Azure Cosmos DB service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
