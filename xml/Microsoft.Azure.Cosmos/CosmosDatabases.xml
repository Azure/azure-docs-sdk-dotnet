<Type Name="CosmosDatabases" FullName="Microsoft.Azure.Cosmos.CosmosDatabases">
  <TypeSignature Language="C#" Value="public class CosmosDatabases" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosDatabases extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosDatabases" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosDatabases" />
  <TypeSignature Language="F#" Value="type CosmosDatabases = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Operations for creating new databases, and reading/querying all databases
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabase" />for reading, replacing, or deleting an existing container;
             </summary>
    <remarks>
             All these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub-linearly with your application.
             For instance, do not call `databases.GetIterator` before every single `item.read` call, to ensure the database exists;
             do this once on application start up.
             </remarks>
    <example>
      <code language="c#"><![CDATA[
             CosmosDatabaseResponse response = await this.cosmosClient.Databases.CreateDatabaseAsync(Guid.NewGuid().ToString());
             ]]></code>
    </example>
    <example>
             This example shows how to access an existing database. This does not do a network call or verify that the database exists in Cosmos.
             <code language="c#"><![CDATA[
             CosmosDatabase database = this.cosmosClient.Databases["MyDatabaseId"];
             ]]></code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosDatabases (Microsoft.Azure.Cosmos.CosmosClient client);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabases.#ctor(Microsoft.Azure.Cosmos.CosmosClient)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (client As CosmosClient)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosDatabases : Microsoft.Azure.Cosmos.CosmosClient -&gt; Microsoft.Azure.Cosmos.CosmosDatabases" Usage="new Microsoft.Azure.Cosmos.CosmosDatabases client" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.Cosmos.CosmosClient" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.CosmosClient" /></param>
        <summary>
            Use the Cosmos client reference to create <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabases" /></summary>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            CosmosDatabaseResponse response = await this.cosmosClient.Databases.CreateDatabaseIfNotExistsAsync(Guid.NewGuid().ToString());
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; CreateDatabaseAsync (string id, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; CreateDatabaseAsync(string id, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabases.CreateDatabaseAsync(System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseAsync : string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;&#xA;override this.CreateDatabaseAsync : string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;" Usage="cosmosDatabases.CreateDatabaseAsync (id, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The database id.</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) A set of options that can be set.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Send a request for creating a database.
            
             A database manages users, permissions and a set of containers.
             Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
             with the database being the logical container for data.
            
             Each Database consists of one or more containers, each of which in turn contain one or more
             documents. Since databases are an administrative resource, the Service Master Key will be
             required in order to access and successfully complete any action using the User APIs.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseSettings" /> containing the resource record.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; CreateDatabaseIfNotExistsAsync (string id, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; CreateDatabaseIfNotExistsAsync(string id, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabases.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateDatabaseIfNotExistsAsync : string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;&#xA;override this.CreateDatabaseIfNotExistsAsync : string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;" Usage="cosmosDatabases.CreateDatabaseIfNotExistsAsync (id, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The database id.</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) A set of additional options that can be set.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Check if a database exists, and if it doesn't, create it.
             This will make a read operation, and if the database is not found it will do a create operation.
            
             A database manages users, permissions and a set of containers.
             Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
             with the database being the logical container for data.
            
             Each Database consists of one or more containers, each of which in turn contain one or more
             documents. Since databases are an administrative resource, the Service Master Key will be
             required in order to access and successfully complete any action using the User APIs.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseSettings" /> containing the resource record.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseIterator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosDatabaseSettings&gt; GetDatabaseIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;class Microsoft.Azure.Cosmos.CosmosDatabaseSettings&gt; GetDatabaseIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabases.GetDatabaseIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As CosmosResultSetIterator(Of CosmosDatabaseSettings)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosDatabaseSettings&gt;&#xA;override this.GetDatabaseIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosDatabaseSettings&gt;" Usage="cosmosDatabases.GetDatabaseIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosDatabaseSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">The max item count to return as part of the query</param>
        <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the databases for the account
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the database under the cosmos account
            <code language="c#"><![CDATA[
            CosmosResultSetIterator<CosmosDatabaseSettings> setIterator = this.cosmosClient.Databases.GetDatabaseIterator();
            {
                foreach (CosmosDatabaseSettings databaseSettings in  await setIterator.FetchNextSetAsync())
                {
                    Console.WriteLine(setting.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosDatabase this[string id] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosDatabase Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosDatabases.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(id As String) As CosmosDatabase" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Microsoft.Azure.Cosmos.CosmosDatabase" Usage="Microsoft.Azure.Cosmos.CosmosDatabases.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosDatabase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos database id</param>
        <summary>
            Returns a reference to a database object. 
            </summary>
        <value>To be added.</value>
        <remarks>
            Note that the database must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            CosmosDatabase db = this.cosmosClient.Databases["myDatabaseId"];
            CosmosDatabaseResponse response = await db.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>