<Type Name="CosmosStoredProcedures" FullName="Microsoft.Azure.Cosmos.CosmosStoredProcedures">
  <TypeSignature Language="C#" Value="public class CosmosStoredProcedures" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosStoredProcedures extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosStoredProcedures" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosStoredProcedures" />
  <TypeSignature Language="F#" Value="type CosmosStoredProcedures = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Operations for creating new stored procedures, and reading/querying all stored procedures
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedure" /> for reading, replacing, or deleting an existing stored procedures.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosStoredProcedures (Microsoft.Azure.Cosmos.CosmosContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedures.#ctor(Microsoft.Azure.Cosmos.CosmosContainer)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (container As CosmosContainer)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosStoredProcedures : Microsoft.Azure.Cosmos.CosmosContainer -&gt; Microsoft.Azure.Cosmos.CosmosStoredProcedures" Usage="new Microsoft.Azure.Cosmos.CosmosStoredProcedures container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.Azure.Cosmos.CosmosContainer" />
      </Parameters>
      <Docs>
        <param name="container">The <see cref="T:Microsoft.Azure.Cosmos.CosmosContainer" /> the stored procedures set is related to.</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedures" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProceducreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; CreateStoredProceducreAsync (string id, string body, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; CreateStoredProceducreAsync(string id, string body, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedures.CreateStoredProceducreAsync(System.String,System.String,Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateStoredProceducreAsync : string * string * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;&#xA;override this.CreateStoredProceducreAsync : string * string * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;" Usage="cosmosStoredProcedures.CreateStoredProceducreAsync (id, body, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos stored procedure id</param>
        <param name="body">The JavaScript function that is the body of the stored procedure</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="id" /> or <paramref name="body" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> you tried to create was too large.</description></item></list></exception>
        <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#"><![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             CosmosStoredProcedure cosmosStoredProcedure = await this.container.StoredProcedures.CreateStoredProceducreAsync(
                     id: "appendString",
                     body: sprocBody);
             
             // Execute the stored procedure
             CosmosItemResponse<string> sprocResponse = await storedProcedure.ExecuteAsync<string, string>(testPartitionId, "Item as a string: ");
             Console.WriteLine("sprocResponse.Resource");
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetStoredProcedureIterator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings&gt; GetStoredProcedureIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;class Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings&gt; GetStoredProcedureIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedures.GetStoredProcedureIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStoredProcedureIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As CosmosResultSetIterator(Of CosmosStoredProcedureSettings)" />
      <MemberSignature Language="F#" Value="abstract member GetStoredProcedureIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings&gt;&#xA;override this.GetStoredProcedureIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings&gt;" Usage="cosmosStoredProcedures.GetStoredProcedureIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the stored procedures for the container
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the stored procedures under the cosmos container
            <code language="c#"><![CDATA[
            CosmosResultSetIterator<CosmosStoredProcedureSettings> setIterator = this.container.StoredProcedures.GetStoredProcedureIterator();
            while (setIterator.HasMoreResults)
            {
                foreach(CosmosStoredProcedureSettings settings in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(settings.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosStoredProcedure this[string id] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosStoredProcedure Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosStoredProcedures.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(id As String) As CosmosStoredProcedure" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Microsoft.Azure.Cosmos.CosmosStoredProcedure" Usage="Microsoft.Azure.Cosmos.CosmosStoredProcedures.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosStoredProcedure</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos stored procedure id.</param>
        <summary>
            Returns a reference to a stored procedure object. 
            </summary>
        <value>To be added.</value>
        <remarks>
            Note that the stored procedure must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            CosmosStoredProcedure storedProcedure = this.cosmosContainer.StoredProcedures["myStoredProcedureId"];
            CosmosStoredProcedureResponse response = await storedProcedure.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>