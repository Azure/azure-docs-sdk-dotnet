<Type Name="CosmosStoredProcedure" FullName="Microsoft.Azure.Cosmos.CosmosStoredProcedure">
  <TypeSignature Language="C#" Value="public class CosmosStoredProcedure : Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosStoredProcedure extends Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosStoredProcedure" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosStoredProcedure&#xA;Inherits CosmosIdentifier" />
  <TypeSignature Language="F#" Value="type CosmosStoredProcedure = class&#xA;    inherit CosmosIdentifier" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Cosmos.CosmosIdentifier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operations for reading, replacing, or deleting a specific, existing stored procedures by id.
            
            <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedures" /> for creating new stored procedures, and reading/querying all stored procedures;
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosStoredProcedure (Microsoft.Azure.Cosmos.CosmosContainer container, string storedProcedureId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosContainer container, string storedProcedureId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedure.#ctor(Microsoft.Azure.Cosmos.CosmosContainer,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (container As CosmosContainer, storedProcedureId As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosStoredProcedure : Microsoft.Azure.Cosmos.CosmosContainer * string -&gt; Microsoft.Azure.Cosmos.CosmosStoredProcedure" Usage="new Microsoft.Azure.Cosmos.CosmosStoredProcedure (container, storedProcedureId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.Azure.Cosmos.CosmosContainer" />
        <Parameter Name="storedProcedureId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="container">The <see cref="T:Microsoft.Azure.Cosmos.CosmosContainer" /></param>
        <param name="storedProcedureId">The cosmos stored procedure id.</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedure" /></summary>
        <remarks>
            Note that the stored procedure must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; DeleteAsync (Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; DeleteAsync(class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedure.DeleteAsync(Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;&#xA;override this.DeleteAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;" Usage="cosmosStoredProcedure.DeleteAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.Internal.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
            This examples gets a reference to an existing stored procedure and deletes it.
            <code language="c#"><![CDATA[
            CosmosStoredProcedureResponse response = await this.cosmosContainer.StoredProcedures["taxUdfId"].DeleteAsync();
            ]]></code></example>
        <example>
            This examples containers an existing reference to a stored procedure and deletes it.
            <code language="c#"><![CDATA[
            CosmosStoredProcedureResponse response = await this.cosmosTaxStoredProcedure.DeleteAsync();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAsync&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;TOutput&gt;&gt; ExecuteAsync&lt;TInput,TOutput&gt; (object partitionKey, TInput input, Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!TOutput&gt;&gt; ExecuteAsync&lt;TInput, TOutput&gt;(object partitionKey, !!TInput input, class Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedure.ExecuteAsync``2(System.Object,``0,Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAsync : obj * 'Input * Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'Output&gt;&gt;&#xA;override this.ExecuteAsync : obj * 'Input * Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'Output&gt;&gt;" Usage="cosmosStoredProcedure.ExecuteAsync (partitionKey, input, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;TOutput&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="input" Type="TInput" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">The input type that is JSON serializable.</typeparam>
        <typeparam name="TOutput">The return type that is JSON serializable.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="input">The JSON serializable input parameters.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        <remarks>To be added.</remarks>
        <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#"><![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             CosmosStoredProcedure cosmosStoredProcedure = await this.container.StoredProcedures.CreateStoredProceducreAsync(
                     id: "appendString",
                     body: sprocBody);
             
             // Execute the stored procedure
             CosmosItemResponse<string> sprocResponse = await storedProcedure.ExecuteAsync<string, string>(testPartitionId, "Item as a string: ");
             Console.WriteLine("sprocResponse.Resource");
             /// ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; ReadAsync (Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; ReadAsync(class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedure.ReadAsync(Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;&#xA;override this.ReadAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;" Usage="cosmosStoredProcedure.ReadAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
             This reads an existing stored procedure.
            <code language="c#"><![CDATA[
            CosmosStoredProcedureResponse response = await this.cosmosContainer.StoredProcedures["ExistingId"].ReadAsync();
            CosmosStoredProcedureSettings settings = response;
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; ReplaceAsync (string body, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt; ReplaceAsync(string body, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosStoredProcedure.ReplaceAsync(System.String,Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceAsync : string * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;&#xA;override this.ReplaceAsync : string * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;" Usage="cosmosStoredProcedure.ReplaceAsync (body, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body">The JavaScript function to replace the existing resource with.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Replaces a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> in the Azure Cosmos service as an asynchronous operation.
             </summary>
        <returns>
             A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosStoredProcedureSettings" /> containing the updated resource record.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="body" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.Internal.DocumentClientException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
             This examples replaces an existing stored procedure.
             <code language="c#"><![CDATA[
             //Updated settings
             CosmosStoredProcedureSettings settings = new CosmosStoredProcedureSettings
             {
                 Id = "testTriggerId",
                 Body = @"function AddTax() {
                     var item = getContext().getRequest().getBody();
            
                     // Validate/calculate the tax.
                     item.tax = item.cost* .15;
            
                     // Update the request -- this is what is going to be inserted.
                     getContext().getRequest().setBody(item);
                 }"
             };
             
             CosmosStoredProcedureResponse response = await this.cosmosStoredProcedure.ReplaceAsync(settings);
             ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>