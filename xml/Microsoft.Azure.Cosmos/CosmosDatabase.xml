<Type Name="CosmosDatabase" FullName="Microsoft.Azure.Cosmos.CosmosDatabase">
  <TypeSignature Language="C#" Value="public class CosmosDatabase : Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosDatabase extends Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosDatabase" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosDatabase&#xA;Inherits CosmosIdentifier" />
  <TypeSignature Language="F#" Value="type CosmosDatabase = class&#xA;    inherit CosmosIdentifier" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Cosmos.CosmosIdentifier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Operations for reading or deleting an existing database.
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabases" /> for or creating new databases, and reading/querying all databases; use `client.Databases`.
             </summary>
    <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub-linearly with your application.
             For instance, do not call `database.ReadAsync()` before every single `item.ReadAsync()` call, to ensure the database exists;
             do this once on application start up.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosDatabase (Microsoft.Azure.Cosmos.CosmosClient client, string databaseId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosClient client, string databaseId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabase.#ctor(Microsoft.Azure.Cosmos.CosmosClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (client As CosmosClient, databaseId As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosDatabase : Microsoft.Azure.Cosmos.CosmosClient * string -&gt; Microsoft.Azure.Cosmos.CosmosDatabase" Usage="new Microsoft.Azure.Cosmos.CosmosDatabase (client, databaseId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Microsoft.Azure.Cosmos.CosmosClient" />
        <Parameter Name="databaseId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Microsoft.Azure.Cosmos.CosmosClient" /></param>
        <param name="databaseId">The database id.</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabase" /></summary>
        <remarks>
            Note that the database must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Containers">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Cosmos.CosmosContainers Containers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosContainers Containers" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosDatabase.Containers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Containers As CosmosContainers" />
      <MemberSignature Language="F#" Value="member this.Containers : Microsoft.Azure.Cosmos.CosmosContainers" Usage="Microsoft.Azure.Cosmos.CosmosDatabase.Containers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosContainers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An object to create a Cosmos Container or to iterate over all containers
            </summary>
        <value>To be added.</value>
        <remarks>
            Use Containers to access a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainer" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; DeleteAsync (Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; DeleteAsync(class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabase.DeleteAsync(Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;&#xA;override this.DeleteAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;" Usage="cosmosDatabase.DeleteAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseSettings" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseResponse" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a cosmos database
            CosmosDatabase database = cosmosContainer["myDbId"];
            CosmosDatabaseResponse response = await database.DeleteAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; ReadAsync (Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt; ReadAsync(class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabase.ReadAsync(Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;&#xA;override this.ReadAsync : Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;" Usage="cosmosDatabase.ReadAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosDatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseSettings" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabaseSettings" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            CosmosDatabase database = this.cosmosClient.Databases[database_id];
            CosmosDatabaseResponse response = await database.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProvisionedThroughputAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; ReadProvisionedThroughputAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; ReadProvisionedThroughputAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabase.ReadProvisionedThroughputAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadProvisionedThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;&#xA;override this.ReadProvisionedThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="cosmosDatabase.ReadProvisionedThroughputAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets throughput provisioned for a database in measurement of Requests-per-Unit in the Azure Cosmos service.
            </summary>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            int? throughput = await this.cosmosDatabase.ReadProvisionedThroughputAsync();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProvisionedThroughputAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReplaceProvisionedThroughputAsync (int throughput, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReplaceProvisionedThroughputAsync(int32 throughput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosDatabase.ReplaceProvisionedThroughputAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceProvisionedThroughputAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ReplaceProvisionedThroughputAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cosmosDatabase.ReplaceProvisionedThroughputAsync (throughput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughput">The cosmos database throughput.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Sets throughput provisioned for a database in measurement of Requests-per-Unit in the Azure Cosmos service.
            </summary>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            int? throughput = await this.cosmosDatabase.ReplaceProvisionedThroughputAsync(400);
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>