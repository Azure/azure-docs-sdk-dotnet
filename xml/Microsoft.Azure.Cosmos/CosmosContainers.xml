<Type Name="CosmosContainers" FullName="Microsoft.Azure.Cosmos.CosmosContainers">
  <TypeSignature Language="C#" Value="public class CosmosContainers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosContainers extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosContainers" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosContainers" />
  <TypeSignature Language="F#" Value="type CosmosContainers = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Operations for creating new containers, and reading/querying all containers
            
             <see cref="T:Microsoft.Azure.Cosmos.CosmosContainer" /> for reading, replacing, or deleting an existing container.
            
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub-linearly with your application.
             For instance, do not call `containers.GetContainerIterator()` before every single `item.read()` call, to ensure the container exists;
             do this once on application start up.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosContainers (Microsoft.Azure.Cosmos.CosmosDatabase database);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosDatabase database) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.#ctor(Microsoft.Azure.Cosmos.CosmosDatabase)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (database As CosmosDatabase)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosContainers : Microsoft.Azure.Cosmos.CosmosDatabase -&gt; Microsoft.Azure.Cosmos.CosmosContainers" Usage="new Microsoft.Azure.Cosmos.CosmosContainers database" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="database" Type="Microsoft.Azure.Cosmos.CosmosDatabase" />
      </Parameters>
      <Docs>
        <param name="database">The <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabase" /> the container set is related to.</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainers" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerAsync (Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerAsync(class Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.CreateContainerAsync(Microsoft.Azure.Cosmos.CosmosContainerSettings,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.CreateContainerAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainers.CreateContainerAsync (containerSettings, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerSettings" Type="Microsoft.Azure.Cosmos.CosmosContainerSettings" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerSettings">The <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> object.</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="containerSettings" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             CosmosContainerSettings settings = new CosmosContainerSettings() 
             { 
                 Id = Guid.NewGuid().ToString(),
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
             
             CosmosContainerResponse response = this.cosmosDatabase.Containers.CreateContainerAsync(settings);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerAsync (string id, string partitionKeyPath, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerAsync(string id, string partitionKeyPath, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.CreateContainerAsync(System.String,System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerAsync : string * string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.CreateContainerAsync : string * string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainers.CreateContainerAsync (id, partitionKeyPath, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKeyPath" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id</param>
        <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             CosmosContainerResponse response = this.cosmosDatabase.Containers.CreateContainerAsync(Guid.NewGuid().ToString());
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerIfNotExistsAsync (Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerIfNotExistsAsync(class Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.CreateContainerIfNotExistsAsync(Microsoft.Azure.Cosmos.CosmosContainerSettings,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.CreateContainerIfNotExistsAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainers.CreateContainerIfNotExistsAsync (containerSettings, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerSettings" Type="Microsoft.Azure.Cosmos.CosmosContainerSettings" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerSettings">The <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> object.</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Check if a container exists, and if it doesn't, create it.
             This will make a read operation, and if the container is not found it will do a create operation.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="containerSettings" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             CosmosContainerSettings settings = new CosmosContainerSettings() 
             { 
                 Id = Guid.NewGuid().ToString(),
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
             
             CosmosContainerResponse response = this.cosmosDatabase.Containers.CreateContainerIfNotExistsAsync(settings);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerIfNotExistsAsync (string id, string partitionKeyPath, Nullable&lt;int&gt; throughput = null, Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; CreateContainerIfNotExistsAsync(string id, string partitionKeyPath, valuetype System.Nullable`1&lt;int32&gt; throughput, class Microsoft.Azure.Cosmos.CosmosRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.CreateContainerIfNotExistsAsync(System.String,System.String,System.Nullable{System.Int32},Microsoft.Azure.Cosmos.CosmosRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : string * string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.CreateContainerIfNotExistsAsync : string * string * Nullable&lt;int&gt; * Microsoft.Azure.Cosmos.CosmosRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainers.CreateContainerIfNotExistsAsync (id, partitionKeyPath, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKeyPath" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id</param>
        <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
        <param name="throughput">(Optional) The throughput provisioned for a collection in measurement of Requests-per-Unit in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Check if a container exists, and if it doesn't, create it.
             This will make a read operation, and if the container is not found it will do a create operation.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             CosmosContainerResponse response = this.cosmosDatabase.Containers.CreateContainerIfNotExistsAsync(Guid.NewGuid().ToString());
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetContainerIterator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosContainerSettings&gt; GetContainerIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerSettings&gt; GetContainerIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainers.GetContainerIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As CosmosResultSetIterator(Of CosmosContainerSettings)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosContainerSettings&gt;&#xA;override this.GetContainerIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosContainerSettings&gt;" Usage="cosmosContainers.GetContainerIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;Microsoft.Azure.Cosmos.CosmosContainerSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the containers for the database
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the containers under the database
            <code language="c#"><![CDATA[
            CosmosResultSetIterator<CosmosContainerSettings> setIterator = this.cosmosDatabase.Containers.GetContainerIterator();
            while (setIterator.HasMoreResults)
            {
                foreach(CosmosContainerSettings setting in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(setting.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosContainer this[string id] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosContainer Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosContainers.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(id As String) As CosmosContainer" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Microsoft.Azure.Cosmos.CosmosContainer" Usage="Microsoft.Azure.Cosmos.CosmosContainers.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id.</param>
        <summary>
            Returns a reference to a container object. 
            </summary>
        <value>To be added.</value>
        <remarks>
            Note that the container must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            CosmosDatabase db = this.cosmosClient.Databases["myDatabaseId"];
            CosmosDatabaseResponse response = await db.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>