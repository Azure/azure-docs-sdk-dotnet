<Type Name="CosmosItems" FullName="Microsoft.Azure.Cosmos.CosmosItems">
  <TypeSignature Language="C#" Value="public class CosmosItems" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosItems extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosItems" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosItems" />
  <TypeSignature Language="F#" Value="type CosmosItems = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Used to perform operations on items. There are two different types of operations.
            1. The object operations where it serializes and deserializes the item on request/response
            2. The stream response which takes a Stream containing a JSON serialized object and returns a response containing a Stream
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosItems (Microsoft.Azure.Cosmos.CosmosContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.#ctor(Microsoft.Azure.Cosmos.CosmosContainer)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (container As CosmosContainer)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosItems : Microsoft.Azure.Cosmos.CosmosContainer -&gt; Microsoft.Azure.Cosmos.CosmosItems" Usage="new Microsoft.Azure.Cosmos.CosmosItems container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="Microsoft.Azure.Cosmos.CosmosContainer" />
      </Parameters>
      <Docs>
        <param name="container">The cosmos container</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosItems" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt; CreateItemAsync&lt;T&gt; (object partitionKey, T item, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!T&gt;&gt; CreateItemAsync&lt;T&gt;(object partitionKey, !!T item, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemAsync``1(System.Object,``0,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemAsync : obj * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;&#xA;override this.CreateItemAsync : obj * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;" Usage="cosmosItems.CreateItemAsync (partitionKey, item, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosJsonSerializer" /> to implement a custom serializer</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a item as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.CosmosItemResponse`1" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied. </description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description></item><item><term>409</term><description>Conflict - This means a item with an id matching the id field of <paramref name="item" /> already existed</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             CosmosItemResponse item = this.cosmosContainer.Items.CreateItemAsync<ToDoActivity>(test.status, tests);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt; CreateItemQuery&lt;T&gt; (Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, object partitionKey, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;!!T&gt; CreateItemQuery&lt;T&gt;(class Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, object partitionKey, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQuery``1(Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition,System.Object,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemQuery(Of T) (sqlQueryDefinition As CosmosSqlQueryDefinition, partitionKey As Object, Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null, Optional requestOptions As CosmosQueryRequestOptions = null) As CosmosResultSetIterator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQuery : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;&#xA;override this.CreateItemQuery : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;" Usage="cosmosItems.CreateItemQuery (sqlQueryDefinition, partitionKey, maxItemCount, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sqlQueryDefinition" Type="Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="sqlQueryDefinition">The cosmos SQL query definition.</param>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosSqlQueryDefinition sqlQuery = new CosmosSqlQueryDefinition("select * from ToDos t where t.cost > @expensive").UseParameter("@expensive", 9000);
            CosmosResultSetIterator<ToDoActivity> setIterator = this.Container.Items.CreateItemQuery<ToDoActivity>(
                sqlQueryDefinition: sqlQuery, 
                partitionKey: "Error");
                
            while (setIterator.HasMoreResults)
            {
                foreach(var item in await setIterator.FetchNextSetAsync()){
                {
                    Console.WriteLine(item.cost); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt; CreateItemQuery&lt;T&gt; (string sqlQueryText, object partitionKey, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;!!T&gt; CreateItemQuery&lt;T&gt;(string sqlQueryText, object partitionKey, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQuery``1(System.String,System.Object,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemQuery(Of T) (sqlQueryText As String, partitionKey As Object, Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null, Optional requestOptions As CosmosQueryRequestOptions = null) As CosmosResultSetIterator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQuery : string * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;&#xA;override this.CreateItemQuery : string * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;" Usage="cosmosItems.CreateItemQuery (sqlQueryText, partitionKey, maxItemCount, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sqlQueryText" Type="System.String" />
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="sqlQueryText">The cosmos SQL query text.</param>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosResultSetIterator<ToDoActivity> setIterator = this.Container.Items.CreateItemQuery<ToDoActivity>(
                sqlQueryText: "select * from ToDos t where t.cost > 9000", 
                partitionKey: "Error");
                
            while (setIterator.HasMoreResults)
            {
                foreach(var item in await setIterator.FetchNextSetAsync()){
                {
                    Console.WriteLine(item.cost); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt; CreateItemQuery&lt;T&gt; (Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, int maxConcurrency, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;!!T&gt; CreateItemQuery&lt;T&gt;(class Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, int32 maxConcurrency, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQuery``1(Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition,System.Int32,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQuery : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * int * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions * System.Threading.CancellationToken -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;&#xA;override this.CreateItemQuery : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * int * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions * System.Threading.CancellationToken -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;" Usage="cosmosItems.CreateItemQuery (sqlQueryDefinition, maxConcurrency, maxItemCount, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sqlQueryDefinition" Type="Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />
        <Parameter Name="maxConcurrency" Type="System.Int32" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="sqlQueryDefinition">The cosmos SQL query definition.</param>
        <param name="maxConcurrency">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosSqlQueryDefinition sqlQuery = new CosmosSqlQueryDefinition("select * from ToDos t where t.cost > @expensive").UseParameter("@expensive", 9000);
            CosmosResultSetIterator<ToDoActivity> setIterator = this.Container.Items.CreateItemQuery<ToDoActivity>(
                sqlQuery,
                maxConcurrency: 2);
                
            while (setIterator.HasMoreResults)
            {
                foreach(var item in await setIterator.FetchNextSetAsync()){
                {
                    Console.WriteLine(item.cost); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt; CreateItemQuery&lt;T&gt; (string sqlQueryText, int maxConcurrency, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;!!T&gt; CreateItemQuery&lt;T&gt;(string sqlQueryText, int32 maxConcurrency, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQuery``1(System.String,System.Int32,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQuery : string * int * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions * System.Threading.CancellationToken -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;&#xA;override this.CreateItemQuery : string * int * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions * System.Threading.CancellationToken -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;" Usage="cosmosItems.CreateItemQuery (sqlQueryText, maxConcurrency, maxItemCount, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="sqlQueryText" Type="System.String" />
        <Parameter Name="maxConcurrency" Type="System.Int32" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="sqlQueryText">The cosmos SQL query text.</param>
        <param name="maxConcurrency">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosResultSetIterator<ToDoActivity> setIterator = this.Container.Items.CreateItemQuery<ToDoActivity>(
                "select * from ToDos t where t.cost > 9000",
                maxConcurrency: 2);
                
            while (setIterator.HasMoreResults)
            {
                foreach(var item in await setIterator.FetchNextSetAsync()){
                {
                    Console.WriteLine(item.cost); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQueryAsStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator CreateItemQueryAsStream (Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, object partitionKey, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator CreateItemQueryAsStream(class Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition sqlQueryDefinition, object partitionKey, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQueryAsStream(Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition,System.Object,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemQueryAsStream (sqlQueryDefinition As CosmosSqlQueryDefinition, partitionKey As Object, Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null, Optional requestOptions As CosmosQueryRequestOptions = null) As CosmosResultSetIterator" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQueryAsStream : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&#xA;override this.CreateItemQueryAsStream : Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator" Usage="cosmosItems.CreateItemQueryAsStream (sqlQueryDefinition, partitionKey, maxItemCount, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlQueryDefinition" Type="Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
      </Parameters>
      <Docs>
        <param name="sqlQueryDefinition">The cosmos SQL query definition.</param>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetStreamIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Query as a stream only supports single partition queries 
            </remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosSqlQueryDefinition sqlQuery = new CosmosSqlQueryDefinition("select * from ToDos t where t.cost > @expensive").UseParameter("@expensive", 9000);
            CosmosResultSetIterator setIterator = this.Container.Items.CreateItemQueryAsStream(
                sqlQueryDefinition: sqlQuery, 
                partitionKey: "Error");
                
            while (setIterator.HasMoreResults)
            {
                using (CosmosResponseMessage response = await setIterator.FetchNextSetAsync())
                {
                    using (StreamReader sr = new StreamReader(response.Content))
                    using (JsonTextReader jtr = new JsonTextReader(sr))
                    {
                        JObject result = JObject.Load(jtr);
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemQueryAsStream">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator CreateItemQueryAsStream (string sqlQueryText, object partitionKey, Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator CreateItemQueryAsStream(string sqlQueryText, object partitionKey, valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosQueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemQueryAsStream(System.String,System.Object,System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosQueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateItemQueryAsStream (sqlQueryText As String, partitionKey As Object, Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null, Optional requestOptions As CosmosQueryRequestOptions = null) As CosmosResultSetIterator" />
      <MemberSignature Language="F#" Value="abstract member CreateItemQueryAsStream : string * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&#xA;override this.CreateItemQueryAsStream : string * obj * Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosQueryRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator" Usage="cosmosItems.CreateItemQueryAsStream (sqlQueryText, partitionKey, maxItemCount, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlQueryText" Type="System.String" />
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" />
      </Parameters>
      <Docs>
        <param name="sqlQueryText">The cosmos SQL query string.</param>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a CosmosResultSetStreamIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.CosmosSqlQueryDefinition" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Query as a stream only supports single partition queries 
            </remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            CosmosResultSetIterator setIterator = this.Container.Items.CreateItemQueryAsStream(
                sqlQueryText: "select * from ToDos t where t.cost > 9000", 
                partitionKey: "Error");
                
            while (setIterator.HasMoreResults)
            {
                using (CosmosResponseMessage response = await setIterator.FetchNextSetAsync())
                {
                    using (StreamReader sr = new StreamReader(response.Content))
                    using (JsonTextReader jtr = new JsonTextReader(sr))
                    {
                        JObject result = JObject.Load(jtr);
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; CreateItemStreamAsync (object partitionKey, System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; CreateItemStreamAsync(object partitionKey, class System.IO.Stream streamPayload, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.CreateItemStreamAsync(System.Object,System.IO.Stream,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemStreamAsync : obj * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;&#xA;override this.CreateItemStreamAsync : obj * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;" Usage="cosmosItems.CreateItemStreamAsync (partitionKey, streamPayload, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Creates a Item as an asynchronous operation in the Azure Cosmos service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.CosmosResponseMessage" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <example>
            This example creates an item in a Cosmos container.
            <code language="c#"><![CDATA[
            //Create the object in Cosmos
            using (CosmosResponseMessage response = await this.Container.Items.CreateItemStreamAsync(partitionKey: "streamPartitionKey", streamPayload: stream))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using (Stream responseStream = await response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(responseStream))
                    {
                        string responseContentAsString = await streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt; DeleteItemAsync&lt;T&gt; (object partitionKey, string id, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!T&gt;&gt; DeleteItemAsync&lt;T&gt;(object partitionKey, string id, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.DeleteItemAsync``1(System.Object,System.String,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;&#xA;override this.DeleteItemAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;" Usage="cosmosItems.DeleteItemAsync (partitionKey, id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosItemResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            CosmosItemResponse item = await this.cosmosContainer.Items.DeleteItemAsync<ToDoActivity>("partitionKey", "id");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; DeleteItemStreamAsync (object partitionKey, string id, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; DeleteItemStreamAsync(object partitionKey, string id, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.DeleteItemStreamAsync(System.Object,System.String,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemStreamAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;&#xA;override this.DeleteItemStreamAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;" Usage="cosmosItems.DeleteItemStreamAsync (partitionKey, id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the delete resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            Delete an item from Cosmos
            <code language="c#"><![CDATA[
            using(CosmosResponseMessage response = this.cosmosContainer.Items.DeleteItemStreamAsync(partitionKey: "itemPartitionKey", id: "itemId"))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt; GetItemIterator&lt;T&gt; (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator`1&lt;!!T&gt; GetItemIterator&lt;T&gt;(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.GetItemIterator``1(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemIterator(Of T) (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As CosmosResultSetIterator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetItemIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;&#xA;override this.GetItemIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;'T&gt;" Usage="cosmosItems.GetItemIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the items for the container
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the items under the cosmos container
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            CosmosResultSetIterator<ToDoActivity> setIterator = this.cosmosContainer.Items.GetItemIterator<ToDoActivity>();
            while (setIterator.HasMoreResults)
            {
                foreach(ToDoActivity item in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(item.id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemStreamIterator">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosResultSetIterator GetItemStreamIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.CosmosResultSetIterator GetItemStreamIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.GetItemStreamIterator(System.Nullable{System.Int32},System.String,Microsoft.Azure.Cosmos.CosmosItemRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetItemStreamIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null, Optional requestOptions As CosmosItemRequestOptions = null) As CosmosResultSetIterator" />
      <MemberSignature Language="F#" Value="abstract member GetItemStreamIterator : Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator&#xA;override this.GetItemStreamIterator : Nullable&lt;int&gt; * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions -&gt; Microsoft.Azure.Cosmos.CosmosResultSetIterator" Usage="cosmosItems.GetItemStreamIterator (maxItemCount, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosResultSetIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Microsoft.Azure.Cosmos.CosmosQueryRequestOptions" /></param>
        <summary>
            Gets an iterator to go through all the items for the container as the original CosmosResponseMessage
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the items under the cosmos container
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            CosmosResultSetIterator setIterator = this.Container.Items.GetItemStreamIterator();
            while (setIterator.HasMoreResults)
            {
                using (CosmosResponseMessage iterator = await setIterator.FetchNextSetAsync())
                {
                    using (StreamReader sr = new StreamReader(iterator.Content))
                    {
                        string content = await sr.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt; ReadItemAsync&lt;T&gt; (object partitionKey, string id, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!T&gt;&gt; ReadItemAsync&lt;T&gt;(object partitionKey, string id, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.ReadItemAsync``1(System.Object,System.String,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadItemAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;&#xA;override this.ReadItemAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;" Usage="cosmosItems.ReadItemAsync (partitionKey, id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosItemResponse`1" /> which wraps the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            ToDoActivity toDoActivity = this.cosmosContainer.Items.ReadItemAsync<ToDoActivity>("partitionKey", "id");
            
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadItemStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; ReadItemStreamAsync (object partitionKey, string id, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; ReadItemStreamAsync(object partitionKey, string id, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.ReadItemStreamAsync(System.Object,System.String,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadItemStreamAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;&#xA;override this.ReadItemStreamAsync : obj * string * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;" Usage="cosmosItems.ReadItemStreamAsync (partitionKey, id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            Read a response as a stream.
            <code language="c#"><![CDATA[
            using(CosmosResponseMessage response = this.cosmosContainer.Items.ReadItemStreamAsync("partitionKey", "id"))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt; ReplaceItemAsync&lt;T&gt; (object partitionKey, string id, T item, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!T&gt;&gt; ReplaceItemAsync&lt;T&gt;(object partitionKey, string id, !!T item, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.ReplaceItemAsync``1(System.Object,System.String,``0,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemAsync : obj * string * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;&#xA;override this.ReplaceItemAsync : obj * string * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;" Usage="cosmosItems.ReplaceItemAsync (partitionKey, id, item, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosJsonSerializer" /> to implement a custom serializer</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Replaces a item in the Azure Cosmos service as an asynchronous operation.
             </summary>
        <returns>
             A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosItemResponse`1" /> which wraps the updated resource record.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="item" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             CosmosItemResponse item = await this.cosmosContainer.Items.ReplaceItemAsync<ToDoActivity>(test.status, test.id, test);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; ReplaceItemStreamAsync (object partitionKey, string id, System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; ReplaceItemStreamAsync(object partitionKey, string id, class System.IO.Stream streamPayload, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.ReplaceItemStreamAsync(System.Object,System.String,System.IO.Stream,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemStreamAsync : obj * string * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;&#xA;override this.ReplaceItemStreamAsync : obj * string * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;" Usage="cosmosItems.ReplaceItemStreamAsync (partitionKey, id, streamPayload, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="id">The cosmos item id</param>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replaces a item in the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the replace resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            Replace an item in Cosmos
            <code language="c#"><![CDATA[
            using(CosmosResponseMessage response = this.cosmosContainer.Items.ReplaceItemStreamAsync(partitionKey: "itemPartitionKey", id: "itemId", streamPayload: stream))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpsertItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt; UpsertItemAsync&lt;T&gt; (object partitionKey, T item, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosItemResponse`1&lt;!!T&gt;&gt; UpsertItemAsync&lt;T&gt;(object partitionKey, !!T item, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.UpsertItemAsync``1(System.Object,``0,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpsertItemAsync : obj * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;&#xA;override this.UpsertItemAsync : obj * 'T * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;'T&gt;&gt;" Usage="cosmosItems.UpsertItemAsync (partitionKey, item, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosJsonSerializer" /> to implement a custom serializer</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Upserts an item as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.CosmosItemResponse`1" /> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied.</description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description></item><item><term>409</term><description>Conflict - This means a item with an id matching the id field of <paramref name="item" /> already existed</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             CosmosItemResponse<ToDoActivity> item = await this.cosmosContainer.Items.UpsertAsync<ToDoActivity>(test.status, test);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertItemStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; UpsertItemStreamAsync (object partitionKey, System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosResponseMessage&gt; UpsertItemStreamAsync(object partitionKey, class System.IO.Stream streamPayload, class Microsoft.Azure.Cosmos.CosmosItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosItems.UpsertItemStreamAsync(System.Object,System.IO.Stream,Microsoft.Azure.Cosmos.CosmosItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member UpsertItemStreamAsync : obj * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;&#xA;override this.UpsertItemStreamAsync : obj * System.IO.Stream * Microsoft.Azure.Cosmos.CosmosItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;" Usage="cosmosItems.UpsertItemStreamAsync (partitionKey, streamPayload, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="System.Object" />
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /></param>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="requestOptions">(Optional) The options for the item request <see cref="T:Microsoft.Azure.Cosmos.CosmosItemRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Upserts an item stream as an asynchronous operation in the Azure Cosmos service.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            Upsert a Stream containing the item to Cosmos
            <code language="c#"><![CDATA[
            using(CosmosResponseMessage response = this.cosmosContainer.Items.UpsertItemStreamAsync(partitionKey: "itemPartitionKey", streamPayload: stream))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader  streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>