<Type Name="Container" FullName="Microsoft.Azure.Cosmos.Container">
  <TypeSignature Language="C#" Value="public abstract class Container" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Container extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.Container" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Container" />
  <TypeSignature Language="F#" Value="type Container = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.4.1.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>3.5.1.0</AssemblyVersion>
    <AssemblyVersion>3.6.0.0</AssemblyVersion>
    <AssemblyVersion>3.7.0.0</AssemblyVersion>
    <AssemblyVersion>3.8.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.0.0</AssemblyVersion>
    <AssemblyVersion>3.9.1.0</AssemblyVersion>
    <AssemblyVersion>3.10.1.0</AssemblyVersion>
    <AssemblyVersion>3.11.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operations for reading, replacing, or deleting a specific, existing container or item in a container by id.
            There are two different types of operations.
            1. The object operations where it serializes and deserializes the item on request/response
            2. The stream response which takes a Stream containing a JSON serialized object and returns a response containing a Stream
            See <see cref="T:Microsoft.Azure.Cosmos.Database" /> for creating new containers, and reading/querying all containers.
            </summary>
    <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub linearly with your application.
             For instance, do not call `container.readAsync()` before every single `container.readItemAsync()` call to ensure the container exists;
             do this once on application start up.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Container ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conflicts">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.Conflicts Conflicts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.Conflicts Conflicts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.Container.Conflicts" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Conflicts As Conflicts" />
      <MemberSignature Language="F#" Value="member this.Conflicts : Microsoft.Azure.Cosmos.Conflicts" Usage="Microsoft.Azure.Cosmos.Container.Conflicts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.Conflicts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the conflicts
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; CreateItemAsync&lt;T&gt; (T item, Microsoft.Azure.Cosmos.PartitionKey? partitionKey = default, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; CreateItemAsync&lt;T&gt;(!!T item, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Cosmos.PartitionKey&gt; partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.CreateItemAsync``1(``0,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateItemAsync(Of T) (item As T, Optional partitionKey As Nullable(Of PartitionKey) = Nothing, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ItemResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member CreateItemAsync : 'T * Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt; * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="container.CreateItemAsync (item, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="partitionKey" Type="System.Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer" /> to implement a custom serializer</param>
        <param name="partitionKey">
          <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /> for the item. If not specified will be populated by extracting from {T}</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a item as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied. </description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description></item><item><term>409</term><description>Conflict - This means a item with an id matching the id field of <paramref name="item" /> already existed</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse item = await this.container.CreateItemAsync<ToDoActivity>(tests, new PartitionKey(test.status));
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateItemStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; CreateItemStreamAsync (System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; CreateItemStreamAsync(class System.IO.Stream streamPayload, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.CreateItemStreamAsync(System.IO.Stream,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateItemStreamAsync (streamPayload As Stream, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateItemStreamAsync : System.IO.Stream * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.CreateItemStreamAsync (streamPayload, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Creates a Item as an asynchronous operation in the Azure Cosmos service.
            </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </remarks>
        <example>
            This example creates an item in a Cosmos container.
            <code language="c#"><![CDATA[
            //Create the object in Cosmos
            using (ResponseMessage response = await this.Container.CreateItemStreamAsync(partitionKey: new PartitionKey("streamPartitionKey"), streamPayload: stream))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using (Stream responseStream = await response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(responseStream))
                    {
                        string responseContentAsString = await streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTransactionalBatch">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.TransactionalBatch CreateTransactionalBatch (Microsoft.Azure.Cosmos.PartitionKey partitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.TransactionalBatch CreateTransactionalBatch(valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.CreateTransactionalBatch(Microsoft.Azure.Cosmos.PartitionKey)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateTransactionalBatch (partitionKey As PartitionKey) As TransactionalBatch" />
      <MemberSignature Language="F#" Value="abstract member CreateTransactionalBatch : Microsoft.Azure.Cosmos.PartitionKey -&gt; Microsoft.Azure.Cosmos.TransactionalBatch" Usage="container.CreateTransactionalBatch partitionKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.TransactionalBatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for all items in the batch.</param>
        <summary>
            Initializes a new instance of <see cref="T:Microsoft.Azure.Cosmos.TransactionalBatch" />
            that can be used to perform operations across multiple items
            in the container with the provided partition key in a transactional manner.
            </summary>
        <returns>A new instance of <see cref="T:Microsoft.Azure.Cosmos.TransactionalBatch" />.</returns>
        <remarks>To be added.</remarks>
        <example>
             This example atomically modifies a set of documents as a batch.
             <code language="c#"><![CDATA[
             public class ToDoActivity
             {
                 public string type { get; set; }
                 public string id { get; set; }
                 public string status { get; set; }
             }
            
             string activityType = "personal";
             ToDoActivity test1 = new ToDoActivity()
             {
                 type = activityType,
                 id = "learning",
                 status = "ToBeDone"
             };
            
             ToDoActivity test2 = new ToDoActivity()
             {
                 type = activityType,
                 id = "shopping",
                 status = "Done"
             };
            
             ToDoActivity test3 = new ToDoActivity()
             {
                 type = activityType,
                 id = "swimming",
                 status = "ToBeDone"
             };
            
             using (TransactionalBatchResponse batchResponse = await container.CreateTransactionalBatch(new Cosmos.PartitionKey(activityType))
                 .CreateItem<ToDoActivity>(test1)
                 .ReplaceItem<ToDoActivity>(test2.id, test2)
                 .UpsertItem<ToDoActivity>(test3)
                 .DeleteItem("reading")
                 .CreateItemStream(streamPayload1)
                 .ReplaceItemStream("eating", streamPayload2)
                 .UpsertItemStream(streamPayload3)
                 .ExecuteAsync())
             {
                if (!batchResponse.IsSuccessStatusCode)
                {
                    // Handle and log exception
                    return;
                }
            
                // Look up interested results - eg. via typed access on operation results
                TransactionalBatchOperationResult<ToDoActivity> replaceResult = batchResponse.GetOperationResultAtIndex<ToDoActivity>(0);
                ToDoActivity readActivity = replaceResult.Resource;
             }
             ]]></code></example>
        <example>
             This example atomically reads a set of documents as a batch.
             <code language="c#"><![CDATA[
             string activityType = "personal";
             using (TransactionalBatchResponse batchResponse = await container.CreateTransactionalBatch(new Cosmos.PartitionKey(activityType))
                .ReadItem("playing")
                .ReadItem("walking")
                .ReadItem("jogging")
                .ReadItem("running")
                .ExecuteAsync())
             {
                 // Look up interested results - eg. via direct access to operation result stream
                 List<string> resultItems = new List<string>();
                 foreach (TransactionalBatchOperationResult operationResult in batchResponse)
                 {
                     using (StreamReader streamReader = new StreamReader(operationResult.ResourceStream))
                     {
                         resultItems.Add(await streamReader.ReadToEndAsync());
                     }
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.Database Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.Database Database" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.Container.Database" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Database As Database" />
      <MemberSignature Language="F#" Value="member this.Database : Microsoft.Azure.Cosmos.Database" Usage="Microsoft.Azure.Cosmos.Container.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.Database</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the parent Database reference
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteContainerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt; DeleteContainerAsync (Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ContainerResponse&gt; DeleteContainerAsync(class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.DeleteContainerAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteContainerAsync (Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member DeleteContainerAsync : Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;" Usage="container.DeleteContainerAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            Container container = this.database.GetContainer("containerId");
            ContainerResponse response = await container.DeleteContainerAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteContainerStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteContainerStreamAsync (Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteContainerStreamAsync(class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.DeleteContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteContainerStreamAsync (Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member DeleteContainerStreamAsync : Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.DeleteContainerStreamAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            Container container = this.database.GetContainer("containerId");
            ResponseMessage response = await container.DeleteContainerStreamAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; DeleteItemAsync&lt;T&gt; (string id, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; DeleteItemAsync&lt;T&gt;(string id, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.DeleteItemAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteItemAsync(Of T) (id As String, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ItemResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="container.DeleteItemAsync (id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="id">The Cosmos item id</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">
            This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            ItemResponse item = await this.container.DeleteItemAsync<ToDoActivity>("partitionKey", "id");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteItemStreamAsync (string id, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteItemStreamAsync(string id, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.DeleteItemStreamAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteItemStreamAsync (id As String, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemStreamAsync : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.DeleteItemStreamAsync (id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The Cosmos item id</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the delete resource record.
            </returns>
        <remarks>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </remarks>
        <example>
            Delete an item from Cosmos
            <code language="c#"><![CDATA[
            using(ResponseMessage response = await this.container.DeleteItemStreamAsync("itemId", new PartitionKey("itemPartitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetChangeFeedEstimatorBuilder">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder GetChangeFeedEstimatorBuilder (string processorName, Microsoft.Azure.Cosmos.Container.ChangesEstimationHandler estimationDelegate, TimeSpan? estimationPeriod = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder GetChangeFeedEstimatorBuilder(string processorName, class Microsoft.Azure.Cosmos.Container/ChangesEstimationHandler estimationDelegate, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; estimationPeriod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetChangeFeedEstimatorBuilder(System.String,Microsoft.Azure.Cosmos.Container.ChangesEstimationHandler,System.Nullable{System.TimeSpan})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChangeFeedEstimatorBuilder (processorName As String, estimationDelegate As Container.ChangesEstimationHandler, Optional estimationPeriod As Nullable(Of TimeSpan) = Nothing) As ChangeFeedProcessorBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetChangeFeedEstimatorBuilder : string * Microsoft.Azure.Cosmos.Container.ChangesEstimationHandler * Nullable&lt;TimeSpan&gt; -&gt; Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" Usage="container.GetChangeFeedEstimatorBuilder (processorName, estimationDelegate, estimationPeriod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processorName" Type="System.String" />
        <Parameter Name="estimationDelegate" Type="Microsoft.Azure.Cosmos.Container+ChangesEstimationHandler" />
        <Parameter Name="estimationPeriod" Type="System.Nullable&lt;System.TimeSpan&gt;" />
      </Parameters>
      <Docs>
        <param name="processorName">The name of the Processor the Estimator is going to measure.</param>
        <param name="estimationDelegate">Delegate to receive estimation.</param>
        <param name="estimationPeriod">Time interval on which to report the estimation. Default is 5 seconds.</param>
        <summary>
            Initializes a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" /> for change feed monitoring.
            </summary>
        <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" /></returns>
        <remarks>
            The goal of the Estimator is to measure progress of a particular processor. In order to do that, the <paramref name="processorName" /> and other parameters, like the leases container, need to match that of the Processor to measure.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeFeedProcessorBuilder&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder&lt;T&gt; (string processorName, Microsoft.Azure.Cosmos.Container.ChangesHandler&lt;T&gt; onChangesDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder GetChangeFeedProcessorBuilder&lt;T&gt;(string processorName, class Microsoft.Azure.Cosmos.Container/ChangesHandler`1&lt;!!T&gt; onChangesDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetChangeFeedProcessorBuilder``1(System.String,Microsoft.Azure.Cosmos.Container.ChangesHandler{``0})" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetChangeFeedProcessorBuilder(Of T) (processorName As String, onChangesDelegate As Container.ChangesHandler(Of T)) As ChangeFeedProcessorBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetChangeFeedProcessorBuilder : string * Microsoft.Azure.Cosmos.Container.ChangesHandler&lt;'T&gt; -&gt; Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" Usage="container.GetChangeFeedProcessorBuilder (processorName, onChangesDelegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="processorName" Type="System.String" />
        <Parameter Name="onChangesDelegate" Type="Microsoft.Azure.Cosmos.Container+ChangesHandler&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="processorName">A name that identifies the Processor and the particular work it will do.</param>
        <param name="onChangesDelegate">Delegate to receive changes.</param>
        <summary>
            Initializes a <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" /> for change feed processing.
            </summary>
        <returns>An instance of <see cref="T:Microsoft.Azure.Cosmos.ChangeFeedProcessorBuilder" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemLinqQueryable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Linq.IOrderedQueryable&lt;T&gt; GetItemLinqQueryable&lt;T&gt; (bool allowSynchronousQueryExecution = false, string continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedQueryable`1&lt;!!T&gt; GetItemLinqQueryable&lt;T&gt;(bool allowSynchronousQueryExecution, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetItemLinqQueryable``1(System.Boolean,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetItemLinqQueryable(Of T) (Optional allowSynchronousQueryExecution As Boolean = false, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing) As IOrderedQueryable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetItemLinqQueryable : bool * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; System.Linq.IOrderedQueryable&lt;'T&gt;" Usage="container.GetItemLinqQueryable (allowSynchronousQueryExecution, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedQueryable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="allowSynchronousQueryExecution" Type="System.Boolean" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of object to query.</typeparam>
        <param name="allowSynchronousQueryExecution">(Optional)the option which allows the query to be executed synchronously via IOrderedQueryable.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request.</param>
        <summary>
             This method creates a LINQ query for items under a container in an Azure Cosmos DB service.
             IQueryable extension method ToFeedIterator() should be use for asynchronous execution with FeedIterator, please refer to example 2.
             </summary>
        <returns>(Optional) An IOrderedQueryable{T} that can evaluate the query.</returns>
        <remarks>
             LINQ execution is synchronous which will cause issues related to blocking calls. 
             It is recommended to always use ToFeedIterator(), and to do the asynchronous execution.
             </remarks>
        <remarks>
             The Azure Cosmos DB LINQ provider compiles LINQ to SQL statements. Refer to https://docs.microsoft.com/azure/cosmos-db/sql-query-linq-to-sql for the list of expressions supported by the Azure Cosmos DB LINQ provider. ToString() on the generated IQueryable returns the translated SQL statement. The Azure Cosmos DB provider translates JSON.NET and DataContract serialization attributes for members to their JSON property names.
             </remarks>
        <example>
             1. This example below shows LINQ query generation and blocked execution.
             <code language="c#"><![CDATA[
             public class Book 
             {
                 public string Title {get; set;}
                 
                 public Author Author {get; set;}
                 
                 public int Price {get; set;}
             }
             
             public class Author
             {
                 public string FirstName {get; set;}
                 public string LastName {get; set;}
             }
              
             // Query by the Title property
             Book book = container.GetItemLinqQueryable<Book>(true)
                                  .Where(b => b.Title == "War and Peace")
                                  .AsEnumerable()
                                  .FirstOrDefault();
             
             // Query a nested property
             Book otherBook = container.GetItemLinqQueryable<Book>(true)
                                       .Where(b => b.Author.FirstName == "Leo")
                                       .AsEnumerable()
                                       .FirstOrDefault();
             
             // Perform iteration on books
             foreach (Book matchingBook in container.GetItemLinqQueryable<Book>(true)
                                        .Where(b => b.Price > 100))
             {
                 // Iterate through books
             }
             ]]></code></example>
        <example>
             2. This example below shows LINQ query generation and asynchronous execution with FeedIterator.
             <code language="c#"><![CDATA[
            
             // LINQ query generation
             using (FeedIterator setIterator = container.GetItemLinqQueryable<Book>()
                                  .Where(b => b.Title == "War and Peace")
                                  .ToFeedIterator())
             {                   
                 //Asynchronous query execution
                 while (setIterator.HasMoreResults)
                 {
                     foreach(var item in await feedIterator.ReadNextAsync()){
                     {
                         Console.WriteLine(item.cost); 
                     }
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt; GetItemQueryIterator&lt;T&gt; (Microsoft.Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;!!T&gt; GetItemQueryIterator&lt;T&gt;(class Microsoft.Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetItemQueryIterator``1(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetItemQueryIterator(Of T) (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing) As FeedIterator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetItemQueryIterator : Microsoft.Azure.Cosmos.QueryDefinition * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;'T&gt;" Usage="container.GetItemQueryIterator (queryDefinition, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Microsoft.Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryDefinition">The Cosmos SQL query definition.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request.</param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition" />.
            </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>To be added.</remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            QueryDefinition queryDefinition = new QueryDefinition("select * from ToDos t where t.cost > @expensive")
                .WithParameter("@expensive", 9000);
            using (FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                queryDefinition,
                null,
                new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
            {
                while (feedIterator.HasMoreResults)
                {
                    foreach(var item in await feedIterator.ReadNextAsync()){
                    {
                        Console.WriteLine(item.cost); 
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt; GetItemQueryIterator&lt;T&gt; (string queryText = default, string continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;!!T&gt; GetItemQueryIterator&lt;T&gt;(string queryText, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetItemQueryIterator``1(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetItemQueryIterator(Of T) (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing) As FeedIterator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetItemQueryIterator : string * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;'T&gt;" Usage="container.GetItemQueryIterator (queryText, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryText">The Cosmos SQL query text.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request.</param>
        <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition" />.
             </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>To be added.</remarks>
        <example>
             1. Create a query to get all the ToDoActivity that have a cost greater than 9000
             <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             using (FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                 "select * from ToDos t where t.cost > 9000",
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
             {
                 while (feedIterator.HasMoreResults)
                 {
                     foreach(var item in await feedIterator.ReadNextAsync()){
                     {
                         Console.WriteLine(item.cost);
                     }
                 }
             }
             ]]></code></example>
        <example>
             2. Create a FeedIterator to get all the ToDoActivity.
             <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
            
             using (FeedIterator<ToDoActivity> feedIterator = this.Container.GetItemQueryIterator<ToDoActivity>(
                 null,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
             {
                 while (feedIterator.HasMoreResults)
                 {
                     foreach(var item in await feedIterator.ReadNextAsync()){
                     {
                         Console.WriteLine(item.cost); 
                     }
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemQueryStreamIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator GetItemQueryStreamIterator (Microsoft.Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator GetItemQueryStreamIterator(class Microsoft.Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetItemQueryStreamIterator(Microsoft.Azure.Cosmos.QueryDefinition,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetItemQueryStreamIterator (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member GetItemQueryStreamIterator : Microsoft.Azure.Cosmos.QueryDefinition * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="container.GetItemQueryStreamIterator (queryDefinition, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Microsoft.Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" />
      </Parameters>
      <Docs>
        <param name="queryDefinition">The Cosmos SQL query definition.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request.</param>
        <summary>
             This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition" />.
            </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>
            Query as a stream only supports single partition queries 
            </remarks>
        <example>
            Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
            <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
                public int cost {get; set;}
            }
            
            QueryDefinition queryDefinition = new QueryDefinition("select * from ToDos t where t.cost > @expensive")
                .WithParameter("@expensive", 9000);
            using (FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                queryDefinition,
                null,
                new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
            {
                while (feedIterator.HasMoreResults)
                {
                    using (ResponseMessage response = await feedIterator.ReadNextAsync())
                    {
                        using (StreamReader sr = new StreamReader(response.Content))
                        using (JsonTextReader jtr = new JsonTextReader(sr))
                        {
                            JObject result = JObject.Load(jtr);
                        }
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetItemQueryStreamIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator GetItemQueryStreamIterator (string queryText = default, string continuationToken = default, Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator GetItemQueryStreamIterator(string queryText, string continuationToken, class Microsoft.Azure.Cosmos.QueryRequestOptions requestOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.GetItemQueryStreamIterator(System.String,System.String,Microsoft.Azure.Cosmos.QueryRequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetItemQueryStreamIterator (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member GetItemQueryStreamIterator : string * string * Microsoft.Azure.Cosmos.QueryRequestOptions -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="container.GetItemQueryStreamIterator (queryText, continuationToken, requestOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.QueryRequestOptions" />
      </Parameters>
      <Docs>
        <param name="queryText">The Cosmos SQL query text.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request.</param>
        <summary>
              This method creates a query for items under a container in an Azure Cosmos database using a SQL statement with parameterized values. It returns a FeedIterator.
              For more information on preparing SQL statements with parameterized values, please see <see cref="T:Microsoft.Azure.Cosmos.QueryDefinition" />.
             </summary>
        <returns>An iterator to go through the items.</returns>
        <remarks>
             Query as a stream only supports single partition queries 
             </remarks>
        <example>
             1. Create a query to get all the ToDoActivity that have a cost greater than 9000 for the specified partition
             <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
             
             using (FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                 "select * from ToDos t where t.cost > 9000",
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
             {
                 while (feedIterator.HasMoreResults)
                 {
                     using (ResponseMessage response = await feedIterator.ReadNextAsync())
                     {
                         using (StreamReader sr = new StreamReader(response.Content))
                         using (JsonTextReader jtr = new JsonTextReader(sr))
                         {
                             JObject result = JObject.Load(jtr);
                         }
                     }
                 }
             }
             ]]></code></example>
        <example>
             2. Creates a FeedIterator to get all the ToDoActivity.
             <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
                 public int cost {get; set;}
             }
            
             using (FeedIterator feedIterator = this.Container.GetItemQueryStreamIterator(
                 null,
                 null,
                 new QueryRequestOptions() { PartitionKey = new PartitionKey("Error")}))
             {
                 while (feedIterator.HasMoreResults)
                 {
                     using (ResponseMessage response = await feedIterator.ReadNextAsync())
                     {
                         using (StreamReader sr = new StreamReader(response.Content))
                         using (JsonTextReader jtr = new JsonTextReader(sr))
                         {
                             JObject result = JObject.Load(jtr);
                         }
                     }
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.Container.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="Microsoft.Azure.Cosmos.Container.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Id of the Cosmos container
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadContainerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt; ReadContainerAsync (Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ContainerResponse&gt; ReadContainerAsync(class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadContainerAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadContainerAsync (Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadContainerAsync : Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;" Usage="container.ReadContainerAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            Container container = this.database.GetContainer("containerId");
            ContainerProperties containerProperties = await container.ReadContainerAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadContainerStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; ReadContainerStreamAsync (Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; ReadContainerStreamAsync(class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadContainerStreamAsync (Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member ReadContainerStreamAsync : Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.ReadContainerStreamAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            Container container = this.database.GetContainer("containerId");
            ResponseMessage response = await container.ReadContainerStreamAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; ReadItemAsync&lt;T&gt; (string id, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; ReadItemAsync&lt;T&gt;(string id, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadItemAsync``1(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadItemAsync(Of T) (id As String, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ItemResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member ReadItemAsync : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="container.ReadItemAsync (id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="id">The Cosmos item id</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1" /> which wraps the read resource record.
            </returns>
        <remarks>
            Items contain meta data that can be obtained by mapping these meta data attributes to properties in <typeparamref name="T" />.
            * "_ts": Gets the last modified time stamp associated with the item from the Azure Cosmos DB service.
            * "_etag": Gets the entity tag associated with the item from the Azure Cosmos DB service.
            * "ttl": Gets the time to live in seconds of the item in the Azure Cosmos DB service.
            </remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            public class ToDoActivity{
                public string id {get; set;}
                public string status {get; set;}
            }
            
            ToDoActivity toDoActivity = await this.container.ReadItemAsync<ToDoActivity>("id", new PartitionKey("partitionKey"));
            
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadItemStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; ReadItemStreamAsync (string id, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; ReadItemStreamAsync(string id, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadItemStreamAsync(System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadItemStreamAsync (id As String, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member ReadItemStreamAsync : string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.ReadItemStreamAsync (id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The Cosmos item id</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a item from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the read resource record.
            </returns>
        <remarks>
          <exception>https://aka.ms/cosmosdb-dot-net-exceptions#stream-api</exception>
            The Stream operation only throws on client side exceptions. This is to increase performance and prevent the overhead of throwing exceptions. Check the HTTP status code on the response to check if the operation failed.
            </remarks>
        <example>
            Read a response as a stream.
            <code language="c#"><![CDATA[
            using(ResponseMessage response = await this.container.ReadItemStreamAsync("id", new PartitionKey("partitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; ReadThroughputAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; ReadThroughputAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadThroughputAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadThroughputAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ReadThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="container.ReadThroughputAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets container throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>Provisioned throughput in request units per second</returns>
        <returns>
            The provisioned throughput for this container.
            </returns>
        <remarks>
          <para>
            Null value indicates a container with no throughput provisioned.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            int? throughput = await container.ReadThroughputAsync();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReadThroughputAsync (Microsoft.Azure.Cosmos.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReadThroughputAsync(class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReadThroughputAsync(Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadThroughputAsync (requestOptions As RequestOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ThroughputResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadThroughputAsync : Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;" Usage="container.ReadThroughputAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">The options for the throughput request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets container throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>The throughput response</returns>
        <returns>
            The provisioned throughput for this container.
            </returns>
        <remarks>
          <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput
            <code language="c#"><![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputProperties throughputProperties = await container.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {throughputProperties?.Throughput}");
            ]]></code></example>
        <example>
            The following example shows how to get throughput, MinThroughput and is replace in progress
            <code language="c#"><![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputResponse response = await container.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {response.Resource?.Throughput}");
            Console.WriteLine($"MinThroughput: {response.MinThroughput}");
            Console.WriteLine($"IsReplacePending: {response.IsReplacePending}");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceContainerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt; ReplaceContainerAsync (Microsoft.Azure.Cosmos.ContainerProperties containerProperties, Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ContainerResponse&gt; ReplaceContainerAsync(class Microsoft.Azure.Cosmos.ContainerProperties containerProperties, class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceContainerAsync(Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceContainerAsync (containerProperties As ContainerProperties, Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceContainerAsync : Microsoft.Azure.Cosmos.ContainerProperties * Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;" Usage="container.ReplaceContainerAsync (containerProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProperties" Type="Microsoft.Azure.Cosmos.ContainerProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> containing the replace resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
            Update the container to disable automatic indexing
            <code language="c#"><![CDATA[
            ContainerProperties containerProperties = containerReadResponse;
            containerProperties.IndexingPolicy.Automatic = false;
            ContainerResponse response = await container.ReplaceContainerAsync(containerProperties);
            ContainerProperties replacedProperties = response;
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceContainerStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; ReplaceContainerStreamAsync (Microsoft.Azure.Cosmos.ContainerProperties containerProperties, Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; ReplaceContainerStreamAsync(class Microsoft.Azure.Cosmos.ContainerProperties containerProperties, class Microsoft.Azure.Cosmos.ContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceContainerStreamAsync(Microsoft.Azure.Cosmos.ContainerProperties,Microsoft.Azure.Cosmos.ContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceContainerStreamAsync (containerProperties As ContainerProperties, Optional requestOptions As ContainerRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceContainerStreamAsync : Microsoft.Azure.Cosmos.ContainerProperties * Microsoft.Azure.Cosmos.ContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.ReplaceContainerStreamAsync (containerProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProperties" Type="Microsoft.Azure.Cosmos.ContainerProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerProperties">The <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" />.</param>
        <param name="requestOptions">(Optional) The options for the container request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.ContainerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> containing the replace resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <exception>https://aka.ms/cosmosdb-dot-net-exceptions#stream-api</exception>
          <code language="c#"><![CDATA[
            ContainerProperties containerProperties = containerReadResponse;
            containerProperties.IndexingPolicy.Automatic = false;
            ResponseMessage response = await container.ReplaceContainerStreamAsync(containerProperties);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; ReplaceItemAsync&lt;T&gt; (T item, string id, Microsoft.Azure.Cosmos.PartitionKey? partitionKey = default, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; ReplaceItemAsync&lt;T&gt;(!!T item, string id, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Cosmos.PartitionKey&gt; partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceItemAsync``1(``0,System.String,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceItemAsync(Of T) (item As T, id As String, Optional partitionKey As Nullable(Of PartitionKey) = Nothing, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ItemResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemAsync : 'T * string * Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt; * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="container.ReplaceItemAsync (item, id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="System.Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer" /> to implement a custom serializer.</param>
        <param name="id">The Cosmos item id of the existing item.</param>
        <param name="partitionKey">
          <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /> for the item. If not specified will be populated by extracting from {T}</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Replaces a item in the Azure Cosmos service as an asynchronous operation.
             </summary>
        <returns>
             A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1" /> which wraps the updated resource record.
             </returns>
        <remarks>
             The item's partition key value is immutable. 
             To change an item's partition key value you must delete the original item and insert a new item.
             </remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="item" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">
             This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property.
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied. </description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to create the document is full.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse item = await this.container.ReplaceItemAsync<ToDoActivity>(test, test.id, new PartitionKey(test.status));
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceItemStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; ReplaceItemStreamAsync (System.IO.Stream streamPayload, string id, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; ReplaceItemStreamAsync(class System.IO.Stream streamPayload, string id, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceItemStreamAsync(System.IO.Stream,System.String,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceItemStreamAsync (streamPayload As Stream, id As String, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceItemStreamAsync : System.IO.Stream * string * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.ReplaceItemStreamAsync (streamPayload, id, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="id">The Cosmos item id</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replaces a item in the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the replace resource record.
            </returns>
        <remarks>
            The item's partition key value is immutable. 
            To change an item's partition key value you must delete the original item and insert a new item.
            </remarks>
        <remarks>
            The Stream operation only throws on client side exceptions. 
            This is to increase performance and prevent the overhead of throwing exceptions. 
            Check the HTTP status code on the response to check if the operation failed.
            </remarks>
        <example>
            Replace an item in Cosmos
            <code language="c#"><![CDATA[
            using(ResponseMessage response = await this.container.ReplaceItemStreamAsync(stream, "itemId", new PartitionKey("itemPartitionKey"))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync (Microsoft.Azure.Cosmos.ThroughputProperties throughputProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync(class Microsoft.Azure.Cosmos.ThroughputProperties throughputProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceThroughputAsync(Microsoft.Azure.Cosmos.ThroughputProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceThroughputAsync (throughputProperties As ThroughputProperties, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ThroughputResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceThroughputAsync : Microsoft.Azure.Cosmos.ThroughputProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;" Usage="container.ReplaceThroughputAsync (throughputProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughputProperties" Type="Microsoft.Azure.Cosmos.ThroughputProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughputProperties">The Cosmos container throughput expressed in Request Units per second.</param>
        <param name="requestOptions">(Optional) The options for the throughput request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Sets throughput provisioned for a container in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>The throughput response.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units">Request Units</seealso>
        </remarks>
        <example>
            The following example shows how to replace the fixed throughput.
            <code language="c#"><![CDATA[
            ThroughputResponse throughput = await this.cosmosContainer.ReplaceThroughputAsync(
                ThroughputProperties.CreateManualThroughput(10000));
            ]]></code></example>
        <example>
            The following example shows how to replace the autoscale provisioned throughput
            <code language="c#"><![CDATA[
            ThroughputResponse throughput = await this.cosmosContainer.ReplaceThroughputAsync(
                ThroughputProperties.CreateAutoscaleThroughput(10000));
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync (int throughput, Microsoft.Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync(int32 throughput, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.ReplaceThroughputAsync(System.Int32,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceThroughputAsync (throughput As Integer, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ThroughputResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceThroughputAsync : int * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;" Usage="container.ReplaceThroughputAsync (throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ThroughputResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="System.Int32" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughput">The Cosmos container throughput, expressed in Request Units per second.</param>
        <param name="requestOptions">(Optional) The options for the throughput request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Sets throughput provisioned for a container in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>The throughput response.</returns>
        <returns>
            The provisioned throughput for this container.
            </returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
            </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            ThroughputResponse throughput = await this.cosmosContainer.ReplaceThroughputAsync(400);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.Scripts.Scripts Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.Scripts.Scripts Scripts" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.Container.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Scripts As Scripts" />
      <MemberSignature Language="F#" Value="member this.Scripts : Microsoft.Azure.Cosmos.Scripts.Scripts" Usage="Microsoft.Azure.Cosmos.Container.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.Scripts.Scripts</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the scripts
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpsertItemAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; UpsertItemAsync&lt;T&gt; (T item, Microsoft.Azure.Cosmos.PartitionKey? partitionKey = default, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; UpsertItemAsync&lt;T&gt;(!!T item, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Cosmos.PartitionKey&gt; partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.UpsertItemAsync``1(``0,System.Nullable{Microsoft.Azure.Cosmos.PartitionKey},Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UpsertItemAsync(Of T) (item As T, Optional partitionKey As Nullable(Of PartitionKey) = Nothing, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ItemResponse(Of T))" />
      <MemberSignature Language="F#" Value="abstract member UpsertItemAsync : 'T * Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt; * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="container.UpsertItemAsync (item, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="partitionKey" Type="System.Nullable&lt;Microsoft.Azure.Cosmos.PartitionKey&gt;" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="item">A JSON serializable object that must contain an id property. <see cref="T:Microsoft.Azure.Cosmos.CosmosSerializer" /> to implement a custom serializer</param>
        <param name="partitionKey">
          <see cref="T:Microsoft.Azure.Cosmos.PartitionKey" /> for the item. If not specified will be populated by extracting from {T}</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Upserts an item as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.ItemResponse`1" /> that was upserted contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the document supplied.</description></item><item><term>403</term><description>Forbidden - This likely means the collection in to which you were trying to upsert the document is full.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the item exceeds the current max entity size. Consult documentation for limits and quotas.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             public class ToDoActivity{
                 public string id {get; set;}
                 public string status {get; set;}
             }
             
             ToDoActivity test = new ToDoActivity()
             {
                id = Guid.NewGuid().ToString(),
                status = "InProgress"
             };
            
             ItemResponse<ToDoActivity> item = await this.container.UpsertItemAsync<ToDoActivity>(test, new PartitionKey(test.status));
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertItemStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; UpsertItemStreamAsync (System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.PartitionKey partitionKey, Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; UpsertItemStreamAsync(class System.IO.Stream streamPayload, valuetype Microsoft.Azure.Cosmos.PartitionKey partitionKey, class Microsoft.Azure.Cosmos.ItemRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Container.UpsertItemStreamAsync(System.IO.Stream,Microsoft.Azure.Cosmos.PartitionKey,Microsoft.Azure.Cosmos.ItemRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UpsertItemStreamAsync (streamPayload As Stream, partitionKey As PartitionKey, Optional requestOptions As ItemRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ResponseMessage)" />
      <MemberSignature Language="F#" Value="abstract member UpsertItemStreamAsync : System.IO.Stream * Microsoft.Azure.Cosmos.PartitionKey * Microsoft.Azure.Cosmos.ItemRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="container.UpsertItemStreamAsync (streamPayload, partitionKey, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.4.1.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>3.5.1.0</AssemblyVersion>
        <AssemblyVersion>3.6.0.0</AssemblyVersion>
        <AssemblyVersion>3.7.0.0</AssemblyVersion>
        <AssemblyVersion>3.8.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.0.0</AssemblyVersion>
        <AssemblyVersion>3.9.1.0</AssemblyVersion>
        <AssemblyVersion>3.10.1.0</AssemblyVersion>
        <AssemblyVersion>3.11.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.ItemRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="streamPayload">A <see cref="T:System.IO.Stream" /> containing the payload.</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="requestOptions">(Optional) The options for the item request.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Upserts an item stream as an asynchronous operation in the Azure Cosmos service.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which wraps a <see cref="T:System.IO.Stream" /> containing the read resource record.
            </returns>
        <remarks>
            The Stream operation only throws on client side exceptions. 
            This is to increase performance and prevent the overhead of throwing exceptions. 
            Check the HTTP status code on the response to check if the operation failed.
            </remarks>
        <example>
            Upsert a Stream containing the item to Cosmos
            <code language="c#"><![CDATA[
            using(ResponseMessage response = await this.container.UpsertItemStreamAsync(stream, new PartitionKey("itemPartitionKey")))
            {
                if (!response.IsSuccessStatusCode)
                {
                    //Handle and log exception
                    return;
                }
                
                using(Stream stream = response.ReadBodyAsync())
                {
                    //Read or do other operations with the stream
                    using (StreamReader  streamReader = new StreamReader(stream))
                    {
                        string content =  streamReader.ReadToEndAsync();
                    }
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
