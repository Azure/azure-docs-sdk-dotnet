<Type Name="CosmosContainer" FullName="Microsoft.Azure.Cosmos.CosmosContainer">
  <TypeSignature Language="C#" Value="public class CosmosContainer : Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CosmosContainer extends Microsoft.Azure.Cosmos.CosmosIdentifier" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.CosmosContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class CosmosContainer&#xA;Inherits CosmosIdentifier" />
  <TypeSignature Language="F#" Value="type CosmosContainer = class&#xA;    inherit CosmosIdentifier" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Cosmos.CosmosIdentifier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operations for reading, replacing, or deleting a specific, existing cosmosContainer by id.
            
            <see cref="T:Microsoft.Azure.Cosmos.CosmosContainers" /> for creating new containers, and reading/querying all containers;
            </summary>
    <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub linearly with your application.
             For instance, do not call `cosmosContainer(id).read()` before every single `item.read()` call, to ensure the cosmosContainer exists;
             do this once on application start up.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CosmosContainer (Microsoft.Azure.Cosmos.CosmosDatabase database, string containerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.Cosmos.CosmosDatabase database, string containerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.#ctor(Microsoft.Azure.Cosmos.CosmosDatabase,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (database As CosmosDatabase, containerId As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Cosmos.CosmosContainer : Microsoft.Azure.Cosmos.CosmosDatabase * string -&gt; Microsoft.Azure.Cosmos.CosmosContainer" Usage="new Microsoft.Azure.Cosmos.CosmosContainer (database, containerId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="database" Type="Microsoft.Azure.Cosmos.CosmosDatabase" />
        <Parameter Name="containerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="database">The <see cref="T:Microsoft.Azure.Cosmos.CosmosDatabase" /></param>
        <param name="containerId">The cosmos container id.</param>
        <summary>
            Create a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainer" /></summary>
        <remarks>
            Note that the container must be explicitly created, if it does not already exist, before
            you can read from it or write to it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Cosmos.CosmosDatabase Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosDatabase Database" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosContainer.Database" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Database As CosmosDatabase" />
      <MemberSignature Language="F#" Value="member this.Database : Microsoft.Azure.Cosmos.CosmosDatabase" Usage="Microsoft.Azure.Cosmos.CosmosContainer.Database" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosDatabase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the parent database reference
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; DeleteAsync (Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; DeleteAsync(class Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.DeleteAsync(Microsoft.Azure.Cosmos.CosmosContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.DeleteAsync : Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainer.DeleteAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Delete a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> from the Azure Cosmos DB service as an asynchronous operation.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             CosmosContainer cosmosContainer = this.database.Containers["containerId"];
             CosmosContainerResponse response = cosmosContainer.DeleteAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosItems Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosItems Items" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosContainer.Items" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Items As CosmosItems" />
      <MemberSignature Language="F#" Value="member this.Items : Microsoft.Azure.Cosmos.CosmosItems" Usage="Microsoft.Azure.Cosmos.CosmosContainer.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosItems</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Operations for creating new items, and reading/querying all items
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            CosmosItemResponse<MyCustomObject> response = await this.container.Items.CreateItemAsync<MyCustomObject>(user1);
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; ReadAsync (Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; ReadAsync(class Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.ReadAsync(Microsoft.Azure.Cosmos.CosmosContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.ReadAsync : Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainer.ReadAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            CosmosContainer cosmosContainer = this.database.Containers["containerId"];
            CosmosContainerSettings settings = cosmosContainer.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadProvisionedThroughputAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; ReadProvisionedThroughputAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; ReadProvisionedThroughputAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.ReadProvisionedThroughputAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadProvisionedThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;&#xA;override this.ReadProvisionedThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="cosmosContainer.ReadProvisionedThroughputAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service.
            </summary>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            int? throughput = await this.cosmosContainer.ReadProvisionedThroughputAsync();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; ReplaceAsync (Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.CosmosContainerResponse&gt; ReplaceAsync(class Microsoft.Azure.Cosmos.CosmosContainerSettings containerSettings, class Microsoft.Azure.Cosmos.CosmosContainerRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.ReplaceAsync(Microsoft.Azure.Cosmos.CosmosContainerSettings,Microsoft.Azure.Cosmos.CosmosContainerRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;&#xA;override this.ReplaceAsync : Microsoft.Azure.Cosmos.CosmosContainerSettings * Microsoft.Azure.Cosmos.CosmosContainerRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;" Usage="cosmosContainer.ReplaceAsync (containerSettings, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.CosmosContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerSettings" Type="Microsoft.Azure.Cosmos.CosmosContainerSettings" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.CosmosContainerRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerSettings">The <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> object.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Microsoft.Azure.Cosmos.CosmosRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replace a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.CosmosContainerSettings" /> containing the replace resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
            Update the cosmosContainer to disable automatic indexing
            <code language="c#"><![CDATA[
            ContainerSettings setting = containerReadResponse;
            setting.IndexingPolicy.Automatic = false;
            CosmosContainerResponse response = cosmosContainer.ReplaceAsync(setting);
            ContainerSettings settings = response;
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceProvisionedThroughputAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReplaceProvisionedThroughputAsync (int throughput, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReplaceProvisionedThroughputAsync(int32 throughput, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.CosmosContainer.ReplaceProvisionedThroughputAsync(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceProvisionedThroughputAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ReplaceProvisionedThroughputAsync : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="cosmosContainer.ReplaceProvisionedThroughputAsync (throughput, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughput">The cosmos container throughput</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service.
            </summary>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Refer to http://azure.microsoft.com/documentation/articles/documentdb-performance-levels/ for details on provision offer throughput.
            </para>
        </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            int? throughput = await this.cosmosContainer.ReplaceProvisionedThroughputAsync(400);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StoredProcedures">
      <MemberSignature Language="C#" Value="public virtual Microsoft.Azure.Cosmos.CosmosStoredProcedures StoredProcedures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Cosmos.CosmosStoredProcedures StoredProcedures" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Cosmos.CosmosContainer.StoredProcedures" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StoredProcedures As CosmosStoredProcedures" />
      <MemberSignature Language="F#" Value="member this.StoredProcedures : Microsoft.Azure.Cosmos.CosmosStoredProcedures" Usage="Microsoft.Azure.Cosmos.CosmosContainer.StoredProcedures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.CosmosStoredProcedures</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Operations for creating, reading/querying all stored procedures
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
             CosmosStoredProcedureSettings settings = new CosmosStoredProcedureSettings
            {
                Id = "testSProcId",
                Body = "function() { { var x = 42; } }"
            };
            
             CosmosStoredProcedureResponse response = await cosmosContainer.StoredProcedures.CreateStoredProcedureAsync(settings);
             ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>