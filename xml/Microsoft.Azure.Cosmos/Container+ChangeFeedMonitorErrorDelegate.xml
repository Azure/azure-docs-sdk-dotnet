<Type Name="Container+ChangeFeedMonitorErrorDelegate" FullName="Microsoft.Azure.Cosmos.Container+ChangeFeedMonitorErrorDelegate">
  <TypeSignature Language="C#" Value="public delegate System.Threading.Tasks.Task Container.ChangeFeedMonitorErrorDelegate(string leaseToken, Exception exception);" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed Container/ChangeFeedMonitorErrorDelegate extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.Container.ChangeFeedMonitorErrorDelegate" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Container.ChangeFeedMonitorErrorDelegate(leaseToken As String, exception As Exception) As Task " />
  <TypeSignature Language="F#" Value="type Container.ChangeFeedMonitorErrorDelegate = delegate of string * Exception -&gt; Task" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.22.0.0</AssemblyVersion>
    <AssemblyVersion>3.22.1.0</AssemblyVersion>
    <AssemblyVersion>3.23.0.0</AssemblyVersion>
    <AssemblyVersion>3.24.0.0</AssemblyVersion>
    <AssemblyVersion>3.25.0.0</AssemblyVersion>
    <AssemblyVersion>3.26.0.0</AssemblyVersion>
    <AssemblyVersion>3.26.1.0</AssemblyVersion>
    <AssemblyVersion>3.26.2.0</AssemblyVersion>
    <AssemblyVersion>3.27.0.0</AssemblyVersion>
    <AssemblyVersion>3.27.1.0</AssemblyVersion>
    <AssemblyVersion>3.27.2.0</AssemblyVersion>
    <AssemblyVersion>3.28.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="leaseToken" Type="System.String" />
    <Parameter Name="exception" Type="System.Exception" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Threading.Tasks.Task</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="leaseToken">A unique identifier for the lease.</param>
    <param name="exception">The exception that happened.</param>
    <summary>
            Delegate to notify errors during change feed operations.
            </summary>
    <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation that is going to be done with the notification.</returns>
    <remarks>To be added.</remarks>
    <example>
      <code language="c#"><![CDATA[
            (string leaseToken, Exception exception) =>
            {
                if (exception is ChangeFeedProcessorUserException userException)
                {
                    Console.WriteLine($"Current instance's delegate had an unhandled when processing lease {leaseToken}.");
                    Console.WriteLine($"Diagnostics {userException.ExceptionContext.Diagnostics}");
                    Console.WriteLine($"Headers {userException.ExceptionContext.Headers}");
                    Console.WriteLine(userException.ToString());
                }
                else 
                {
                    Console.WriteLine($"Current instance faced an exception when processing lease {leaseToken}.");
                    Console.WriteLine(exception.ToString());
                }
                
                return Task.CompletedTask;
            }
            ]]></code>
    </example>
  </Docs>
</Type>
