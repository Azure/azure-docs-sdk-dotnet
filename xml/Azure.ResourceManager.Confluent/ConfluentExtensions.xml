<Type Name="ConfluentExtensions" FullName="Azure.ResourceManager.Confluent.ConfluentExtensions">
  <TypeSignature Language="C#" Value="public static class ConfluentExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConfluentExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Confluent.ConfluentExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConfluentExtensions" />
  <TypeSignature Language="F#" Value="type ConfluentExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to Azure.ResourceManager.Confluent. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateMarketplaceAgreement">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; CreateMarketplaceAgreement (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Confluent.Models.ConfluentAgreement body = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; CreateMarketplaceAgreement(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Confluent.Models.ConfluentAgreement body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.CreateMarketplaceAgreement(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Confluent.Models.ConfluentAgreement,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMarketplaceAgreement (subscriptionResource As SubscriptionResource, Optional body As ConfluentAgreement = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentAgreement)" />
      <MemberSignature Language="F#" Value="static member CreateMarketplaceAgreement : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Confluent.Models.ConfluentAgreement * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.CreateMarketplaceAgreement (subscriptionResource, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="body" Type="Azure.ResourceManager.Confluent.Models.ConfluentAgreement" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="body"> Confluent Marketplace Agreement resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create Confluent Marketplace agreement in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default</description></item><item><term>Operation Id</term><description>MarketplaceAgreements_Create</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.CreateMarketplaceAgreement(Azure.ResourceManager.Confluent.Models.ConfluentAgreement,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMarketplaceAgreementAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;&gt; CreateMarketplaceAgreementAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Confluent.Models.ConfluentAgreement body = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;&gt; CreateMarketplaceAgreementAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Confluent.Models.ConfluentAgreement body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.CreateMarketplaceAgreementAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Confluent.Models.ConfluentAgreement,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateMarketplaceAgreementAsync (subscriptionResource As SubscriptionResource, Optional body As ConfluentAgreement = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentAgreement))" />
      <MemberSignature Language="F#" Value="static member CreateMarketplaceAgreementAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Confluent.Models.ConfluentAgreement * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.CreateMarketplaceAgreementAsync (subscriptionResource, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="body" Type="Azure.ResourceManager.Confluent.Models.ConfluentAgreement" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="body"> Confluent Marketplace Agreement resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create Confluent Marketplace agreement in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements/default</description></item><item><term>Operation Id</term><description>MarketplaceAgreements_Create</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.CreateMarketplaceAgreement(Azure.ResourceManager.Confluent.Models.ConfluentAgreement,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganization">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganization (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganization(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganization(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganization (resourceGroupResource As ResourceGroupResource, organizationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganization : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganization (resourceGroupResource, organizationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specific Organization resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.GetConfluentOrganization(System.String,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> or <paramref name="organizationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganizationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; GetConfluentOrganizationAsync (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; GetConfluentOrganizationAsync(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganizationAsync (resourceGroupResource As ResourceGroupResource, organizationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganizationAsync : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationAsync (resourceGroupResource, organizationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specific Organization resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.GetConfluentOrganizationAsync(System.String,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> or <paramref name="organizationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganizationResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Confluent.ConfluentOrganizationResource GetConfluentOrganizationResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Confluent.ConfluentOrganizationResource GetConfluentOrganizationResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganizationResource (client As ArmClient, id As ResourceIdentifier) As ConfluentOrganizationResource" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganizationResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Confluent.ConfluentOrganizationResource" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Confluent.ConfluentOrganizationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentArmClient.GetConfluentOrganizationResource(Azure.Core.ResourceIdentifier)" /> instead.</description></item></summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> object. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="client" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganizations">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Confluent.ConfluentOrganizationCollection GetConfluentOrganizations (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Confluent.ConfluentOrganizationCollection GetConfluentOrganizations(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizations(Azure.ResourceManager.Resources.ResourceGroupResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganizations (resourceGroupResource As ResourceGroupResource) As ConfluentOrganizationCollection" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganizations : Azure.ResourceManager.Resources.ResourceGroupResource -&gt; Azure.ResourceManager.Confluent.ConfluentOrganizationCollection" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizations resourceGroupResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Confluent.ConfluentOrganizationCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <summary>
            Gets a collection of ConfluentOrganizationResources in the ResourceGroupResource.
            <item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.GetConfluentOrganizations" /> instead.</description></item></summary>
        <returns> An object representing collection of ConfluentOrganizationResources and their operations over a ConfluentOrganizationResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganizations">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganizations (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganizations(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizations(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganizations (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganizations : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizations (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all organizations under the specified subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations</description></item><item><term>Operation Id</term><description>Organization_ListBySubscription</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.GetConfluentOrganizations(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfluentOrganizationsAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganizationsAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; GetConfluentOrganizationsAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationsAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfluentOrganizationsAsync (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="static member GetConfluentOrganizationsAsync : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetConfluentOrganizationsAsync (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all organizations under the specified subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/organizations</description></item><item><term>Operation Id</term><description>Organization_ListBySubscription</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.GetConfluentOrganizations(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMarketplaceAgreements">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; GetMarketplaceAgreements (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; GetMarketplaceAgreements(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetMarketplaceAgreements(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMarketplaceAgreements (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ConfluentAgreement)" />
      <MemberSignature Language="F#" Value="static member GetMarketplaceAgreements : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetMarketplaceAgreements (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List Confluent marketplace agreements in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements</description></item><item><term>Operation Id</term><description>MarketplaceAgreements_List</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.GetMarketplaceAgreements(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Confluent.Models.ConfluentAgreement" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMarketplaceAgreementsAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; GetMarketplaceAgreementsAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt; GetMarketplaceAgreementsAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.GetMarketplaceAgreementsAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMarketplaceAgreementsAsync (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ConfluentAgreement)" />
      <MemberSignature Language="F#" Value="static member GetMarketplaceAgreementsAsync : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.GetMarketplaceAgreementsAsync (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.ConfluentAgreement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List Confluent marketplace agreements in the subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Confluent/agreements</description></item><item><term>Operation Id</term><description>MarketplaceAgreements_List</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentSubscriptionResource.GetMarketplaceAgreements(System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Confluent.Models.ConfluentAgreement" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionResource" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrganization">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; ValidateOrganization (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, Azure.ResourceManager.Confluent.ConfluentOrganizationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; ValidateOrganization(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, class Azure.ResourceManager.Confluent.ConfluentOrganizationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganization(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ValidateOrganization (resourceGroupResource As ResourceGroupResource, organizationName As String, data As ConfluentOrganizationData, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="static member ValidateOrganization : Azure.ResourceManager.Resources.ResourceGroupResource * string * Azure.ResourceManager.Confluent.ConfluentOrganizationData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganization (resourceGroupResource, organizationName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Confluent.ConfluentOrganizationData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="data"> Organization resource model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization Validate proxy resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate</description></item><item><term>Operation Id</term><description>Validations_ValidateOrganization</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.ValidateOrganization(System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" />, <paramref name="organizationName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrganizationAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; ValidateOrganizationAsync (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, Azure.ResourceManager.Confluent.ConfluentOrganizationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; ValidateOrganizationAsync(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, class Azure.ResourceManager.Confluent.ConfluentOrganizationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ValidateOrganizationAsync (resourceGroupResource As ResourceGroupResource, organizationName As String, data As ConfluentOrganizationData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="static member ValidateOrganizationAsync : Azure.ResourceManager.Resources.ResourceGroupResource * string * Azure.ResourceManager.Confluent.ConfluentOrganizationData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationAsync (resourceGroupResource, organizationName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Confluent.ConfluentOrganizationData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="data"> Organization resource model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization Validate proxy resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate</description></item><item><term>Operation Id</term><description>Validations_ValidateOrganization</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.ValidateOrganization(System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" />, <paramref name="organizationName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrganizationV2">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt; ValidateOrganizationV2 (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, Azure.ResourceManager.Confluent.ConfluentOrganizationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt; ValidateOrganizationV2(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, class Azure.ResourceManager.Confluent.ConfluentOrganizationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationV2(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ValidateOrganizationV2 (resourceGroupResource As ResourceGroupResource, organizationName As String, data As ConfluentOrganizationData, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationValidationResult)" />
      <MemberSignature Language="F#" Value="static member ValidateOrganizationV2 : Azure.ResourceManager.Resources.ResourceGroupResource * string * Azure.ResourceManager.Confluent.ConfluentOrganizationData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationV2 (resourceGroupResource, organizationName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="data" Type="Azure.ResourceManager.Confluent.ConfluentOrganizationData" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="data"> Organization resource model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization Validate proxy resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidateV2</description></item><item><term>Operation Id</term><description>Validations_ValidateOrganizationV2</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.ValidateOrganizationV2(System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" />, <paramref name="organizationName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateOrganizationV2Async">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;&gt; ValidateOrganizationV2Async (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, Azure.ResourceManager.Confluent.ConfluentOrganizationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;&gt; ValidateOrganizationV2Async(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string organizationName, class Azure.ResourceManager.Confluent.ConfluentOrganizationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationV2Async(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ValidateOrganizationV2Async (resourceGroupResource As ResourceGroupResource, organizationName As String, data As ConfluentOrganizationData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationValidationResult))" />
      <MemberSignature Language="F#" Value="static member ValidateOrganizationV2Async : Azure.ResourceManager.Resources.ResourceGroupResource * string * Azure.ResourceManager.Confluent.ConfluentOrganizationData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;&gt;" Usage="Azure.ResourceManager.Confluent.ConfluentExtensions.ValidateOrganizationV2Async (resourceGroupResource, organizationName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentOrganizationValidationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="organizationName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="data" Type="Azure.ResourceManager.Confluent.ConfluentOrganizationData" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="organizationName"> Organization resource name. </param>
        <param name="data"> Organization resource model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization Validate proxy resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidateV2</description></item><item><term>Operation Id</term><description>Validations_ValidateOrganizationV2</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list><item><term>Mocking</term><description>To mock this method, please mock <see cref="M:Azure.ResourceManager.Confluent.Mocking.MockableConfluentResourceGroupResource.ValidateOrganizationV2(System.String,Azure.ResourceManager.Confluent.ConfluentOrganizationData,System.Threading.CancellationToken)" /> instead.</description></item></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="organizationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceGroupResource" />, <paramref name="organizationName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
