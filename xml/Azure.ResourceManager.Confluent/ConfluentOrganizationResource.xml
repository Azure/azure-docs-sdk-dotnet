<Type Name="ConfluentOrganizationResource" FullName="Azure.ResourceManager.Confluent.ConfluentOrganizationResource">
  <TypeSignature Language="C#" Value="public class ConfluentOrganizationResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConfluentOrganizationResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" />
  <TypeSignature Language="VB.NET" Value="Public Class ConfluentOrganizationResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type ConfluentOrganizationResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a ConfluentOrganization along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetConfluentOrganizationResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetConfluentOrganization method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfluentOrganizationResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="confluentOrganizationResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="confluentOrganizationResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessRoleBinding">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt; CreateAccessRoleBinding (Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt; CreateAccessRoleBinding(class Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateAccessRoleBinding(Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAccessRoleBinding (content As AccessRoleBindingCreateContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessRoleBindingRecord)" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessRoleBinding : Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&#xA;override this.CreateAccessRoleBinding : Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;" Usage="confluentOrganizationResource.CreateAccessRoleBinding (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Create role binding Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createRoleBinding</description></item><item><term>Operation Id</term><description>Access_CreateRoleBinding</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessRoleBindingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&gt; CreateAccessRoleBindingAsync (Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&gt; CreateAccessRoleBindingAsync(class Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateAccessRoleBindingAsync(Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAccessRoleBindingAsync (content As AccessRoleBindingCreateContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessRoleBindingRecord))" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessRoleBindingAsync : Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&gt;&#xA;override this.CreateAccessRoleBindingAsync : Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&gt;" Usage="confluentOrganizationResource.CreateAccessRoleBindingAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessRoleBindingCreateContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Create role binding Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createRoleBinding</description></item><item><term>Operation Id</term><description>Access_CreateRoleBinding</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateApiKey">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt; CreateApiKey (string environmentId, string clusterId, Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt; CreateApiKey(string environmentId, string clusterId, class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateApiKey(System.String,System.String,Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateApiKey (environmentId As String, clusterId As String, content As ConfluentApiKeyCreateContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentApiKeyRecord)" />
      <MemberSignature Language="F#" Value="abstract member CreateApiKey : string * string * Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&#xA;override this.CreateApiKey : string * string * Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;" Usage="confluentOrganizationResource.CreateApiKey (environmentId, clusterId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="content"> Request payload for get creating API Key for schema registry Cluster ID or Kafka Cluster ID under a environment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates API key for a schema registry Cluster ID or Kafka Cluster ID under a environment
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/createAPIKey</description></item><item><term>Operation Id</term><description>Organization_CreateAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" />, <paramref name="clusterId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateApiKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt; CreateApiKeyAsync (string environmentId, string clusterId, Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt; CreateApiKeyAsync(string environmentId, string clusterId, class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateApiKeyAsync(System.String,System.String,Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateApiKeyAsync (environmentId As String, clusterId As String, content As ConfluentApiKeyCreateContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentApiKeyRecord))" />
      <MemberSignature Language="F#" Value="abstract member CreateApiKeyAsync : string * string * Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;&#xA;override this.CreateApiKeyAsync : string * string * Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;" Usage="confluentOrganizationResource.CreateApiKeyAsync (environmentId, clusterId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.ConfluentApiKeyCreateContent" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="content"> Request payload for get creating API Key for schema registry Cluster ID or Kafka Cluster ID under a environment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates API key for a schema registry Cluster ID or Kafka Cluster ID under a environment
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/createAPIKey</description></item><item><term>Operation Id</term><description>Organization_CreateAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" />, <paramref name="clusterId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string organizationName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string organizationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateResourceIdentifier(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, organizationName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.Confluent.ConfluentOrganizationResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, organizationName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="organizationName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The subscriptionId. </param>
        <param name="resourceGroupName"> The resourceGroupName. </param>
        <param name="organizationName"> The organizationName. </param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Confluent.ConfluentOrganizationData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.Confluent.ConfluentOrganizationData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As ConfluentOrganizationData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.Confluent.ConfluentOrganizationData" Usage="Azure.ResourceManager.Confluent.ConfluentOrganizationResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Confluent.ConfluentOrganizationData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="confluentOrganizationResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete Organization resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Delete</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAccessRoleBinding">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteAccessRoleBinding (string roleBindingId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteAccessRoleBinding(string roleBindingId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.DeleteAccessRoleBinding(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAccessRoleBinding (roleBindingId As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteAccessRoleBinding : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteAccessRoleBinding : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="confluentOrganizationResource.DeleteAccessRoleBinding (roleBindingId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleBindingId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="roleBindingId"> Confluent Role binding id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/deleteRoleBinding/{roleBindingId}</description></item><item><term>Operation Id</term><description>Access_DeleteRoleBinding</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleBindingId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleBindingId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAccessRoleBindingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAccessRoleBindingAsync (string roleBindingId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAccessRoleBindingAsync(string roleBindingId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.DeleteAccessRoleBindingAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAccessRoleBindingAsync (roleBindingId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAccessRoleBindingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAccessRoleBindingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confluentOrganizationResource.DeleteAccessRoleBindingAsync (roleBindingId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleBindingId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="roleBindingId"> Confluent Role binding id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/deleteRoleBinding/{roleBindingId}</description></item><item><term>Operation Id</term><description>Access_DeleteRoleBinding</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleBindingId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleBindingId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="confluentOrganizationResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete Organization resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Delete</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteClusterApiKey">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteClusterApiKey (string apiKeyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteClusterApiKey(string apiKeyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.DeleteClusterApiKey(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClusterApiKey (apiKeyId As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteClusterApiKey : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteClusterApiKey : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="confluentOrganizationResource.DeleteClusterApiKey (apiKeyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiKeyId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="apiKeyId"> Confluent API Key id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes API key of a kafka or schema registry cluster
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}</description></item><item><term>Operation Id</term><description>Organization_DeleteClusterAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="apiKeyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="apiKeyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClusterApiKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteClusterApiKeyAsync (string apiKeyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteClusterApiKeyAsync(string apiKeyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.DeleteClusterApiKeyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClusterApiKeyAsync (apiKeyId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteClusterApiKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteClusterApiKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confluentOrganizationResource.DeleteClusterApiKeyAsync (apiKeyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiKeyId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="apiKeyId"> Confluent API Key id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes API key of a kafka or schema registry cluster
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}</description></item><item><term>Operation Id</term><description>Organization_DeleteClusterAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="apiKeyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="apiKeyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="confluentOrganizationResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specific Organization resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessClusters">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt; GetAccessClusters (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt; GetAccessClusters(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessClusters(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessClusters (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessClusterListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessClusters : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&#xA;override this.GetAccessClusters : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;" Usage="confluentOrganizationResource.GetAccessClusters (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cluster details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters</description></item><item><term>Operation Id</term><description>Access_ListClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessClustersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&gt; GetAccessClustersAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&gt; GetAccessClustersAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessClustersAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessClustersAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessClusterListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessClustersAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&gt;&#xA;override this.GetAccessClustersAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessClustersAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessClusterListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cluster details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters</description></item><item><term>Operation Id</term><description>Access_ListClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessEnvironments">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt; GetAccessEnvironments (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt; GetAccessEnvironments(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessEnvironments(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessEnvironments (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessEnvironmentListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessEnvironments : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&#xA;override this.GetAccessEnvironments : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;" Usage="confluentOrganizationResource.GetAccessEnvironments (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Environment list of an organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments</description></item><item><term>Operation Id</term><description>Access_ListEnvironments</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessEnvironmentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&gt; GetAccessEnvironmentsAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&gt; GetAccessEnvironmentsAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessEnvironmentsAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessEnvironmentsAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessEnvironmentListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessEnvironmentsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&gt;&#xA;override this.GetAccessEnvironmentsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessEnvironmentsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessEnvironmentListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Environment list of an organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments</description></item><item><term>Operation Id</term><description>Access_ListEnvironments</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessInvitations">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt; GetAccessInvitations (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt; GetAccessInvitations(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessInvitations(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessInvitations (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessInvitationListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessInvitations : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&#xA;override this.GetAccessInvitations : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;" Usage="confluentOrganizationResource.GetAccessInvitations (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization accounts invitation details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations</description></item><item><term>Operation Id</term><description>Access_ListInvitations</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessInvitationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&gt; GetAccessInvitationsAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&gt; GetAccessInvitationsAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessInvitationsAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessInvitationsAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessInvitationListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessInvitationsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&gt;&#xA;override this.GetAccessInvitationsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessInvitationsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization accounts invitation details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations</description></item><item><term>Operation Id</term><description>Access_ListInvitations</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessRoleBindingNames">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt; GetAccessRoleBindingNames (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt; GetAccessRoleBindingNames(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessRoleBindingNames(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessRoleBindingNames (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessRoleBindingNameListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessRoleBindingNames : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&#xA;override this.GetAccessRoleBindingNames : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;" Usage="confluentOrganizationResource.GetAccessRoleBindingNames (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindingNameList</description></item><item><term>Operation Id</term><description>Access_ListRoleBindingNameList</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessRoleBindingNamesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&gt; GetAccessRoleBindingNamesAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&gt; GetAccessRoleBindingNamesAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessRoleBindingNamesAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessRoleBindingNamesAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessRoleBindingNameListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessRoleBindingNamesAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&gt;&#xA;override this.GetAccessRoleBindingNamesAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessRoleBindingNamesAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingNameListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindingNameList</description></item><item><term>Operation Id</term><description>Access_ListRoleBindingNameList</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessRoleBindings">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt; GetAccessRoleBindings (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt; GetAccessRoleBindings(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessRoleBindings(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessRoleBindings (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessRoleBindingListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessRoleBindings : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&#xA;override this.GetAccessRoleBindings : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;" Usage="confluentOrganizationResource.GetAccessRoleBindings (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings</description></item><item><term>Operation Id</term><description>Access_ListRoleBindings</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessRoleBindingsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&gt; GetAccessRoleBindingsAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&gt; GetAccessRoleBindingsAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessRoleBindingsAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessRoleBindingsAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessRoleBindingListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessRoleBindingsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&gt;&#xA;override this.GetAccessRoleBindingsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessRoleBindingsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessRoleBindingListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization role bindings
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings</description></item><item><term>Operation Id</term><description>Access_ListRoleBindings</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessServiceAccounts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt; GetAccessServiceAccounts (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt; GetAccessServiceAccounts(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessServiceAccounts(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessServiceAccounts (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessServiceAccountListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessServiceAccounts : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&#xA;override this.GetAccessServiceAccounts : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;" Usage="confluentOrganizationResource.GetAccessServiceAccounts (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization service accounts details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts</description></item><item><term>Operation Id</term><description>Access_ListServiceAccounts</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessServiceAccountsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&gt; GetAccessServiceAccountsAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&gt; GetAccessServiceAccountsAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessServiceAccountsAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessServiceAccountsAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessServiceAccountListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessServiceAccountsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&gt;&#xA;override this.GetAccessServiceAccountsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessServiceAccountsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessServiceAccountListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization service accounts details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts</description></item><item><term>Operation Id</term><description>Access_ListServiceAccounts</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessUsers">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt; GetAccessUsers (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt; GetAccessUsers(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessUsers(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessUsers (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessUserListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessUsers : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&#xA;override this.GetAccessUsers : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;" Usage="confluentOrganizationResource.GetAccessUsers (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization users details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers</description></item><item><term>Operation Id</term><description>Access_ListUsers</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAccessUsersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&gt; GetAccessUsersAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&gt; GetAccessUsersAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAccessUsersAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessUsersAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessUserListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessUsersAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&gt;&#xA;override this.GetAccessUsersAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&gt;" Usage="confluentOrganizationResource.GetAccessUsersAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessUserListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Organization users details
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers</description></item><item><term>Operation Id</term><description>Access_ListUsers</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="confluentOrganizationResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specific Organization resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCluster">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetCluster (string environmentId, string clusterId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetCluster(string environmentId, string clusterId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetCluster(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCluster (environmentId As String, clusterId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SCClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetCluster : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&#xA;override this.GetCluster : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;" Usage="confluentOrganizationResource.GetCluster (environmentId, clusterId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get cluster by Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}</description></item><item><term>Operation Id</term><description>Organization_GetClusterById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterApiKey">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt; GetClusterApiKey (string apiKeyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt; GetClusterApiKey(string apiKeyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetClusterApiKey(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClusterApiKey (apiKeyId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentApiKeyRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetClusterApiKey : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&#xA;override this.GetClusterApiKey : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;" Usage="confluentOrganizationResource.GetClusterApiKey (apiKeyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiKeyId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="apiKeyId"> Confluent API Key id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get API key details of a kafka or schema registry cluster
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}</description></item><item><term>Operation Id</term><description>Organization_GetClusterAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="apiKeyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="apiKeyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterApiKeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt; GetClusterApiKeyAsync (string apiKeyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt; GetClusterApiKeyAsync(string apiKeyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetClusterApiKeyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClusterApiKeyAsync (apiKeyId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentApiKeyRecord))" />
      <MemberSignature Language="F#" Value="abstract member GetClusterApiKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;&#xA;override this.GetClusterApiKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;" Usage="confluentOrganizationResource.GetClusterApiKeyAsync (apiKeyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentApiKeyRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="apiKeyId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="apiKeyId"> Confluent API Key id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get API key details of a kafka or schema registry cluster
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/apiKeys/{apiKeyId}</description></item><item><term>Operation Id</term><description>Organization_GetClusterAPIKey</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="apiKeyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="apiKeyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&gt; GetClusterAsync (string environmentId, string clusterId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&gt; GetClusterAsync(string environmentId, string clusterId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetClusterAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClusterAsync (environmentId As String, clusterId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SCClusterRecord))" />
      <MemberSignature Language="F#" Value="abstract member GetClusterAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&gt;&#xA;override this.GetClusterAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&gt;" Usage="confluentOrganizationResource.GetClusterAsync (environmentId, clusterId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get cluster by Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}</description></item><item><term>Operation Id</term><description>Organization_GetClusterById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusters">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetClusters (string environmentId, int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetClusters(string environmentId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetClusters(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClusters (environmentId As String, Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SCClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetClusters : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&#xA;override this.GetClusters : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;" Usage="confluentOrganizationResource.GetClusters (environmentId, pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists of all the clusters in a environment
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters</description></item><item><term>Operation Id</term><description>Organization_ListClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SCClusterRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClustersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetClustersAsync (string environmentId, int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt; GetClustersAsync(string environmentId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetClustersAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClustersAsync (environmentId As String, Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SCClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetClustersAsync : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;&#xA;override this.GetClustersAsync : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;" Usage="confluentOrganizationResource.GetClustersAsync (environmentId, pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists of all the clusters in a environment
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters</description></item><item><term>Operation Id</term><description>Organization_ListClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SCClusterRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironment (string environmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironment(string environmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetEnvironment(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironment (environmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SCEnvironmentRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&#xA;override this.GetEnvironment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;" Usage="confluentOrganizationResource.GetEnvironment (environmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Environment details by environment Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}</description></item><item><term>Operation Id</term><description>Organization_GetEnvironmentById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&gt; GetEnvironmentAsync (string environmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&gt; GetEnvironmentAsync(string environmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetEnvironmentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentAsync (environmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SCEnvironmentRecord))" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&gt;&#xA;override this.GetEnvironmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&gt;" Usage="confluentOrganizationResource.GetEnvironmentAsync (environmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Environment details by environment Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}</description></item><item><term>Operation Id</term><description>Organization_GetEnvironmentById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironments">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironments (int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironments(valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetEnvironments(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironments (Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SCEnvironmentRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironments : Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&#xA;override this.GetEnvironments : Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;" Usage="confluentOrganizationResource.GetEnvironments (pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists of all the environments in a organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments</description></item><item><term>Operation Id</term><description>Organization_ListEnvironments</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironmentsAsync (int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt; GetEnvironmentsAsync(valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetEnvironmentsAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnvironmentsAsync (Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SCEnvironmentRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetEnvironmentsAsync : Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;&#xA;override this.GetEnvironmentsAsync : Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;" Usage="confluentOrganizationResource.GetEnvironmentsAsync (pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists of all the environments in a organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments</description></item><item><term>Operation Id</term><description>Organization_ListEnvironments</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SCEnvironmentRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegions">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt; GetRegions (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt; GetRegions(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetRegions(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegions (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentRegionListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetRegions : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&#xA;override this.GetRegions : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;" Usage="confluentOrganizationResource.GetRegions (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            cloud provider regions available for creating Schema Registry clusters.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/listRegions</description></item><item><term>Operation Id</term><description>Organization_ListRegions</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&gt; GetRegionsAsync (Azure.ResourceManager.Confluent.Models.AccessListContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&gt; GetRegionsAsync(class Azure.ResourceManager.Confluent.Models.AccessListContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetRegionsAsync(Azure.ResourceManager.Confluent.Models.AccessListContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegionsAsync (content As AccessListContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentRegionListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetRegionsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&gt;&#xA;override this.GetRegionsAsync : Azure.ResourceManager.Confluent.Models.AccessListContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&gt;" Usage="confluentOrganizationResource.GetRegionsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.ConfluentRegionListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessListContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> List Access Request Model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            cloud provider regions available for creating Schema Registry clusters.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/listRegions</description></item><item><term>Operation Id</term><description>Organization_ListRegions</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaRegistryCluster">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryCluster (string environmentId, string clusterId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryCluster(string environmentId, string clusterId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetSchemaRegistryCluster(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchemaRegistryCluster (environmentId As String, clusterId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SchemaRegistryClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaRegistryCluster : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&#xA;override this.GetSchemaRegistryCluster : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;" Usage="confluentOrganizationResource.GetSchemaRegistryCluster (environmentId, clusterId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get schema registry cluster by Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters/{clusterId}</description></item><item><term>Operation Id</term><description>Organization_GetSchemaRegistryClusterById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaRegistryClusterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&gt; GetSchemaRegistryClusterAsync (string environmentId, string clusterId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&gt; GetSchemaRegistryClusterAsync(string environmentId, string clusterId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetSchemaRegistryClusterAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchemaRegistryClusterAsync (environmentId As String, clusterId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SchemaRegistryClusterRecord))" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaRegistryClusterAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&gt;&#xA;override this.GetSchemaRegistryClusterAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&gt;" Usage="confluentOrganizationResource.GetSchemaRegistryClusterAsync (environmentId, clusterId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="clusterId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="clusterId"> Confluent kafka or schema registry cluster id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get schema registry cluster by Id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters/{clusterId}</description></item><item><term>Operation Id</term><description>Organization_GetSchemaRegistryClusterById</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> or <paramref name="clusterId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaRegistryClusters">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryClusters (string environmentId, int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryClusters(string environmentId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetSchemaRegistryClusters(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchemaRegistryClusters (environmentId As String, Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SchemaRegistryClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaRegistryClusters : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&#xA;override this.GetSchemaRegistryClusters : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;" Usage="confluentOrganizationResource.GetSchemaRegistryClusters (environmentId, pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get schema registry clusters
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters</description></item><item><term>Operation Id</term><description>Organization_ListSchemaRegistryClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaRegistryClustersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryClustersAsync (string environmentId, int? pageSize = default, string pageToken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt; GetSchemaRegistryClustersAsync(string environmentId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string pageToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.GetSchemaRegistryClustersAsync(System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchemaRegistryClustersAsync (environmentId As String, Optional pageSize As Nullable(Of Integer) = Nothing, Optional pageToken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SchemaRegistryClusterRecord)" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaRegistryClustersAsync : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;&#xA;override this.GetSchemaRegistryClustersAsync : string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;" Usage="confluentOrganizationResource.GetSchemaRegistryClustersAsync (environmentId, pageSize, pageToken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="environmentId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="pageToken" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="environmentId"> Confluent environment id. </param>
        <param name="pageSize"> Pagination size. </param>
        <param name="pageToken"> An opaque pagination token to fetch the next set of records. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get schema registry clusters
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/schemaRegistryClusters</description></item><item><term>Operation Id</term><description>Organization_ListSchemaRegistryClusters</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Confluent.Models.SchemaRegistryClusterRecord" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="environmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="environmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.Confluent.ConfluentOrganizationResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InviteUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt; InviteUser (Azure.ResourceManager.Confluent.Models.AccessInvitationContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt; InviteUser(class Azure.ResourceManager.Confluent.Models.AccessInvitationContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.InviteUser(Azure.ResourceManager.Confluent.Models.AccessInvitationContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InviteUser (content As AccessInvitationContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AccessInvitationRecord)" />
      <MemberSignature Language="F#" Value="abstract member InviteUser : Azure.ResourceManager.Confluent.Models.AccessInvitationContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&#xA;override this.InviteUser : Azure.ResourceManager.Confluent.Models.AccessInvitationContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;" Usage="confluentOrganizationResource.InviteUser (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessInvitationContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Invite user account model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Invite user to the organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation</description></item><item><term>Operation Id</term><description>Access_InviteUser</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="InviteUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&gt; InviteUserAsync (Azure.ResourceManager.Confluent.Models.AccessInvitationContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&gt; InviteUserAsync(class Azure.ResourceManager.Confluent.Models.AccessInvitationContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.InviteUserAsync(Azure.ResourceManager.Confluent.Models.AccessInvitationContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InviteUserAsync (content As AccessInvitationContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AccessInvitationRecord))" />
      <MemberSignature Language="F#" Value="abstract member InviteUserAsync : Azure.ResourceManager.Confluent.Models.AccessInvitationContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&gt;&#xA;override this.InviteUserAsync : Azure.ResourceManager.Confluent.Models.AccessInvitationContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&gt;" Usage="confluentOrganizationResource.InviteUserAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.Models.AccessInvitationRecord&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Confluent.Models.AccessInvitationContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Invite user account model. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Invite user to the organization
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation</description></item><item><term>Operation Id</term><description>Access_InviteUser</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="confluentOrganizationResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="confluentOrganizationResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.Confluent.ConfluentOrganizationResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="confluentOrganizationResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="confluentOrganizationResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Get</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; Update (Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt; Update(class Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.Update(Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (patch As ConfluentOrganizationPatch, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfluentOrganizationResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&#xA;override this.Update : Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;" Usage="confluentOrganizationResource.Update (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> Updated Organization resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update Organization resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Update</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; UpdateAsync (Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt; UpdateAsync(class Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Confluent.ConfluentOrganizationResource.UpdateAsync(Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (patch As ConfluentOrganizationPatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfluentOrganizationResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;" Usage="confluentOrganizationResource.UpdateAsync (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Confluent</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Confluent.ConfluentOrganizationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.Confluent.Models.ConfluentOrganizationPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> Updated Organization resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update Organization resource
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}</description></item><item><term>Operation Id</term><description>Organization_Update</description></item><item><term>Default Api Version</term><description>2024-02-13</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Confluent.ConfluentOrganizationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
