<Type Name="MediaOutputFile" FullName="Azure.ResourceManager.Media.Models.MediaOutputFile">
  <TypeSignature Language="C#" Value="public class MediaOutputFile" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MediaOutputFile extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Media.Models.MediaOutputFile" />
  <TypeSignature Language="VB.NET" Value="Public Class MediaOutputFile" />
  <TypeSignature Language="F#" Value="type MediaOutputFile = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Media</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Represents an output file produced. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MediaOutputFile (System.Collections.Generic.IEnumerable&lt;string&gt; labels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; labels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Media.Models.MediaOutputFile.#ctor(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (labels As IEnumerable(Of String))" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.Media.Models.MediaOutputFile : seq&lt;string&gt; -&gt; Azure.ResourceManager.Media.Models.MediaOutputFile" Usage="new Azure.ResourceManager.Media.Models.MediaOutputFile labels" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Media</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="labels" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="labels"> The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1. </param>
        <summary> Initializes a new instance of MediaOutputFile. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="labels" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Labels">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Labels { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Labels" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Media.Models.MediaOutputFile.Labels" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Labels As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Labels : System.Collections.Generic.IList&lt;string&gt;" Usage="Azure.ResourceManager.Media.Models.MediaOutputFile.Labels" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Media</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The list of labels that describe how the encoder should multiplex video and audio into an output file. For example, if the encoder is producing two video layers with labels v1 and v2, and one audio layer with label a1, then an array like '[v1, a1]' tells the encoder to produce an output file with the video track represented by v1 and the audio track represented by a1. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
