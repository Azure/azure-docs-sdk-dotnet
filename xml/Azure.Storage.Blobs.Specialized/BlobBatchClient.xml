<Type Name="BlobBatchClient" FullName="Azure.Storage.Blobs.Specialized.BlobBatchClient">
  <TypeSignature Language="C#" Value="public class BlobBatchClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobBatchClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobBatchClient" />
  <TypeSignature Language="F#" Value="type BlobBatchClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
    <AssemblyVersion>12.1.0.0</AssemblyVersion>
    <AssemblyVersion>12.1.1.0</AssemblyVersion>
    <AssemblyVersion>12.2.0.0</AssemblyVersion>
    <AssemblyVersion>12.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" /> allows you to batch multiple Azure
            Storage operations in a single request.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobBatchClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobBatchClient (Azure.Storage.Blobs.BlobServiceClient client);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Storage.Blobs.BlobServiceClient client) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.#ctor(Azure.Storage.Blobs.BlobServiceClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (client As BlobServiceClient)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.Specialized.BlobBatchClient : Azure.Storage.Blobs.BlobServiceClient -&gt; Azure.Storage.Blobs.Specialized.BlobBatchClient" Usage="new Azure.Storage.Blobs.Specialized.BlobBatchClient client" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobServiceClient" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobServiceClient" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" />
            class for the same account as the <see cref="T:Azure.Storage.Blobs.BlobServiceClient" />.
            The new <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatchClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Blobs.BlobServiceClient" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Blobs.Specialized.BlobBatch CreateBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Blobs.Specialized.BlobBatch CreateBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.CreateBatch" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateBatch () As BlobBatch" />
      <MemberSignature Language="F#" Value="abstract member CreateBatch : unit -&gt; Azure.Storage.Blobs.Specialized.BlobBatch&#xA;override this.CreateBatch : unit -&gt; Azure.Storage.Blobs.Specialized.BlobBatch" Usage="blobBatchClient.CreateBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.Specialized.BlobBatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a new <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> to collect sub-operations
            that can be submitted together via <see cref="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatch(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Response[] DeleteBlobs (System.Collections.Generic.IEnumerable&lt;Uri&gt; blobUris, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response[] DeleteBlobs(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; blobUris, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.DeleteBlobs(System.Collections.Generic.IEnumerable{System.Uri},Azure.Storage.Blobs.Models.DeleteSnapshotsOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobs (blobUris As IEnumerable(Of Uri), Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional cancellationToken As CancellationToken = Nothing) As Response()" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobs : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * System.Threading.CancellationToken -&gt; Azure.Response[]&#xA;override this.DeleteBlobs : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * System.Threading.CancellationToken -&gt; Azure.Response[]" Usage="blobBatchClient.DeleteBlobs (blobUris, snapshotsOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUris" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <param name="blobUris">URIs of the blobs to delete.</param>
        <param name="snapshotsOption">
            Specifies options for deleting blob snapshots.
            </param>
        <summary>
            The DeleteBlobs operation marks the specified blobs for deletion.
            The blobs are later deleted during garbage collection.  All of the
            deletions are sent as a single batched request.
            </summary>
        <returns>
            The <see cref="T:Azure.Response" />s for the individual Delete operations.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response[]&gt; DeleteBlobsAsync (System.Collections.Generic.IEnumerable&lt;Uri&gt; blobUris, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response[]&gt; DeleteBlobsAsync(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; blobUris, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.DeleteBlobsAsync(System.Collections.Generic.IEnumerable{System.Uri},Azure.Storage.Blobs.Models.DeleteSnapshotsOption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobsAsync (blobUris As IEnumerable(Of Uri), Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response())" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobsAsync : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response[]&gt;&#xA;override this.DeleteBlobsAsync : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response[]&gt;" Usage="blobBatchClient.DeleteBlobsAsync (blobUris, snapshotsOption, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUris" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <param name="blobUris">URIs of the blobs to delete.</param>
        <param name="snapshotsOption">
            Specifies options for deleting blob snapshots.
            </param>
        <summary>
            The DeleteBlobsAsync operation marks the specified blobs for
            deletion.  The blobs are later deleted during garbage collection.
            All of the deletions are sent as a single batched request.
            </summary>
        <returns>
            The <see cref="T:Azure.Response" />s for the individual Delete operations.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlobsAccessTier">
      <MemberSignature Language="C#" Value="public virtual Azure.Response[] SetBlobsAccessTier (System.Collections.Generic.IEnumerable&lt;Uri&gt; blobUris, Azure.Storage.Blobs.Models.AccessTier accessTier, Azure.Storage.Blobs.Models.RehydratePriority? rehydratePriority = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response[] SetBlobsAccessTier(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; blobUris, valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SetBlobsAccessTier(System.Collections.Generic.IEnumerable{System.Uri},Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetBlobsAccessTier (blobUris As IEnumerable(Of Uri), accessTier As AccessTier, Optional rehydratePriority As Nullable(Of RehydratePriority) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response()" />
      <MemberSignature Language="F#" Value="abstract member SetBlobsAccessTier : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * System.Threading.CancellationToken -&gt; Azure.Response[]&#xA;override this.SetBlobsAccessTier : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * System.Threading.CancellationToken -&gt; Azure.Response[]" Usage="blobBatchClient.SetBlobsAccessTier (blobUris, accessTier, rehydratePriority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUris" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="rehydratePriority" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobUris">URIs of the blobs to set the tiers of.</param>
        <param name="accessTier">
            Indicates the tier to be set on the blobs.
            </param>
        <param name="rehydratePriority">
            Optional <see cref="T:Azure.Storage.Blobs.Models.RehydratePriority" />
            Indicates the priority with which to rehydrate an archived blob.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            The SetBlobsAccessTier operation sets the tier on blobs.  The
            operation is allowed on block blobs in a blob storage or general
            purpose v2 account.
            </summary>
        <returns>
            The <see cref="T:Azure.Response" />s for the individual Set Tier operations.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlobsAccessTierAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response[]&gt; SetBlobsAccessTierAsync (System.Collections.Generic.IEnumerable&lt;Uri&gt; blobUris, Azure.Storage.Blobs.Models.AccessTier accessTier, Azure.Storage.Blobs.Models.RehydratePriority? rehydratePriority = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response[]&gt; SetBlobsAccessTierAsync(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; blobUris, valuetype Azure.Storage.Blobs.Models.AccessTier accessTier, valuetype System.Nullable`1&lt;valuetype Azure.Storage.Blobs.Models.RehydratePriority&gt; rehydratePriority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SetBlobsAccessTierAsync(System.Collections.Generic.IEnumerable{System.Uri},Azure.Storage.Blobs.Models.AccessTier,System.Nullable{Azure.Storage.Blobs.Models.RehydratePriority},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetBlobsAccessTierAsync (blobUris As IEnumerable(Of Uri), accessTier As AccessTier, Optional rehydratePriority As Nullable(Of RehydratePriority) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response())" />
      <MemberSignature Language="F#" Value="abstract member SetBlobsAccessTierAsync : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response[]&gt;&#xA;override this.SetBlobsAccessTierAsync : seq&lt;Uri&gt; * Azure.Storage.Blobs.Models.AccessTier * Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response[]&gt;" Usage="blobBatchClient.SetBlobsAccessTierAsync (blobUris, accessTier, rehydratePriority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUris" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="accessTier" Type="Azure.Storage.Blobs.Models.AccessTier" />
        <Parameter Name="rehydratePriority" Type="System.Nullable&lt;Azure.Storage.Blobs.Models.RehydratePriority&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobUris">URIs of the blobs to set the tiers of.</param>
        <param name="accessTier">
            Indicates the tier to be set on the blobs.
            </param>
        <param name="rehydratePriority">
            Optional <see cref="T:Azure.Storage.Blobs.Models.RehydratePriority" />
            Indicates the priority with which to rehydrate an archived blob.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            The SetBlobsAccessTierAsync operation sets the tier on blobs.  The
            operation is allowed on block blobs in a blob storage or general
            purpose v2 account.
            </summary>
        <returns>
            The <see cref="T:Azure.Response" />s for the individual Set Tier operations.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SubmitBatch (Azure.Storage.Blobs.Specialized.BlobBatch batch, bool throwOnAnyFailure = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SubmitBatch(class Azure.Storage.Blobs.Specialized.BlobBatch batch, bool throwOnAnyFailure, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatch(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitBatch (batch As BlobBatch, Optional throwOnAnyFailure As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SubmitBatch : Azure.Storage.Blobs.Specialized.BlobBatch * bool * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.SubmitBatch : Azure.Storage.Blobs.Specialized.BlobBatch * bool * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobBatchClient.SubmitBatch (batch, throwOnAnyFailure, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Storage.Blobs.Specialized.BlobBatch" />
        <Parameter Name="throwOnAnyFailure" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="batch">
            A <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> of sub-operations.
            </param>
        <param name="throwOnAnyFailure">
            A value indicating whether or not to throw exceptions for
            sub-operation failures.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            Submit a <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> of sub-operations.
            </summary>
        <returns>
            A <see cref="T:Azure.Response" /> on successfully submitting.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will only throw if <paramref name="throwOnAnyFailure" /> is
            true and be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SubmitBatchAsync (Azure.Storage.Blobs.Specialized.BlobBatch batch, bool throwOnAnyFailure = false, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SubmitBatchAsync(class Azure.Storage.Blobs.Specialized.BlobBatch batch, bool throwOnAnyFailure, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.Specialized.BlobBatchClient.SubmitBatchAsync(Azure.Storage.Blobs.Specialized.BlobBatch,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitBatchAsync (batch As BlobBatch, Optional throwOnAnyFailure As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SubmitBatchAsync : Azure.Storage.Blobs.Specialized.BlobBatch * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SubmitBatchAsync : Azure.Storage.Blobs.Specialized.BlobBatch * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobBatchClient.SubmitBatchAsync (batch, throwOnAnyFailure, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Storage.Blobs.Specialized.BlobBatch" />
        <Parameter Name="throwOnAnyFailure" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="batch">
            A <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> of sub-operations.
            </param>
        <param name="throwOnAnyFailure">
            A value indicating whether or not to throw exceptions for
            sub-operation failures.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            Submit a <see cref="T:Azure.Storage.Blobs.Specialized.BlobBatch" /> of sub-operations.
            </summary>
        <returns>
            A <see cref="T:Azure.Response" /> on successfully submitting.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure to submit the batch occurs.  Individual sub-operation
            failures will only throw if <paramref name="throwOnAnyFailure" /> is
            true and be wrapped in an <see cref="T:System.AggregateException" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public virtual Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.Specialized.BlobBatchClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Blobs.Specialized.BlobBatchClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs.Batch</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the blob service's primary <see cref="P:Azure.Storage.Blobs.Specialized.BlobBatchClient.Uri" /> endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
