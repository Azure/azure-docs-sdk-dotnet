<Type Name="SentSharesClient" FullName="Azure.Analytics.Purview.Sharing.SentSharesClient">
  <TypeSignature Language="C#" Value="public class SentSharesClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SentSharesClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Sharing.SentSharesClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SentSharesClient" />
  <TypeSignature Language="F#" Value="type SentSharesClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The SentShares service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SentSharesClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of SentSharesClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SentSharesClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Sharing.SentSharesClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Sharing.SentSharesClient" Usage="new Azure.Analytics.Purview.Sharing.SentSharesClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The sharing endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of SentSharesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SentSharesClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Sharing.PurviewShareClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Sharing.PurviewShareClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Analytics.Purview.Sharing.PurviewShareClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As PurviewShareClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Sharing.SentSharesClient : Uri * Azure.Core.TokenCredential * Azure.Analytics.Purview.Sharing.PurviewShareClientOptions -&gt; Azure.Analytics.Purview.Sharing.SentSharesClient" Usage="new Azure.Analytics.Purview.Sharing.SentSharesClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Sharing.PurviewShareClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The sharing endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of SentSharesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceSentShare">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateOrReplaceSentShare (Azure.WaitUntil waitUntil, string sentShareId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateOrReplaceSentShare(valuetype Azure.WaitUntil waitUntil, string sentShareId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.CreateOrReplaceSentShare(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceSentShare (waitUntil As WaitUntil, sentShareId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceSentShare : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateOrReplaceSentShare : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="sentSharesClient.CreateOrReplaceSentShare (waitUntil, sentShareId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create or replace a sent share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Create or replace a sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details>

Response Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrReplaceSentShare and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        artifact = new
        {
            properties = new
            {
                paths = new object[]
                {
                    new
                    {
                        containerName = "<containerName>",
                    }
                },
            },
            storeKind = "AdlsGen2Account",
            storeReference = new object(),
        },
        displayName = "<displayName>",
    },
    shareKind = "InPlace",
});
Operation<BinaryData> operation = client.CreateOrReplaceSentShare(WaitUntil.Completed, "<sentShareId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
]]></code>
This sample shows how to call CreateOrReplaceSentShare with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        artifact = new
        {
            properties = new
            {
                paths = new object[]
                {
                    new
                    {
                        containerName = "<containerName>",
                        receiverPath = "<receiverPath>",
                        senderPath = "<senderPath>",
                    }
                },
            },
            storeKind = "AdlsGen2Account",
            storeReference = new
            {
                referenceName = "<referenceName>",
                type = "ArmResourceReference",
            },
        },
        description = "<description>",
        displayName = "<displayName>",
    },
    shareKind = "InPlace",
});
Operation<BinaryData> operation = client.CreateOrReplaceSentShare(WaitUntil.Completed, "<sentShareId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrReplaceSentShareAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateOrReplaceSentShareAsync (Azure.WaitUntil waitUntil, string sentShareId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateOrReplaceSentShareAsync(valuetype Azure.WaitUntil waitUntil, string sentShareId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.CreateOrReplaceSentShareAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrReplaceSentShareAsync (waitUntil As WaitUntil, sentShareId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrReplaceSentShareAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateOrReplaceSentShareAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="sentSharesClient.CreateOrReplaceSentShareAsync (waitUntil, sentShareId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create or replace a sent share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Create or replace a sent share

Below is the JSON schema for the request and response payloads.

Request Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details>

Response Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrReplaceSentShareAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        artifact = new
        {
            properties = new
            {
                paths = new object[]
                {
                    new
                    {
                        containerName = "<containerName>",
                    }
                },
            },
            storeKind = "AdlsGen2Account",
            storeReference = new object(),
        },
        displayName = "<displayName>",
    },
    shareKind = "InPlace",
});
Operation<BinaryData> operation = await client.CreateOrReplaceSentShareAsync(WaitUntil.Completed, "<sentShareId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
]]></code>
This sample shows how to call CreateOrReplaceSentShareAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        artifact = new
        {
            properties = new
            {
                paths = new object[]
                {
                    new
                    {
                        containerName = "<containerName>",
                        receiverPath = "<receiverPath>",
                        senderPath = "<senderPath>",
                    }
                },
            },
            storeKind = "AdlsGen2Account",
            storeReference = new
            {
                referenceName = "<referenceName>",
                type = "ArmResourceReference",
            },
        },
        description = "<description>",
        displayName = "<displayName>",
    },
    shareKind = "InPlace",
});
Operation<BinaryData> operation = await client.CreateOrReplaceSentShareAsync(WaitUntil.Completed, "<sentShareId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSentShareInvitation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateSentShareInvitation (string sentShareId, string sentShareInvitationId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateSentShareInvitation(string sentShareId, string sentShareInvitationId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.CreateSentShareInvitation(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSentShareInvitation (sentShareId As String, sentShareInvitationId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateSentShareInvitation : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateSentShareInvitation : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="sentSharesClient.CreateSentShareInvitation (sentShareId, sentShareInvitationId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a sent share invitation.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Create a recipient for a given sent share

Below is the JSON schema for the request and response payloads.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details>

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" />, <paramref name="sentShareInvitationId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSentShareInvitation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        targetActiveDirectoryId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        targetObjectId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    invitationKind = "Service",
});
Response response = client.CreateSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call CreateSentShareInvitation with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
        shareStatus = "Detached",
        targetActiveDirectoryId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        targetObjectId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    invitationKind = "Service",
});
Response response = client.CreateSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSentShareInvitationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateSentShareInvitationAsync (string sentShareId, string sentShareInvitationId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateSentShareInvitationAsync(string sentShareId, string sentShareInvitationId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.CreateSentShareInvitationAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSentShareInvitationAsync (sentShareId As String, sentShareInvitationId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateSentShareInvitationAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateSentShareInvitationAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentSharesClient.CreateSentShareInvitationAsync (sentShareId, sentShareInvitationId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a sent share invitation.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Create a recipient for a given sent share

Below is the JSON schema for the request and response payloads.

Request Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details>

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" />, <paramref name="sentShareInvitationId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSentShareInvitationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        targetActiveDirectoryId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        targetObjectId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    invitationKind = "Service",
});
Response response = await client.CreateSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call CreateSentShareInvitationAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    properties = new
    {
        expirationDate = "2022-05-10T18:57:31.2311892Z",
        shareStatus = "Detached",
        targetActiveDirectoryId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
        targetObjectId = "73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a",
    },
    invitationKind = "Service",
});
Response response = await client.CreateSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteSentShare">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeleteSentShare (Azure.WaitUntil waitUntil, string sentShareId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeleteSentShare(valuetype Azure.WaitUntil waitUntil, string sentShareId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.DeleteSentShare(Azure.WaitUntil,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSentShare (waitUntil As WaitUntil, sentShareId As String, context As RequestContext) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSentShare : Azure.WaitUntil * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeleteSentShare : Azure.WaitUntil * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="sentSharesClient.DeleteSentShare (waitUntil, sentShareId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a sent share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Delete a sent share

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationResponse</c>:
<code>{
  endTime: string (ISO 8601 Format), # Optional. End time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  error: {
    code: string, # Required. Code of the error
    details: [PurviewShareErrorInfo], # Optional. Nested details of the error model
    message: string, # Required. Message of the error
    target: string, # Optional. Target of the error
  }, # Optional. The purview share error body model.
  id: string, # Optional. Job id of the long running operation
  startTime: string (ISO 8601 Format), # Optional. Start time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  status: "Running" | "TransientFailure" | "Succeeded" | "Failed" | "NotStarted", # Required. States for long running operations.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteSentShare and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = client.DeleteSentShare(WaitUntil.Completed, "<sentShareId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteSentShare with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = client.DeleteSentShare(WaitUntil.Completed, "<sentShareId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteSentShareAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeleteSentShareAsync (Azure.WaitUntil waitUntil, string sentShareId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeleteSentShareAsync(valuetype Azure.WaitUntil waitUntil, string sentShareId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.DeleteSentShareAsync(Azure.WaitUntil,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSentShareAsync (waitUntil As WaitUntil, sentShareId As String, context As RequestContext) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteSentShareAsync : Azure.WaitUntil * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteSentShareAsync : Azure.WaitUntil * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="sentSharesClient.DeleteSentShareAsync (waitUntil, sentShareId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a sent share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Delete a sent share

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationResponse</c>:
<code>{
  endTime: string (ISO 8601 Format), # Optional. End time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  error: {
    code: string, # Required. Code of the error
    details: [PurviewShareErrorInfo], # Optional. Nested details of the error model
    message: string, # Required. Message of the error
    target: string, # Optional. Target of the error
  }, # Optional. The purview share error body model.
  id: string, # Optional. Job id of the long running operation
  startTime: string (ISO 8601 Format), # Optional. Start time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  status: "Running" | "TransientFailure" | "Succeeded" | "Failed" | "NotStarted", # Required. States for long running operations.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteSentShareAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = await client.DeleteSentShareAsync(WaitUntil.Completed, "<sentShareId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteSentShareAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = await client.DeleteSentShareAsync(WaitUntil.Completed, "<sentShareId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteSentShareInvitation">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeleteSentShareInvitation (Azure.WaitUntil waitUntil, string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeleteSentShareInvitation(valuetype Azure.WaitUntil waitUntil, string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.DeleteSentShareInvitation(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSentShareInvitation (waitUntil As WaitUntil, sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSentShareInvitation : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeleteSentShareInvitation : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="sentSharesClient.DeleteSentShareInvitation (waitUntil, sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete Invitation in a share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Delete a sent share invitation

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationResponse</c>:
<code>{
  endTime: string (ISO 8601 Format), # Optional. End time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  error: {
    code: string, # Required. Code of the error
    details: [PurviewShareErrorInfo], # Optional. Nested details of the error model
    message: string, # Required. Message of the error
    target: string, # Optional. Target of the error
  }, # Optional. The purview share error body model.
  id: string, # Optional. Job id of the long running operation
  startTime: string (ISO 8601 Format), # Optional. Start time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  status: "Running" | "TransientFailure" | "Succeeded" | "Failed" | "NotStarted", # Required. States for long running operations.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteSentShareInvitation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = client.DeleteSentShareInvitation(WaitUntil.Completed, "<sentShareId>", "<sentShareInvitationId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteSentShareInvitation with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = client.DeleteSentShareInvitation(WaitUntil.Completed, "<sentShareId>", "<sentShareInvitationId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteSentShareInvitationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeleteSentShareInvitationAsync (Azure.WaitUntil waitUntil, string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeleteSentShareInvitationAsync(valuetype Azure.WaitUntil waitUntil, string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.DeleteSentShareInvitationAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSentShareInvitationAsync (waitUntil As WaitUntil, sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteSentShareInvitationAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteSentShareInvitationAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="sentSharesClient.DeleteSentShareInvitationAsync (waitUntil, sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete Invitation in a share.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Delete a sent share invitation

Below is the JSON schema for the response payload.

Response Body:

Schema for <c>OperationResponse</c>:
<code>{
  endTime: string (ISO 8601 Format), # Optional. End time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  error: {
    code: string, # Required. Code of the error
    details: [PurviewShareErrorInfo], # Optional. Nested details of the error model
    message: string, # Required. Message of the error
    target: string, # Optional. Target of the error
  }, # Optional. The purview share error body model.
  id: string, # Optional. Job id of the long running operation
  startTime: string (ISO 8601 Format), # Optional. Start time of the long running operation. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
  status: "Running" | "TransientFailure" | "Succeeded" | "Failed" | "NotStarted", # Required. States for long running operations.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteSentShareInvitationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = await client.DeleteSentShareInvitationAsync(WaitUntil.Completed, "<sentShareId>", "<sentShareInvitationId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call DeleteSentShareInvitationAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Operation<BinaryData> operation = await client.DeleteSentShareInvitationAsync(WaitUntil.Completed, "<sentShareId>", "<sentShareInvitationId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllSentShareInvitations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllSentShareInvitations (string sentShareId, string filter, string orderby, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllSentShareInvitations(string sentShareId, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetAllSentShareInvitations(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllSentShareInvitations (sentShareId As String, filter As String, orderby As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllSentShareInvitations : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllSentShareInvitations : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="sentSharesClient.GetAllSentShareInvitations (sentShareId, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all sent share invitations in a sent share
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllSentShareInvitations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllSentShareInvitations("<sentShareId>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("invitationKind").ToString());
}
]]></code>
This sample shows how to call GetAllSentShareInvitations with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllSentShareInvitations("<sentShareId>", "<filter>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("invitationKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllSentShareInvitationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllSentShareInvitationsAsync (string sentShareId, string filter, string orderby, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllSentShareInvitationsAsync(string sentShareId, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetAllSentShareInvitationsAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllSentShareInvitationsAsync (sentShareId As String, filter As String, orderby As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllSentShareInvitationsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllSentShareInvitationsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="sentSharesClient.GetAllSentShareInvitationsAsync (sentShareId, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all sent share invitations in a sent share
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllSentShareInvitationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllSentShareInvitationsAsync("<sentShareId>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("invitationKind").ToString());
}
]]></code>
This sample shows how to call GetAllSentShareInvitationsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllSentShareInvitationsAsync("<sentShareId>", "<filter>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("invitationKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllSentShares">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllSentShares (string referenceName, string filter, string orderby, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllSentShares(string referenceName, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetAllSentShares(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllSentShares (referenceName As String, filter As String, orderby As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllSentShares : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllSentShares : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="sentSharesClient.GetAllSentShares (referenceName, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="referenceName"> A name that references a data store. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a list of sent shares.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="referenceName" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllSentShares and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllSentShares("<referenceName>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
}
]]></code>
This sample shows how to call GetAllSentShares with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllSentShares("<referenceName>", "<filter>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllSentSharesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllSentSharesAsync (string referenceName, string filter, string orderby, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllSentSharesAsync(string referenceName, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetAllSentSharesAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllSentSharesAsync (referenceName As String, filter As String, orderby As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllSentSharesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllSentSharesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="sentSharesClient.GetAllSentSharesAsync (referenceName, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="referenceName"> A name that references a data store. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a list of sent shares.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="referenceName" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllSentSharesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllSentSharesAsync("<referenceName>", null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
}
]]></code>
This sample shows how to call GetAllSentSharesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllSentSharesAsync("<referenceName>", "<filter>", "<orderby>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("shareKind").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShare">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSentShare (string sentShareId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSentShare(string sentShareId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetSentShare(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShare (sentShareId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSentShare : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSentShare : string * Azure.RequestContext -&gt; Azure.Response" Usage="sentSharesClient.GetSentShare (sentShareId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a sent share by guid.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Get a sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSentShare and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.GetSentShare("<sentShareId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
]]></code>
This sample shows how to call GetSentShare with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.GetSentShare("<sentShareId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSentShareAsync (string sentShareId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSentShareAsync(string sentShareId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetSentShareAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareAsync (sentShareId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSentShareAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentSharesClient.GetSentShareAsync (sentShareId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a sent share by guid.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Get a sent share

Below is the JSON schema for the response payload.

Response Body:

<details><summary>InPlaceSentShare</summary>Schema for <c>InPlaceSentShare</c>:
<code>{
  properties: {
    artifact: {
      storeKind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
      storeReference: {
        referenceName: string, # Optional. Reference name for resource associated with the sink or artifact.
        type: "ArmResourceReference", # Optional. Defines the type of resource being shared
      }, # Required. A Store Reference for an artifact or sink.
    }, # Required. A class for sent share artifact.
    createdAt: string (ISO 8601 Format), # Optional. Time at which the sent share was created. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    dependsOn: [Guid], # Optional. List of shares on which the sent share depends.
    description: string, # Optional. Sent share description.
    displayName: string, # Required. The name of the sent share
    senderEmail: string, # Optional. Email of the sender who created the sent share.
    senderName: string, # Optional. Name of the sender who created the sent share.
    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
  }, # Required. Properties for InPlace sent share.
  shareKind: InPlace, # Required. Defines the supported types for share.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSentShareAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.GetSentShareAsync("<sentShareId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
]]></code>
This sample shows how to call GetSentShareAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.GetSentShareAsync("<sentShareId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("shareKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSentShareInvitation (string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSentShareInvitation(string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetSentShareInvitation(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitation (sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sentSharesClient.GetSentShareInvitation (sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get sent share invitation for a given sent share
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Get recipient for a given sent share

Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSentShareInvitation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.GetSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call GetSentShareInvitation with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.GetSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSentShareInvitationAsync (string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSentShareInvitationAsync(string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.GetSentShareInvitationAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitationAsync (sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentSharesClient.GetSentShareInvitationAsync (sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get sent share invitation for a given sent share
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Get recipient for a given sent share

Below is the JSON schema for the response payload.

Response Body:

This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
<details><summary>ServiceInvitation</summary>Schema for <c>ServiceInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetActiveDirectoryId: Guid, # Required. The target azure active directory id the invitation is sent to.
    targetObjectId: Guid, # Required. The target object id in the azure active directory the invitation is sent to.
  }, # Required. Properties of the service invitation type.
  invitationKind: Service, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
<code>{
  properties: {
    expirationDate: string (ISO 8601 Format), # Optional. The time at which the invitation will expire. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    notify: boolean, # Optional. Whether or not the recipient was notified via email.
    senderEmail: string, # Optional. Email address of the sender.
    senderName: string, # Optional. Name of the sender
    senderTenantName: string, # Optional. Tenant name of the sender
    sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
    shareStatus: "Detached" | "Attached", # Optional. Share status.
    state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
    targetEmail: string, # Required. The receiver email for the invitation is being sent.
  }, # Required. Properties of the user invitation type.
  invitationKind: User, # Required. The types of invitations.
  id: string, # Optional. The unique id of the resource.
  type: string, # Optional. Type of the resource.
}
</code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSentShareInvitationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.GetSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call GetSentShareInvitationAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.GetSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="NotifyUserSentShareInvitation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response NotifyUserSentShareInvitation (string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response NotifyUserSentShareInvitation(string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.NotifyUserSentShareInvitation(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NotifyUserSentShareInvitation (sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member NotifyUserSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.NotifyUserSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sentSharesClient.NotifyUserSentShareInvitation (sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Notifies the recipient of the sent share invitation.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call NotifyUserSentShareInvitation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.NotifyUserSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call NotifyUserSentShareInvitation with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = client.NotifyUserSentShareInvitation("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="NotifyUserSentShareInvitationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; NotifyUserSentShareInvitationAsync (string sentShareId, string sentShareInvitationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; NotifyUserSentShareInvitationAsync(string sentShareId, string sentShareInvitationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Sharing.SentSharesClient.NotifyUserSentShareInvitationAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NotifyUserSentShareInvitationAsync (sentShareId As String, sentShareInvitationId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member NotifyUserSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.NotifyUserSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentSharesClient.NotifyUserSentShareInvitationAsync (sentShareId, sentShareInvitationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareId" Type="System.String" />
        <Parameter Name="sentShareInvitationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareId"> Id of the sent share. </param>
        <param name="sentShareInvitationId"> Id of the sent share invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Notifies the recipient of the sent share invitation.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareId" /> or <paramref name="sentShareInvitationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call NotifyUserSentShareInvitationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.NotifyUserSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
]]></code>
This sample shows how to call NotifyUserSentShareInvitationAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
SentSharesClient client = new SentSharesClient(endpoint, credential);

Response response = await client.NotifyUserSentShareInvitationAsync("<sentShareId>", "<sentShareInvitationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("invitationKind").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Sharing.SentSharesClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Sharing.SentSharesClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Sharing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
