<Type Name="ProvisionApplicationTypeDescriptionBase" FullName="System.Fabric.Description.ProvisionApplicationTypeDescriptionBase">
  <TypeSignature Language="C#" Value="public abstract class ProvisionApplicationTypeDescriptionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProvisionApplicationTypeDescriptionBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProvisionApplicationTypeDescriptionBase" />
  <TypeSignature Language="F#" Value="type ProvisionApplicationTypeDescriptionBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.Fabric.Description.ProvisionApplicationTypeDescription))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.Fabric.Description.ProvisionApplicationTypeDescription))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Serialization.KnownType(typeof(System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Serialization.KnownType(typeof(System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Represents the base class for provision application type classes.
             The provision description can be used to provision application types using
             <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescriptionBase,System.TimeSpan,System.Threading.CancellationToken)" />.
             </para>
    </summary>
    <remarks>
      <para>
             Supported types of provision operations are:
            �<list type="bullet">
            �<item><description><see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescription" /></description></item>
            �<item><description><see cref="T:System.Fabric.Description.ExternalStoreProvisionApplicationTypeDescription" /></description></item></list></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProvisionApplicationTypeDescriptionBase (System.Fabric.Description.ProvisionApplicationTypeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Fabric.Description.ProvisionApplicationTypeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.#ctor(System.Fabric.Description.ProvisionApplicationTypeKind)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (kind As ProvisionApplicationTypeKind)" />
      <MemberSignature Language="F#" Value="new System.Fabric.Description.ProvisionApplicationTypeDescriptionBase : System.Fabric.Description.ProvisionApplicationTypeKind -&gt; System.Fabric.Description.ProvisionApplicationTypeDescriptionBase" Usage="new System.Fabric.Description.ProvisionApplicationTypeDescriptionBase kind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="kind" Type="System.Fabric.Description.ProvisionApplicationTypeKind" />
      </Parameters>
      <Docs>
        <param name="kind">The kind of the provision application type operation.</param>
        <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the flag indicating whether provisioning should occur asynchronously.</para>
        </summary>
        <value>
          <para>If this flag is false, then the behavior is equivalent to calling
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />. The timeout argument is applied to the provision operation itself and the returned task completes only when the provision operation completes in the system.</para>
          <para>If this flag is true, then the timeout argument is only applied to message delivery
            and the returned task completes once the system has accepted the request.
            The system will process the provision operation without any timeout limit and its state can be queried
            using <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync" />.
            The pending provision operation can be interrupted using <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public System.Fabric.Description.ProvisionApplicationTypeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Fabric.Description.ProvisionApplicationTypeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As ProvisionApplicationTypeKind" />
      <MemberSignature Language="F#" Value="member this.Kind : System.Fabric.Description.ProvisionApplicationTypeKind" Usage="System.Fabric.Description.ProvisionApplicationTypeDescriptionBase.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Description.ProvisionApplicationTypeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the kind of the provision application type operation.</para>
        </summary>
        <value>The kind of the provision application type operation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
