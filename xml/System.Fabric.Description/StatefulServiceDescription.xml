<Type Name="StatefulServiceDescription" FullName="System.Fabric.Description.StatefulServiceDescription">
  <TypeSignature Language="C#" Value="public sealed class StatefulServiceDescription : System.Fabric.Description.ServiceDescription" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StatefulServiceDescription extends System.Fabric.Description.ServiceDescription" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.Description.StatefulServiceDescription" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Fabric.Description.ServiceDescription</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Represents the extend <see cref="T:System.Fabric.Description.ServiceDescription" /> to provide additional information necessary to create stateful services.</para>
    </summary>
    <remarks>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StatefulServiceDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.Description.StatefulServiceDescription.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceDescription" /> class.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPersistedState">
      <MemberSignature Language="C#" Value="public bool HasPersistedState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPersistedState" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets a value indicating whether this instance has persisted state.</para>
        </summary>
        <value>
          <para>
            <languageKeyword>true</languageKeyword> if the instance has persisted state; otherwise, <languageKeyword>false</languageKeyword>.</para>
        </value>
        <remarks>
          <para>When a <see cref="T:System.Fabric.FabricReplicator" /> at a secondary replica receives an operation 
            for a persistent service, it must wait for the service to acknowledge that the data has been persisted before it can send that acknowledgment 
            back to the primary. For non-persistent services, the operation can be acknowledged immediately upon receipt.</para>
          <para>When a 
            persistent service replica fails, the Service Fabric will not immediately consider that replica as lost because the persistent state for that replica 
            still exists. If the replica is recovered, it can be recreated using the persisted state. In contrast, beginning to build a replacement replica 
            immediately may be costly and unnecessary, especially when the failures are transient. To configure how long Service Fabric should wait for the 
            persistent replica to recover before building a new (replacement) replica from scratch, use the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" /> parameter. For non-persistent services (those 
            with <see cref="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState" /> set to <languageKeyword>false</languageKeyword>), Service Fabric 
            will immediately begin creating a new replica (since there is no persistent state to recover from, and hence no point in waiting for local recovery).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinReplicaSetSize">
      <MemberSignature Language="C#" Value="public int MinReplicaSetSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinReplicaSetSize" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the minimum allowed replica set size for this service.</para>
        </summary>
        <value>
          <para>The minimum allowed replica set size for this service.</para>
        </value>
        <remarks>
          <para>Defines the minimum number of replicas that Service Fabric will keep in its view of the Replica Set for a given partition. For example, if 
            the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" /> is set to five (5) then normally (without failures) 
            there will be five replicas in the view of the replica set. However this number will decrease during failures. The 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /> defines the minimum number of replicas in the view, so for 
            example if the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" /> is five and the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /> is three, then even if there are three concurrent failures 
            (resulting  in only two remaining replicas running) will still have three replicas in its view of the replica set (two up and one down). Since  
            uses majority quorum of the number of replicas maintained in this view, majority quorum of the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /> is minimum level of reliability of any operation: in the 
            prior example, with Target = 5 and Min = 3, with 3 concurrent failures, there are two remaining up replicas (and one down), and the majority 
            quorum of 3 (the <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" />) is 2. This means that the primary will 
            continue to be able to replicate operations AND that the remaining secondary replica MUST apply the operation in order for the replica set (partition) 
            to make progress. If the total number of replicas drops below the majority quorum of the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize" /> then further writes will be disallowed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QuorumLossWaitDuration">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; QuorumLossWaitDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; QuorumLossWaitDuration" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.QuorumLossWaitDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.</para>
        </summary>
        <value>
          <para>The wait duration as a <see cref="T:System.TimeSpan" /> object.</para>
        </value>
        <remarks>
          <para>If the partition is still in quorum loss after this duration, the partition is recovered from quorum loss by considering the down 
            replicas as lost. Note that this can potentially incur data loss. The default value is Infinity and it is not recommended to change this value.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplicaRestartWaitDuration">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; ReplicaRestartWaitDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; ReplicaRestartWaitDuration" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the duration, in seconds, between when a replica goes down and when a new replica is created.</para>
        </summary>
        <value>
          <para>The duration as a <see cref="T:System.TimeSpan" /> object.</para>
        </value>
        <remarks>
          <para>When a persistent replica goes down, this timer starts.  When it expires Service Fabric will create a new replica on any node in the 
            cluster. This configuration is to reduce unnecessary state copies. When a persisted replica goes down, the system waits for it to come 
            back up for <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" /> seconds before creating a new 
            replica which will require a copy. Note that a replica that is down is not considered lost, yet.</para>
          <para>The default value is 300 (seconds).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StandByReplicaKeepDuration">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; StandByReplicaKeepDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; StandByReplicaKeepDuration" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the definition on how long StandBy replicas should be maintained before being removed.</para>
        </summary>
        <value>
          <para>The definition on how long StandBy replicas should be maintained before being removed.</para>
        </value>
        <remarks>
          <para>Sometimes a replica will be down for longer than the <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration" />. 
            In these cases a new replica will be built to replace it. Sometimes however the loss is not permanent and the persistent replica is eventually recovered. 
            This now constitutes a StandBy replica. StandBy replicas will preferentially be used in the case of subsequent failures or resource balancing actions, 
            since they represent persistent state that already exists and which can be used to expedite recovery. The 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration" /> defines how long such StandBy replicas should be maintained 
            before being removed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetReplicaSetSize">
      <MemberSignature Language="C#" Value="public int TargetReplicaSetSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TargetReplicaSetSize" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para> Gets or sets the target size of the replica set.</para>
        </summary>
        <value>
          <para>The target size of the replica set.</para>
        </value>
        <remarks>
          <para>The number of replicas that the system creates and maintains for each partition of this service.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>