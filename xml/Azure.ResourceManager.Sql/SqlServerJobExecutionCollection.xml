<Type Name="SqlServerJobExecutionCollection" FullName="Azure.ResourceManager.Sql.SqlServerJobExecutionCollection">
  <TypeSignature Language="C#" Value="public class SqlServerJobExecutionCollection : Azure.ResourceManager.ArmCollection, System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlServerJobExecutionCollection extends Azure.ResourceManager.ArmCollection implements class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlServerJobExecutionCollection&#xA;Inherits ArmCollection&#xA;Implements IAsyncEnumerable(Of SqlServerJobExecutionResource), IEnumerable(Of SqlServerJobExecutionResource)" />
  <TypeSignature Language="F#" Value="type SqlServerJobExecutionCollection = class&#xA;    inherit ArmCollection&#xA;    interface seq&lt;SqlServerJobExecutionResource&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;SqlServerJobExecutionResource&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobResource" />.
            To get a <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection" /> instance call the GetSqlServerJobExecutions method from an instance of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqlServerJobExecutionCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; CreateOrUpdate (Azure.WaitUntil waitUntil, Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; CreateOrUpdate(valuetype Azure.WaitUntil waitUntil, valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.CreateOrUpdate(Azure.WaitUntil,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (waitUntil As WaitUntil, jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SqlServerJobExecutionResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.WaitUntil * Guid * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.CreateOrUpdate : Azure.WaitUntil * Guid * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.CreateOrUpdate (waitUntil, jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobExecutionId"> The job execution id to create the job execution under. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates or updates a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt; CreateOrUpdateAsync (Azure.WaitUntil waitUntil, Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt; CreateOrUpdateAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (waitUntil As WaitUntil, jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SqlServerJobExecutionResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.WaitUntil * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;&#xA;override this.CreateOrUpdateAsync : Azure.WaitUntil * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;" Usage="sqlServerJobExecutionCollection.CreateOrUpdateAsync (waitUntil, jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobExecutionId"> The job execution id to create the job execution under. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates or updates a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.Exists(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="sqlServerJobExecutionCollection.Exists (jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.ExistsAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="sqlServerJobExecutionCollection.ExistsAsync (jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; Get (Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; Get(valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.Get(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlServerJobExecutionResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.Get : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.Get (jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; GetAll (DateTimeOffset? createTimeMin = default, DateTimeOffset? createTimeMax = default, DateTimeOffset? endTimeMin = default, DateTimeOffset? endTimeMax = default, bool? isActive = default, int? skip = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; GetAll(valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMax, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMax, valuetype System.Nullable`1&lt;bool&gt; isActive, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.GetAll(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (Optional createTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional createTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional isActive As Nullable(Of Boolean) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlServerJobExecutionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.GetAll : Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.GetAll (createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="createTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="isActive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createTimeMin"> If specified, only job executions created at or after the specified time are included. </param>
        <param name="createTimeMax"> If specified, only job executions created before the specified time are included. </param>
        <param name="endTimeMin"> If specified, only job executions completed at or after the specified time are included. </param>
        <param name="endTimeMax"> If specified, only job executions completed before the specified time are included. </param>
        <param name="isActive"> If specified, only active or only completed job executions are included. </param>
        <param name="skip"> The number of elements in the collection to skip. </param>
        <param name="top"> The number of elements to return from the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists a job's executions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions
            Operation Id: JobExecutions_ListByJob
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; GetAllAsync (DateTimeOffset? createTimeMin = default, DateTimeOffset? createTimeMax = default, DateTimeOffset? endTimeMin = default, DateTimeOffset? endTimeMax = default, bool? isActive = default, int? skip = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; GetAllAsync(valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMax, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMax, valuetype System.Nullable`1&lt;bool&gt; isActive, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.GetAllAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (Optional createTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional createTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional isActive As Nullable(Of Boolean) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlServerJobExecutionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.GetAllAsync : Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.GetAllAsync (createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="createTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="isActive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createTimeMin"> If specified, only job executions created at or after the specified time are included. </param>
        <param name="createTimeMax"> If specified, only job executions created before the specified time are included. </param>
        <param name="endTimeMin"> If specified, only job executions completed at or after the specified time are included. </param>
        <param name="endTimeMax"> If specified, only job executions completed before the specified time are included. </param>
        <param name="isActive"> If specified, only active or only completed job executions are included. </param>
        <param name="skip"> The number of elements in the collection to skip. </param>
        <param name="top"> The number of elements to return from the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists a job's executions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions
            Operation Id: JobExecutions_ListByJob
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt; GetAsync (Guid jobExecutionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt; GetAsync(valuetype System.Guid jobExecutionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.GetAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (jobExecutionId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlServerJobExecutionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;&#xA;override this.GetAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;" Usage="sqlServerJobExecutionCollection.GetAsync (jobExecutionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}
            Operation Id: JobExecutions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJobTargetExecutions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt; GetJobTargetExecutions (Guid jobExecutionId, DateTimeOffset? createTimeMin = default, DateTimeOffset? createTimeMax = default, DateTimeOffset? endTimeMin = default, DateTimeOffset? endTimeMax = default, bool? isActive = default, int? skip = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt; GetJobTargetExecutions(valuetype System.Guid jobExecutionId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMax, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMax, valuetype System.Nullable`1&lt;bool&gt; isActive, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.GetJobTargetExecutions(System.Guid,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTargetExecutions (jobExecutionId As Guid, Optional createTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional createTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional isActive As Nullable(Of Boolean) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlServerJobExecutionStepTargetResource)" />
      <MemberSignature Language="F#" Value="abstract member GetJobTargetExecutions : Guid * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;&#xA;override this.GetJobTargetExecutions : Guid * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;" Usage="sqlServerJobExecutionCollection.GetJobTargetExecutions (jobExecutionId, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="createTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="createTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="isActive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="createTimeMin"> If specified, only job executions created at or after the specified time are included. </param>
        <param name="createTimeMax"> If specified, only job executions created before the specified time are included. </param>
        <param name="endTimeMin"> If specified, only job executions completed at or after the specified time are included. </param>
        <param name="endTimeMax"> If specified, only job executions completed before the specified time are included. </param>
        <param name="isActive"> If specified, only active or only completed job executions are included. </param>
        <param name="skip"> The number of elements in the collection to skip. </param>
        <param name="top"> The number of elements to return from the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists target executions for all steps of a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets
            Operation Id: JobTargetExecutions_ListByJobExecution
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJobTargetExecutionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt; GetJobTargetExecutionsAsync (Guid jobExecutionId, DateTimeOffset? createTimeMin = default, DateTimeOffset? createTimeMax = default, DateTimeOffset? endTimeMin = default, DateTimeOffset? endTimeMax = default, bool? isActive = default, int? skip = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt; GetJobTargetExecutionsAsync(valuetype System.Guid jobExecutionId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createTimeMax, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTimeMax, valuetype System.Nullable`1&lt;bool&gt; isActive, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.GetJobTargetExecutionsAsync(System.Guid,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTargetExecutionsAsync (jobExecutionId As Guid, Optional createTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional createTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMin As Nullable(Of DateTimeOffset) = Nothing, Optional endTimeMax As Nullable(Of DateTimeOffset) = Nothing, Optional isActive As Nullable(Of Boolean) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlServerJobExecutionStepTargetResource)" />
      <MemberSignature Language="F#" Value="abstract member GetJobTargetExecutionsAsync : Guid * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;&#xA;override this.GetJobTargetExecutionsAsync : Guid * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;" Usage="sqlServerJobExecutionCollection.GetJobTargetExecutionsAsync (jobExecutionId, createTimeMin, createTimeMax, endTimeMin, endTimeMax, isActive, skip, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobExecutionId" Type="System.Guid" />
        <Parameter Name="createTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="createTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMin" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTimeMax" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="isActive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobExecutionId"> The id of the job execution. </param>
        <param name="createTimeMin"> If specified, only job executions created at or after the specified time are included. </param>
        <param name="createTimeMax"> If specified, only job executions created before the specified time are included. </param>
        <param name="endTimeMin"> If specified, only job executions completed at or after the specified time are included. </param>
        <param name="endTimeMax"> If specified, only job executions completed before the specified time are included. </param>
        <param name="isActive"> If specified, only active or only completed job executions are included. </param>
        <param name="skip"> The number of elements in the collection to skip. </param>
        <param name="top"> The number of elements to return from the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists target executions for all steps of a job execution.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets
            Operation Id: JobTargetExecutions_ListByJobExecution
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlServerJobExecutionStepTargetResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; IAsyncEnumerable&lt;SqlServerJobExecutionResource&gt;.GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.System#Collections#Generic#IAsyncEnumerable&lt;Azure#ResourceManager#Sql#SqlServerJobExecutionResource&gt;#GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator (cancellationToken As CancellationToken) As IAsyncEnumerator(Of SqlServerJobExecutionResource) Implements IAsyncEnumerable(Of SqlServerJobExecutionResource).GetAsyncEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
        <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
        <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; IEnumerable&lt;SqlServerJobExecutionResource&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt; System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.System#Collections#Generic#IEnumerable&lt;Azure#ResourceManager#Sql#SqlServerJobExecutionResource&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of SqlServerJobExecutionResource) Implements IEnumerable(Of SqlServerJobExecutionResource).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;" Usage="sqlServerJobExecutionCollection.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Sql.SqlServerJobExecutionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlServerJobExecutionCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="sqlServerJobExecutionCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
