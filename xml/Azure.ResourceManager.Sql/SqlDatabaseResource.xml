<Type Name="SqlDatabaseResource" FullName="Azure.ResourceManager.Sql.SqlDatabaseResource">
  <TypeSignature Language="C#" Value="public class SqlDatabaseResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlDatabaseResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Sql.SqlDatabaseResource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlDatabaseResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type SqlDatabaseResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a SqlDatabase along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSqlDatabaseResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Sql.SqlServerResource" /> using the GetSqlDatabase method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqlDatabaseResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelDatabaseOperation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelDatabaseOperation (Guid operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelDatabaseOperation(valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CancelDatabaseOperation(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelDatabaseOperation (operationId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelDatabaseOperation : Guid * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CancelDatabaseOperation : Guid * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlDatabaseResource.CancelDatabaseOperation (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> The operation identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancels the asynchronous operation on the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations/{operationId}/cancel
            Operation Id: DatabaseOperations_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelDatabaseOperationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelDatabaseOperationAsync (Guid operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelDatabaseOperationAsync(valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CancelDatabaseOperationAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelDatabaseOperationAsync (operationId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelDatabaseOperationAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelDatabaseOperationAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlDatabaseResource.CancelDatabaseOperationAsync (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> The operation identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancels the asynchronous operation on the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations/{operationId}/cancel
            Operation Id: DatabaseOperations_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateDatabaseExtension">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; CreateOrUpdateDatabaseExtension (Azure.WaitUntil waitUntil, string extensionName, Azure.ResourceManager.Sql.Models.DatabaseExtensions databaseExtensions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; CreateOrUpdateDatabaseExtension(valuetype Azure.WaitUntil waitUntil, string extensionName, class Azure.ResourceManager.Sql.Models.DatabaseExtensions databaseExtensions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateOrUpdateDatabaseExtension(Azure.WaitUntil,System.String,Azure.ResourceManager.Sql.Models.DatabaseExtensions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateDatabaseExtension (waitUntil As WaitUntil, extensionName As String, databaseExtensions As DatabaseExtensions, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ImportExportExtensionsOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateDatabaseExtension : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.DatabaseExtensions * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&#xA;override this.CreateOrUpdateDatabaseExtension : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.DatabaseExtensions * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;" Usage="sqlDatabaseResource.CreateOrUpdateDatabaseExtension (waitUntil, extensionName, databaseExtensions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="databaseExtensions" Type="Azure.ResourceManager.Sql.Models.DatabaseExtensions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="extensionName"> The String to use. </param>
        <param name="databaseExtensions"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Perform a database extension operation, like polybase import
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}
            Operation Id: DatabaseExtensions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extensionName" /> or <paramref name="databaseExtensions" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateDatabaseExtension">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; CreateOrUpdateDatabaseExtension (Azure.WaitUntil waitUntil, string extensionName, Azure.ResourceManager.Sql.Models.SqlDatabaseExtension sqlDatabaseExtension, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; CreateOrUpdateDatabaseExtension(valuetype Azure.WaitUntil waitUntil, string extensionName, class Azure.ResourceManager.Sql.Models.SqlDatabaseExtension sqlDatabaseExtension, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateOrUpdateDatabaseExtension(Azure.WaitUntil,System.String,Azure.ResourceManager.Sql.Models.SqlDatabaseExtension,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateDatabaseExtension (waitUntil As WaitUntil, extensionName As String, sqlDatabaseExtension As SqlDatabaseExtension, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ImportExportExtensionsOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateDatabaseExtension : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.SqlDatabaseExtension * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&#xA;override this.CreateOrUpdateDatabaseExtension : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.SqlDatabaseExtension * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;" Usage="sqlDatabaseResource.CreateOrUpdateDatabaseExtension (waitUntil, extensionName, sqlDatabaseExtension, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="sqlDatabaseExtension" Type="Azure.ResourceManager.Sql.Models.SqlDatabaseExtension" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="extensionName"> The String to use. </param>
        <param name="sqlDatabaseExtension"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Perform a database extension operation, like polybase import
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}
            Operation Id: DatabaseExtensions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extensionName" /> or <paramref name="sqlDatabaseExtension" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateDatabaseExtensionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt; CreateOrUpdateDatabaseExtensionAsync (Azure.WaitUntil waitUntil, string extensionName, Azure.ResourceManager.Sql.Models.DatabaseExtensions databaseExtensions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt; CreateOrUpdateDatabaseExtensionAsync(valuetype Azure.WaitUntil waitUntil, string extensionName, class Azure.ResourceManager.Sql.Models.DatabaseExtensions databaseExtensions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateOrUpdateDatabaseExtensionAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Sql.Models.DatabaseExtensions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateDatabaseExtensionAsync (waitUntil As WaitUntil, extensionName As String, databaseExtensions As DatabaseExtensions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ImportExportExtensionsOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateDatabaseExtensionAsync : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.DatabaseExtensions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;&#xA;override this.CreateOrUpdateDatabaseExtensionAsync : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.DatabaseExtensions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;" Usage="sqlDatabaseResource.CreateOrUpdateDatabaseExtensionAsync (waitUntil, extensionName, databaseExtensions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="databaseExtensions" Type="Azure.ResourceManager.Sql.Models.DatabaseExtensions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="extensionName"> The String to use. </param>
        <param name="databaseExtensions"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Perform a database extension operation, like polybase import
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}
            Operation Id: DatabaseExtensions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extensionName" /> or <paramref name="databaseExtensions" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateDatabaseExtensionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt; CreateOrUpdateDatabaseExtensionAsync (Azure.WaitUntil waitUntil, string extensionName, Azure.ResourceManager.Sql.Models.SqlDatabaseExtension sqlDatabaseExtension, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt; CreateOrUpdateDatabaseExtensionAsync(valuetype Azure.WaitUntil waitUntil, string extensionName, class Azure.ResourceManager.Sql.Models.SqlDatabaseExtension sqlDatabaseExtension, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateOrUpdateDatabaseExtensionAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.Sql.Models.SqlDatabaseExtension,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateDatabaseExtensionAsync (waitUntil As WaitUntil, extensionName As String, sqlDatabaseExtension As SqlDatabaseExtension, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ImportExportExtensionsOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateDatabaseExtensionAsync : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.SqlDatabaseExtension * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;&#xA;override this.CreateOrUpdateDatabaseExtensionAsync : Azure.WaitUntil * string * Azure.ResourceManager.Sql.Models.SqlDatabaseExtension * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;" Usage="sqlDatabaseResource.CreateOrUpdateDatabaseExtensionAsync (waitUntil, extensionName, sqlDatabaseExtension, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="extensionName" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="sqlDatabaseExtension" Type="Azure.ResourceManager.Sql.Models.SqlDatabaseExtension" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="extensionName"> The String to use. </param>
        <param name="sqlDatabaseExtension"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Perform a database extension operation, like polybase import
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}
            Operation Id: DatabaseExtensions_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extensionName" /> or <paramref name="sqlDatabaseExtension" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string serverName, string databaseName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string serverName, string databaseName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, serverName As String, databaseName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.Sql.SqlDatabaseResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, serverName, databaseName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="databaseName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="serverName">To be added.</param>
        <param name="databaseName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRestorePoint">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt; CreateRestorePoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt; CreateRestorePoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateRestorePoint(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRestorePoint (waitUntil As WaitUntil, createDatabaseRestorePointDefinition As CreateDatabaseRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SqlServerDatabaseRestorePointResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member CreateRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&#xA;override this.CreateRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;" Usage="sqlDatabaseResource.CreateRestorePoint (waitUntil, createDatabaseRestorePointDefinition, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt; CreateRestorePoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.RestorePointResource&gt; CreateRestorePoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRestorePoint (waitUntil As WaitUntil, createDatabaseRestorePointDefinition As CreateDatabaseRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of RestorePointResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member CreateRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&#xA;override this.CreateRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;" Usage="sqlDatabaseResource.CreateRestorePoint (waitUntil, createDatabaseRestorePointDefinition, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="createDatabaseRestorePointDefinition" Type="Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="createDatabaseRestorePointDefinition"> The definition for creating the restore point of this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a restore point for a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints
            Operation Id: RestorePoints_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="createDatabaseRestorePointDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRestorePointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt; CreateRestorePointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt; CreateRestorePointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.CreateRestorePointAsync(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRestorePointAsync (waitUntil As WaitUntil, createDatabaseRestorePointDefinition As CreateDatabaseRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SqlServerDatabaseRestorePointResource))" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member CreateRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;&#xA;override this.CreateRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;" Usage="sqlDatabaseResource.CreateRestorePointAsync (waitUntil, createDatabaseRestorePointDefinition, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt; CreateRestorePointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.RestorePointResource&gt;&gt; CreateRestorePointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition createDatabaseRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRestorePointAsync (waitUntil As WaitUntil, createDatabaseRestorePointDefinition As CreateDatabaseRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of RestorePointResource))" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member CreateRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;&#xA;override this.CreateRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;" Usage="sqlDatabaseResource.CreateRestorePointAsync (waitUntil, createDatabaseRestorePointDefinition, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="createDatabaseRestorePointDefinition" Type="Azure.ResourceManager.Sql.Models.CreateDatabaseRestorePointDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="createDatabaseRestorePointDefinition"> The definition for creating the restore point of this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a restore point for a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints
            Operation Id: RestorePoints_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="createDatabaseRestorePointDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.Sql.SqlDatabaseData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Sql.SqlDatabaseResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As SqlDatabaseData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.Sql.SqlDatabaseData" Usage="Azure.ResourceManager.Sql.SqlDatabaseResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="sqlDatabaseResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="sqlDatabaseResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Export (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.DatabaseExportDefinition databaseExportDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Export(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.DatabaseExportDefinition databaseExportDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Export(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.DatabaseExportDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Export (waitUntil As WaitUntil, databaseExportDefinition As DatabaseExportDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ImportExportOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member Export : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.DatabaseExportDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&#xA;override this.Export : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.DatabaseExportDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;" Usage="sqlDatabaseResource.Export (waitUntil, databaseExportDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="databaseExportDefinition" Type="Azure.ResourceManager.Sql.Models.DatabaseExportDefinition" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="databaseExportDefinition"> The database export request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="databaseExportDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Export (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition exportDatabaseDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Export(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition exportDatabaseDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Export(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Export (waitUntil As WaitUntil, exportDatabaseDefinition As ExportDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ImportExportOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member Export : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&#xA;override this.Export : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;" Usage="sqlDatabaseResource.Export (waitUntil, exportDatabaseDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exportDatabaseDefinition" Type="Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="exportDatabaseDefinition"> The database export request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportDatabaseDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ExportAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.DatabaseExportDefinition databaseExportDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ExportAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.DatabaseExportDefinition databaseExportDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.ExportAsync(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.DatabaseExportDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportAsync (waitUntil As WaitUntil, databaseExportDefinition As DatabaseExportDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ImportExportOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member ExportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.DatabaseExportDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;&#xA;override this.ExportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.DatabaseExportDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;" Usage="sqlDatabaseResource.ExportAsync (waitUntil, databaseExportDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="databaseExportDefinition" Type="Azure.ResourceManager.Sql.Models.DatabaseExportDefinition" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="databaseExportDefinition"> The database export request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="databaseExportDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ExportAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition exportDatabaseDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ExportAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition exportDatabaseDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.ExportAsync(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportAsync (waitUntil As WaitUntil, exportDatabaseDefinition As ExportDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ImportExportOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member ExportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;&#xA;override this.ExportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;" Usage="sqlDatabaseResource.ExportAsync (waitUntil, exportDatabaseDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exportDatabaseDefinition" Type="Azure.ResourceManager.Sql.Models.ExportDatabaseDefinition" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="exportDatabaseDefinition"> The database export request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export
            Operation Id: Databases_Export
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportDatabaseDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Failover">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Failover (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ReplicaType? replicaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Failover(valuetype Azure.WaitUntil waitUntil, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.ReplicaType&gt; replicaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Failover(Azure.WaitUntil,System.Nullable{Azure.ResourceManager.Sql.Models.ReplicaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Failover (waitUntil As WaitUntil, Optional replicaType As Nullable(Of ReplicaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Failover : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt; * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Failover : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt; * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="sqlDatabaseResource.Failover (waitUntil, replicaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="replicaType" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="replicaType"> The type of replica to be failed over. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Failovers a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover
            Operation Id: Databases_Failover
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FailoverAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; FailoverAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ReplicaType? replicaType = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; FailoverAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.Sql.Models.ReplicaType&gt; replicaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.FailoverAsync(Azure.WaitUntil,System.Nullable{Azure.ResourceManager.Sql.Models.ReplicaType},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FailoverAsync (waitUntil As WaitUntil, Optional replicaType As Nullable(Of ReplicaType) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member FailoverAsync : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.FailoverAsync : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="sqlDatabaseResource.FailoverAsync (waitUntil, replicaType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="replicaType" Type="System.Nullable&lt;Azure.ResourceManager.Sql.Models.ReplicaType&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="replicaType"> The type of replica to be failed over. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Failovers a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover
            Operation Id: Databases_Failover
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackupShortTermRetentionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyCollection GetBackupShortTermRetentionPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyCollection GetBackupShortTermRetentionPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetBackupShortTermRetentionPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBackupShortTermRetentionPolicies () As BackupShortTermRetentionPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetBackupShortTermRetentionPolicies : unit -&gt; Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyCollection&#xA;override this.GetBackupShortTermRetentionPolicies : unit -&gt; Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyCollection" Usage="sqlDatabaseResource.GetBackupShortTermRetentionPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of BackupShortTermRetentionPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of BackupShortTermRetentionPolicyResources and their operations over a BackupShortTermRetentionPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackupShortTermRetentionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt; GetBackupShortTermRetentionPolicy (Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName policyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt; GetBackupShortTermRetentionPolicy(valuetype Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName policyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetBackupShortTermRetentionPolicy(Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBackupShortTermRetentionPolicy (policyName As ShortTermRetentionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BackupShortTermRetentionPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetBackupShortTermRetentionPolicy : Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&#xA;override this.GetBackupShortTermRetentionPolicy : Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;" Usage="sqlDatabaseResource.GetBackupShortTermRetentionPolicy (policyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyName" Type="Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policyName"> The policy name. Should always be "default". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's short term retention policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}
            Operation Id: BackupShortTermRetentionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackupShortTermRetentionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&gt; GetBackupShortTermRetentionPolicyAsync (Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName policyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&gt; GetBackupShortTermRetentionPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName policyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetBackupShortTermRetentionPolicyAsync(Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBackupShortTermRetentionPolicyAsync (policyName As ShortTermRetentionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BackupShortTermRetentionPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetBackupShortTermRetentionPolicyAsync : Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&gt;&#xA;override this.GetBackupShortTermRetentionPolicyAsync : Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetBackupShortTermRetentionPolicyAsync (policyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.BackupShortTermRetentionPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyName" Type="Azure.ResourceManager.Sql.Models.ShortTermRetentionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policyName"> The policy name. Should always be "default". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's short term retention policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}
            Operation Id: BackupShortTermRetentionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSensitivityLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetCurrentSensitivityLabels (string skipToken = default, bool? count = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetCurrentSensitivityLabels(string skipToken, valuetype System.Nullable`1&lt;bool&gt; count, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetCurrentSensitivityLabels(System.String,System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSensitivityLabels (Optional skipToken As String = Nothing, Optional count As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlDatabaseSensitivityLabelResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;&#xA;override this.GetCurrentSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetCurrentSensitivityLabels (skipToken, count, filter, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetCurrentSensitivityLabels (string skipToken = default, bool? count = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetCurrentSensitivityLabels(string skipToken, valuetype System.Nullable`1&lt;bool&gt; count, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSensitivityLabels (Optional skipToken As String = Nothing, Optional count As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ServerDatabaseSchemaTableColumnSensitivityLabelResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;&#xA;override this.GetCurrentSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetCurrentSensitivityLabels (skipToken, count, filter, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="count" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="count"> The Boolean to use. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the sensitivity labels of a given database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels
            Operation Id: SensitivityLabels_ListCurrentByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSensitivityLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetCurrentSensitivityLabelsAsync (string skipToken = default, bool? count = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetCurrentSensitivityLabelsAsync(string skipToken, valuetype System.Nullable`1&lt;bool&gt; count, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetCurrentSensitivityLabelsAsync(System.String,System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSensitivityLabelsAsync (Optional skipToken As String = Nothing, Optional count As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlDatabaseSensitivityLabelResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;&#xA;override this.GetCurrentSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetCurrentSensitivityLabelsAsync (skipToken, count, filter, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetCurrentSensitivityLabelsAsync (string skipToken = default, bool? count = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetCurrentSensitivityLabelsAsync(string skipToken, valuetype System.Nullable`1&lt;bool&gt; count, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSensitivityLabelsAsync (Optional skipToken As String = Nothing, Optional count As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ServerDatabaseSchemaTableColumnSensitivityLabelResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;&#xA;override this.GetCurrentSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetCurrentSensitivityLabelsAsync (skipToken, count, filter, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="count" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="count"> The Boolean to use. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the sensitivity labels of a given database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels
            Operation Id: SensitivityLabels_ListCurrentByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseAutomaticTuning">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource GetDatabaseAutomaticTuning ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource GetDatabaseAutomaticTuning() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseAutomaticTuning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseAutomaticTuning () As DatabaseAutomaticTuningResource" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseAutomaticTuning : unit -&gt; Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource&#xA;override this.GetDatabaseAutomaticTuning : unit -&gt; Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource" Usage="sqlDatabaseResource.GetDatabaseAutomaticTuning " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a DatabaseAutomaticTuningResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.DatabaseAutomaticTuningResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseBlobAuditingPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyCollection GetDatabaseBlobAuditingPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyCollection GetDatabaseBlobAuditingPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseBlobAuditingPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseBlobAuditingPolicies () As DatabaseBlobAuditingPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyCollection&#xA;override this.GetDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyCollection" Usage="sqlDatabaseResource.GetDatabaseBlobAuditingPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DatabaseBlobAuditingPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of DatabaseBlobAuditingPolicyResources and their operations over a DatabaseBlobAuditingPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseBlobAuditingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt; GetDatabaseBlobAuditingPolicy (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt; GetDatabaseBlobAuditingPolicy(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseBlobAuditingPolicy(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseBlobAuditingPolicy (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DatabaseBlobAuditingPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&#xA;override this.GetDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;" Usage="sqlDatabaseResource.GetDatabaseBlobAuditingPolicy (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
            Operation Id: DatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseBlobAuditingPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&gt; GetDatabaseBlobAuditingPolicyAsync (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&gt; GetDatabaseBlobAuditingPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseBlobAuditingPolicyAsync(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DatabaseBlobAuditingPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&gt;&#xA;override this.GetDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseBlobAuditingPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
            Operation Id: DatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseColumns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt; GetDatabaseColumns (System.Collections.Generic.IEnumerable&lt;string&gt; schema = default, System.Collections.Generic.IEnumerable&lt;string&gt; table = default, System.Collections.Generic.IEnumerable&lt;string&gt; column = default, System.Collections.Generic.IEnumerable&lt;string&gt; orderBy = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt; GetDatabaseColumns(class System.Collections.Generic.IEnumerable`1&lt;string&gt; schema, class System.Collections.Generic.IEnumerable`1&lt;string&gt; table, class System.Collections.Generic.IEnumerable`1&lt;string&gt; column, class System.Collections.Generic.IEnumerable`1&lt;string&gt; orderBy, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseColumns(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseColumns (Optional schema As IEnumerable(Of String) = Nothing, Optional table As IEnumerable(Of String) = Nothing, Optional column As IEnumerable(Of String) = Nothing, Optional orderBy As IEnumerable(Of String) = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlDatabaseColumnResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseColumns : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;&#xA;override this.GetDatabaseColumns : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;" Usage="sqlDatabaseResource.GetDatabaseColumns (schema, table, column, orderBy, skiptoken, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt; GetDatabaseColumns (System.Collections.Generic.IEnumerable&lt;string&gt; schema = default, System.Collections.Generic.IEnumerable&lt;string&gt; table = default, System.Collections.Generic.IEnumerable&lt;string&gt; column = default, System.Collections.Generic.IEnumerable&lt;string&gt; orderBy = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt; GetDatabaseColumns(class System.Collections.Generic.IEnumerable`1&lt;string&gt; schema, class System.Collections.Generic.IEnumerable`1&lt;string&gt; table, class System.Collections.Generic.IEnumerable`1&lt;string&gt; column, class System.Collections.Generic.IEnumerable`1&lt;string&gt; orderBy, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseColumns (Optional schema As IEnumerable(Of String) = Nothing, Optional table As IEnumerable(Of String) = Nothing, Optional column As IEnumerable(Of String) = Nothing, Optional orderBy As IEnumerable(Of String) = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ServerDatabaseSchemaTableColumnResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseColumns : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;&#xA;override this.GetDatabaseColumns : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;" Usage="sqlDatabaseResource.GetDatabaseColumns (schema, table, column, orderBy, skiptoken, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="table" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="column" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="orderBy" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="schema"> The ArrayOfGet3ItemsItem to use. </param>
        <param name="table"> The ArrayOfGet4ItemsItem to use. </param>
        <param name="column"> The ArrayOfGet5ItemsItem to use. </param>
        <param name="orderBy"> The ArrayOfGet6ItemsItem to use. </param>
        <param name="skiptoken"> An opaque token that identifies a starting point in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List database columns
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/columns
            Operation Id: DatabaseColumns_ListByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseColumnResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseColumnsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt; GetDatabaseColumnsAsync (System.Collections.Generic.IEnumerable&lt;string&gt; schema = default, System.Collections.Generic.IEnumerable&lt;string&gt; table = default, System.Collections.Generic.IEnumerable&lt;string&gt; column = default, System.Collections.Generic.IEnumerable&lt;string&gt; orderBy = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt; GetDatabaseColumnsAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; schema, class System.Collections.Generic.IEnumerable`1&lt;string&gt; table, class System.Collections.Generic.IEnumerable`1&lt;string&gt; column, class System.Collections.Generic.IEnumerable`1&lt;string&gt; orderBy, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseColumnsAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseColumnsAsync (Optional schema As IEnumerable(Of String) = Nothing, Optional table As IEnumerable(Of String) = Nothing, Optional column As IEnumerable(Of String) = Nothing, Optional orderBy As IEnumerable(Of String) = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlDatabaseColumnResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseColumnsAsync : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;&#xA;override this.GetDatabaseColumnsAsync : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;" Usage="sqlDatabaseResource.GetDatabaseColumnsAsync (schema, table, column, orderBy, skiptoken, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt; GetDatabaseColumnsAsync (System.Collections.Generic.IEnumerable&lt;string&gt; schema = default, System.Collections.Generic.IEnumerable&lt;string&gt; table = default, System.Collections.Generic.IEnumerable&lt;string&gt; column = default, System.Collections.Generic.IEnumerable&lt;string&gt; orderBy = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt; GetDatabaseColumnsAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; schema, class System.Collections.Generic.IEnumerable`1&lt;string&gt; table, class System.Collections.Generic.IEnumerable`1&lt;string&gt; column, class System.Collections.Generic.IEnumerable`1&lt;string&gt; orderBy, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseColumnsAsync (Optional schema As IEnumerable(Of String) = Nothing, Optional table As IEnumerable(Of String) = Nothing, Optional column As IEnumerable(Of String) = Nothing, Optional orderBy As IEnumerable(Of String) = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ServerDatabaseSchemaTableColumnResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseColumnsAsync : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;&#xA;override this.GetDatabaseColumnsAsync : seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;" Usage="sqlDatabaseResource.GetDatabaseColumnsAsync (schema, table, column, orderBy, skiptoken, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseColumnResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="table" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="column" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="orderBy" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="schema"> The ArrayOfGet3ItemsItem to use. </param>
        <param name="table"> The ArrayOfGet4ItemsItem to use. </param>
        <param name="column"> The ArrayOfGet5ItemsItem to use. </param>
        <param name="orderBy"> The ArrayOfGet6ItemsItem to use. </param>
        <param name="skiptoken"> An opaque token that identifies a starting point in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List database columns
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/columns
            Operation Id: DatabaseColumns_ListByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseColumnResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; GetDatabaseExtensions (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; GetDatabaseExtensions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseExtensions(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseExtensions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ImportExportExtensionsOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseExtensions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&#xA;override this.GetDatabaseExtensions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;" Usage="sqlDatabaseResource.GetDatabaseExtensions cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List database extension. This will return an empty list as it is not supported.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions
            Operation Id: DatabaseExtensions_ListByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; GetDatabaseExtensionsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt; GetDatabaseExtensionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseExtensionsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseExtensionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ImportExportExtensionsOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseExtensionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;&#xA;override this.GetDatabaseExtensionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;" Usage="sqlDatabaseResource.GetDatabaseExtensionsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List database extension. This will return an empty list as it is not supported.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions
            Operation Id: DatabaseExtensions_ListByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.Models.ImportExportExtensionsOperationResult" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseOperations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt; GetDatabaseOperations (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt; GetDatabaseOperations(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseOperations(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseOperations (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DatabaseOperationData)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;&#xA;override this.GetDatabaseOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;" Usage="sqlDatabaseResource.GetDatabaseOperations cancellationToken" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt; GetDatabaseOperations (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseOperation&gt; GetDatabaseOperations(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseOperations (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DatabaseOperation)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;&#xA;override this.GetDatabaseOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;" Usage="sqlDatabaseResource.GetDatabaseOperations cancellationToken" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of operations performed on the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations
            Operation Id: DatabaseOperations_ListByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.Models.DatabaseOperationData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseOperationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt; GetDatabaseOperationsAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt; GetDatabaseOperationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseOperationsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseOperationsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DatabaseOperationData)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;&#xA;override this.GetDatabaseOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;" Usage="sqlDatabaseResource.GetDatabaseOperationsAsync cancellationToken" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt; GetDatabaseOperationsAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseOperation&gt; GetDatabaseOperationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseOperationsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DatabaseOperation)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;&#xA;override this.GetDatabaseOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;" Usage="sqlDatabaseResource.GetDatabaseOperationsAsync cancellationToken" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperationData&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of operations performed on the database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations
            Operation Id: DatabaseOperations_ListByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.Models.DatabaseOperationData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseSecurityAlertPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyCollection GetDatabaseSecurityAlertPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyCollection GetDatabaseSecurityAlertPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseSecurityAlertPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseSecurityAlertPolicies () As DatabaseSecurityAlertPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyCollection&#xA;override this.GetDatabaseSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyCollection" Usage="sqlDatabaseResource.GetDatabaseSecurityAlertPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DatabaseSecurityAlertPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of DatabaseSecurityAlertPolicyResources and their operations over a DatabaseSecurityAlertPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseSecurityAlertPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt; GetDatabaseSecurityAlertPolicy (Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt; GetDatabaseSecurityAlertPolicy(valuetype Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseSecurityAlertPolicy(Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseSecurityAlertPolicy (securityAlertPolicyName As SecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DatabaseSecurityAlertPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseSecurityAlertPolicy : Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&#xA;override this.GetDatabaseSecurityAlertPolicy : Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;" Usage="sqlDatabaseResource.GetDatabaseSecurityAlertPolicy (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: DatabaseSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseSecurityAlertPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&gt; GetDatabaseSecurityAlertPolicyAsync (Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&gt; GetDatabaseSecurityAlertPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseSecurityAlertPolicyAsync(Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseSecurityAlertPolicyAsync (securityAlertPolicyName As SecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DatabaseSecurityAlertPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseSecurityAlertPolicyAsync : Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&gt;&#xA;override this.GetDatabaseSecurityAlertPolicyAsync : Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetDatabaseSecurityAlertPolicyAsync (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DatabaseSecurityAlertPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Sql.Models.SecurityAlertPolicyName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: DatabaseSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseUsages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt; GetDatabaseUsages (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseUsage&gt; GetDatabaseUsages(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseUsages(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseUsages (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DatabaseUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;&#xA;override this.GetDatabaseUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;" Usage="sqlDatabaseResource.GetDatabaseUsages cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets database usages.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages
            Operation Id: DatabaseUsages_ListByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.Models.DatabaseUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDatabaseUsagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt; GetDatabaseUsagesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.DatabaseUsage&gt; GetDatabaseUsagesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDatabaseUsagesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDatabaseUsagesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DatabaseUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetDatabaseUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;&#xA;override this.GetDatabaseUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;" Usage="sqlDatabaseResource.GetDatabaseUsagesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.DatabaseUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets database usages.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages
            Operation Id: DatabaseUsages_ListByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.Models.DatabaseUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataMaskingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DataMaskingPolicyResource GetDataMaskingPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DataMaskingPolicyResource GetDataMaskingPolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataMaskingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataMaskingPolicy () As DataMaskingPolicyResource" />
      <MemberSignature Language="F#" Value="abstract member GetDataMaskingPolicy : unit -&gt; Azure.ResourceManager.Sql.DataMaskingPolicyResource&#xA;override this.GetDataMaskingPolicy : unit -&gt; Azure.ResourceManager.Sql.DataMaskingPolicyResource" Usage="sqlDatabaseResource.GetDataMaskingPolicy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.DataMaskingPolicyResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a DataMaskingPolicyResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.DataMaskingPolicyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivities">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DataWarehouseUserActivityCollection GetDataWarehouseUserActivities ();" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DataWarehouseUserActivityCollection GetDataWarehouseUserActivities() cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataWarehouseUserActivities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivities () As DataWarehouseUserActivityCollection" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Sql.DataWarehouseUserActivityCollection&#xA;override this.GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Sql.DataWarehouseUserActivityCollection" Usage="sqlDatabaseResource.GetDataWarehouseUserActivities " FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.DataWarehouseUserActivitiesCollection GetDataWarehouseUserActivities ();" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.DataWarehouseUserActivitiesCollection GetDataWarehouseUserActivities() cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivities () As DataWarehouseUserActivitiesCollection" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Sql.DataWarehouseUserActivitiesCollection&#xA;override this.GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Sql.DataWarehouseUserActivitiesCollection" Usage="sqlDatabaseResource.GetDataWarehouseUserActivities " FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.ResourceManager.Sql.DataWarehouseUserActivityCollection</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.ResourceManager.Sql.DataWarehouseUserActivitiesCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataWarehouseUserActivityResources in the SqlDatabase. </summary>
        <returns> An object representing collection of DataWarehouseUserActivityResources and their operations over a DataWarehouseUserActivityResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt; GetDataWarehouseUserActivities (Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt; GetDataWarehouseUserActivities(valuetype Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataWarehouseUserActivities(Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivities (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataWarehouseUserActivitiesResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivities : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&#xA;override this.GetDataWarehouseUserActivities : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;" Usage="sqlDatabaseResource.GetDataWarehouseUserActivities (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the data warehouse. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a data warehouse which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: DataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&gt; GetDataWarehouseUserActivitiesAsync (Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&gt; GetDataWarehouseUserActivitiesAsync(valuetype Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataWarehouseUserActivitiesAsync(Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivitiesAsync (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataWarehouseUserActivitiesResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivitiesAsync : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&gt;&#xA;override this.GetDataWarehouseUserActivitiesAsync : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&gt;" Usage="sqlDatabaseResource.GetDataWarehouseUserActivitiesAsync (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivitiesResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the data warehouse. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a data warehouse which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: DataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt; GetDataWarehouseUserActivity (Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt; GetDataWarehouseUserActivity(valuetype Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataWarehouseUserActivity(Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivity (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataWarehouseUserActivityResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivity : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&#xA;override this.GetDataWarehouseUserActivity : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;" Usage="sqlDatabaseResource.GetDataWarehouseUserActivity (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the data warehouse. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a data warehouse which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: DataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&gt; GetDataWarehouseUserActivityAsync (Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&gt; GetDataWarehouseUserActivityAsync(valuetype Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetDataWarehouseUserActivityAsync(Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivityAsync (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataWarehouseUserActivityResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivityAsync : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&gt;&#xA;override this.GetDataWarehouseUserActivityAsync : Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&gt;" Usage="sqlDatabaseResource.GetDataWarehouseUserActivityAsync (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.DataWarehouseUserActivityResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Sql.Models.DataWarehouseUserActivityName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the data warehouse. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a data warehouse which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: DataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtendedDatabaseBlobAuditingPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyCollection GetExtendedDatabaseBlobAuditingPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyCollection GetExtendedDatabaseBlobAuditingPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedDatabaseBlobAuditingPolicies () As ExtendedDatabaseBlobAuditingPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyCollection&#xA;override this.GetExtendedDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyCollection" Usage="sqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ExtendedDatabaseBlobAuditingPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of ExtendedDatabaseBlobAuditingPolicyResources and their operations over a ExtendedDatabaseBlobAuditingPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtendedDatabaseBlobAuditingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt; GetExtendedDatabaseBlobAuditingPolicy (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt; GetExtendedDatabaseBlobAuditingPolicy(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicy(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedDatabaseBlobAuditingPolicy (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExtendedDatabaseBlobAuditingPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&#xA;override this.GetExtendedDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;" Usage="sqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicy (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an extended database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}
            Operation Id: ExtendedDatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtendedDatabaseBlobAuditingPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&gt; GetExtendedDatabaseBlobAuditingPolicyAsync (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&gt; GetExtendedDatabaseBlobAuditingPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicyAsync(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExtendedDatabaseBlobAuditingPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&gt;&#xA;override this.GetExtendedDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetExtendedDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ExtendedDatabaseBlobAuditingPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an extended database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}
            Operation Id: ExtendedDatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.GeoBackupPolicyCollection GetGeoBackupPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.GeoBackupPolicyCollection GetGeoBackupPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetGeoBackupPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicies () As GeoBackupPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicies : unit -&gt; Azure.ResourceManager.Sql.GeoBackupPolicyCollection&#xA;override this.GetGeoBackupPolicies : unit -&gt; Azure.ResourceManager.Sql.GeoBackupPolicyCollection" Usage="sqlDatabaseResource.GetGeoBackupPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.GeoBackupPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of GeoBackupPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of GeoBackupPolicyResources and their operations over a GeoBackupPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt; GetGeoBackupPolicy (Azure.ResourceManager.Sql.Models.GeoBackupPolicyName geoBackupPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt; GetGeoBackupPolicy(valuetype Azure.ResourceManager.Sql.Models.GeoBackupPolicyName geoBackupPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetGeoBackupPolicy(Azure.ResourceManager.Sql.Models.GeoBackupPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicy (geoBackupPolicyName As GeoBackupPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeoBackupPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicy : Azure.ResourceManager.Sql.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&#xA;override this.GetGeoBackupPolicy : Azure.ResourceManager.Sql.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;" Usage="sqlDatabaseResource.GetGeoBackupPolicy (geoBackupPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geoBackupPolicyName" Type="Azure.ResourceManager.Sql.Models.GeoBackupPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="geoBackupPolicyName"> The name of the geo backup policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a geo backup policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}
            Operation Id: GeoBackupPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&gt; GetGeoBackupPolicyAsync (Azure.ResourceManager.Sql.Models.GeoBackupPolicyName geoBackupPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&gt; GetGeoBackupPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.GeoBackupPolicyName geoBackupPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetGeoBackupPolicyAsync(Azure.ResourceManager.Sql.Models.GeoBackupPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicyAsync (geoBackupPolicyName As GeoBackupPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeoBackupPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicyAsync : Azure.ResourceManager.Sql.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&gt;&#xA;override this.GetGeoBackupPolicyAsync : Azure.ResourceManager.Sql.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetGeoBackupPolicyAsync (geoBackupPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.GeoBackupPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geoBackupPolicyName" Type="Azure.ResourceManager.Sql.Models.GeoBackupPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="geoBackupPolicyName"> The name of the geo backup policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a geo backup policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}
            Operation Id: GeoBackupPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerDigestUpload">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt; GetLedgerDigestUpload (Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt; GetLedgerDigestUpload(valuetype Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLedgerDigestUpload(Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUpload (ledgerDigestUploads As LedgerDigestUploadsName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LedgerDigestUploadResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUpload : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&#xA;override this.GetLedgerDigestUpload : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;" Usage="sqlDatabaseResource.GetLedgerDigestUpload (ledgerDigestUploads, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerDigestUploads" Type="Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="ledgerDigestUploads"> The LedgerDigestUploadsName to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the current ledger digest upload configuration for a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}
            Operation Id: LedgerDigestUploads_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerDigestUploadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&gt; GetLedgerDigestUploadAsync (Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&gt; GetLedgerDigestUploadAsync(valuetype Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLedgerDigestUploadAsync(Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUploadAsync (ledgerDigestUploads As LedgerDigestUploadsName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LedgerDigestUploadResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUploadAsync : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&gt;&#xA;override this.GetLedgerDigestUploadAsync : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&gt;" Usage="sqlDatabaseResource.GetLedgerDigestUploadAsync (ledgerDigestUploads, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerDigestUploads" Type="Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="ledgerDigestUploads"> The LedgerDigestUploadsName to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the current ledger digest upload configuration for a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}
            Operation Id: LedgerDigestUploads_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerDigestUploads">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.LedgerDigestUploadCollection GetLedgerDigestUploads ();" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.LedgerDigestUploadCollection GetLedgerDigestUploads() cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLedgerDigestUploads" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUploads () As LedgerDigestUploadCollection" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUploads : unit -&gt; Azure.ResourceManager.Sql.LedgerDigestUploadCollection&#xA;override this.GetLedgerDigestUploads : unit -&gt; Azure.ResourceManager.Sql.LedgerDigestUploadCollection" Usage="sqlDatabaseResource.GetLedgerDigestUploads " FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.LedgerDigestUploadsCollection GetLedgerDigestUploads ();" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.LedgerDigestUploadsCollection GetLedgerDigestUploads() cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUploads () As LedgerDigestUploadsCollection" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUploads : unit -&gt; Azure.ResourceManager.Sql.LedgerDigestUploadsCollection&#xA;override this.GetLedgerDigestUploads : unit -&gt; Azure.ResourceManager.Sql.LedgerDigestUploadsCollection" Usage="sqlDatabaseResource.GetLedgerDigestUploads " FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.ResourceManager.Sql.LedgerDigestUploadCollection</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.ResourceManager.Sql.LedgerDigestUploadsCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LedgerDigestUploadResources in the SqlDatabase. </summary>
        <returns> An object representing collection of LedgerDigestUploadResources and their operations over a LedgerDigestUploadResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerDigestUploads">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt; GetLedgerDigestUploads (Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt; GetLedgerDigestUploads(valuetype Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLedgerDigestUploads(Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUploads (ledgerDigestUploads As LedgerDigestUploadsName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LedgerDigestUploadsResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUploads : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&#xA;override this.GetLedgerDigestUploads : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;" Usage="sqlDatabaseResource.GetLedgerDigestUploads (ledgerDigestUploads, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerDigestUploads" Type="Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ledgerDigestUploads"> The LedgerDigestUploadsName to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the current ledger digest upload configuration for a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}
            Operation Id: LedgerDigestUploads_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerDigestUploadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&gt; GetLedgerDigestUploadsAsync (Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&gt; GetLedgerDigestUploadsAsync(valuetype Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName ledgerDigestUploads, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLedgerDigestUploadsAsync(Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerDigestUploadsAsync (ledgerDigestUploads As LedgerDigestUploadsName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LedgerDigestUploadsResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerDigestUploadsAsync : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&gt;&#xA;override this.GetLedgerDigestUploadsAsync : Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&gt;" Usage="sqlDatabaseResource.GetLedgerDigestUploadsAsync (ledgerDigestUploads, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LedgerDigestUploadsResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerDigestUploads" Type="Azure.ResourceManager.Sql.Models.LedgerDigestUploadsName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="ledgerDigestUploads"> The LedgerDigestUploadsName to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the current ledger digest upload configuration for a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}
            Operation Id: LedgerDigestUploads_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDatabaseTransparentDataEncryption">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt; GetLogicalDatabaseTransparentDataEncryption (Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName tdeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt; GetLogicalDatabaseTransparentDataEncryption(valuetype Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName tdeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryption(Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalDatabaseTransparentDataEncryption (tdeName As TransparentDataEncryptionName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogicalDatabaseTransparentDataEncryptionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalDatabaseTransparentDataEncryption : Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&#xA;override this.GetLogicalDatabaseTransparentDataEncryption : Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;" Usage="sqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryption (tdeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tdeName" Type="Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tdeName"> The name of the transparent data encryption configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a logical database's transparent data encryption.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{tdeName}
            Operation Id: TransparentDataEncryptions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDatabaseTransparentDataEncryptionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&gt; GetLogicalDatabaseTransparentDataEncryptionAsync (Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName tdeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&gt; GetLogicalDatabaseTransparentDataEncryptionAsync(valuetype Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName tdeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryptionAsync(Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalDatabaseTransparentDataEncryptionAsync (tdeName As TransparentDataEncryptionName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogicalDatabaseTransparentDataEncryptionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalDatabaseTransparentDataEncryptionAsync : Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&gt;&#xA;override this.GetLogicalDatabaseTransparentDataEncryptionAsync : Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&gt;" Usage="sqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryptionAsync (tdeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tdeName" Type="Azure.ResourceManager.Sql.Models.TransparentDataEncryptionName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tdeName"> The name of the transparent data encryption configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a logical database's transparent data encryption.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{tdeName}
            Operation Id: TransparentDataEncryptions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDatabaseTransparentDataEncryptions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionCollection GetLogicalDatabaseTransparentDataEncryptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionCollection GetLogicalDatabaseTransparentDataEncryptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalDatabaseTransparentDataEncryptions () As LogicalDatabaseTransparentDataEncryptionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalDatabaseTransparentDataEncryptions : unit -&gt; Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionCollection&#xA;override this.GetLogicalDatabaseTransparentDataEncryptions : unit -&gt; Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionCollection" Usage="sqlDatabaseResource.GetLogicalDatabaseTransparentDataEncryptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.LogicalDatabaseTransparentDataEncryptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LogicalDatabaseTransparentDataEncryptionResources in the SqlDatabase. </summary>
        <returns> An object representing collection of LogicalDatabaseTransparentDataEncryptionResources and their operations over a LogicalDatabaseTransparentDataEncryptionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.LongTermRetentionPolicyCollection GetLongTermRetentionPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.LongTermRetentionPolicyCollection GetLongTermRetentionPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLongTermRetentionPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionPolicies () As LongTermRetentionPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionPolicies : unit -&gt; Azure.ResourceManager.Sql.LongTermRetentionPolicyCollection&#xA;override this.GetLongTermRetentionPolicies : unit -&gt; Azure.ResourceManager.Sql.LongTermRetentionPolicyCollection" Usage="sqlDatabaseResource.GetLongTermRetentionPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.LongTermRetentionPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LongTermRetentionPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of LongTermRetentionPolicyResources and their operations over a LongTermRetentionPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt; GetLongTermRetentionPolicy (Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName policyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt; GetLongTermRetentionPolicy(valuetype Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName policyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLongTermRetentionPolicy(Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionPolicy (policyName As LongTermRetentionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LongTermRetentionPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionPolicy : Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&#xA;override this.GetLongTermRetentionPolicy : Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;" Usage="sqlDatabaseResource.GetLongTermRetentionPolicy (policyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyName" Type="Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policyName"> The policy name. Should always be Default. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's long term retention policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}
            Operation Id: LongTermRetentionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLongTermRetentionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&gt; GetLongTermRetentionPolicyAsync (Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName policyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&gt; GetLongTermRetentionPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName policyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetLongTermRetentionPolicyAsync(Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLongTermRetentionPolicyAsync (policyName As LongTermRetentionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LongTermRetentionPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLongTermRetentionPolicyAsync : Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&gt;&#xA;override this.GetLongTermRetentionPolicyAsync : Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetLongTermRetentionPolicyAsync (policyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.LongTermRetentionPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyName" Type="Azure.ResourceManager.Sql.Models.LongTermRetentionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policyName"> The policy name. Should always be Default. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's long term retention policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}
            Operation Id: LongTermRetentionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaintenanceWindowOption">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.MaintenanceWindowOptionResource GetMaintenanceWindowOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.MaintenanceWindowOptionResource GetMaintenanceWindowOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMaintenanceWindowOption" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMaintenanceWindowOption () As MaintenanceWindowOptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetMaintenanceWindowOption : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowOptionResource&#xA;override this.GetMaintenanceWindowOption : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowOptionResource" Usage="sqlDatabaseResource.GetMaintenanceWindowOption " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.MaintenanceWindowOptionResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MaintenanceWindowOptionResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.MaintenanceWindowOptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaintenanceWindowOptions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource GetMaintenanceWindowOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource GetMaintenanceWindowOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMaintenanceWindowOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMaintenanceWindowOptions () As MaintenanceWindowOptionsResource" />
      <MemberSignature Language="F#" Value="abstract member GetMaintenanceWindowOptions : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource&#xA;override this.GetMaintenanceWindowOptions : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource" Usage="sqlDatabaseResource.GetMaintenanceWindowOptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MaintenanceWindowOptionsResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.MaintenanceWindowOptionsResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaintenanceWindows">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.MaintenanceWindowsResource GetMaintenanceWindows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.MaintenanceWindowsResource GetMaintenanceWindows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMaintenanceWindows" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMaintenanceWindows () As MaintenanceWindowsResource" />
      <MemberSignature Language="F#" Value="abstract member GetMaintenanceWindows : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowsResource&#xA;override this.GetMaintenanceWindows : unit -&gt; Azure.ResourceManager.Sql.MaintenanceWindowsResource" Usage="sqlDatabaseResource.GetMaintenanceWindows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.MaintenanceWindowsResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MaintenanceWindowsResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.MaintenanceWindowsResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetricDefinitions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt; GetMetricDefinitions (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt; GetMetricDefinitions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMetricDefinitions(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricDefinitions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlMetricDefinition)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetMetricDefinitions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;&#xA;override this.GetMetricDefinitions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;" Usage="sqlDatabaseResource.GetMetricDefinitions cancellationToken" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt; GetMetricDefinitions (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.MetricDefinition&gt; GetMetricDefinitions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricDefinitions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of MetricDefinition)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetMetricDefinitions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;&#xA;override this.GetMetricDefinitions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;" Usage="sqlDatabaseResource.GetMetricDefinitions cancellationToken" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns database metric definitions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions
            Operation Id: MetricDefinitions_ListDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.Models.SqlMetricDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetricDefinitionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt; GetMetricDefinitionsAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt; GetMetricDefinitionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMetricDefinitionsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricDefinitionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlMetricDefinition)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetMetricDefinitionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;&#xA;override this.GetMetricDefinitionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;" Usage="sqlDatabaseResource.GetMetricDefinitionsAsync cancellationToken" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt; GetMetricDefinitionsAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.MetricDefinition&gt; GetMetricDefinitionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricDefinitionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of MetricDefinition)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetMetricDefinitionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;&#xA;override this.GetMetricDefinitionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;" Usage="sqlDatabaseResource.GetMetricDefinitionsAsync cancellationToken" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetricDefinition&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.MetricDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns database metric definitions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions
            Operation Id: MetricDefinitions_ListDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.Models.SqlMetricDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt; GetMetrics (string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.Models.SqlMetric&gt; GetMetrics(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMetrics(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetrics (filter As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlMetric)" />
      <MemberSignature Language="F#" Value="abstract member GetMetrics : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;&#xA;override this.GetMetrics : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;" Usage="sqlDatabaseResource.GetMetrics (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter expression that describes a subset of metrics to return. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns database metrics.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics
            Operation Id: Metrics_ListDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.Models.SqlMetric" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filter" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt; GetMetricsAsync (string filter, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.Models.SqlMetric&gt; GetMetricsAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetMetricsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricsAsync (filter As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlMetric)" />
      <MemberSignature Language="F#" Value="abstract member GetMetricsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;&#xA;override this.GetMetricsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;" Usage="sqlDatabaseResource.GetMetricsAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.Models.SqlMetric&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter expression that describes a subset of metrics to return. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns database metrics.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics
            Operation Id: Metrics_ListDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.Models.SqlMetric" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filter" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRecommendedSensitivityLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetRecommendedSensitivityLabels (string skipToken = default, bool? includeDisabledRecommendations = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetRecommendedSensitivityLabels(string skipToken, valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetRecommendedSensitivityLabels(System.String,System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSensitivityLabels (Optional skipToken As String = Nothing, Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlDatabaseSensitivityLabelResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;&#xA;override this.GetRecommendedSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetRecommendedSensitivityLabels (skipToken, includeDisabledRecommendations, filter, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetRecommendedSensitivityLabels (string skipToken = default, bool? includeDisabledRecommendations = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetRecommendedSensitivityLabels(string skipToken, valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSensitivityLabels (Optional skipToken As String = Nothing, Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ServerDatabaseSchemaTableColumnSensitivityLabelResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;&#xA;override this.GetRecommendedSensitivityLabels : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetRecommendedSensitivityLabels (skipToken, includeDisabledRecommendations, filter, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Pageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Pageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="includeDisabledRecommendations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="includeDisabledRecommendations"> Specifies whether to include disabled recommendations or not. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the sensitivity labels of a given database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels
            Operation Id: SensitivityLabels_ListRecommendedByDatabase
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecommendedSensitivityLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetRecommendedSensitivityLabelsAsync (string skipToken = default, bool? includeDisabledRecommendations = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt; GetRecommendedSensitivityLabelsAsync(string skipToken, valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetRecommendedSensitivityLabelsAsync(System.String,System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSensitivityLabelsAsync (Optional skipToken As String = Nothing, Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlDatabaseSensitivityLabelResource)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;&#xA;override this.GetRecommendedSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetRecommendedSensitivityLabelsAsync (skipToken, includeDisabledRecommendations, filter, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetRecommendedSensitivityLabelsAsync (string skipToken = default, bool? includeDisabledRecommendations = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt; GetRecommendedSensitivityLabelsAsync(string skipToken, valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSensitivityLabelsAsync (Optional skipToken As String = Nothing, Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ServerDatabaseSchemaTableColumnSensitivityLabelResource)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;&#xA;override this.GetRecommendedSensitivityLabelsAsync : string * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;" Usage="sqlDatabaseResource.GetRecommendedSensitivityLabelsAsync (skipToken, includeDisabledRecommendations, filter, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.AsyncPageable&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaTableColumnSensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="includeDisabledRecommendations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="skipToken"> The String to use. </param>
        <param name="includeDisabledRecommendations"> Specifies whether to include disabled recommendations or not. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the sensitivity labels of a given database
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels
            Operation Id: SensitivityLabels_ListRecommendedByDatabase
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseSensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLink">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt; GetReplicationLink (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ReplicationLinkResource&gt; GetReplicationLink(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetReplicationLink(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLink (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReplicationLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&#xA;override this.GetReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;" Usage="sqlDatabaseResource.GetReplicationLink (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="linkId"> The name of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a replication link.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}
            Operation Id: ReplicationLinks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLinkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&gt; GetReplicationLinkAsync (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&gt; GetReplicationLinkAsync(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetReplicationLinkAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLinkAsync (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReplicationLinkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&gt;&#xA;override this.GetReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&gt;" Usage="sqlDatabaseResource.GetReplicationLinkAsync (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ReplicationLinkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="linkId"> The name of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a replication link.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}
            Operation Id: ReplicationLinks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLinks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.ReplicationLinkCollection GetReplicationLinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.ReplicationLinkCollection GetReplicationLinks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetReplicationLinks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLinks () As ReplicationLinkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLinks : unit -&gt; Azure.ResourceManager.Sql.ReplicationLinkCollection&#xA;override this.GetReplicationLinks : unit -&gt; Azure.ResourceManager.Sql.ReplicationLinkCollection" Usage="sqlDatabaseResource.GetReplicationLinks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.ReplicationLinkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ReplicationLinkResources in the SqlDatabase. </summary>
        <returns> An object representing collection of ReplicationLinkResources and their operations over a ReplicationLinkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePoint">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt; GetRestorePoint (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.RestorePointResource&gt; GetRestorePoint(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetRestorePoint(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePoint (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RestorePointResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&#xA;override this.GetRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;" Usage="sqlDatabaseResource.GetRestorePoint (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}
            Operation Id: RestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt; GetRestorePointAsync (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.RestorePointResource&gt;&gt; GetRestorePointAsync(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetRestorePointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePointAsync (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RestorePointResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;&#xA;override this.GetRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;" Usage="sqlDatabaseResource.GetRestorePointAsync (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.RestorePointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}
            Operation Id: RestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePoints">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.RestorePointCollection GetRestorePoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.RestorePointCollection GetRestorePoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetRestorePoints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePoints () As RestorePointCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePoints : unit -&gt; Azure.ResourceManager.Sql.RestorePointCollection&#xA;override this.GetRestorePoints : unit -&gt; Azure.ResourceManager.Sql.RestorePointCollection" Usage="sqlDatabaseResource.GetRestorePoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.RestorePointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RestorePointResources in the SqlDatabase. </summary>
        <returns> An object representing collection of RestorePointResources and their operations over a RestorePointResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseAdvisor">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt; GetServerDatabaseAdvisor (string advisorName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt; GetServerDatabaseAdvisor(string advisorName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseAdvisor(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseAdvisor (advisorName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServerDatabaseAdvisorResource)" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseAdvisor : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&#xA;override this.GetServerDatabaseAdvisor : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;" Usage="sqlDatabaseResource.GetServerDatabaseAdvisor (advisorName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advisorName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="advisorName"> The name of the Database Advisor. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database advisor.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
            Operation Id: DatabaseAdvisors_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="advisorName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="advisorName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseAdvisorAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&gt; GetServerDatabaseAdvisorAsync (string advisorName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&gt; GetServerDatabaseAdvisorAsync(string advisorName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseAdvisorAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseAdvisorAsync (advisorName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServerDatabaseAdvisorResource))" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseAdvisorAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&gt;&#xA;override this.GetServerDatabaseAdvisorAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&gt;" Usage="sqlDatabaseResource.GetServerDatabaseAdvisorAsync (advisorName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseAdvisorResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advisorName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="advisorName"> The name of the Database Advisor. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database advisor.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
            Operation Id: DatabaseAdvisors_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="advisorName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="advisorName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseAdvisors">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.ServerDatabaseAdvisorCollection GetServerDatabaseAdvisors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.ServerDatabaseAdvisorCollection GetServerDatabaseAdvisors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseAdvisors" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseAdvisors () As ServerDatabaseAdvisorCollection" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseAdvisors : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseAdvisorCollection&#xA;override this.GetServerDatabaseAdvisors : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseAdvisorCollection" Usage="sqlDatabaseResource.GetServerDatabaseAdvisors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.ServerDatabaseAdvisorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ServerDatabaseAdvisorResources in the SqlDatabase. </summary>
        <returns> An object representing collection of ServerDatabaseAdvisorResources and their operations over a ServerDatabaseAdvisorResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseSchema">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt; GetServerDatabaseSchema (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt; GetServerDatabaseSchema(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseSchema(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseSchema (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServerDatabaseSchemaResource)" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&#xA;override this.GetServerDatabaseSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;" Usage="sqlDatabaseResource.GetServerDatabaseSchema (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get database schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}
            Operation Id: DatabaseSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseSchemaAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&gt; GetServerDatabaseSchemaAsync (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&gt; GetServerDatabaseSchemaAsync(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseSchemaAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseSchemaAsync (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServerDatabaseSchemaResource))" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&gt;&#xA;override this.GetServerDatabaseSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&gt;" Usage="sqlDatabaseResource.GetServerDatabaseSchemaAsync (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseSchemaResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get database schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}
            Operation Id: DatabaseSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseSchemas">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.ServerDatabaseSchemaCollection GetServerDatabaseSchemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.ServerDatabaseSchemaCollection GetServerDatabaseSchemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseSchemas" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseSchemas () As ServerDatabaseSchemaCollection" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseSchemas : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseSchemaCollection&#xA;override this.GetServerDatabaseSchemas : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseSchemaCollection" Usage="sqlDatabaseResource.GetServerDatabaseSchemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.ServerDatabaseSchemaCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ServerDatabaseSchemaResources in the SqlDatabase. </summary>
        <returns> An object representing collection of ServerDatabaseSchemaResources and their operations over a ServerDatabaseSchemaResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseVulnerabilityAssessment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt; GetServerDatabaseVulnerabilityAssessment (Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt; GetServerDatabaseVulnerabilityAssessment(valuetype Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseVulnerabilityAssessment(Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseVulnerabilityAssessment (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServerDatabaseVulnerabilityAssessmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseVulnerabilityAssessment : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&#xA;override this.GetServerDatabaseVulnerabilityAssessment : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;" Usage="sqlDatabaseResource.GetServerDatabaseVulnerabilityAssessment (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the database's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: DatabaseVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseVulnerabilityAssessmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&gt; GetServerDatabaseVulnerabilityAssessmentAsync (Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&gt; GetServerDatabaseVulnerabilityAssessmentAsync(valuetype Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseVulnerabilityAssessmentAsync(Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseVulnerabilityAssessmentAsync (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServerDatabaseVulnerabilityAssessmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseVulnerabilityAssessmentAsync : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&gt;&#xA;override this.GetServerDatabaseVulnerabilityAssessmentAsync : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&gt;" Usage="sqlDatabaseResource.GetServerDatabaseVulnerabilityAssessmentAsync (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the database's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: DatabaseVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerDatabaseVulnerabilityAssessments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentCollection GetServerDatabaseVulnerabilityAssessments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentCollection GetServerDatabaseVulnerabilityAssessments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetServerDatabaseVulnerabilityAssessments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServerDatabaseVulnerabilityAssessments () As ServerDatabaseVulnerabilityAssessmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetServerDatabaseVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentCollection&#xA;override this.GetServerDatabaseVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentCollection" Usage="sqlDatabaseResource.GetServerDatabaseVulnerabilityAssessments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.ServerDatabaseVulnerabilityAssessmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ServerDatabaseVulnerabilityAssessmentResources in the SqlDatabase. </summary>
        <returns> An object representing collection of ServerDatabaseVulnerabilityAssessmentResources and their operations over a ServerDatabaseVulnerabilityAssessmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseAdvisor">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt; GetSqlDatabaseAdvisor (string advisorName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt; GetSqlDatabaseAdvisor(string advisorName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseAdvisor(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseAdvisor (advisorName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseAdvisorResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseAdvisor : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&#xA;override this.GetSqlDatabaseAdvisor : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseAdvisor (advisorName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advisorName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="advisorName"> The name of the Database Advisor. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database advisor.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
            Operation Id: DatabaseAdvisors_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="advisorName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="advisorName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseAdvisorAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&gt; GetSqlDatabaseAdvisorAsync (string advisorName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&gt; GetSqlDatabaseAdvisorAsync(string advisorName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseAdvisorAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseAdvisorAsync (advisorName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseAdvisorResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseAdvisorAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&gt;&#xA;override this.GetSqlDatabaseAdvisorAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseAdvisorAsync (advisorName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseAdvisorResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advisorName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="advisorName"> The name of the Database Advisor. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database advisor.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}
            Operation Id: DatabaseAdvisors_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="advisorName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="advisorName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseAdvisors">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseAdvisorCollection GetSqlDatabaseAdvisors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseAdvisorCollection GetSqlDatabaseAdvisors() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseAdvisors" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseAdvisors () As SqlDatabaseAdvisorCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseAdvisors : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseAdvisorCollection&#xA;override this.GetSqlDatabaseAdvisors : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseAdvisorCollection" Usage="sqlDatabaseResource.GetSqlDatabaseAdvisors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseAdvisorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlDatabaseAdvisorResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlDatabaseAdvisorResources and their operations over a SqlDatabaseAdvisorResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseAutomaticTuning">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource GetSqlDatabaseAutomaticTuning ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource GetSqlDatabaseAutomaticTuning() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseAutomaticTuning" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseAutomaticTuning () As SqlDatabaseAutomaticTuningResource" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseAutomaticTuning : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource&#xA;override this.GetSqlDatabaseAutomaticTuning : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource" Usage="sqlDatabaseResource.GetSqlDatabaseAutomaticTuning " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a SqlDatabaseAutomaticTuningResource along with the instance operations that can be performed on it in the SqlDatabase. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Sql.SqlDatabaseAutomaticTuningResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseBlobAuditingPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyCollection GetSqlDatabaseBlobAuditingPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyCollection GetSqlDatabaseBlobAuditingPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseBlobAuditingPolicies () As SqlDatabaseBlobAuditingPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyCollection&#xA;override this.GetSqlDatabaseBlobAuditingPolicies : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyCollection" Usage="sqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlDatabaseBlobAuditingPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlDatabaseBlobAuditingPolicyResources and their operations over a SqlDatabaseBlobAuditingPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseBlobAuditingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt; GetSqlDatabaseBlobAuditingPolicy (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt; GetSqlDatabaseBlobAuditingPolicy(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicy(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseBlobAuditingPolicy (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseBlobAuditingPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&#xA;override this.GetSqlDatabaseBlobAuditingPolicy : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicy (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
            Operation Id: DatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseBlobAuditingPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&gt; GetSqlDatabaseBlobAuditingPolicyAsync (Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&gt; GetSqlDatabaseBlobAuditingPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName blobAuditingPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicyAsync(Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName As BlobAuditingPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseBlobAuditingPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&gt;&#xA;override this.GetSqlDatabaseBlobAuditingPolicyAsync : Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseBlobAuditingPolicyAsync (blobAuditingPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseBlobAuditingPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobAuditingPolicyName" Type="Azure.ResourceManager.Sql.Models.BlobAuditingPolicyName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="blobAuditingPolicyName"> The name of the blob auditing policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's blob auditing policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}
            Operation Id: DatabaseBlobAuditingPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSchema">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt; GetSqlDatabaseSchema (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt; GetSqlDatabaseSchema(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSchema(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSchema (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseSchemaResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&#xA;override this.GetSqlDatabaseSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseSchema (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get database schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}
            Operation Id: DatabaseSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSchemaAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&gt; GetSqlDatabaseSchemaAsync (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&gt; GetSqlDatabaseSchemaAsync(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSchemaAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSchemaAsync (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseSchemaResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&gt;&#xA;override this.GetSqlDatabaseSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseSchemaAsync (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSchemaResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get database schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}
            Operation Id: DatabaseSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSchemas">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseSchemaCollection GetSqlDatabaseSchemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseSchemaCollection GetSqlDatabaseSchemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSchemas" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSchemas () As SqlDatabaseSchemaCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSchemas : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseSchemaCollection&#xA;override this.GetSqlDatabaseSchemas : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseSchemaCollection" Usage="sqlDatabaseResource.GetSqlDatabaseSchemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseSchemaCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlDatabaseSchemaResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlDatabaseSchemaResources and their operations over a SqlDatabaseSchemaResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSecurityAlertPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyCollection GetSqlDatabaseSecurityAlertPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyCollection GetSqlDatabaseSecurityAlertPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSecurityAlertPolicies () As SqlDatabaseSecurityAlertPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyCollection&#xA;override this.GetSqlDatabaseSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyCollection" Usage="sqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlDatabaseSecurityAlertPolicyResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlDatabaseSecurityAlertPolicyResources and their operations over a SqlDatabaseSecurityAlertPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSecurityAlertPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt; GetSqlDatabaseSecurityAlertPolicy (Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt; GetSqlDatabaseSecurityAlertPolicy(valuetype Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicy(Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSecurityAlertPolicy (securityAlertPolicyName As SqlSecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseSecurityAlertPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSecurityAlertPolicy : Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&#xA;override this.GetSqlDatabaseSecurityAlertPolicy : Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicy (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: DatabaseSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseSecurityAlertPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&gt; GetSqlDatabaseSecurityAlertPolicyAsync (Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&gt; GetSqlDatabaseSecurityAlertPolicyAsync(valuetype Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicyAsync(Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseSecurityAlertPolicyAsync (securityAlertPolicyName As SqlSecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseSecurityAlertPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseSecurityAlertPolicyAsync : Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&gt;&#xA;override this.GetSqlDatabaseSecurityAlertPolicyAsync : Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseSecurityAlertPolicyAsync (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseSecurityAlertPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Sql.Models.SqlSecurityAlertPolicyName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a database's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: DatabaseSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseVulnerabilityAssessment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt; GetSqlDatabaseVulnerabilityAssessment (Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt; GetSqlDatabaseVulnerabilityAssessment(valuetype Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessment(Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseVulnerabilityAssessment (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseVulnerabilityAssessmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseVulnerabilityAssessment : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&#xA;override this.GetSqlDatabaseVulnerabilityAssessment : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessment (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the database's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: DatabaseVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseVulnerabilityAssessmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&gt; GetSqlDatabaseVulnerabilityAssessmentAsync (Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&gt; GetSqlDatabaseVulnerabilityAssessmentAsync(valuetype Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessmentAsync(Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseVulnerabilityAssessmentAsync (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseVulnerabilityAssessmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseVulnerabilityAssessmentAsync : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&gt;&#xA;override this.GetSqlDatabaseVulnerabilityAssessmentAsync : Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessmentAsync (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Sql.Models.VulnerabilityAssessmentName" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the database's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: DatabaseVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlDatabaseVulnerabilityAssessments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentCollection GetSqlDatabaseVulnerabilityAssessments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentCollection GetSqlDatabaseVulnerabilityAssessments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlDatabaseVulnerabilityAssessments () As SqlDatabaseVulnerabilityAssessmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlDatabaseVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentCollection&#xA;override this.GetSqlDatabaseVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentCollection" Usage="sqlDatabaseResource.GetSqlDatabaseVulnerabilityAssessments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlDatabaseVulnerabilityAssessmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlDatabaseVulnerabilityAssessmentResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlDatabaseVulnerabilityAssessmentResources and their operations over a SqlDatabaseVulnerabilityAssessmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseReplicationLink">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt; GetSqlServerDatabaseReplicationLink (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt; GetSqlServerDatabaseReplicationLink(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseReplicationLink(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseReplicationLink (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlServerDatabaseReplicationLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&#xA;override this.GetSqlServerDatabaseReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;" Usage="sqlDatabaseResource.GetSqlServerDatabaseReplicationLink (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="linkId"> The name of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a replication link.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}
            Operation Id: ReplicationLinks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseReplicationLinkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&gt; GetSqlServerDatabaseReplicationLinkAsync (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&gt; GetSqlServerDatabaseReplicationLinkAsync(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseReplicationLinkAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseReplicationLinkAsync (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlServerDatabaseReplicationLinkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&gt;&#xA;override this.GetSqlServerDatabaseReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlServerDatabaseReplicationLinkAsync (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="linkId"> The name of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a replication link.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}
            Operation Id: ReplicationLinks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseReplicationLinks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkCollection GetSqlServerDatabaseReplicationLinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkCollection GetSqlServerDatabaseReplicationLinks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseReplicationLinks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseReplicationLinks () As SqlServerDatabaseReplicationLinkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseReplicationLinks : unit -&gt; Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkCollection&#xA;override this.GetSqlServerDatabaseReplicationLinks : unit -&gt; Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkCollection" Usage="sqlDatabaseResource.GetSqlServerDatabaseReplicationLinks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlServerDatabaseReplicationLinkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlServerDatabaseReplicationLinkResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlServerDatabaseReplicationLinkResources and their operations over a SqlServerDatabaseReplicationLinkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseRestorePoint">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt; GetSqlServerDatabaseRestorePoint (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt; GetSqlServerDatabaseRestorePoint(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseRestorePoint(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseRestorePoint (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlServerDatabaseRestorePointResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&#xA;override this.GetSqlServerDatabaseRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;" Usage="sqlDatabaseResource.GetSqlServerDatabaseRestorePoint (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}
            Operation Id: RestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseRestorePointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt; GetSqlServerDatabaseRestorePointAsync (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt; GetSqlServerDatabaseRestorePointAsync(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseRestorePointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseRestorePointAsync (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlServerDatabaseRestorePointResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;&#xA;override this.GetSqlServerDatabaseRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;" Usage="sqlDatabaseResource.GetSqlServerDatabaseRestorePointAsync (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}
            Operation Id: RestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlServerDatabaseRestorePoints">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointCollection GetSqlServerDatabaseRestorePoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointCollection GetSqlServerDatabaseRestorePoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSqlServerDatabaseRestorePoints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlServerDatabaseRestorePoints () As SqlServerDatabaseRestorePointCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlServerDatabaseRestorePoints : unit -&gt; Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointCollection&#xA;override this.GetSqlServerDatabaseRestorePoints : unit -&gt; Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointCollection" Usage="sqlDatabaseResource.GetSqlServerDatabaseRestorePoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SqlServerDatabaseRestorePointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlServerDatabaseRestorePointResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SqlServerDatabaseRestorePointResources and their operations over a SqlServerDatabaseRestorePointResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSyncGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt; GetSyncGroup (string syncGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SyncGroupResource&gt; GetSyncGroup(string syncGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSyncGroup(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSyncGroup (syncGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SyncGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSyncGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;&#xA;override this.GetSyncGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;" Usage="sqlDatabaseResource.GetSyncGroup (syncGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncGroupName"> The name of the sync group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a sync group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
            Operation Id: SyncGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="syncGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="syncGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSyncGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;&gt; GetSyncGroupAsync (string syncGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SyncGroupResource&gt;&gt; GetSyncGroupAsync(string syncGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSyncGroupAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSyncGroupAsync (syncGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SyncGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSyncGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;&gt;&#xA;override this.GetSyncGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;&gt;" Usage="sqlDatabaseResource.GetSyncGroupAsync (syncGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SyncGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="syncGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="syncGroupName"> The name of the sync group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a sync group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}
            Operation Id: SyncGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="syncGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="syncGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSyncGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.SyncGroupCollection GetSyncGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.SyncGroupCollection GetSyncGroups() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetSyncGroups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSyncGroups () As SyncGroupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSyncGroups : unit -&gt; Azure.ResourceManager.Sql.SyncGroupCollection&#xA;override this.GetSyncGroups : unit -&gt; Azure.ResourceManager.Sql.SyncGroupCollection" Usage="sqlDatabaseResource.GetSyncGroups " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.SyncGroupCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SyncGroupResources in the SqlDatabase. </summary>
        <returns> An object representing collection of SyncGroupResources and their operations over a SyncGroupResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt; GetWorkloadGroup (string workloadGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.WorkloadGroupResource&gt; GetWorkloadGroup(string workloadGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetWorkloadGroup(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroup (workloadGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of WorkloadGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&#xA;override this.GetWorkloadGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;" Usage="sqlDatabaseResource.GetWorkloadGroup (workloadGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workloadGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workloadGroupName"> The name of the workload group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a workload group
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}
            Operation Id: WorkloadGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workloadGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workloadGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&gt; GetWorkloadGroupAsync (string workloadGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&gt; GetWorkloadGroupAsync(string workloadGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetWorkloadGroupAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroupAsync (workloadGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of WorkloadGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&gt;&#xA;override this.GetWorkloadGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&gt;" Usage="sqlDatabaseResource.GetWorkloadGroupAsync (workloadGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.WorkloadGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workloadGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workloadGroupName"> The name of the workload group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a workload group
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}
            Operation Id: WorkloadGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workloadGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workloadGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Sql.WorkloadGroupCollection GetWorkloadGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Sql.WorkloadGroupCollection GetWorkloadGroups() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.GetWorkloadGroups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroups () As WorkloadGroupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroups : unit -&gt; Azure.ResourceManager.Sql.WorkloadGroupCollection&#xA;override this.GetWorkloadGroups : unit -&gt; Azure.ResourceManager.Sql.WorkloadGroupCollection" Usage="sqlDatabaseResource.GetWorkloadGroups " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Sql.WorkloadGroupCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of WorkloadGroupResources in the SqlDatabase. </summary>
        <returns> An object representing collection of WorkloadGroupResources and their operations over a WorkloadGroupResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Sql.SqlDatabaseResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.Sql.SqlDatabaseResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Import (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition importExistingDatabaseDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt; Import(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition importExistingDatabaseDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Import(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Import (waitUntil As WaitUntil, importExistingDatabaseDefinition As ImportExistingDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ImportExportOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member Import : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&#xA;override this.Import : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;" Usage="sqlDatabaseResource.Import (waitUntil, importExistingDatabaseDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="importExistingDatabaseDefinition" Type="Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="importExistingDatabaseDefinition"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Imports a bacpac into a new database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/import
            Operation Id: Databases_Import
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="importExistingDatabaseDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ImportAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition importExistingDatabaseDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt; ImportAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition importExistingDatabaseDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.ImportAsync(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAsync (waitUntil As WaitUntil, importExistingDatabaseDefinition As ImportExistingDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ImportExportOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member ImportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;&#xA;override this.ImportAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;" Usage="sqlDatabaseResource.ImportAsync (waitUntil, importExistingDatabaseDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.Models.ImportExportOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="importExistingDatabaseDefinition" Type="Azure.ResourceManager.Sql.Models.ImportExistingDatabaseDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="importExistingDatabaseDefinition"> The database import request parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Imports a bacpac into a new database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/import
            Operation Id: Databases_Import
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="importExistingDatabaseDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Pause (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Pause(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Pause(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Pause (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Pause : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.Pause : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.Pause (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Pauses a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause
            Operation Id: Databases_Pause
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; PauseAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; PauseAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.PauseAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PauseAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member PauseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.PauseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.PauseAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Pauses a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause
            Operation Id: Databases_Pause
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Rename (Azure.ResourceManager.Sql.Models.ResourceMoveDefinition resourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Rename(class Azure.ResourceManager.Sql.Models.ResourceMoveDefinition resourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Rename(Azure.ResourceManager.Sql.Models.ResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rename (resourceMoveDefinition As ResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Rename : Azure.ResourceManager.Sql.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Rename : Azure.ResourceManager.Sql.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlDatabaseResource.Rename (resourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceMoveDefinition" Type="Azure.ResourceManager.Sql.Models.ResourceMoveDefinition" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="resourceMoveDefinition"> The resource move definition for renaming this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renames a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move
            Operation Id: Databases_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Rename (Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition sqlResourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Rename(class Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition sqlResourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Rename(Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rename (sqlResourceMoveDefinition As SqlResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Rename : Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Rename : Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlDatabaseResource.Rename (sqlResourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlResourceMoveDefinition" Type="Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="sqlResourceMoveDefinition"> The resource move definition for renaming this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renames a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move
            Operation Id: Databases_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sqlResourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenameAsync (Azure.ResourceManager.Sql.Models.ResourceMoveDefinition resourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenameAsync(class Azure.ResourceManager.Sql.Models.ResourceMoveDefinition resourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.RenameAsync(Azure.ResourceManager.Sql.Models.ResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenameAsync (resourceMoveDefinition As ResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenameAsync : Azure.ResourceManager.Sql.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenameAsync : Azure.ResourceManager.Sql.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlDatabaseResource.RenameAsync (resourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceMoveDefinition" Type="Azure.ResourceManager.Sql.Models.ResourceMoveDefinition" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="resourceMoveDefinition"> The resource move definition for renaming this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renames a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move
            Operation Id: Databases_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenameAsync (Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition sqlResourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenameAsync(class Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition sqlResourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.RenameAsync(Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenameAsync (sqlResourceMoveDefinition As SqlResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenameAsync : Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenameAsync : Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlDatabaseResource.RenameAsync (sqlResourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sqlResourceMoveDefinition" Type="Azure.ResourceManager.Sql.Models.SqlResourceMoveDefinition" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="sqlResourceMoveDefinition"> The resource move definition for renaming this database. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renames a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move
            Operation Id: Databases_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sqlResourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.Sql.SqlDatabaseResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.Sql.SqlDatabaseResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Resume (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Resume(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Resume(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Resume (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Resume : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.Resume : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.Resume (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Resumes a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume
            Operation Id: Databases_Resume
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; ResumeAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; ResumeAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.ResumeAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResumeAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member ResumeAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.ResumeAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.ResumeAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Resumes a database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume
            Operation Id: Databases_Resume
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.SqlDatabasePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.SqlDatabasePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.Update(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.SqlDatabasePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, patch As SqlDatabasePatch, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SqlDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.SqlDatabasePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.SqlDatabasePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;" Usage="sqlDatabaseResource.Update (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.Sql.Models.SqlDatabasePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The requested database resource state. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates an existing database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Sql.Models.SqlDatabasePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Sql.Models.SqlDatabasePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Sql.Models.SqlDatabasePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, patch As SqlDatabasePatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SqlDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.SqlDatabasePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.Sql.Models.SqlDatabasePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;" Usage="sqlDatabaseResource.UpdateAsync (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Sql.SqlDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.Sql.Models.SqlDatabasePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The requested database resource state. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates an existing database.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}
            Operation Id: Databases_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRecommendedSensitivityLabel">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateRecommendedSensitivityLabel (Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateRecommendedSensitivityLabel(class Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpdateRecommendedSensitivityLabel(Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRecommendedSensitivityLabel (recommendedSensitivityLabelUpdateList As RecommendedSensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateRecommendedSensitivityLabel : Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateRecommendedSensitivityLabel : Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlDatabaseResource.UpdateRecommendedSensitivityLabel (recommendedSensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recommendedSensitivityLabelUpdateList" Type="Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="recommendedSensitivityLabelUpdateList"> The RecommendedSensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update recommended sensitivity labels states of a given database using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels
            Operation Id: SensitivityLabels_UpdateRecommended
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="recommendedSensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRecommendedSensitivityLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateRecommendedSensitivityLabelAsync (Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateRecommendedSensitivityLabelAsync(class Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpdateRecommendedSensitivityLabelAsync(Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRecommendedSensitivityLabelAsync (recommendedSensitivityLabelUpdateList As RecommendedSensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRecommendedSensitivityLabelAsync : Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateRecommendedSensitivityLabelAsync : Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlDatabaseResource.UpdateRecommendedSensitivityLabelAsync (recommendedSensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recommendedSensitivityLabelUpdateList" Type="Azure.ResourceManager.Sql.Models.RecommendedSensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="recommendedSensitivityLabelUpdateList"> The RecommendedSensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update recommended sensitivity labels states of a given database using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels
            Operation Id: SensitivityLabels_UpdateRecommended
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="recommendedSensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSensitivityLabel">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateSensitivityLabel (Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateSensitivityLabel(class Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpdateSensitivityLabel(Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSensitivityLabel (sensitivityLabelUpdateList As SensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateSensitivityLabel : Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateSensitivityLabel : Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlDatabaseResource.UpdateSensitivityLabel (sensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitivityLabelUpdateList" Type="Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sensitivityLabelUpdateList"> The SensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update sensitivity labels of a given database using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels
            Operation Id: SensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSensitivityLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateSensitivityLabelAsync (Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateSensitivityLabelAsync(class Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpdateSensitivityLabelAsync(Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSensitivityLabelAsync (sensitivityLabelUpdateList As SensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSensitivityLabelAsync : Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateSensitivityLabelAsync : Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlDatabaseResource.UpdateSensitivityLabelAsync (sensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitivityLabelUpdateList" Type="Azure.ResourceManager.Sql.Models.SensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sensitivityLabelUpdateList"> The SensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update sensitivity labels of a given database using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels
            Operation Id: SensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeDataWarehouse">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation UpgradeDataWarehouse (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation UpgradeDataWarehouse(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpgradeDataWarehouse(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpgradeDataWarehouse (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member UpgradeDataWarehouse : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.UpgradeDataWarehouse : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="sqlDatabaseResource.UpgradeDataWarehouse (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upgrades a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse
            Operation Id: Databases_UpgradeDataWarehouse
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpgradeDataWarehouseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; UpgradeDataWarehouseAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; UpgradeDataWarehouseAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Sql.SqlDatabaseResource.UpgradeDataWarehouseAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpgradeDataWarehouseAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member UpgradeDataWarehouseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.UpgradeDataWarehouseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="sqlDatabaseResource.UpgradeDataWarehouseAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Sql</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upgrades a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse
            Operation Id: Databases_UpgradeDataWarehouse
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
