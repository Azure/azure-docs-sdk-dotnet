<Type Name="ScVmmVirtualMachineInstanceResource" FullName="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource">
  <TypeSignature Language="C#" Value="public class ScVmmVirtualMachineInstanceResource : Azure.ResourceManager.ArmResource, System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ScVmmVirtualMachineInstanceResource extends Azure.ResourceManager.ArmResource implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" />
  <TypeSignature Language="VB.NET" Value="Public Class ScVmmVirtualMachineInstanceResource&#xA;Inherits ArmResource&#xA;Implements IJsonModel(Of ScVmmVirtualMachineInstanceData), IPersistableModel(Of ScVmmVirtualMachineInstanceData)" />
  <TypeSignature Language="F#" Value="type ScVmmVirtualMachineInstanceResource = class&#xA;    inherit ArmResource&#xA;    interface IJsonModel&lt;ScVmmVirtualMachineInstanceData&gt;&#xA;    interface IPersistableModel&lt;ScVmmVirtualMachineInstanceData&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A Class representing a ScVmmVirtualMachineInstance along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetScVmmVirtualMachineInstanceResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.ArmResource" /> using the GetScVmmVirtualMachineInstance method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ScVmmVirtualMachineInstanceResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCheckpoint">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation CreateCheckpoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation CreateCheckpoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateCheckpoint(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCheckpoint (waitUntil As WaitUntil, Optional content As VirtualMachineCreateCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member CreateCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.CreateCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.CreateCheckpoint (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine create checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/createCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_CreateCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCheckpointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; CreateCheckpointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; CreateCheckpointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateCheckpointAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCheckpointAsync (waitUntil As WaitUntil, Optional content As VirtualMachineCreateCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member CreateCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.CreateCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.CreateCheckpointAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineCreateCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine create checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/createCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_CreateCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; CreateOrUpdate (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; CreateOrUpdate(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateOrUpdate(Azure.WaitUntil,Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (waitUntil As WaitUntil, data As ScVmmVirtualMachineInstanceData, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ScVmmVirtualMachineInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.WaitUntil * Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&#xA;override this.CreateOrUpdate : Azure.WaitUntil * Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;" Usage="scVmmVirtualMachineInstanceResource.CreateOrUpdate (waitUntil, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> Request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual machine instance creation.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_CreateOrUpdate</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; CreateOrUpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; CreateOrUpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateOrUpdateAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (waitUntil As WaitUntil, data As ScVmmVirtualMachineInstanceData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ScVmmVirtualMachineInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;&#xA;override this.CreateOrUpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;" Usage="scVmmVirtualMachineInstanceResource.CreateOrUpdateAsync (waitUntil, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> Request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to create or update a virtual machine instance. Please note some properties can be set only during virtual machine instance creation.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_CreateOrUpdate</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string resourceUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string resourceUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateResourceIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (resourceUri As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.CreateResourceIdentifier resourceUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceUri"> The resourceUri. </param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As ScVmmVirtualMachineInstanceData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData" Usage="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion? force = default, Azure.ResourceManager.ScVmm.Models.DeleteFromHost? deleteFromHost = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; force, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; deleteFromHost, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Delete(Azure.WaitUntil,System.Nullable{Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion},System.Nullable{Azure.ResourceManager.ScVmm.Models.DeleteFromHost},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional force As Nullable(Of ScVmmForceDeletion) = Nothing, Optional deleteFromHost As Nullable(Of DeleteFromHost) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; * Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; * Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.Delete (waitUntil, force, deleteFromHost, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="force" Type="System.Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt;" />
        <Parameter Name="deleteFromHost" Type="System.Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="force"> Whether force delete was specified. </param>
        <param name="deleteFromHost"> Whether to disable the VM from azure and also delete it from VMM. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to delete a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Delete</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion? force = default, Azure.ResourceManager.ScVmm.Models.DeleteFromHost? deleteFromHost = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; force, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; deleteFromHost, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.DeleteAsync(Azure.WaitUntil,System.Nullable{Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion},System.Nullable{Azure.ResourceManager.ScVmm.Models.DeleteFromHost},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional force As Nullable(Of ScVmmForceDeletion) = Nothing, Optional deleteFromHost As Nullable(Of DeleteFromHost) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; * Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt; * Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.DeleteAsync (waitUntil, force, deleteFromHost, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="force" Type="System.Nullable&lt;Azure.ResourceManager.ScVmm.Models.ScVmmForceDeletion&gt;" />
        <Parameter Name="deleteFromHost" Type="System.Nullable&lt;Azure.ResourceManager.ScVmm.Models.DeleteFromHost&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="force"> Whether force delete was specified. </param>
        <param name="deleteFromHost"> Whether to disable the VM from azure and also delete it from VMM. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to delete a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Delete</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCheckpoint">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation DeleteCheckpoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation DeleteCheckpoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.DeleteCheckpoint(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCheckpoint (waitUntil As WaitUntil, Optional content As VirtualMachineDeleteCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member DeleteCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.DeleteCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.DeleteCheckpoint (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine delete checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/deleteCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_DeleteCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCheckpointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteCheckpointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteCheckpointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.DeleteCheckpointAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCheckpointAsync (waitUntil As WaitUntil, Optional content As VirtualMachineDeleteCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.DeleteCheckpointAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineDeleteCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine delete checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/deleteCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_DeleteCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ScVmmVirtualMachineInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;" Usage="scVmmVirtualMachineInstanceResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Get</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ScVmmVirtualMachineInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;" Usage="scVmmVirtualMachineInstanceResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Get</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScVmmGuestAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource GetScVmmGuestAgent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource GetScVmmGuestAgent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.GetScVmmGuestAgent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScVmmGuestAgent () As ScVmmGuestAgentResource" />
      <MemberSignature Language="F#" Value="abstract member GetScVmmGuestAgent : unit -&gt; Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource&#xA;override this.GetScVmmGuestAgent : unit -&gt; Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource" Usage="scVmmVirtualMachineInstanceResource.GetScVmmGuestAgent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a ScVmmGuestAgentResource along with the instance operations that can be performed on it in the ScVmmVirtualMachineInstance. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ScVmm.ScVmmGuestAgentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScVmmHybridIdentityMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource GetScVmmHybridIdentityMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource GetScVmmHybridIdentityMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.GetScVmmHybridIdentityMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScVmmHybridIdentityMetadata () As ScVmmHybridIdentityMetadataResource" />
      <MemberSignature Language="F#" Value="abstract member GetScVmmHybridIdentityMetadata : unit -&gt; Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource&#xA;override this.GetScVmmHybridIdentityMetadata : unit -&gt; Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource" Usage="scVmmVirtualMachineInstanceResource.GetScVmmHybridIdentityMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a ScVmmHybridIdentityMetadataResource along with the instance operations that can be performed on it in the ScVmmVirtualMachineInstance. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ScVmm.ScVmmHybridIdentityMetadataResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Restart (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Restart(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Restart(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Restart (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Restart : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Restart : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.Restart (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to restart a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/restart</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Restart</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestartAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; RestartAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; RestartAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.RestartAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RestartAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member RestartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.RestartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.RestartAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to restart a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/restart</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Restart</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreCheckpoint">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation RestoreCheckpoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation RestoreCheckpoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.RestoreCheckpoint(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RestoreCheckpoint (waitUntil As WaitUntil, Optional content As VirtualMachineRestoreCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member RestoreCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.RestoreCheckpoint : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.RestoreCheckpoint (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine restore checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Restores to a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/restoreCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_RestoreCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreCheckpointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; RestoreCheckpointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; RestoreCheckpointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.RestoreCheckpointAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RestoreCheckpointAsync (waitUntil As WaitUntil, Optional content As VirtualMachineRestoreCheckpointContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member RestoreCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.RestoreCheckpointAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.RestoreCheckpointAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.VirtualMachineRestoreCheckpointContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine restore checkpoint action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Restores to a checkpoint in virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/restoreCheckpoint</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_RestoreCheckpoint</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Start (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Start(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Start(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Start (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Start : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Start : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.Start (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to start a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/start</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Start</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; StartAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; StartAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.StartAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member StartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.StartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.StartAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to start a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/start</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Start</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Stop (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Stop(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Stop(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Stop (waitUntil As WaitUntil, Optional content As StopVirtualMachineContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Stop : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Stop : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="scVmmVirtualMachineInstanceResource.Stop (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine stop action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to power off (stop) a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/stop</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Stop</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; StopAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent content = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; StopAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.StopAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopAsync (waitUntil As WaitUntil, Optional content As StopVirtualMachineContent = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.StopAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="scVmmVirtualMachineInstanceResource.StopAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ScVmm.Models.StopVirtualMachineContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Virtualmachine stop action payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to power off (stop) a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default/stop</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Stop</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData IJsonModel&lt;ScVmmVirtualMachineInstanceData&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#ScVmm#ScVmmVirtualMachineInstanceData&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As ScVmmVirtualMachineInstanceData Implements IJsonModel(Of ScVmmVirtualMachineInstanceData).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData" Usage="scVmmVirtualMachineInstanceResource.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;ScVmmVirtualMachineInstanceData&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#ScVmm#ScVmmVirtualMachineInstanceData&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of ScVmmVirtualMachineInstanceData).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="scVmmVirtualMachineInstanceResource.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData IPersistableModel&lt;ScVmmVirtualMachineInstanceData&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ScVmm#ScVmmVirtualMachineInstanceData&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As ScVmmVirtualMachineInstanceData Implements IPersistableModel(Of ScVmmVirtualMachineInstanceData).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData" Usage="scVmmVirtualMachineInstanceResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ScVmm#ScVmmVirtualMachineInstanceData&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of ScVmmVirtualMachineInstanceData).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="scVmmVirtualMachineInstanceResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param></summary>
        <returns>The format that the model uses when communicating with the serivce.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;ScVmmVirtualMachineInstanceData&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ScVmm#ScVmmVirtualMachineInstanceData&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of ScVmmVirtualMachineInstanceData).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="scVmmVirtualMachineInstanceResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceData&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.Update(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, patch As ScVmmVirtualMachineInstancePatch, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ScVmmVirtualMachineInstanceResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;" Usage="scVmmVirtualMachineInstanceResource.Update (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> Resource properties to update. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to update a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Update</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, patch As ScVmmVirtualMachineInstancePatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ScVmmVirtualMachineInstanceResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;" Usage="scVmmVirtualMachineInstanceResource.UpdateAsync (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ScVmm</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.ScVmm.Models.ScVmmVirtualMachineInstancePatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> Resource properties to update. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to update a virtual machine instance.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ScVmm/virtualMachineInstances/default</description></item><item><term>Operation Id</term><description>VirtualMachineInstances_Update</description></item><item><term>Default Api Version</term><description>2023-10-07</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ScVmm.ScVmmVirtualMachineInstanceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
