<Type Name="WorkbookCollection" FullName="Azure.ResourceManager.ApplicationInsights.WorkbookCollection">
  <TypeSignature Language="C#" Value="public class WorkbookCollection : Azure.ResourceManager.ArmCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WorkbookCollection extends Azure.ResourceManager.ArmCollection" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ApplicationInsights.WorkbookCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkbookCollection&#xA;Inherits ArmCollection" />
  <TypeSignature Language="F#" Value="type WorkbookCollection = class&#xA;    inherit ArmCollection" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" />.
            To get a <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookCollection" /> instance call the GetWorkbooks method from an instance of <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkbookCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; CreateOrUpdate (Azure.WaitUntil waitUntil, string resourceName, Azure.ResourceManager.ApplicationInsights.WorkbookData data, string sourceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; CreateOrUpdate(valuetype Azure.WaitUntil waitUntil, string resourceName, class Azure.ResourceManager.ApplicationInsights.WorkbookData data, string sourceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.ApplicationInsights.WorkbookData,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (waitUntil As WaitUntil, resourceName As String, data As WorkbookData, Optional sourceId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of WorkbookResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ApplicationInsights.WorkbookData * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&#xA;override this.CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ApplicationInsights.WorkbookData * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;" Usage="workbookCollection.CreateOrUpdate (waitUntil, resourceName, data, sourceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.ApplicationInsights.WorkbookData" />
        <Parameter Name="sourceId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="resourceName"> The name of the resource. </param>
        <param name="data"> Properties that need to be specified to create a new workbook. </param>
        <param name="sourceId"> Azure Resource Id that will fetch all linked workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create a new workbook.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_CreateOrUpdate</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; CreateOrUpdateAsync (Azure.WaitUntil waitUntil, string resourceName, Azure.ResourceManager.ApplicationInsights.WorkbookData data, string sourceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; CreateOrUpdateAsync(valuetype Azure.WaitUntil waitUntil, string resourceName, class Azure.ResourceManager.ApplicationInsights.WorkbookData data, string sourceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.ApplicationInsights.WorkbookData,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (waitUntil As WaitUntil, resourceName As String, data As WorkbookData, Optional sourceId As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of WorkbookResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ApplicationInsights.WorkbookData * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;&#xA;override this.CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ApplicationInsights.WorkbookData * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;" Usage="workbookCollection.CreateOrUpdateAsync (waitUntil, resourceName, data, sourceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.ApplicationInsights.WorkbookData" />
        <Parameter Name="sourceId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="resourceName"> The name of the resource. </param>
        <param name="data"> Properties that need to be specified to create a new workbook. </param>
        <param name="sourceId"> Azure Resource Id that will fetch all linked workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create a new workbook.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_CreateOrUpdate</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.Exists(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="workbookCollection.Exists (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.ExistsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="workbookCollection.ExistsAsync (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; Get (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; Get(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.Get(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of WorkbookResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&#xA;override this.Get : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;" Usage="workbookCollection.Get (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a single workbook by its resourceName.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetAll (Azure.ResourceManager.ApplicationInsights.Models.CategoryType category, System.Collections.Generic.IEnumerable&lt;string&gt; tags = default, string sourceId = default, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetAll(valuetype Azure.ResourceManager.ApplicationInsights.Models.CategoryType category, class System.Collections.Generic.IEnumerable`1&lt;string&gt; tags, string sourceId, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.GetAll(Azure.ResourceManager.ApplicationInsights.Models.CategoryType,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (category As CategoryType, Optional tags As IEnumerable(Of String) = Nothing, Optional sourceId As String = Nothing, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of WorkbookResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : Azure.ResourceManager.ApplicationInsights.Models.CategoryType * seq&lt;string&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&#xA;override this.GetAll : Azure.ResourceManager.ApplicationInsights.Models.CategoryType * seq&lt;string&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;" Usage="workbookCollection.GetAll (category, tags, sourceId, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="Azure.ResourceManager.ApplicationInsights.Models.CategoryType" />
        <Parameter Name="tags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sourceId" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="category"> Category of workbook to return. </param>
        <param name="tags"> Tags presents on each workbook returned. </param>
        <param name="sourceId"> Azure Resource Id that will fetch all linked workbooks. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all Workbooks defined within a specified resource group and category.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks</description></item><item><term>Operation Id</term><description>Workbooks_ListByResourceGroup</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetAllAsync (Azure.ResourceManager.ApplicationInsights.Models.CategoryType category, System.Collections.Generic.IEnumerable&lt;string&gt; tags = default, string sourceId = default, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetAllAsync(valuetype Azure.ResourceManager.ApplicationInsights.Models.CategoryType category, class System.Collections.Generic.IEnumerable`1&lt;string&gt; tags, string sourceId, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.GetAllAsync(Azure.ResourceManager.ApplicationInsights.Models.CategoryType,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (category As CategoryType, Optional tags As IEnumerable(Of String) = Nothing, Optional sourceId As String = Nothing, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of WorkbookResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : Azure.ResourceManager.ApplicationInsights.Models.CategoryType * seq&lt;string&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&#xA;override this.GetAllAsync : Azure.ResourceManager.ApplicationInsights.Models.CategoryType * seq&lt;string&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;" Usage="workbookCollection.GetAllAsync (category, tags, sourceId, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="Azure.ResourceManager.ApplicationInsights.Models.CategoryType" />
        <Parameter Name="tags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sourceId" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="category"> Category of workbook to return. </param>
        <param name="tags"> Tags presents on each workbook returned. </param>
        <param name="sourceId"> Azure Resource Id that will fetch all linked workbooks. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all Workbooks defined within a specified resource group and category.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks</description></item><item><term>Operation Id</term><description>Workbooks_ListByResourceGroup</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ApplicationInsights.WorkbookResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; GetAsync (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; GetAsync(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.GetAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of WorkbookResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;&#xA;override this.GetAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;" Usage="workbookCollection.GetAsync (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a single workbook by its resourceName.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetIfExists (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.NullableResponse`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt; GetIfExists(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.GetIfExists(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIfExists (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As NullableResponse(Of WorkbookResource)" />
      <MemberSignature Language="F#" Value="abstract member GetIfExists : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&#xA;override this.GetIfExists : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;" Usage="workbookCollection.GetIfExists (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Tries to get details for this resource from the service.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; GetIfExistsAsync (string resourceName, bool? canFetchContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.NullableResponse`1&lt;class Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt; GetIfExistsAsync(string resourceName, valuetype System.Nullable`1&lt;bool&gt; canFetchContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApplicationInsights.WorkbookCollection.GetIfExistsAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIfExistsAsync (resourceName As String, Optional canFetchContent As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of NullableResponse(Of WorkbookResource))" />
      <MemberSignature Language="F#" Value="abstract member GetIfExistsAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;&#xA;override this.GetIfExistsAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;" Usage="workbookCollection.GetIfExistsAsync (resourceName, canFetchContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApplicationInsights</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.NullableResponse&lt;Azure.ResourceManager.ApplicationInsights.WorkbookResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="canFetchContent" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceName"> The name of the resource. </param>
        <param name="canFetchContent"> Flag indicating whether or not to return the full content for each applicable workbook. If false, only return summary content for workbooks. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Tries to get details for this resource from the service.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}</description></item><item><term>Operation Id</term><description>Workbooks_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
