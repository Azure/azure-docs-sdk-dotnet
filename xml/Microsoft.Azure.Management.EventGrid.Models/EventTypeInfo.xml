<Type Name="EventTypeInfo" FullName="Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo">
  <TypeSignature Language="C#" Value="public class EventTypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTypeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTypeInfo" />
  <TypeSignature Language="F#" Value="type EventTypeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.EventGrid</AssemblyName>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The event type information for Channels.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTypeInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.EventGrid</AssemblyName>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the EventTypeInfo class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTypeInfo (string kind = default, System.Collections.Generic.IDictionary&lt;string,Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; inlineEventTypes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string kind, class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; inlineEventTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional kind As String = Nothing, Optional inlineEventTypes As IDictionary(Of String, InlineEventProperties) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo : string * System.Collections.Generic.IDictionary&lt;string, Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; -&gt; Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo" Usage="new Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo (kind, inlineEventTypes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.EventGrid</AssemblyName>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="kind" Type="System.String" />
        <Parameter Name="inlineEventTypes" Type="System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt;" />
      </Parameters>
      <Docs>
        <param name="kind">The kind of event type used. Possible values
            include: 'Inline'</param>
        <param name="inlineEventTypes">A collection of inline event types
            for the resource. The inline event type keys are of type string
            which represents the name of the event.
            An example of a valid inline event name is "Contoso.OrderCreated".
            The inline event type values are of type InlineEventProperties and
            will contain additional information for every inline event
            type.</param>
        <summary>
            Initializes a new instance of the EventTypeInfo class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InlineEventTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; InlineEventTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; InlineEventTypes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.InlineEventTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property InlineEventTypes As IDictionary(Of String, InlineEventProperties)" />
      <MemberSignature Language="F#" Value="member this.InlineEventTypes : System.Collections.Generic.IDictionary&lt;string, Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt; with get, set" Usage="Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.InlineEventTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.EventGrid</AssemblyName>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="inlineEventTypes")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="inlineEventTypes")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Azure.Management.EventGrid.Models.InlineEventProperties&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a collection of inline event types for the resource.
            The inline event type keys are of type string which represents the
            name of the event.
            An example of a valid inline event name is "Contoso.OrderCreated".
            The inline event type values are of type InlineEventProperties and
            will contain additional information for every inline event type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public string Kind { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Kind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.Kind" />
      <MemberSignature Language="VB.NET" Value="Public Property Kind As String" />
      <MemberSignature Language="F#" Value="member this.Kind : string with get, set" Usage="Microsoft.Azure.Management.EventGrid.Models.EventTypeInfo.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.EventGrid</AssemblyName>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="kind")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="kind")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the kind of event type used. Possible values include:
            'Inline'
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
