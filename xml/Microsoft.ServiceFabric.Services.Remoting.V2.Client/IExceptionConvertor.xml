<Type Name="IExceptionConvertor" FullName="Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor">
  <TypeSignature Language="C#" Value="public interface IExceptionConvertor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExceptionConvertor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExceptionConvertor" />
  <TypeSignature Language="F#" Value="type IExceptionConvertor = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Defines an interface to convert service exception to user exception.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryConvertFromServiceException">
      <MemberSignature Language="C#" Value="public bool TryConvertFromServiceException (Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, out Exception actualException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvertFromServiceException(class Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, [out] class System.Exception&amp; actualException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor.TryConvertFromServiceException(Microsoft.ServiceFabric.Services.Communication.ServiceException,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryConvertFromServiceException (serviceException As ServiceException, ByRef actualException As Exception) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryConvertFromServiceException : Microsoft.ServiceFabric.Services.Communication.ServiceException * Exception -&gt; bool" Usage="iExceptionConvertor.TryConvertFromServiceException (serviceException, actualException)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceException" Type="Microsoft.ServiceFabric.Services.Communication.ServiceException" />
        <Parameter Name="actualException" Type="System.Exception" RefType="out" />
      </Parameters>
      <Docs>
        <param name="serviceException">Service exception.</param>
        <param name="actualException">User exception.</param>
        <summary>
            Converts the service exception to user exception.
            </summary>
        <returns>True if converted, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertFromServiceException">
      <MemberSignature Language="C#" Value="public bool TryConvertFromServiceException (Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, Exception innerException, out Exception actualException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvertFromServiceException(class Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, class System.Exception innerException, [out] class System.Exception&amp; actualException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor.TryConvertFromServiceException(Microsoft.ServiceFabric.Services.Communication.ServiceException,System.Exception,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryConvertFromServiceException (serviceException As ServiceException, innerException As Exception, ByRef actualException As Exception) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryConvertFromServiceException : Microsoft.ServiceFabric.Services.Communication.ServiceException * Exception * Exception -&gt; bool" Usage="iExceptionConvertor.TryConvertFromServiceException (serviceException, innerException, actualException)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceException" Type="Microsoft.ServiceFabric.Services.Communication.ServiceException" />
        <Parameter Name="innerException" Type="System.Exception" />
        <Parameter Name="actualException" Type="System.Exception" RefType="out" />
      </Parameters>
      <Docs>
        <param name="serviceException">Service exception.</param>
        <param name="innerException">Inner exception.</param>
        <param name="actualException">User exception.</param>
        <summary>
            Converts the service exception to user exception.
            </summary>
        <returns>True if converted, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertFromServiceException">
      <MemberSignature Language="C#" Value="public bool TryConvertFromServiceException (Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, Exception[] innerExceptions, out Exception actualException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvertFromServiceException(class Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException, class System.Exception[] innerExceptions, [out] class System.Exception&amp; actualException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Remoting.V2.Client.IExceptionConvertor.TryConvertFromServiceException(Microsoft.ServiceFabric.Services.Communication.ServiceException,System.Exception[],System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryConvertFromServiceException (serviceException As ServiceException, innerExceptions As Exception(), ByRef actualException As Exception) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryConvertFromServiceException : Microsoft.ServiceFabric.Services.Communication.ServiceException * Exception[] * Exception -&gt; bool" Usage="iExceptionConvertor.TryConvertFromServiceException (serviceException, innerExceptions, actualException)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceException" Type="Microsoft.ServiceFabric.Services.Communication.ServiceException" />
        <Parameter Name="innerExceptions" Type="System.Exception[]" />
        <Parameter Name="actualException" Type="System.Exception" RefType="out" />
      </Parameters>
      <Docs>
        <param name="serviceException">Service exception.</param>
        <param name="innerExceptions">List to inner exception.</param>
        <param name="actualException">User exception.</param>
        <summary>
            Converts the service exception to user exception.
            </summary>
        <returns>True if converted, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
