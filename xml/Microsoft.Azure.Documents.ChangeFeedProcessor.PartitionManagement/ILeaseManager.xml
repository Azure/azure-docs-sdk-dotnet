<Type Name="ILeaseManager" FullName="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager">
  <TypeSignature Language="C#" Value="public interface ILeaseManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILeaseManager" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILeaseManager" />
  <TypeSignature Language="F#" Value="type ILeaseManager = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
    <AssemblyVersion>2.0.4.0</AssemblyVersion>
    <AssemblyVersion>2.0.6.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The ILeaseManager defines a way to perform operations with <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; AcquireAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; AcquireAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.AcquireAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireAsync (lease As ILease) As Task(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member AcquireAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iLeaseManager.AcquireAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to acquire</param>
        <summary>
            Acquire lease.
            </summary>
        <returns>Updated acquired lease</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.Exceptions.LeaseLostException">Thrown if other host acquired concurrently</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckpointAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; CheckpointAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease, string continuationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; CheckpointAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.CheckpointAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckpointAsync (lease As ILease, continuationToken As String) As Task(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member CheckpointAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iLeaseManager.CheckpointAsync (lease, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to renew</param>
        <param name="continuationToken">Continuation token</param>
        <summary>
            Update the lease.
            </summary>
        <returns>Updated renewed lease</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateLeaseIfNotExistAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; CreateLeaseIfNotExistAsync (string partitionId, string continuationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; CreateLeaseIfNotExistAsync(string partitionId, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.CreateLeaseIfNotExistAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLeaseIfNotExistAsync (partitionId As String, continuationToken As String) As Task(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member CreateLeaseIfNotExistAsync : string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iLeaseManager.CreateLeaseIfNotExistAsync (partitionId, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partitionId">Partition to work on</param>
        <param name="continuationToken">Continuation token if it exists</param>
        <summary>
            Checks whether lease exists and creates if does not exist.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.DeleteAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (lease As ILease) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease -&gt; System.Threading.Tasks.Task" Usage="iLeaseManager.DeleteAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to remove</param>
        <summary>
            Delete lease.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAllLeasesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt; ListAllLeasesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt; ListAllLeasesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.ListAllLeasesAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ListAllLeasesAsync () As Task(Of IReadOnlyList(Of ILease))" />
      <MemberSignature Language="F#" Value="abstract member ListAllLeasesAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt;" Usage="iLeaseManager.ListAllLeasesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get all the leases.
            </summary>
        <returns>Enumerable of all the leases</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListOwnedLeasesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt; ListOwnedLeasesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt; ListOwnedLeasesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.ListOwnedLeasesAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ListOwnedLeasesAsync () As Task(Of IEnumerable(Of ILease))" />
      <MemberSignature Language="F#" Value="abstract member ListOwnedLeasesAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt;" Usage="iLeaseManager.ListOwnedLeasesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get all the leases owned by the current host.
            </summary>
        <returns>Enumerable of all the leases owned by the current host</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReleaseAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReleaseAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.ReleaseAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseAsync (lease As ILease) As Task" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease -&gt; System.Threading.Tasks.Task" Usage="iLeaseManager.ReleaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to acquire</param>
        <summary>
            Release lease.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
      </Docs>
    </Member>
    <Member MemberName="RenewAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; RenewAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; RenewAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.RenewAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease)" />
      <MemberSignature Language="VB.NET" Value="Public Function RenewAsync (lease As ILease) As Task(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member RenewAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iLeaseManager.RenewAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to renew</param>
        <summary>
            Renew the lease.
            </summary>
        <returns>Updated renewed lease</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.Exceptions.LeaseLostException">Thrown if other host acquired the lease or lease was deleted</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdatePropertiesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; UpdatePropertiesAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease leaseToUpdatePropertiesFrom);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; UpdatePropertiesAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease leaseToUpdatePropertiesFrom) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILeaseManager.UpdatePropertiesAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease)" />
      <MemberSignature Language="VB.NET" Value="Public Function UpdatePropertiesAsync (leaseToUpdatePropertiesFrom As ILease) As Task(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePropertiesAsync : Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iLeaseManager.UpdatePropertiesAsync leaseToUpdatePropertiesFrom" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leaseToUpdatePropertiesFrom" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease" />
      </Parameters>
      <Docs>
        <param name="leaseToUpdatePropertiesFrom">Lease containing new properties</param>
        <summary>
            Replace properties from the specified lease.
            </summary>
        <returns>Updated lease</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.Exceptions.LeaseLostException">Thrown if other host acquired the lease</exception>
      </Docs>
    </Member>
  </Members>
</Type>