<Type Name="IParitionLoadBalancingStrategy" FullName="Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.IParitionLoadBalancingStrategy">
  <TypeSignature Language="C#" Value="public interface IParitionLoadBalancingStrategy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParitionLoadBalancingStrategy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.IParitionLoadBalancingStrategy" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParitionLoadBalancingStrategy" />
  <TypeSignature Language="F#" Value="type IParitionLoadBalancingStrategy = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
    <AssemblyVersion>2.0.4.0</AssemblyVersion>
    <AssemblyVersion>2.0.6.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
             A strategy defines which leases should be taken by the current host in a certain moment.
             </summary>
    <remarks>
             It can set new <see cref="P:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease.Properties" /> for all returned leases if needed, including currently owned leases.
             </remarks>
    <example>
      <code language="C#"><![CDATA[
             public class CustomStrategy : IParitionLoadBalancingStrategy
             {
                 private string hostName;
                 private string hostVersion;
                 private TimeSpan leaseExpirationInterval;
            
                 private const string VersionPropertyKey = "version";
            
                 public IEnumerable<ILease> SelectLeasesToTake(IEnumerable<ILease> allLeases)
                 {
                     var takenLeases = this.FindLeasesToTake(allLeases);
                     foreach (var lease in takenLeases)
                     {
                         lease.Properties[VersionPropertyKey] = this.hostVersion;
                     }
            
                     return takenLeases;
                 }
            
                 private IEnumerable<ILease> FindLeasesToTake(IEnumerable<ILease> allLeases)
                 {
                     List<ILease> takenLeases = new List<ILease>();
                     foreach (var lease in allLeases)
                     {
                         if (string.IsNullOrWhiteSpace(lease.Owner) || this.IsExpired(lease))
                         {
                             takenLeases.Add(lease);
                         }
            
                         if (lease.Owner != this.hostName)
                         {
                             var ownerVersion = lease.Properties[VersionPropertyKey];
                             if (ownerVersion < this.hostVersion)
                             {
                                 takenLeases.Add(lease);
                             }
            
                             // more logic for leases owned by other hosts
                         }
                     }
            
                     return takenLeases;
                 }
            
                 private bool IsExpired(ILease lease)
                 {
                     return lease.Timestamp.ToUniversalTime() + this.leaseExpirationInterval < DateTime.UtcNow;
                 }
             }
             ]]></code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="SelectLeasesToTake">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; SelectLeasesToTake (System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; allLeases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; SelectLeasesToTake(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; allLeases) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.IParitionLoadBalancingStrategy.SelectLeasesToTake(System.Collections.Generic.IEnumerable{Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease})" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectLeasesToTake (allLeases As IEnumerable(Of ILease)) As IEnumerable(Of ILease)" />
      <MemberSignature Language="F#" Value="abstract member SelectLeasesToTake : seq&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt; -&gt; seq&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" Usage="iParitionLoadBalancingStrategy.SelectLeasesToTake allLeases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>2.0.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.6.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allLeases" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Documents.ChangeFeedProcessor.PartitionManagement.ILease&gt;" />
      </Parameters>
      <Docs>
        <param name="allLeases">All leases</param>
        <summary>
            Select leases that should be taken for processing.
            This method will be called periodically with <see cref="P:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedProcessorOptions.LeaseAcquireInterval" /></summary>
        <returns>Leases that should be taken for processing by this host</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>