<Type Name="ChangeFeedEventHost" FullName="Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost">
  <TypeSignature Language="C#" Value="public class ChangeFeedEventHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChangeFeedEventHost extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
    <AssemblyVersion>1.14.0.0</AssemblyVersion>
    <AssemblyVersion>1.17.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Simple host for distributing change feed events across observers and thus allowing these observers scale.
            It distributes the load across its instances and allows dynamic scaling:
              - Partitions in partitioned collections are distributed across instances/observers.
              - New instance takes leases from existing instances to make distribution equal.
              - If an instance dies, the leases are distributed across remaining instances.
            It's useful for scenario when partition count is high so that one host/VM is not capable of processing that many change feed events.
            Client application needs to implement <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserver" /> and register processor implementation with ChangeFeedEventHost.
            </summary>
    <remarks>
            It uses auxiliary document collection for managing leases for a partition.
            Every EventProcessorHost instance is performing the following two tasks:
                1) Renew Leases: It keeps track of leases currently owned by the host and continuously keeps on renewing the leases.
                2) Acquire Leases: Each instance continuously polls all leases to check if there are any leases it should acquire 
                for the system to get into balanced state.
            </remarks>
    <example>
      <code language="c#"><![CDATA[
            class DocumentFeedObserver : IChangeFeedObserver
            {
                private static int s_totalDocs = 0;
                public Task OpenAsync(ChangeFeedObserverContext context)
                {
                    Console.WriteLine("Worker opened, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;  // Requires targeting .NET 4.6+.
                }
                public Task CloseAsync(ChangeFeedObserverContext context, ChangeFeedObserverCloseReason reason)
                {
                    Console.WriteLine("Worker closed, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;
                }
                public Task ProcessChangesAsync(ChangeFeedObserverContext context, IReadOnlyList<Document> docs)
                {
                    Console.WriteLine("Change feed: total {0} doc(s)", Interlocked.Add(ref s_totalDocs, docs.Count));
                    return Task.CompletedTask;
                }
            }
            static async Task StartChangeFeedHost()
            {
                string hostName = Guid.NewGuid().ToString();
                DocumentCollectionInfo documentCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "documents"
                };
                DocumentCollectionInfo leaseCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "leases"
                };
                Console.WriteLine("Main program: Creating ChangeFeedEventHost...");
                ChangeFeedEventHost host = new ChangeFeedEventHost(hostName, documentCollectionLocation, leaseCollectionLocation);
                await host.RegisterObserverAsync<DocumentFeedObserver>();
                Console.WriteLine("Main program: press Enter to stop...");
                Console.ReadLine();
                await host.UnregisterObserversAsync();
            }
            ]]></code>
    </example>
    <example>
      <code language="c#"><![CDATA[
            class DocumentFeedObserver : IChangeFeedObserver
            {
                private static int s_totalDocs = 0;
                public Task OpenAsync(ChangeFeedObserverContext context)
                {
                    Console.WriteLine("Worker opened, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;  // Requires targeting .NET 4.6+.
                }
                public Task CloseAsync(ChangeFeedObserverContext context, ChangeFeedObserverCloseReason reason)
                {
                    Console.WriteLine("Worker closed, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;
                }
                public Task ProcessChangesAsync(ChangeFeedObserverContext context, IReadOnlyList<Document> docs)
                {
                    Console.WriteLine("Change feed: total {0} doc(s)", Interlocked.Add(ref s_totalDocs, docs.Count));
                    return Task.CompletedTask;
                }
            }
            static async Task StartChangeFeedHost()
            {
                string hostName = Guid.NewGuid().ToString();
                DocumentCollectionInfo documentCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "documents"
                };
                DocumentCollectionInfo leaseCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "leases"
                };
                Console.WriteLine("Main program: Creating ChangeFeedEventHost...");
                ChangeFeedEventHost host = new ChangeFeedEventHost(hostName, documentCollectionLocation, leaseCollectionLocation);
                await host.RegisterObserverAsync<DocumentFeedObserver>();
                Console.WriteLine("Main program: press Enter to stop...");
                Console.ReadLine();
                await host.UnregisterObserversAsync();
            }
            ]]></code>
    </example>
    <example>
      <code language="c#"><![CDATA[
            class DocumentFeedObserver : IChangeFeedObserver
            {
                private static int s_totalDocs = 0;
                public Task OpenAsync(ChangeFeedObserverContext context)
                {
                    Console.WriteLine("Worker opened, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;  // Requires targeting .NET 4.6+.
                }
                public Task CloseAsync(ChangeFeedObserverContext context, ChangeFeedObserverCloseReason reason)
                {
                    Console.WriteLine("Worker closed, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;
                }
                public Task ProcessChangesAsync(ChangeFeedObserverContext context, IReadOnlyList<Document> docs)
                {
                    Console.WriteLine("Change feed: total {0} doc(s)", Interlocked.Add(ref s_totalDocs, docs.Count));
                    return Task.CompletedTask;
                }
            }
            static async Task StartChangeFeedHost()
            {
                string hostName = Guid.NewGuid().ToString();
                DocumentCollectionInfo documentCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "documents"
                };
                DocumentCollectionInfo leaseCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "leases"
                };
                Console.WriteLine("Main program: Creating ChangeFeedEventHost...");
                ChangeFeedEventHost host = new ChangeFeedEventHost(hostName, documentCollectionLocation, leaseCollectionLocation);
                await host.RegisterObserverAsync<DocumentFeedObserver>();
                Console.WriteLine("Main program: press Enter to stop...");
                Console.ReadLine();
                await host.UnregisterObserversAsync();
            }
            ]]></code>
    </example>
    <example>
      <code language="c#"><![CDATA[
            class DocumentFeedObserver : IChangeFeedObserver
            {
                private static int s_totalDocs = 0;
                public Task OpenAsync(ChangeFeedObserverContext context)
                {
                    Console.WriteLine("Worker opened, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;  // Requires targeting .NET 4.6+.
                }
                public Task CloseAsync(ChangeFeedObserverContext context, ChangeFeedObserverCloseReason reason)
                {
                    Console.WriteLine("Worker closed, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;
                }
                public Task ProcessChangesAsync(ChangeFeedObserverContext context, IReadOnlyList<Document> docs)
                {
                    Console.WriteLine("Change feed: total {0} doc(s)", Interlocked.Add(ref s_totalDocs, docs.Count));
                    return Task.CompletedTask;
                }
            }
            static async Task StartChangeFeedHost()
            {
                string hostName = Guid.NewGuid().ToString();
                DocumentCollectionInfo documentCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "documents"
                };
                DocumentCollectionInfo leaseCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "leases"
                };
                Console.WriteLine("Main program: Creating ChangeFeedEventHost...");
                ChangeFeedEventHost host = new ChangeFeedEventHost(hostName, documentCollectionLocation, leaseCollectionLocation);
                await host.RegisterObserverAsync<DocumentFeedObserver>();
                Console.WriteLine("Main program: press Enter to stop...");
                Console.ReadLine();
                await host.UnregisterObserversAsync();
            }
            ]]></code>
    </example>
    <example>
      <code language="c#"><![CDATA[
            class DocumentFeedObserver : IChangeFeedObserver
            {
                private static int s_totalDocs = 0;
                public Task OpenAsync(ChangeFeedObserverContext context)
                {
                    Console.WriteLine("Worker opened, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;  // Requires targeting .NET 4.6+.
                }
                public Task CloseAsync(ChangeFeedObserverContext context, ChangeFeedObserverCloseReason reason)
                {
                    Console.WriteLine("Worker closed, {0}", context.PartitionKeyRangeId);
                    return Task.CompletedTask;
                }
                public Task ProcessChangesAsync(ChangeFeedObserverContext context, IReadOnlyList<Document> docs)
                {
                    Console.WriteLine("Change feed: total {0} doc(s)", Interlocked.Add(ref s_totalDocs, docs.Count));
                    return Task.CompletedTask;
                }
            }
            static async Task StartChangeFeedHost()
            {
                string hostName = Guid.NewGuid().ToString();
                DocumentCollectionInfo documentCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "documents"
                };
                DocumentCollectionInfo leaseCollectionLocation = new DocumentCollectionInfo
                {
                    Uri = new Uri("https://YOUR_SERVICE.documents.azure.com:443/"),
                    MasterKey = "YOUR_SECRET_KEY==",
                    DatabaseName = "db1",
                    CollectionName = "leases"
                };
                Console.WriteLine("Main program: Creating ChangeFeedEventHost...");
                ChangeFeedEventHost host = new ChangeFeedEventHost(hostName, documentCollectionLocation, leaseCollectionLocation);
                await host.RegisterObserverAsync<DocumentFeedObserver>();
                Console.WriteLine("Main program: press Enter to stop...");
                Console.ReadLine();
                await host.UnregisterObserversAsync();
            }
            ]]></code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeFeedEventHost (string hostName, Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo documentCollectionLocation, Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo auxCollectionLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, class Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo documentCollectionLocation, class Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo auxCollectionLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.#ctor(System.String,Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo,Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="documentCollectionLocation" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo" />
        <Parameter Name="auxCollectionLocation" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo" />
      </Parameters>
      <Docs>
        <param name="hostName">Unique name for this host.</param>
        <param name="documentCollectionLocation">Specifies location of the DocumentDB collection to monitor changes for.</param>
        <param name="auxCollectionLocation">Specifies location of auxiliary data for load-balancing instances of <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChangeFeedEventHost (string hostName, Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo documentCollectionLocation, Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo auxCollectionLocation, Microsoft.Azure.Documents.Client.ChangeFeedOptions changeFeedOptions, Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedHostOptions hostOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostName, class Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo documentCollectionLocation, class Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo auxCollectionLocation, class Microsoft.Azure.Documents.Client.ChangeFeedOptions changeFeedOptions, class Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedHostOptions hostOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.#ctor(System.String,Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo,Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo,Microsoft.Azure.Documents.Client.ChangeFeedOptions,Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedHostOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostName" Type="System.String" />
        <Parameter Name="documentCollectionLocation" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo" />
        <Parameter Name="auxCollectionLocation" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.DocumentCollectionInfo" />
        <Parameter Name="changeFeedOptions" Type="Microsoft.Azure.Documents.Client.ChangeFeedOptions" />
        <Parameter Name="hostOptions" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedHostOptions" />
      </Parameters>
      <Docs>
        <param name="hostName">Unique name for this host.</param>
        <param name="documentCollectionLocation">Specifies location of the DocumentDB collection to monitor changes for.</param>
        <param name="auxCollectionLocation">Specifies location of auxiliary data for load-balancing instances of <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" />.</param>
        <param name="changeFeedOptions">Options to pass to the Microsoft.AzureDocuments.DocumentClient.CreateChangeFeedQuery API.</param>
        <param name="hostOptions">Additional options to control load-balancing of <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" /> instances.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEstimatedRemainingWork">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; GetEstimatedRemainingWork ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; GetEstimatedRemainingWork() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.GetEstimatedRemainingWork" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost/&lt;GetEstimatedRemainingWork&gt;d__a))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously checks the current existing leases and calculates an estimate of remaining work per leased partitions.
            </summary>
        <returns>An estimate amount of remaining documents to be processed</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HostName">
      <MemberSignature Language="C#" Value="public string HostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.HostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the host name, which is a unique name for the instance.</summary>
        <value>The host name.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObserverAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterObserverAsync&lt;T&gt; () where T : Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObservernew();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterObserverAsync&lt;.ctor (class Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserver) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.RegisterObserverAsync``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost/&lt;RegisterObserverAsync&gt;d__0`1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserver</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Implementation of your application-specific event observer.</typeparam>
        <summary>Asynchronously registers the observer interface implementation with the host.
            This method also starts the host and enables it to start participating in the partition distribution process.</summary>
        <returns>A task indicating that the <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" /> instance has started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterObserverFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterObserverFactoryAsync (Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserverFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterObserverFactoryAsync(class Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserverFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.RegisterObserverFactoryAsync(Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserverFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost/&lt;RegisterObserverFactoryAsync&gt;d__3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factory" Type="Microsoft.Azure.Documents.ChangeFeedProcessor.IChangeFeedObserverFactory" />
      </Parameters>
      <Docs>
        <param name="factory">Implementation of your application-specific event observer factory.</param>
        <summary>
            Asynchronously registers the observer factory implementation with the host.
            This method also starts the host and enables it to start participating in the partition distribution process.
            </summary>
        <returns>A task indicating that the <see cref="T:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost" /> instance has started.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterObserversAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnregisterObserversAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnregisterObserversAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost.UnregisterObserversAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.ChangeFeedProcessor</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Azure.Documents.ChangeFeedProcessor.ChangeFeedEventHost/&lt;UnregisterObserversAsync&gt;d__6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously shuts down the host instance. This method maintains the leases on all partitions currently held, and enables each 
            host instance to shut down cleanly by invoking the method with object.</summary>
        <returns>A task that indicates the host instance has stopped.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>