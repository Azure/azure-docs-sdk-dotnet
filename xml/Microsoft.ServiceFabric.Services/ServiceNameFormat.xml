<Type Name="ServiceNameFormat" FullName="Microsoft.ServiceFabric.Services.ServiceNameFormat">
  <TypeSignature Language="C#" Value="public static class ServiceNameFormat" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ServiceNameFormat extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Services.ServiceNameFormat" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class provides the logic for deriving the names of various items within the manifest from the code. 
            It is used by framework components when names are not specified in the API and the framework types have
            to default it to a meaningful name derived from the service type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetEndpointName">
      <MemberSignature Language="C#" Value="public static string GetEndpointName (Type serviceInterfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetEndpointName(class System.Type serviceInterfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.ServiceNameFormat.GetEndpointName(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceInterfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceInterfaceType">Service interface type name.</param>
        <summary>
            Gets the default endpoint resource name for the given service type
            </summary>
        <returns>The name of the endpoint resource.</returns>
        <remarks>
          <list type="bullet">
            <item>
                    If the type name is <code>IMyService</code>, this method returns <code>MyServiceEndpoint</code> as the name of the endpoint resource.
                </item>
            <item>
                    If the type name is <code>Foo</code>, this method returns <code>FooServiceEndpoint</code> as the name of the endpoint resource.
                </item>
          </list>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>