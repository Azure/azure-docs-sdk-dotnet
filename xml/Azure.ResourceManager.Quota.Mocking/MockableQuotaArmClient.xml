<Type Name="MockableQuotaArmClient" FullName="Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient">
  <TypeSignature Language="C#" Value="public class MockableQuotaArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableQuotaArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableQuotaArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableQuotaArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableQuotaArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentQuotaLimitBase">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt; GetCurrentQuotaLimitBase (Azure.Core.ResourceIdentifier scope, string resourceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt; GetCurrentQuotaLimitBase(class Azure.Core.ResourceIdentifier scope, string resourceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentQuotaLimitBase(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentQuotaLimitBase (scope As ResourceIdentifier, resourceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CurrentQuotaLimitBaseResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentQuotaLimitBase : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&#xA;override this.GetCurrentQuotaLimitBase : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;" Usage="mockableQuotaArmClient.GetCurrentQuotaLimitBase (scope, resourceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="resourceName">
            Resource name for a given resource provider. For example:
            - SKU name for Microsoft.Compute
            - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
             For Microsoft.Network PublicIPAddresses.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota limit of a resource. The response can be used to determine the remaining quota to calculate a new quota limit that can be submitted with a PUT request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/quotas/{resourceName}</description></item><item><term>Operation Id</term><description>Quota_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentQuotaLimitBaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&gt; GetCurrentQuotaLimitBaseAsync (Azure.Core.ResourceIdentifier scope, string resourceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&gt; GetCurrentQuotaLimitBaseAsync(class Azure.Core.ResourceIdentifier scope, string resourceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentQuotaLimitBaseAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentQuotaLimitBaseAsync (scope As ResourceIdentifier, resourceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CurrentQuotaLimitBaseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentQuotaLimitBaseAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&gt;&#xA;override this.GetCurrentQuotaLimitBaseAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&gt;" Usage="mockableQuotaArmClient.GetCurrentQuotaLimitBaseAsync (scope, resourceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="resourceName">
            Resource name for a given resource provider. For example:
            - SKU name for Microsoft.Compute
            - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
             For Microsoft.Network PublicIPAddresses.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota limit of a resource. The response can be used to determine the remaining quota to calculate a new quota limit that can be submitted with a PUT request.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/quotas/{resourceName}</description></item><item><term>Operation Id</term><description>Quota_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentQuotaLimitBaseResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource GetCurrentQuotaLimitBaseResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource GetCurrentQuotaLimitBaseResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentQuotaLimitBaseResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentQuotaLimitBaseResource (id As ResourceIdentifier) As CurrentQuotaLimitBaseResource" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentQuotaLimitBaseResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource&#xA;override this.GetCurrentQuotaLimitBaseResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" Usage="mockableQuotaArmClient.GetCurrentQuotaLimitBaseResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.CurrentQuotaLimitBaseResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentQuotaLimitBases">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.CurrentQuotaLimitBaseCollection GetCurrentQuotaLimitBases (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.CurrentQuotaLimitBaseCollection GetCurrentQuotaLimitBases(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentQuotaLimitBases(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentQuotaLimitBases (scope As ResourceIdentifier) As CurrentQuotaLimitBaseCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentQuotaLimitBases : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentQuotaLimitBaseCollection&#xA;override this.GetCurrentQuotaLimitBases : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentQuotaLimitBaseCollection" Usage="mockableQuotaArmClient.GetCurrentQuotaLimitBases scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.CurrentQuotaLimitBaseCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of CurrentQuotaLimitBaseResources in the ArmClient. </summary>
        <returns> An object representing collection of CurrentQuotaLimitBaseResources and their operations over a CurrentQuotaLimitBaseResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentUsagesBase">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt; GetCurrentUsagesBase (Azure.Core.ResourceIdentifier scope, string resourceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt; GetCurrentUsagesBase(class Azure.Core.ResourceIdentifier scope, string resourceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentUsagesBase(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentUsagesBase (scope As ResourceIdentifier, resourceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CurrentUsagesBaseResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentUsagesBase : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&#xA;override this.GetCurrentUsagesBase : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;" Usage="mockableQuotaArmClient.GetCurrentUsagesBase (scope, resourceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="resourceName">
            Resource name for a given resource provider. For example:
            - SKU name for Microsoft.Compute
            - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
             For Microsoft.Network PublicIPAddresses.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the current usage of a resource.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/usages/{resourceName}</description></item><item><term>Operation Id</term><description>Usages_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.CurrentUsagesBaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentUsagesBaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&gt; GetCurrentUsagesBaseAsync (Azure.Core.ResourceIdentifier scope, string resourceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&gt; GetCurrentUsagesBaseAsync(class Azure.Core.ResourceIdentifier scope, string resourceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentUsagesBaseAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentUsagesBaseAsync (scope As ResourceIdentifier, resourceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CurrentUsagesBaseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentUsagesBaseAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&gt;&#xA;override this.GetCurrentUsagesBaseAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&gt;" Usage="mockableQuotaArmClient.GetCurrentUsagesBaseAsync (scope, resourceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.CurrentUsagesBaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="resourceName">
            Resource name for a given resource provider. For example:
            - SKU name for Microsoft.Compute
            - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
             For Microsoft.Network PublicIPAddresses.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the current usage of a resource.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/usages/{resourceName}</description></item><item><term>Operation Id</term><description>Usages_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.CurrentUsagesBaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentUsagesBaseResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.CurrentUsagesBaseResource GetCurrentUsagesBaseResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.CurrentUsagesBaseResource GetCurrentUsagesBaseResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentUsagesBaseResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentUsagesBaseResource (id As ResourceIdentifier) As CurrentUsagesBaseResource" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentUsagesBaseResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentUsagesBaseResource&#xA;override this.GetCurrentUsagesBaseResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentUsagesBaseResource" Usage="mockableQuotaArmClient.GetCurrentUsagesBaseResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.CurrentUsagesBaseResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.CurrentUsagesBaseResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.CurrentUsagesBaseResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.CurrentUsagesBaseResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.CurrentUsagesBaseResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentUsagesBases">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.CurrentUsagesBaseCollection GetCurrentUsagesBases (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.CurrentUsagesBaseCollection GetCurrentUsagesBases(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetCurrentUsagesBases(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentUsagesBases (scope As ResourceIdentifier) As CurrentUsagesBaseCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentUsagesBases : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentUsagesBaseCollection&#xA;override this.GetCurrentUsagesBases : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.CurrentUsagesBaseCollection" Usage="mockableQuotaArmClient.GetCurrentUsagesBases scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.CurrentUsagesBaseCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of CurrentUsagesBaseResources in the ArmClient. </summary>
        <returns> An object representing collection of CurrentUsagesBaseResources and their operations over a CurrentUsagesBaseResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaEntityResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaEntityResource GetGroupQuotaEntityResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaEntityResource GetGroupQuotaEntityResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetGroupQuotaEntityResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaEntityResource (id As ResourceIdentifier) As GroupQuotaEntityResource" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaEntityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaEntityResource&#xA;override this.GetGroupQuotaEntityResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaEntityResource" Usage="mockableQuotaArmClient.GetGroupQuotaEntityResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaEntityResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaEntityResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.GroupQuotaEntityResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaEntityResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaEntityResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaLimitListResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaLimitListResource GetGroupQuotaLimitListResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaLimitListResource GetGroupQuotaLimitListResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetGroupQuotaLimitListResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaLimitListResource (id As ResourceIdentifier) As GroupQuotaLimitListResource" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaLimitListResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaLimitListResource&#xA;override this.GetGroupQuotaLimitListResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaLimitListResource" Usage="mockableQuotaArmClient.GetGroupQuotaLimitListResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaLimitListResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaLimitListResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.GroupQuotaLimitListResource.CreateResourceIdentifier(System.String,System.String,System.String,Azure.Core.AzureLocation)" /> to create a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaLimitListResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaLimitListResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaRequestStatusResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource GetGroupQuotaRequestStatusResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource GetGroupQuotaRequestStatusResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetGroupQuotaRequestStatusResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaRequestStatusResource (id As ResourceIdentifier) As GroupQuotaRequestStatusResource" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource&#xA;override this.GetGroupQuotaRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource" Usage="mockableQuotaArmClient.GetGroupQuotaRequestStatusResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaRequestStatusResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaSubscriptionRequestStatusResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource GetGroupQuotaSubscriptionRequestStatusResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource GetGroupQuotaSubscriptionRequestStatusResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetGroupQuotaSubscriptionRequestStatusResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaSubscriptionRequestStatusResource (id As ResourceIdentifier) As GroupQuotaSubscriptionRequestStatusResource" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaSubscriptionRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource&#xA;override this.GetGroupQuotaSubscriptionRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource" Usage="mockableQuotaArmClient.GetGroupQuotaSubscriptionRequestStatusResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionRequestStatusResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupQuotaSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource GetGroupQuotaSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource GetGroupQuotaSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetGroupQuotaSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGroupQuotaSubscriptionResource (id As ResourceIdentifier) As GroupQuotaSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetGroupQuotaSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource&#xA;override this.GetGroupQuotaSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource" Usage="mockableQuotaArmClient.GetGroupQuotaSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.GroupQuotaSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaAllocationRequestStatusResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource GetQuotaAllocationRequestStatusResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource GetQuotaAllocationRequestStatusResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetQuotaAllocationRequestStatusResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaAllocationRequestStatusResource (id As ResourceIdentifier) As QuotaAllocationRequestStatusResource" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaAllocationRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource&#xA;override this.GetQuotaAllocationRequestStatusResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" Usage="mockableQuotaArmClient.GetQuotaAllocationRequestStatusResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.QuotaAllocationRequestStatusResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaRequestDetail">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt; GetQuotaRequestDetail (Azure.Core.ResourceIdentifier scope, string id, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt; GetQuotaRequestDetail(class Azure.Core.ResourceIdentifier scope, string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetQuotaRequestDetail(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaRequestDetail (scope As ResourceIdentifier, id As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of QuotaRequestDetailResource)" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaRequestDetail : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&#xA;override this.GetQuotaRequestDetail : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;" Usage="mockableQuotaArmClient.GetQuotaRequestDetail (scope, id, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="id"> Quota request ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota request details and status by quota request ID for the resources of the resource provider at a specific location. The quota request ID **id** is returned in the response of the PUT operation.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/quotaRequests/{id}</description></item><item><term>Operation Id</term><description>QuotaRequestStatus_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaRequestDetailResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaRequestDetailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&gt; GetQuotaRequestDetailAsync (Azure.Core.ResourceIdentifier scope, string id, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&gt; GetQuotaRequestDetailAsync(class Azure.Core.ResourceIdentifier scope, string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetQuotaRequestDetailAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaRequestDetailAsync (scope As ResourceIdentifier, id As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of QuotaRequestDetailResource))" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaRequestDetailAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&gt;&#xA;override this.GetQuotaRequestDetailAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&gt;" Usage="mockableQuotaArmClient.GetQuotaRequestDetailAsync (scope, id, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Quota.QuotaRequestDetailResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="id"> Quota request ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the quota request details and status by quota request ID for the resources of the resource provider at a specific location. The quota request ID **id** is returned in the response of the PUT operation.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.Quota/quotaRequests/{id}</description></item><item><term>Operation Id</term><description>QuotaRequestStatus_Get</description></item><item><term>Default Api Version</term><description>2025-03-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Quota.QuotaRequestDetailResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="id" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="id" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaRequestDetailResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.QuotaRequestDetailResource GetQuotaRequestDetailResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.QuotaRequestDetailResource GetQuotaRequestDetailResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetQuotaRequestDetailResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaRequestDetailResource (id As ResourceIdentifier) As QuotaRequestDetailResource" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaRequestDetailResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaRequestDetailResource&#xA;override this.GetQuotaRequestDetailResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaRequestDetailResource" Usage="mockableQuotaArmClient.GetQuotaRequestDetailResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.QuotaRequestDetailResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.QuotaRequestDetailResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.QuotaRequestDetailResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Quota.QuotaRequestDetailResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.QuotaRequestDetailResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQuotaRequestDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.QuotaRequestDetailCollection GetQuotaRequestDetails (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.QuotaRequestDetailCollection GetQuotaRequestDetails(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetQuotaRequestDetails(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQuotaRequestDetails (scope As ResourceIdentifier) As QuotaRequestDetailCollection" />
      <MemberSignature Language="F#" Value="abstract member GetQuotaRequestDetails : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaRequestDetailCollection&#xA;override this.GetQuotaRequestDetails : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.QuotaRequestDetailCollection" Usage="mockableQuotaArmClient.GetQuotaRequestDetails scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.QuotaRequestDetailCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of QuotaRequestDetailResources in the ArmClient. </summary>
        <returns> An object representing collection of QuotaRequestDetailResources and their operations over a QuotaRequestDetailResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionQuotaAllocationsListResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource GetSubscriptionQuotaAllocationsListResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource GetSubscriptionQuotaAllocationsListResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Quota.Mocking.MockableQuotaArmClient.GetSubscriptionQuotaAllocationsListResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubscriptionQuotaAllocationsListResource (id As ResourceIdentifier) As SubscriptionQuotaAllocationsListResource" />
      <MemberSignature Language="F#" Value="abstract member GetSubscriptionQuotaAllocationsListResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource&#xA;override this.GetSubscriptionQuotaAllocationsListResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource" Usage="mockableQuotaArmClient.GetSubscriptionQuotaAllocationsListResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Quota</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,Azure.Core.AzureLocation)" /> to create a <see cref="T:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Quota.SubscriptionQuotaAllocationsListResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
