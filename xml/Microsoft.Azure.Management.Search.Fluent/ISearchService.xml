<Type Name="ISearchService" FullName="Microsoft.Azure.Management.Search.Fluent.ISearchService">
  <TypeSignature Language="C#" Value="public interface ISearchService : Microsoft.Azure.Management.ResourceManager.Fluent.Core.IBeta, Microsoft.Azure.Management.ResourceManager.Fluent.Core.IGroupableResource&lt;Microsoft.Azure.Management.Search.Fluent.ISearchManager,Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;, Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasInner&lt;Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;, Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasManager&lt;Microsoft.Azure.Management.Search.Fluent.ISearchManager&gt;, Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IRefreshable&lt;Microsoft.Azure.Management.Search.Fluent.ISearchService&gt;, Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IUpdatable&lt;Microsoft.Azure.Management.Search.Fluent.SearchService.Update.IUpdate&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISearchService implements class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IBeta, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IGroupableResource`2&lt;class Microsoft.Azure.Management.Search.Fluent.ISearchManager, class Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasId, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasInner`1&lt;class Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasManager`1&lt;class Microsoft.Azure.Management.Search.Fluent.ISearchManager&gt;, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasName, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasResourceGroup, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.IResource, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IIndexable, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IRefreshable`1&lt;class Microsoft.Azure.Management.Search.Fluent.ISearchService&gt;, class Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IUpdatable`1&lt;class Microsoft.Azure.Management.Search.Fluent.SearchService.Update.IUpdate&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.Search.Fluent.ISearchService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISearchService&#xA;Implements IBeta, IGroupableResource(Of ISearchManager, SearchServiceInner), IHasInner(Of SearchServiceInner), IHasManager(Of ISearchManager), IRefreshable(Of ISearchService), IUpdatable(Of IUpdate)" />
  <TypeSignature Language="F#" Value="type ISearchService = interface&#xA;    interface IBeta&#xA;    interface IGroupableResource&lt;ISearchManager, SearchServiceInner&gt;&#xA;    interface IResource&#xA;    interface IIndexable&#xA;    interface IHasId&#xA;    interface IHasName&#xA;    interface IHasResourceGroup&#xA;    interface IHasManager&lt;ISearchManager&gt;&#xA;    interface IHasInner&lt;SearchServiceInner&gt;&#xA;    interface IRefreshable&lt;ISearchService&gt;&#xA;    interface IUpdatable&lt;IUpdate&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
    <AssemblyVersion>1.0.0.71</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IBeta</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IGroupableResource&lt;Microsoft.Azure.Management.Search.Fluent.ISearchManager,Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasId</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasInner&lt;InnerT&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasInner&lt;Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceInner&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasManager&lt;ManagerT&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasManager&lt;Microsoft.Azure.Management.Search.Fluent.ISearchManager&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasName</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IHasResourceGroup</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.IResource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IIndexable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IRefreshable&lt;Microsoft.Azure.Management.Search.Fluent.ISearchService&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.Azure.Management.ResourceManager.Fluent.Core.ResourceActions.IUpdatable&lt;Microsoft.Azure.Management.Search.Fluent.SearchService.Update.IUpdate&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An immutable client-side representation of an Azure registry.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateQueryKey">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.IQueryKey CreateQueryKey (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Management.Search.Fluent.IQueryKey CreateQueryKey(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.CreateQueryKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQueryKey (name As String) As IQueryKey" />
      <MemberSignature Language="F#" Value="abstract member CreateQueryKey : string -&gt; Microsoft.Azure.Management.Search.Fluent.IQueryKey" Usage="iSearchService.CreateQueryKey name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.IQueryKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the new query API key.</param>
        <summary>
            Regenerates either the primary or secondary admin API key.
            You can only regenerate one key at a time.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <throws>CloudException thrown if the request is rejected by server.</throws>
        <throws>RuntimeException all other wrapped checked exceptions if the request fails to be sent.</throws>
        <return>The &lt;QueryKey&gt; object if successful.</return>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt; CreateQueryKeyAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt; CreateQueryKeyAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.CreateQueryKeyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQueryKeyAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IQueryKey)" />
      <MemberSignature Language="F#" Value="abstract member CreateQueryKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;" Usage="iSearchService.CreateQueryKeyAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <param name="name">The name of the new query API key.</param>
        <summary>
            Regenerates either the primary or secondary admin API key.
            You can only regenerate one key at a time.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <return>A representation of the future computation of this call.</return>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueryKey">
      <MemberSignature Language="C#" Value="public void DeleteQueryKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteQueryKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.DeleteQueryKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteQueryKey (key As String)" />
      <MemberSignature Language="F#" Value="abstract member DeleteQueryKey : string -&gt; unit" Usage="iSearchService.DeleteQueryKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The query key to be deleted. Query keys are identified by value, not by name.</param>
        <summary>
            Deletes the specified query key.
            Unlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then
            recreate it.
            </summary>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <throws>CloudException thrown if the request is rejected by server.</throws>
        <throws>RuntimeException all other wrapped checked exceptions if the request fails to be sent.</throws>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueryKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteQueryKeyAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteQueryKeyAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.DeleteQueryKeyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteQueryKeyAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteQueryKeyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iSearchService.DeleteQueryKeyAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <param name="key">The query key to be deleted. Query keys are identified by value, not by name.</param>
        <summary>
            Deletes the specified query key.
            Unlike admin keys, query keys are not regenerated. The process for
            regenerating a query key is to delete and then recreate it.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <return>A representation of the future computation of this call.</return>
      </Docs>
    </Member>
    <Member MemberName="GetAdminKeys">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.IAdminKeys GetAdminKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Management.Search.Fluent.IAdminKeys GetAdminKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.GetAdminKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdminKeys () As IAdminKeys" />
      <MemberSignature Language="F#" Value="abstract member GetAdminKeys : unit -&gt; Microsoft.Azure.Management.Search.Fluent.IAdminKeys" Usage="iSearchService.GetAdminKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.IAdminKeys</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The primary and secondary admin API keys for the specified Azure Search service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <throws>CloudException thrown if the request is rejected by server.</throws>
        <throws>RuntimeException all other wrapped checked exceptions if the request fails to be sent.</throws>
        <return>The AdminKeys object if successful.</return>
      </Docs>
    </Member>
    <Member MemberName="GetAdminKeysAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt; GetAdminKeysAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt; GetAdminKeysAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.GetAdminKeysAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdminKeysAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IAdminKeys)" />
      <MemberSignature Language="F#" Value="abstract member GetAdminKeysAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt;" Usage="iSearchService.GetAdminKeysAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            The primary and secondary admin API keys for the specified Azure Search service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <return>A representation of the future computation of this call.</return>
      </Docs>
    </Member>
    <Member MemberName="HostingMode">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.Models.HostingMode HostingMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Management.Search.Fluent.Models.HostingMode HostingMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.HostingMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HostingMode As HostingMode" />
      <MemberSignature Language="F#" Value="member this.HostingMode : Microsoft.Azure.Management.Search.Fluent.Models.HostingMode" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.HostingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.Models.HostingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets The hosting mode value.
            Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that
            allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the
            standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListQueryKeys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt; ListQueryKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt; ListQueryKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.ListQueryKeys" />
      <MemberSignature Language="VB.NET" Value="Public Function ListQueryKeys () As IReadOnlyList(Of IQueryKey)" />
      <MemberSignature Language="F#" Value="abstract member ListQueryKeys : unit -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;" Usage="iSearchService.ListQueryKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the list of query API keys for the given Azure Search service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <throws>CloudException thrown if the request is rejected by server.</throws>
        <throws>RuntimeException all other wrapped checked exceptions if the request fails to be sent.</throws>
        <return>The List&lt;QueryKey&gt; object if successful.</return>
      </Docs>
    </Member>
    <Member MemberName="ListQueryKeysAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;&gt; ListQueryKeysAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;&gt; ListQueryKeysAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.ListQueryKeysAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListQueryKeysAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of IQueryKey))" />
      <MemberSignature Language="F#" Value="abstract member ListQueryKeysAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;&gt;" Usage="iSearchService.ListQueryKeysAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Management.Search.Fluent.IQueryKey&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Returns the list of query API keys for the given Azure Search service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <return>The observable to the List&lt;QueryKey&gt; object.</return>
      </Docs>
    </Member>
    <Member MemberName="PartitionCount">
      <MemberSignature Language="C#" Value="public int PartitionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PartitionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.PartitionCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PartitionCount As Integer" />
      <MemberSignature Language="F#" Value="member this.PartitionCount : int" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.PartitionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of partitions used by the service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvisioningState">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.Models.ProvisioningState ProvisioningState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Management.Search.Fluent.Models.ProvisioningState ProvisioningState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.ProvisioningState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProvisioningState As ProvisioningState" />
      <MemberSignature Language="F#" Value="member this.ProvisioningState : Microsoft.Azure.Management.Search.Fluent.Models.ProvisioningState" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.ProvisioningState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.Models.ProvisioningState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets The state of the last provisioning operation performed on the Search service.
            Provisioning is an intermediate state that occurs while service capacity is being established. After capacity
            is set up, provisioningState changes to either 'succeeded' or 'failed'. Client applications can poll
            provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search
            Service operation to see when an operation is completed. If you are using the free service, this value tends
            to come back as 'succeeded' directly in the call to Create Search service. This is because the free service uses
            capacity that is already set up.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAdminKeys">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.IAdminKeys RegenerateAdminKeys (Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind keyKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Management.Search.Fluent.IAdminKeys RegenerateAdminKeys(valuetype Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind keyKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.RegenerateAdminKeys(Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegenerateAdminKeys (keyKind As AdminKeyKind) As IAdminKeys" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAdminKeys : Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind -&gt; Microsoft.Azure.Management.Search.Fluent.IAdminKeys" Usage="iSearchService.RegenerateAdminKeys keyKind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.IAdminKeys</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyKind" Type="Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind" />
      </Parameters>
      <Docs>
        <param name="keyKind">Specifies which key to regenerate.</param>
        <summary>
            Regenerates either the primary or secondary admin API key.
            You can only regenerate one key at a time.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <throws>CloudException thrown if the request is rejected by server.</throws>
        <throws>RuntimeException all other wrapped checked exceptions if the request fails to be sent.</throws>
        <return>The AdminKeys object if successful.</return>
      </Docs>
    </Member>
    <Member MemberName="RegenerateAdminKeysAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt; RegenerateAdminKeysAsync (Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind keyKind, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt; RegenerateAdminKeysAsync(valuetype Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind keyKind, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Search.Fluent.ISearchService.RegenerateAdminKeysAsync(Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegenerateAdminKeysAsync (keyKind As AdminKeyKind, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IAdminKeys)" />
      <MemberSignature Language="F#" Value="abstract member RegenerateAdminKeysAsync : Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt;" Usage="iSearchService.RegenerateAdminKeysAsync (keyKind, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.Search.Fluent.IAdminKeys&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyKind" Type="Microsoft.Azure.Management.Search.Fluent.Models.AdminKeyKind" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <param name="keyKind">Specifies which key to regenerate.</param>
        <summary>
            Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <throws>IllegalArgumentException thrown if parameters fail the validation.</throws>
        <return>A representation of the future computation of this call.</return>
      </Docs>
    </Member>
    <Member MemberName="ReplicaCount">
      <MemberSignature Language="C#" Value="public int ReplicaCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReplicaCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.ReplicaCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplicaCount As Integer" />
      <MemberSignature Language="F#" Value="member this.ReplicaCount : int" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.ReplicaCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of replicas used by the service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sku">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.Models.Sku Sku { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Management.Search.Fluent.Models.Sku Sku" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.Sku" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sku As Sku" />
      <MemberSignature Language="F#" Value="member this.Sku : Microsoft.Azure.Management.Search.Fluent.Models.Sku" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.Sku" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.Models.Sku</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the SKU type of the service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceStatus Status" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As SearchServiceStatus" />
      <MemberSignature Language="F#" Value="member this.Status : Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceStatus" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Search.Fluent.Models.SearchServiceStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets The status of the Search service.
            Possible values include:
            'running':  the Search service is running and no provisioning operations are underway.
            'provisioning': the Search service is being provisioned or scaled up or down.
            'deleting': the Search service is being deleted.
            'degraded': the Search service is degraded. This can occur when the underlying search units are not healthy.
            The Search service is most likely operational, but performance might be slow and some requests might be dropped.
            'disabled': the Search service is disabled. In this state, the service will reject all API requests.
            'error': the Search service is in an error state. If your service is in the degraded, disabled, or error states,
            it means the Azure Search team is actively investigating the underlying issue. Dedicated services in these
            states are still chargeable based on the number of search units provisioned.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusDetails">
      <MemberSignature Language="C#" Value="public string StatusDetails { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusDetails" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Search.Fluent.ISearchService.StatusDetails" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StatusDetails As String" />
      <MemberSignature Language="F#" Value="member this.StatusDetails : string" Usage="Microsoft.Azure.Management.Search.Fluent.ISearchService.StatusDetails" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Search.Fluent</AssemblyName>
        <AssemblyVersion>1.0.0.71</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the details of the status.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
