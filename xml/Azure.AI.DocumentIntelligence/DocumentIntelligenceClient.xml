<Type Name="DocumentIntelligenceClient" FullName="Azure.AI.DocumentIntelligence.DocumentIntelligenceClient">
  <TypeSignature Language="C#" Value="public class DocumentIntelligenceClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DocumentIntelligenceClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DocumentIntelligenceClient" />
  <TypeSignature Language="F#" Value="type DocumentIntelligenceClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The DocumentIntelligence service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DocumentIntelligenceClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of DocumentIntelligenceClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentIntelligenceClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.DocumentIntelligence.DocumentIntelligenceClient" Usage="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Document Intelligence service endpoint. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of DocumentIntelligenceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentIntelligenceClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.DocumentIntelligence.DocumentIntelligenceClient" Usage="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Document Intelligence service endpoint. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of DocumentIntelligenceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentIntelligenceClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As DocumentIntelligenceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient : Uri * Azure.AzureKeyCredential * Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions -&gt; Azure.AI.DocumentIntelligence.DocumentIntelligenceClient" Usage="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Document Intelligence service endpoint. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DocumentIntelligenceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentIntelligenceClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As DocumentIntelligenceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient : Uri * Azure.Core.TokenCredential * Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions -&gt; Azure.AI.DocumentIntelligence.DocumentIntelligenceClient" Usage="new Azure.AI.DocumentIntelligence.DocumentIntelligenceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.DocumentIntelligence.DocumentIntelligenceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Document Intelligence service endpoint. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DocumentIntelligenceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDocument">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt; AnalyzeDocument (Azure.WaitUntil waitUntil, string modelId, Azure.AI.DocumentIntelligence.AnalyzeDocumentContent analyzeRequest = default, string pages = default, string locale = default, Azure.AI.DocumentIntelligence.StringIndexType? stringIndexType = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features = default, System.Collections.Generic.IEnumerable&lt;string&gt; queryFields = default, Azure.AI.DocumentIntelligence.ContentFormat? outputContentFormat = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.AI.DocumentIntelligence.AnalyzeResult&gt; AnalyzeDocument(valuetype Azure.WaitUntil waitUntil, string modelId, class Azure.AI.DocumentIntelligence.AnalyzeDocumentContent analyzeRequest, string pages, string locale, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.StringIndexType&gt; stringIndexType, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features, class System.Collections.Generic.IEnumerable`1&lt;string&gt; queryFields, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.ContentFormat&gt; outputContentFormat, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocument(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.AnalyzeDocumentContent,System.String,System.String,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.AI.DocumentIntelligence.ContentFormat},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeDocument (waitUntil As WaitUntil, modelId As String, Optional analyzeRequest As AnalyzeDocumentContent = Nothing, Optional pages As String = Nothing, Optional locale As String = Nothing, Optional stringIndexType As Nullable(Of StringIndexType) = Nothing, Optional features As IEnumerable(Of DocumentAnalysisFeature) = Nothing, Optional queryFields As IEnumerable(Of String) = Nothing, Optional outputContentFormat As Nullable(Of ContentFormat) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of AnalyzeResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeDocument : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.AnalyzeDocumentContent * string * string * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&#xA;override this.AnalyzeDocument : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.AnalyzeDocumentContent * string * string * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;" Usage="documentIntelligenceClient.AnalyzeDocument (waitUntil, modelId, analyzeRequest, pages, locale, stringIndexType, features, queryFields, outputContentFormat, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="modelId" Type="System.String" />
        <Parameter Name="analyzeRequest" Type="Azure.AI.DocumentIntelligence.AnalyzeDocumentContent" />
        <Parameter Name="pages" Type="System.String" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="stringIndexType" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt;" />
        <Parameter Name="features" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt;" />
        <Parameter Name="queryFields" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="outputContentFormat" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="modelId"> Unique document model name. </param>
        <param name="analyzeRequest"> Analyze request parameters. </param>
        <param name="pages"> List of 1-based page numbers to analyze.  Ex. "1-3,5,7-9". </param>
        <param name="locale">
            Locale hint for text recognition and document analysis.  Value may contain only
            the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
            </param>
        <param name="stringIndexType"> Method used to compute string offset and length. </param>
        <param name="features"> List of optional analysis features. </param>
        <param name="queryFields"> List of additional fields to extract.  Ex. "NumberOfGuests,StoreNumber". </param>
        <param name="outputContentFormat"> Format of the analyze result top-level content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyzes document with document model. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="modelId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="modelId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AnalyzeDocument.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

Operation<AnalyzeResult> operation = client.AnalyzeDocument(WaitUntil.Completed, "<modelId>");
AnalyzeResult responseData = operation.Value;
]]></code>
This sample shows how to call AnalyzeDocument with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

AnalyzeDocumentContent analyzeRequest = new AnalyzeDocumentContent
{
    UrlSource = new Uri("http://localhost:3000"),
    Base64Source = BinaryData.FromObjectAsJson(new object()),
};
Operation<AnalyzeResult> operation = client.AnalyzeDocument(WaitUntil.Completed, "<modelId>", analyzeRequest: analyzeRequest, pages: "<pages>", locale: "<locale>", stringIndexType: StringIndexType.TextElements, features: new DocumentAnalysisFeature[] { DocumentAnalysisFeature.OcrHighResolution }, queryFields: new string[] { "<queryFields>" }, outputContentFormat: ContentFormat.Text);
AnalyzeResult responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDocument">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; AnalyzeDocument (Azure.WaitUntil waitUntil, string modelId, Azure.Core.RequestContent content, string pages = default, string locale = default, string stringIndexType = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features = default, System.Collections.Generic.IEnumerable&lt;string&gt; queryFields = default, string outputContentFormat = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; AnalyzeDocument(valuetype Azure.WaitUntil waitUntil, string modelId, class Azure.Core.RequestContent content, string pages, string locale, string stringIndexType, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features, class System.Collections.Generic.IEnumerable`1&lt;string&gt; queryFields, string outputContentFormat, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocument(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeDocument (waitUntil As WaitUntil, modelId As String, content As RequestContent, Optional pages As String = Nothing, Optional locale As String = Nothing, Optional stringIndexType As String = Nothing, Optional features As IEnumerable(Of DocumentAnalysisFeature) = Nothing, Optional queryFields As IEnumerable(Of String) = Nothing, Optional outputContentFormat As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeDocument : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * string * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.AnalyzeDocument : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * string * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="documentIntelligenceClient.AnalyzeDocument (waitUntil, modelId, content, pages, locale, stringIndexType, features, queryFields, outputContentFormat, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="modelId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="pages" Type="System.String" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="stringIndexType" Type="System.String" />
        <Parameter Name="features" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt;" />
        <Parameter Name="queryFields" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="outputContentFormat" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="modelId"> Unique document model name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="pages"> List of 1-based page numbers to analyze.  Ex. "1-3,5,7-9". </param>
        <param name="locale">
            Locale hint for text recognition and document analysis.  Value may contain only
            the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
            </param>
        <param name="stringIndexType"> Method used to compute string offset and length. Allowed values: "textElements" | "unicodeCodePoint" | "utf16CodeUnit". </param>
        <param name="features"> List of optional analysis features. </param>
        <param name="queryFields"> List of additional fields to extract.  Ex. "NumberOfGuests,StoreNumber". </param>
        <param name="outputContentFormat"> Format of the analyze result top-level content. Allowed values: "text" | "markdown". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyzes document with document model.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocument(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.AnalyzeDocumentContent,System.String,System.String,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.AI.DocumentIntelligence.ContentFormat},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="modelId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="modelId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeDocument and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = null;
Operation<BinaryData> operation = client.AnalyzeDocument(WaitUntil.Completed, "<modelId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
]]></code>
This sample shows how to call AnalyzeDocument with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    urlSource = "http://localhost:3000",
    base64Source = new object(),
});
Operation<BinaryData> operation = client.AnalyzeDocument(WaitUntil.Completed, "<modelId>", content, pages: "<pages>", locale: "<locale>", stringIndexType: "textElements", features: new DocumentAnalysisFeature[] { DocumentAnalysisFeature.OcrHighResolution }, queryFields: new string[] { "<queryFields>" }, outputContentFormat: "text");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("contentFormat").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("angle").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("width").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("height").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("rowCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("columnCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("similarFontFamily").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontStyle").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontWeight").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("backgroundColor").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("docType").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt; AnalyzeDocumentAsync (Azure.WaitUntil waitUntil, string modelId, Azure.AI.DocumentIntelligence.AnalyzeDocumentContent analyzeRequest = default, string pages = default, string locale = default, Azure.AI.DocumentIntelligence.StringIndexType? stringIndexType = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features = default, System.Collections.Generic.IEnumerable&lt;string&gt; queryFields = default, Azure.AI.DocumentIntelligence.ContentFormat? outputContentFormat = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt; AnalyzeDocumentAsync(valuetype Azure.WaitUntil waitUntil, string modelId, class Azure.AI.DocumentIntelligence.AnalyzeDocumentContent analyzeRequest, string pages, string locale, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.StringIndexType&gt; stringIndexType, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features, class System.Collections.Generic.IEnumerable`1&lt;string&gt; queryFields, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.ContentFormat&gt; outputContentFormat, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocumentAsync(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.AnalyzeDocumentContent,System.String,System.String,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.AI.DocumentIntelligence.ContentFormat},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeDocumentAsync (waitUntil As WaitUntil, modelId As String, Optional analyzeRequest As AnalyzeDocumentContent = Nothing, Optional pages As String = Nothing, Optional locale As String = Nothing, Optional stringIndexType As Nullable(Of StringIndexType) = Nothing, Optional features As IEnumerable(Of DocumentAnalysisFeature) = Nothing, Optional queryFields As IEnumerable(Of String) = Nothing, Optional outputContentFormat As Nullable(Of ContentFormat) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of AnalyzeResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeDocumentAsync : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.AnalyzeDocumentContent * string * string * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;&#xA;override this.AnalyzeDocumentAsync : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.AnalyzeDocumentContent * string * string * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;" Usage="documentIntelligenceClient.AnalyzeDocumentAsync (waitUntil, modelId, analyzeRequest, pages, locale, stringIndexType, features, queryFields, outputContentFormat, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="modelId" Type="System.String" />
        <Parameter Name="analyzeRequest" Type="Azure.AI.DocumentIntelligence.AnalyzeDocumentContent" />
        <Parameter Name="pages" Type="System.String" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="stringIndexType" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt;" />
        <Parameter Name="features" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt;" />
        <Parameter Name="queryFields" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="outputContentFormat" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.ContentFormat&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="modelId"> Unique document model name. </param>
        <param name="analyzeRequest"> Analyze request parameters. </param>
        <param name="pages"> List of 1-based page numbers to analyze.  Ex. "1-3,5,7-9". </param>
        <param name="locale">
            Locale hint for text recognition and document analysis.  Value may contain only
            the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
            </param>
        <param name="stringIndexType"> Method used to compute string offset and length. </param>
        <param name="features"> List of optional analysis features. </param>
        <param name="queryFields"> List of additional fields to extract.  Ex. "NumberOfGuests,StoreNumber". </param>
        <param name="outputContentFormat"> Format of the analyze result top-level content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyzes document with document model. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="modelId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="modelId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AnalyzeDocumentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "<modelId>");
AnalyzeResult responseData = operation.Value;
]]></code>
This sample shows how to call AnalyzeDocumentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

AnalyzeDocumentContent analyzeRequest = new AnalyzeDocumentContent
{
    UrlSource = new Uri("http://localhost:3000"),
    Base64Source = BinaryData.FromObjectAsJson(new object()),
};
Operation<AnalyzeResult> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "<modelId>", analyzeRequest: analyzeRequest, pages: "<pages>", locale: "<locale>", stringIndexType: StringIndexType.TextElements, features: new DocumentAnalysisFeature[] { DocumentAnalysisFeature.OcrHighResolution }, queryFields: new string[] { "<queryFields>" }, outputContentFormat: ContentFormat.Text);
AnalyzeResult responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; AnalyzeDocumentAsync (Azure.WaitUntil waitUntil, string modelId, Azure.Core.RequestContent content, string pages = default, string locale = default, string stringIndexType = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features = default, System.Collections.Generic.IEnumerable&lt;string&gt; queryFields = default, string outputContentFormat = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; AnalyzeDocumentAsync(valuetype Azure.WaitUntil waitUntil, string modelId, class Azure.Core.RequestContent content, string pages, string locale, string stringIndexType, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; features, class System.Collections.Generic.IEnumerable`1&lt;string&gt; queryFields, string outputContentFormat, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocumentAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeDocumentAsync (waitUntil As WaitUntil, modelId As String, content As RequestContent, Optional pages As String = Nothing, Optional locale As String = Nothing, Optional stringIndexType As String = Nothing, Optional features As IEnumerable(Of DocumentAnalysisFeature) = Nothing, Optional queryFields As IEnumerable(Of String) = Nothing, Optional outputContentFormat As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeDocumentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * string * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.AnalyzeDocumentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * string * seq&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt; * seq&lt;string&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="documentIntelligenceClient.AnalyzeDocumentAsync (waitUntil, modelId, content, pages, locale, stringIndexType, features, queryFields, outputContentFormat, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="modelId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="pages" Type="System.String" />
        <Parameter Name="locale" Type="System.String" />
        <Parameter Name="stringIndexType" Type="System.String" />
        <Parameter Name="features" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.DocumentIntelligence.DocumentAnalysisFeature&gt;" />
        <Parameter Name="queryFields" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="outputContentFormat" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="modelId"> Unique document model name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="pages"> List of 1-based page numbers to analyze.  Ex. "1-3,5,7-9". </param>
        <param name="locale">
            Locale hint for text recognition and document analysis.  Value may contain only
            the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
            </param>
        <param name="stringIndexType"> Method used to compute string offset and length. Allowed values: "textElements" | "unicodeCodePoint" | "utf16CodeUnit". </param>
        <param name="features"> List of optional analysis features. </param>
        <param name="queryFields"> List of additional fields to extract.  Ex. "NumberOfGuests,StoreNumber". </param>
        <param name="outputContentFormat"> Format of the analyze result top-level content. Allowed values: "text" | "markdown". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyzes document with document model.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.AnalyzeDocumentAsync(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.AnalyzeDocumentContent,System.String,System.String,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Collections.Generic.IEnumerable{Azure.AI.DocumentIntelligence.DocumentAnalysisFeature},System.Collections.Generic.IEnumerable{System.String},System.Nullable{Azure.AI.DocumentIntelligence.ContentFormat},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="modelId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="modelId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeDocumentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = null;
Operation<BinaryData> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "<modelId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
]]></code>
This sample shows how to call AnalyzeDocumentAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    urlSource = "http://localhost:3000",
    base64Source = new object(),
});
Operation<BinaryData> operation = await client.AnalyzeDocumentAsync(WaitUntil.Completed, "<modelId>", content, pages: "<pages>", locale: "<locale>", stringIndexType: "textElements", features: new DocumentAnalysisFeature[] { DocumentAnalysisFeature.OcrHighResolution }, queryFields: new string[] { "<queryFields>" }, outputContentFormat: "text");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("contentFormat").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("angle").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("width").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("height").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("rowCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("columnCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("similarFontFamily").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontStyle").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontWeight").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("backgroundColor").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("docType").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ClassifyDocument">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt; ClassifyDocument (Azure.WaitUntil waitUntil, string classifierId, Azure.AI.DocumentIntelligence.ClassifyDocumentContent classifyRequest, Azure.AI.DocumentIntelligence.StringIndexType? stringIndexType = default, Azure.AI.DocumentIntelligence.SplitMode? split = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.AI.DocumentIntelligence.AnalyzeResult&gt; ClassifyDocument(valuetype Azure.WaitUntil waitUntil, string classifierId, class Azure.AI.DocumentIntelligence.ClassifyDocumentContent classifyRequest, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.StringIndexType&gt; stringIndexType, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.SplitMode&gt; split, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocument(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.ClassifyDocumentContent,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Nullable{Azure.AI.DocumentIntelligence.SplitMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClassifyDocument (waitUntil As WaitUntil, classifierId As String, classifyRequest As ClassifyDocumentContent, Optional stringIndexType As Nullable(Of StringIndexType) = Nothing, Optional split As Nullable(Of SplitMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of AnalyzeResult)" />
      <MemberSignature Language="F#" Value="abstract member ClassifyDocument : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.ClassifyDocumentContent * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&#xA;override this.ClassifyDocument : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.ClassifyDocumentContent * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;" Usage="documentIntelligenceClient.ClassifyDocument (waitUntil, classifierId, classifyRequest, stringIndexType, split, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="classifierId" Type="System.String" />
        <Parameter Name="classifyRequest" Type="Azure.AI.DocumentIntelligence.ClassifyDocumentContent" />
        <Parameter Name="stringIndexType" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt;" />
        <Parameter Name="split" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="classifierId"> Unique document classifier name. </param>
        <param name="classifyRequest"> Classify request parameters. </param>
        <param name="stringIndexType"> Method used to compute string offset and length. </param>
        <param name="split"> Document splitting mode. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Classifies document with document classifier. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classifierId" /> or <paramref name="classifyRequest" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classifierId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ClassifyDocument.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

ClassifyDocumentContent classifyRequest = new ClassifyDocumentContent();
Operation<AnalyzeResult> operation = client.ClassifyDocument(WaitUntil.Completed, "<classifierId>", classifyRequest);
AnalyzeResult responseData = operation.Value;
]]></code>
This sample shows how to call ClassifyDocument with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

ClassifyDocumentContent classifyRequest = new ClassifyDocumentContent
{
    UrlSource = new Uri("http://localhost:3000"),
    Base64Source = BinaryData.FromObjectAsJson(new object()),
};
Operation<AnalyzeResult> operation = client.ClassifyDocument(WaitUntil.Completed, "<classifierId>", classifyRequest, stringIndexType: StringIndexType.TextElements, split: SplitMode.Auto);
AnalyzeResult responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ClassifyDocument">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ClassifyDocument (Azure.WaitUntil waitUntil, string classifierId, Azure.Core.RequestContent content, string stringIndexType = default, string split = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ClassifyDocument(valuetype Azure.WaitUntil waitUntil, string classifierId, class Azure.Core.RequestContent content, string stringIndexType, string split, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocument(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClassifyDocument (waitUntil As WaitUntil, classifierId As String, content As RequestContent, Optional stringIndexType As String = Nothing, Optional split As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ClassifyDocument : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ClassifyDocument : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="documentIntelligenceClient.ClassifyDocument (waitUntil, classifierId, content, stringIndexType, split, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="classifierId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="stringIndexType" Type="System.String" />
        <Parameter Name="split" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="classifierId"> Unique document classifier name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="stringIndexType"> Method used to compute string offset and length. Allowed values: "textElements" | "unicodeCodePoint" | "utf16CodeUnit". </param>
        <param name="split"> Document splitting mode. Allowed values: "auto" | "none" | "perPage". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Classifies document with document classifier.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocument(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.ClassifyDocumentContent,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Nullable{Azure.AI.DocumentIntelligence.SplitMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classifierId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classifierId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ClassifyDocument and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = client.ClassifyDocument(WaitUntil.Completed, "<classifierId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
]]></code>
This sample shows how to call ClassifyDocument with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    urlSource = "http://localhost:3000",
    base64Source = new object(),
});
Operation<BinaryData> operation = client.ClassifyDocument(WaitUntil.Completed, "<classifierId>", content, stringIndexType: "textElements", split: "auto");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("contentFormat").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("angle").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("width").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("height").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("rowCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("columnCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("similarFontFamily").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontStyle").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontWeight").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("backgroundColor").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("docType").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ClassifyDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt; ClassifyDocumentAsync (Azure.WaitUntil waitUntil, string classifierId, Azure.AI.DocumentIntelligence.ClassifyDocumentContent classifyRequest, Azure.AI.DocumentIntelligence.StringIndexType? stringIndexType = default, Azure.AI.DocumentIntelligence.SplitMode? split = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt; ClassifyDocumentAsync(valuetype Azure.WaitUntil waitUntil, string classifierId, class Azure.AI.DocumentIntelligence.ClassifyDocumentContent classifyRequest, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.StringIndexType&gt; stringIndexType, valuetype System.Nullable`1&lt;valuetype Azure.AI.DocumentIntelligence.SplitMode&gt; split, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocumentAsync(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.ClassifyDocumentContent,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Nullable{Azure.AI.DocumentIntelligence.SplitMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClassifyDocumentAsync (waitUntil As WaitUntil, classifierId As String, classifyRequest As ClassifyDocumentContent, Optional stringIndexType As Nullable(Of StringIndexType) = Nothing, Optional split As Nullable(Of SplitMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of AnalyzeResult))" />
      <MemberSignature Language="F#" Value="abstract member ClassifyDocumentAsync : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.ClassifyDocumentContent * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;&#xA;override this.ClassifyDocumentAsync : Azure.WaitUntil * string * Azure.AI.DocumentIntelligence.ClassifyDocumentContent * Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt; * Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;" Usage="documentIntelligenceClient.ClassifyDocumentAsync (waitUntil, classifierId, classifyRequest, stringIndexType, split, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.DocumentIntelligence.AnalyzeResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="classifierId" Type="System.String" />
        <Parameter Name="classifyRequest" Type="Azure.AI.DocumentIntelligence.ClassifyDocumentContent" />
        <Parameter Name="stringIndexType" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.StringIndexType&gt;" />
        <Parameter Name="split" Type="System.Nullable&lt;Azure.AI.DocumentIntelligence.SplitMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="classifierId"> Unique document classifier name. </param>
        <param name="classifyRequest"> Classify request parameters. </param>
        <param name="stringIndexType"> Method used to compute string offset and length. </param>
        <param name="split"> Document splitting mode. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Classifies document with document classifier. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classifierId" /> or <paramref name="classifyRequest" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classifierId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ClassifyDocumentAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

ClassifyDocumentContent classifyRequest = new ClassifyDocumentContent();
Operation<AnalyzeResult> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "<classifierId>", classifyRequest);
AnalyzeResult responseData = operation.Value;
]]></code>
This sample shows how to call ClassifyDocumentAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

ClassifyDocumentContent classifyRequest = new ClassifyDocumentContent
{
    UrlSource = new Uri("http://localhost:3000"),
    Base64Source = BinaryData.FromObjectAsJson(new object()),
};
Operation<AnalyzeResult> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "<classifierId>", classifyRequest, stringIndexType: StringIndexType.TextElements, split: SplitMode.Auto);
AnalyzeResult responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ClassifyDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ClassifyDocumentAsync (Azure.WaitUntil waitUntil, string classifierId, Azure.Core.RequestContent content, string stringIndexType = default, string split = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ClassifyDocumentAsync(valuetype Azure.WaitUntil waitUntil, string classifierId, class Azure.Core.RequestContent content, string stringIndexType, string split, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocumentAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClassifyDocumentAsync (waitUntil As WaitUntil, classifierId As String, content As RequestContent, Optional stringIndexType As String = Nothing, Optional split As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ClassifyDocumentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ClassifyDocumentAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="documentIntelligenceClient.ClassifyDocumentAsync (waitUntil, classifierId, content, stringIndexType, split, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="classifierId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="stringIndexType" Type="System.String" />
        <Parameter Name="split" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="classifierId"> Unique document classifier name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="stringIndexType"> Method used to compute string offset and length. Allowed values: "textElements" | "unicodeCodePoint" | "utf16CodeUnit". </param>
        <param name="split"> Document splitting mode. Allowed values: "auto" | "none" | "perPage". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Classifies document with document classifier.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.ClassifyDocumentAsync(Azure.WaitUntil,System.String,Azure.AI.DocumentIntelligence.ClassifyDocumentContent,System.Nullable{Azure.AI.DocumentIntelligence.StringIndexType},System.Nullable{Azure.AI.DocumentIntelligence.SplitMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classifierId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classifierId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ClassifyDocumentAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new object());
Operation<BinaryData> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "<classifierId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
]]></code>
This sample shows how to call ClassifyDocumentAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
DocumentIntelligenceClient client = new DocumentIntelligenceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    urlSource = "http://localhost:3000",
    base64Source = new object(),
});
Operation<BinaryData> operation = await client.ClassifyDocumentAsync(WaitUntil.Completed, "<classifierId>", content, stringIndexType: "textElements", split: "auto");
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("apiVersion").ToString());
Console.WriteLine(result.GetProperty("modelId").ToString());
Console.WriteLine(result.GetProperty("stringIndexType").ToString());
Console.WriteLine(result.GetProperty("contentFormat").ToString());
Console.WriteLine(result.GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("angle").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("width").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("height").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("words")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("selectionMarks")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("lines")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("barcodes")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("span").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("pages")[0].GetProperty("formulas")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("role").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("paragraphs")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("rowCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("columnCount").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("kind").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnIndex").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("rowSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("columnSpan").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("cells")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("tables")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("caption").GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("figures")[0].GetProperty("footnotes")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("lists")[0].GetProperty("items")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("sections")[0].GetProperty("elements")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("key").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("value").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("keyValuePairs")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("isHandwritten").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("similarFontFamily").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontStyle").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("fontWeight").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("color").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("backgroundColor").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("styles")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("locale").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("languages")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("docType").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueString").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueDate").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueTime").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valuePhoneNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueInteger").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionMark").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSignature").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCountryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueArray")[0].GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("amount").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencySymbol").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueCurrency").GetProperty("currencyCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("houseNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("poBox").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("road").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("postalCode").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("countryRegion").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("streetAddress").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("cityDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("stateDistrict").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("suburb").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("house").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueAddress").GetProperty("level").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueBoolean").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("valueSelectionGroup")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("content").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("pageNumber").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("boundingRegions")[0].GetProperty("polygon")[0].ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("spans")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("fields").GetProperty("<key>").GetProperty("confidence").ToString());
Console.WriteLine(result.GetProperty("documents")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.DocumentIntelligence.DocumentIntelligenceClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.DocumentIntelligence</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
