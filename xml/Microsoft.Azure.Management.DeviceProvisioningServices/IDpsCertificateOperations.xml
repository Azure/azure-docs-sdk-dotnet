<Type Name="IDpsCertificateOperations" FullName="Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations">
  <TypeSignature Language="C#" Value="public interface IDpsCertificateOperations" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDpsCertificateOperations" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDpsCertificateOperations" />
  <TypeSignature Language="F#" Value="type IDpsCertificateOperations = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            DpsCertificateOperations operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrUpdateWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; CreateOrUpdateWithHttpMessagesAsync (string resourceGroupName, string provisioningServiceName, string certificateName, Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateBodyDescription certificateDescription, string ifMatch = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; CreateOrUpdateWithHttpMessagesAsync(string resourceGroupName, string provisioningServiceName, string certificateName, class Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateBodyDescription certificateDescription, string ifMatch, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.CreateOrUpdateWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateBodyDescription,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrUpdateWithHttpMessagesAsync (resourceGroupName As String, provisioningServiceName As String, certificateName As String, certificateDescription As CertificateBodyDescription, Optional ifMatch As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of CertificateResponse))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateWithHttpMessagesAsync : string * string * string * Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateBodyDescription * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;" Usage="iDpsCertificateOperations.CreateOrUpdateWithHttpMessagesAsync (resourceGroupName, provisioningServiceName, certificateName, certificateDescription, ifMatch, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="certificateDescription" Type="Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateBodyDescription" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName">
            Resource group identifier.
            </param>
        <param name="provisioningServiceName">
            The name of the provisioning service.
            </param>
        <param name="certificateName">
            The name of the certificate create or update.
            </param>
        <param name="certificateDescription">
            The certificate body.
            </param>
        <param name="ifMatch">
            ETag of the certificate. This is required to update an existing
            certificate, and ignored while creating a brand new certificate.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Upload the certificate to the provisioning service.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Add new certificate or update an existing certificate.
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&gt; DeleteWithHttpMessagesAsync (string resourceGroupName, string ifMatch, string provisioningServiceName, string certificateName, string certificatename = default, byte[] certificaterawBytes = default, bool? certificateisVerified = default, string certificatepurpose = default, DateTime? certificatecreated = default, DateTime? certificatelastUpdated = default, bool? certificatehasPrivateKey = default, string certificatenonce = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse&gt; DeleteWithHttpMessagesAsync(string resourceGroupName, string ifMatch, string provisioningServiceName, string certificateName, string certificatename, unsigned int8[] certificaterawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateisVerified, string certificatepurpose, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatecreated, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatelastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificatehasPrivateKey, string certificatenonce, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.DeleteWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteWithHttpMessagesAsync : string * string * string * string * string * byte[] * Nullable&lt;bool&gt; * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;bool&gt; * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&gt;" Usage="iDpsCertificateOperations.DeleteWithHttpMessagesAsync (resourceGroupName, ifMatch, provisioningServiceName, certificateName, certificatename, certificaterawBytes, certificateisVerified, certificatepurpose, certificatecreated, certificatelastUpdated, certificatehasPrivateKey, certificatenonce, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="certificatename" Type="System.String" />
        <Parameter Name="certificaterawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateisVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatepurpose" Type="System.String" />
        <Parameter Name="certificatecreated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatelastUpdated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatehasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatenonce" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName">
            Resource group identifier.
            </param>
        <param name="ifMatch">
            ETag of the certificate
            </param>
        <param name="provisioningServiceName">
            The name of the provisioning service.
            </param>
        <param name="certificateName">
            This is a mandatory field, and is the logical name of the
            certificate that the provisioning service will access by.
            </param>
        <param name="certificatename">
            This is optional, and it is the Common Name of the certificate.
            </param>
        <param name="certificaterawBytes">
            Raw data within the certificate.
            </param>
        <param name="certificateisVerified">
            Indicates if certificate has been verified by owner of the private
            key.
            </param>
        <param name="certificatepurpose">
            A description that mentions the purpose of the certificate.
            Possible values include: 'clientAuthentication',
            'serverAuthentication'
            </param>
        <param name="certificatecreated">
            Time the certificate is created.
            </param>
        <param name="certificatelastUpdated">
            Time the certificate is last updated.
            </param>
        <param name="certificatehasPrivateKey">
            Indicates if the certificate contains a private key.
            </param>
        <param name="certificatenonce">
            Random number generated to indicate Proof of Possession.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Delete the Provisioning Service Certificate.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Deletes the specified certificate associated with the Provisioning
            Service
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateVerificationCodeWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt; GenerateVerificationCodeWithHttpMessagesAsync (string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificatename = default, byte[] certificaterawBytes = default, bool? certificateisVerified = default, string certificatepurpose = default, DateTime? certificatecreated = default, DateTime? certificatelastUpdated = default, bool? certificatehasPrivateKey = default, string certificatenonce = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt; GenerateVerificationCodeWithHttpMessagesAsync(string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificatename, unsigned int8[] certificaterawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateisVerified, string certificatepurpose, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatecreated, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatelastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificatehasPrivateKey, string certificatenonce, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.GenerateVerificationCodeWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member GenerateVerificationCodeWithHttpMessagesAsync : string * string * string * string * string * byte[] * Nullable&lt;bool&gt; * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;bool&gt; * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt;" Usage="iDpsCertificateOperations.GenerateVerificationCodeWithHttpMessagesAsync (certificateName, ifMatch, resourceGroupName, provisioningServiceName, certificatename, certificaterawBytes, certificateisVerified, certificatepurpose, certificatecreated, certificatelastUpdated, certificatehasPrivateKey, certificatenonce, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="certificatename" Type="System.String" />
        <Parameter Name="certificaterawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateisVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatepurpose" Type="System.String" />
        <Parameter Name="certificatecreated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatelastUpdated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatehasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatenonce" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The mandatory logical name of the certificate, that the
            provisioning service uses to access.
            </param>
        <param name="ifMatch">
            ETag of the certificate. This is required to update an existing
            certificate, and ignored while creating a brand new certificate.
            </param>
        <param name="resourceGroupName">
            name of resource group.
            </param>
        <param name="provisioningServiceName">
            Name of provisioning service.
            </param>
        <param name="certificatename">
            Common Name for the certificate.
            </param>
        <param name="certificaterawBytes">
            Raw data of certificate.
            </param>
        <param name="certificateisVerified">
            Indicates if the certificate has been verified by owner of the
            private key.
            </param>
        <param name="certificatepurpose">
            Description mentioning the purpose of the certificate. Possible
            values include: 'clientAuthentication', 'serverAuthentication'
            </param>
        <param name="certificatecreated">
            Certificate creation time.
            </param>
        <param name="certificatelastUpdated">
            Certificate last updated time.
            </param>
        <param name="certificatehasPrivateKey">
            Indicates if the certificate contains private key.
            </param>
        <param name="certificatenonce">
            Random number generated to indicate Proof of Possession.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Generate verification code for Proof of Possession.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; GetWithHttpMessagesAsync (string certificateName, string resourceGroupName, string provisioningServiceName, string ifMatch = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; GetWithHttpMessagesAsync(string certificateName, string resourceGroupName, string provisioningServiceName, string ifMatch, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.GetWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWithHttpMessagesAsync (certificateName As String, resourceGroupName As String, provisioningServiceName As String, Optional ifMatch As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of CertificateResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetWithHttpMessagesAsync : string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;" Usage="iDpsCertificateOperations.GetWithHttpMessagesAsync (certificateName, resourceGroupName, provisioningServiceName, ifMatch, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            Name of the certificate to retrieve.
            </param>
        <param name="resourceGroupName">
            Resource group identifier.
            </param>
        <param name="provisioningServiceName">
            Name of the provisioning service the certificate is associated
            with.
            </param>
        <param name="ifMatch">
            ETag of the certificate.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get the certificate from the provisioning service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ListWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateListDescription&gt;&gt; ListWithHttpMessagesAsync (string resourceGroupName, string provisioningServiceName, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateListDescription&gt;&gt; ListWithHttpMessagesAsync(string resourceGroupName, string provisioningServiceName, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.ListWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListWithHttpMessagesAsync (resourceGroupName As String, provisioningServiceName As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of CertificateListDescription))" />
      <MemberSignature Language="F#" Value="abstract member ListWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateListDescription&gt;&gt;" Usage="iDpsCertificateOperations.ListWithHttpMessagesAsync (resourceGroupName, provisioningServiceName, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateListDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName">
            Name of resource group.
            </param>
        <param name="provisioningServiceName">
            Name of provisioning service to retrieve certificates for.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get all the certificates tied to the provisioning service.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyCertificateWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; VerifyCertificateWithHttpMessagesAsync (string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificatename = default, byte[] certificaterawBytes = default, bool? certificateisVerified = default, string certificatepurpose = default, DateTime? certificatecreated = default, DateTime? certificatelastUpdated = default, bool? certificatehasPrivateKey = default, string certificatenonce = default, string certificate = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt; VerifyCertificateWithHttpMessagesAsync(string certificateName, string ifMatch, string resourceGroupName, string provisioningServiceName, string certificatename, unsigned int8[] certificaterawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateisVerified, string certificatepurpose, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatecreated, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; certificatelastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificatehasPrivateKey, string certificatenonce, string certificate, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.DeviceProvisioningServices.IDpsCertificateOperations.VerifyCertificateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member VerifyCertificateWithHttpMessagesAsync : string * string * string * string * string * byte[] * Nullable&lt;bool&gt; * string * Nullable&lt;DateTime&gt; * Nullable&lt;DateTime&gt; * Nullable&lt;bool&gt; * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;" Usage="iDpsCertificateOperations.VerifyCertificateWithHttpMessagesAsync (certificateName, ifMatch, resourceGroupName, provisioningServiceName, certificatename, certificaterawBytes, certificateisVerified, certificatepurpose, certificatecreated, certificatelastUpdated, certificatehasPrivateKey, certificatenonce, certificate, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.DeviceProvisioningServices.Models.CertificateResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="certificatename" Type="System.String" />
        <Parameter Name="certificaterawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateisVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatepurpose" Type="System.String" />
        <Parameter Name="certificatecreated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatelastUpdated" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="certificatehasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatenonce" Type="System.String" />
        <Parameter Name="certificate" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateName">
            The mandatory logical name of the certificate, that the
            provisioning service uses to access.
            </param>
        <param name="ifMatch">
            ETag of the certificate.
            </param>
        <param name="resourceGroupName">
            Resource group name.
            </param>
        <param name="provisioningServiceName">
            Provisioning service name.
            </param>
        <param name="certificatename">
            Common Name for the certificate.
            </param>
        <param name="certificaterawBytes">
            Raw data of certificate.
            </param>
        <param name="certificateisVerified">
            Indicates if the certificate has been verified by owner of the
            private key.
            </param>
        <param name="certificatepurpose">
            Describe the purpose of the certificate. Possible values include:
            'clientAuthentication', 'serverAuthentication'
            </param>
        <param name="certificatecreated">
            Certificate creation time.
            </param>
        <param name="certificatelastUpdated">
            Certificate last updated time.
            </param>
        <param name="certificatehasPrivateKey">
            Indicates if the certificate contains private key.
            </param>
        <param name="certificatenonce">
            Random number generated to indicate Proof of Possession.
            </param>
        <param name="certificate">
            base-64 representation of X509 certificate .cer file or just .pem
            file content.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Verify certificate's private key possession.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Verifies the certificate's private key possession by providing the
            leaf cert issued by the verifying pre uploaded certificate.
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.DeviceProvisioningServices.Models.ErrorDetailsException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
