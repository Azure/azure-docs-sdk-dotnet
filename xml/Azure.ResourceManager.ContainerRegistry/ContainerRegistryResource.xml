<Type Name="ContainerRegistryResource" FullName="Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource">
  <TypeSignature Language="C#" Value="public class ContainerRegistryResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerRegistryResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerRegistryResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type ContainerRegistryResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a ContainerRegistry along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetContainerRegistryResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetContainerRegistry method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContainerRegistryResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;" Usage="containerRegistryResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;" Usage="containerRegistryResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string registryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string registryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.CreateResourceIdentifier(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, registryName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, registryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="registryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="registryName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As ContainerRegistryData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.ContainerRegistry.ContainerRegistryData" Usage="Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="containerRegistryResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="containerRegistryResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCredentials">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt; GenerateCredentials (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt; GenerateCredentials(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GenerateCredentials(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateCredentials (waitUntil As WaitUntil, content As ContainerRegistryGenerateCredentialsContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ContainerRegistryGenerateCredentialsResult)" />
      <MemberSignature Language="F#" Value="abstract member GenerateCredentials : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&#xA;override this.GenerateCredentials : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;" Usage="containerRegistryResource.GenerateCredentials (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters for generating credentials. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generate keys for a token of a specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials
            Operation Id: Registries_GenerateCredentials
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateCredentialsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&gt; GenerateCredentialsAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&gt; GenerateCredentialsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GenerateCredentialsAsync(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateCredentialsAsync (waitUntil As WaitUntil, content As ContainerRegistryGenerateCredentialsContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ContainerRegistryGenerateCredentialsResult))" />
      <MemberSignature Language="F#" Value="abstract member GenerateCredentialsAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&gt;&#xA;override this.GenerateCredentialsAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&gt;" Usage="containerRegistryResource.GenerateCredentialsAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryGenerateCredentialsContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters for generating credentials. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generate keys for a token of a specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials
            Operation Id: Registries_GenerateCredentials
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;" Usage="containerRegistryResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;" Usage="containerRegistryResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuildSourceUploadUrl">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt; GetBuildSourceUploadUrl (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt; GetBuildSourceUploadUrl(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetBuildSourceUploadUrl(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBuildSourceUploadUrl (Optional cancellationToken As CancellationToken = Nothing) As Response(Of SourceUploadDefinition)" />
      <MemberSignature Language="F#" Value="abstract member GetBuildSourceUploadUrl : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&#xA;override this.GetBuildSourceUploadUrl : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;" Usage="containerRegistryResource.GetBuildSourceUploadUrl cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the upload location for the user to be able to upload the source.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl
            Operation Id: Builds_GetBuildSourceUploadUrl
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuildSourceUploadUrlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&gt; GetBuildSourceUploadUrlAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&gt; GetBuildSourceUploadUrlAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetBuildSourceUploadUrlAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBuildSourceUploadUrlAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SourceUploadDefinition))" />
      <MemberSignature Language="F#" Value="abstract member GetBuildSourceUploadUrlAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&gt;&#xA;override this.GetBuildSourceUploadUrlAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&gt;" Usage="containerRegistryResource.GetBuildSourceUploadUrlAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.SourceUploadDefinition&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the upload location for the user to be able to upload the source.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl
            Operation Id: Builds_GetBuildSourceUploadUrl
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConnectedRegistries">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ConnectedRegistryCollection GetConnectedRegistries ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ConnectedRegistryCollection GetConnectedRegistries() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetConnectedRegistries" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectedRegistries () As ConnectedRegistryCollection" />
      <MemberSignature Language="F#" Value="abstract member GetConnectedRegistries : unit -&gt; Azure.ResourceManager.ContainerRegistry.ConnectedRegistryCollection&#xA;override this.GetConnectedRegistries : unit -&gt; Azure.ResourceManager.ContainerRegistry.ConnectedRegistryCollection" Usage="containerRegistryResource.GetConnectedRegistries " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ConnectedRegistryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ConnectedRegistryResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ConnectedRegistryResources and their operations over a ConnectedRegistryResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConnectedRegistry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt; GetConnectedRegistry (string connectedRegistryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt; GetConnectedRegistry(string connectedRegistryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetConnectedRegistry(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectedRegistry (connectedRegistryName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConnectedRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member GetConnectedRegistry : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&#xA;override this.GetConnectedRegistry : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;" Usage="containerRegistryResource.GetConnectedRegistry (connectedRegistryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectedRegistryName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="connectedRegistryName"> The name of the connected registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the connected registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}
            Operation Id: ConnectedRegistries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectedRegistryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectedRegistryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConnectedRegistryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&gt; GetConnectedRegistryAsync (string connectedRegistryName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&gt; GetConnectedRegistryAsync(string connectedRegistryName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetConnectedRegistryAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectedRegistryAsync (connectedRegistryName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConnectedRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member GetConnectedRegistryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&gt;&#xA;override this.GetConnectedRegistryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&gt;" Usage="containerRegistryResource.GetConnectedRegistryAsync (connectedRegistryName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ConnectedRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectedRegistryName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="connectedRegistryName"> The name of the connected registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the connected registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}
            Operation Id: ConnectedRegistries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectedRegistryName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectedRegistryName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryAgentPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt; GetContainerRegistryAgentPool (string agentPoolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt; GetContainerRegistryAgentPool(string agentPoolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryAgentPool(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryAgentPool (agentPoolName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryAgentPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryAgentPool : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&#xA;override this.GetContainerRegistryAgentPool : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;" Usage="containerRegistryResource.GetContainerRegistryAgentPool (agentPoolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentPoolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentPoolName"> The name of the agent pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given agent pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}
            Operation Id: AgentPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentPoolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentPoolName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryAgentPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&gt; GetContainerRegistryAgentPoolAsync (string agentPoolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&gt; GetContainerRegistryAgentPoolAsync(string agentPoolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryAgentPoolAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryAgentPoolAsync (agentPoolName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryAgentPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryAgentPoolAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&gt;&#xA;override this.GetContainerRegistryAgentPoolAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryAgentPoolAsync (agentPoolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentPoolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentPoolName"> The name of the agent pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given agent pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}
            Operation Id: AgentPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentPoolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentPoolName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryAgentPools">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolCollection GetContainerRegistryAgentPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolCollection GetContainerRegistryAgentPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryAgentPools" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryAgentPools () As ContainerRegistryAgentPoolCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryAgentPools : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolCollection&#xA;override this.GetContainerRegistryAgentPools : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolCollection" Usage="containerRegistryResource.GetContainerRegistryAgentPools " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryAgentPoolResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryAgentPoolResources and their operations over a ContainerRegistryAgentPoolResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt; GetContainerRegistryPipelineRun (string pipelineRunName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt; GetContainerRegistryPipelineRun(string pipelineRunName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPipelineRun(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPipelineRun (pipelineRunName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryPipelineRunResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&#xA;override this.GetContainerRegistryPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;" Usage="containerRegistryResource.GetContainerRegistryPipelineRun (pipelineRunName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineRunName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="pipelineRunName"> The name of the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given pipeline run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/pipelineRuns/{pipelineRunName}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineRunName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineRunName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&gt; GetContainerRegistryPipelineRunAsync (string pipelineRunName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&gt; GetContainerRegistryPipelineRunAsync(string pipelineRunName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPipelineRunAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPipelineRunAsync (pipelineRunName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryPipelineRunResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&gt;&#xA;override this.GetContainerRegistryPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryPipelineRunAsync (pipelineRunName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineRunName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="pipelineRunName"> The name of the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given pipeline run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/pipelineRuns/{pipelineRunName}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineRunName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineRunName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPipelineRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunCollection GetContainerRegistryPipelineRuns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunCollection GetContainerRegistryPipelineRuns() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPipelineRuns" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPipelineRuns () As ContainerRegistryPipelineRunCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPipelineRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunCollection&#xA;override this.GetContainerRegistryPipelineRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunCollection" Usage="containerRegistryResource.GetContainerRegistryPipelineRuns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryPipelineRunCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryPipelineRunResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryPipelineRunResources and their operations over a ContainerRegistryPipelineRunResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateEndpointConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt; GetContainerRegistryPrivateEndpointConnection (string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt; GetContainerRegistryPrivateEndpointConnection(string privateEndpointConnectionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateEndpointConnection(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateEndpointConnection (privateEndpointConnectionName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryPrivateEndpointConnectionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateEndpointConnection : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&#xA;override this.GetContainerRegistryPrivateEndpointConnection : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;" Usage="containerRegistryResource.GetContainerRegistryPrivateEndpointConnection (privateEndpointConnectionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified private endpoint connection associated with the container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnections_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateEndpointConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&gt; GetContainerRegistryPrivateEndpointConnectionAsync (string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&gt; GetContainerRegistryPrivateEndpointConnectionAsync(string privateEndpointConnectionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateEndpointConnectionAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateEndpointConnectionAsync (privateEndpointConnectionName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryPrivateEndpointConnectionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateEndpointConnectionAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&gt;&#xA;override this.GetContainerRegistryPrivateEndpointConnectionAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryPrivateEndpointConnectionAsync (privateEndpointConnectionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The name of the private endpoint connection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified private endpoint connection associated with the container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnections_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateEndpointConnections">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionCollection GetContainerRegistryPrivateEndpointConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionCollection GetContainerRegistryPrivateEndpointConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateEndpointConnections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateEndpointConnections () As ContainerRegistryPrivateEndpointConnectionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionCollection&#xA;override this.GetContainerRegistryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionCollection" Usage="containerRegistryResource.GetContainerRegistryPrivateEndpointConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryPrivateEndpointConnectionResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryPrivateEndpointConnectionResources and their operations over a ContainerRegistryPrivateEndpointConnectionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt; GetContainerRegistryPrivateLinkResource (string groupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt; GetContainerRegistryPrivateLinkResource(string groupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateLinkResource(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateLinkResource (groupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryPrivateLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateLinkResource : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&#xA;override this.GetContainerRegistryPrivateLinkResource : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;" Usage="containerRegistryResource.GetContainerRegistryPrivateLinkResource (groupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupName"> The name of the private link resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private link resource by a specified group name for a container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}
            Operation Id: Registries_GetPrivateLinkResource
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateLinkResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&gt; GetContainerRegistryPrivateLinkResourceAsync (string groupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&gt; GetContainerRegistryPrivateLinkResourceAsync(string groupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateLinkResourceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateLinkResourceAsync (groupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryPrivateLinkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateLinkResourceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&gt;&#xA;override this.GetContainerRegistryPrivateLinkResourceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryPrivateLinkResourceAsync (groupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupName"> The name of the private link resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private link resource by a specified group name for a container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}
            Operation Id: Registries_GetPrivateLinkResource
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateLinkResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResourceCollection GetContainerRegistryPrivateLinkResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResourceCollection GetContainerRegistryPrivateLinkResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryPrivateLinkResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateLinkResources () As ContainerRegistryPrivateLinkResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateLinkResources : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResourceCollection&#xA;override this.GetContainerRegistryPrivateLinkResources : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResourceCollection" Usage="containerRegistryResource.GetContainerRegistryPrivateLinkResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryPrivateLinkResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryPrivateLinkResources and their operations over a ContainerRegistryPrivateLinkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryReplication">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt; GetContainerRegistryReplication (string replicationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt; GetContainerRegistryReplication(string replicationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryReplication(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryReplication (replicationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryReplicationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryReplication : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&#xA;override this.GetContainerRegistryReplication : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;" Usage="containerRegistryResource.GetContainerRegistryReplication (replicationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicationName"> The name of the replication. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified replication.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
            Operation Id: Replications_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="replicationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replicationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryReplicationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&gt; GetContainerRegistryReplicationAsync (string replicationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&gt; GetContainerRegistryReplicationAsync(string replicationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryReplicationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryReplicationAsync (replicationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryReplicationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryReplicationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&gt;&#xA;override this.GetContainerRegistryReplicationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryReplicationAsync (replicationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicationName"> The name of the replication. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified replication.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}
            Operation Id: Replications_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="replicationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replicationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryReplications">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationCollection GetContainerRegistryReplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationCollection GetContainerRegistryReplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryReplications" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryReplications () As ContainerRegistryReplicationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryReplications : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationCollection&#xA;override this.GetContainerRegistryReplications : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationCollection" Usage="containerRegistryResource.GetContainerRegistryReplications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryReplicationResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryReplicationResources and their operations over a ContainerRegistryReplicationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt; GetContainerRegistryRun (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt; GetContainerRegistryRun(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryRun(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryRun (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryRunResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&#xA;override this.GetContainerRegistryRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;" Usage="containerRegistryResource.GetContainerRegistryRun (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The run ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}
            Operation Id: Runs_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt; GetContainerRegistryRunAsync (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt; GetContainerRegistryRunAsync(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryRunAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryRunAsync (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryRunResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;&#xA;override this.GetContainerRegistryRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryRunAsync (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The run ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}
            Operation Id: Runs_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunCollection GetContainerRegistryRuns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunCollection GetContainerRegistryRuns() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryRuns" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryRuns () As ContainerRegistryRunCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunCollection&#xA;override this.GetContainerRegistryRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunCollection" Usage="containerRegistryResource.GetContainerRegistryRuns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryRunResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryRunResources and their operations over a ContainerRegistryRunResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt; GetContainerRegistryTask (string taskName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt; GetContainerRegistryTask(string taskName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTask(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTask (taskName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryTaskResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTask : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&#xA;override this.GetContainerRegistryTask : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;" Usage="containerRegistryResource.GetContainerRegistryTask (taskName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="taskName"> The name of the container registry task. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specified task.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
            Operation Id: Tasks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="taskName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="taskName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&gt; GetContainerRegistryTaskAsync (string taskName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&gt; GetContainerRegistryTaskAsync(string taskName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTaskAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskAsync (taskName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryTaskResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&gt;&#xA;override this.GetContainerRegistryTaskAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryTaskAsync (taskName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="taskName"> The name of the container registry task. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the properties of a specified task.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}
            Operation Id: Tasks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="taskName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="taskName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt; GetContainerRegistryTaskRun (string taskRunName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt; GetContainerRegistryTaskRun(string taskRunName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTaskRun(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskRun (taskRunName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryTaskRunResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&#xA;override this.GetContainerRegistryTaskRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;" Usage="containerRegistryResource.GetContainerRegistryTaskRun (taskRunName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskRunName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="taskRunName"> The name of the task run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given task run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
            Operation Id: TaskRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="taskRunName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="taskRunName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&gt; GetContainerRegistryTaskRunAsync (string taskRunName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&gt; GetContainerRegistryTaskRunAsync(string taskRunName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTaskRunAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskRunAsync (taskRunName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryTaskRunResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&gt;&#xA;override this.GetContainerRegistryTaskRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryTaskRunAsync (taskRunName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskRunName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="taskRunName"> The name of the task run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the detailed information for a given task run.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}
            Operation Id: TaskRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="taskRunName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="taskRunName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunCollection GetContainerRegistryTaskRuns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunCollection GetContainerRegistryTaskRuns() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTaskRuns" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskRuns () As ContainerRegistryTaskRunCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunCollection&#xA;override this.GetContainerRegistryTaskRuns : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunCollection" Usage="containerRegistryResource.GetContainerRegistryTaskRuns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryTaskRunResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryTaskRunResources and their operations over a ContainerRegistryTaskRunResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskCollection GetContainerRegistryTasks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskCollection GetContainerRegistryTasks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTasks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTasks () As ContainerRegistryTaskCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTasks : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskCollection&#xA;override this.GetContainerRegistryTasks : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskCollection" Usage="containerRegistryResource.GetContainerRegistryTasks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryTaskResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryTaskResources and their operations over a ContainerRegistryTaskResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryToken">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt; GetContainerRegistryToken (string tokenName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt; GetContainerRegistryToken(string tokenName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryToken(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryToken (tokenName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryTokenResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryToken : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&#xA;override this.GetContainerRegistryToken : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;" Usage="containerRegistryResource.GetContainerRegistryToken (tokenName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenName"> The name of the token. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
            Operation Id: Tokens_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="tokenName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tokenName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&gt; GetContainerRegistryTokenAsync (string tokenName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&gt; GetContainerRegistryTokenAsync(string tokenName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTokenAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTokenAsync (tokenName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryTokenResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTokenAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&gt;&#xA;override this.GetContainerRegistryTokenAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryTokenAsync (tokenName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="tokenName"> The name of the token. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}
            Operation Id: Tokens_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="tokenName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tokenName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTokens">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenCollection GetContainerRegistryTokens ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenCollection GetContainerRegistryTokens() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryTokens" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTokens () As ContainerRegistryTokenCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTokens : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenCollection&#xA;override this.GetContainerRegistryTokens : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenCollection" Usage="containerRegistryResource.GetContainerRegistryTokens " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryTokenResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryTokenResources and their operations over a ContainerRegistryTokenResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryWebhook">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt; GetContainerRegistryWebhook (string webhookName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt; GetContainerRegistryWebhook(string webhookName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryWebhook(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryWebhook (webhookName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryWebhookResource)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryWebhook : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&#xA;override this.GetContainerRegistryWebhook : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;" Usage="containerRegistryResource.GetContainerRegistryWebhook (webhookName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webhookName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="webhookName"> The name of the webhook. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified webhook.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
            Operation Id: Webhooks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="webhookName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webhookName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryWebhookAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&gt; GetContainerRegistryWebhookAsync (string webhookName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&gt; GetContainerRegistryWebhookAsync(string webhookName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryWebhookAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryWebhookAsync (webhookName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryWebhookResource))" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryWebhookAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&gt;&#xA;override this.GetContainerRegistryWebhookAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&gt;" Usage="containerRegistryResource.GetContainerRegistryWebhookAsync (webhookName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webhookName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="webhookName"> The name of the webhook. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified webhook.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}
            Operation Id: Webhooks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="webhookName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="webhookName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryWebhooks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookCollection GetContainerRegistryWebhooks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookCollection GetContainerRegistryWebhooks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetContainerRegistryWebhooks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryWebhooks () As ContainerRegistryWebhookCollection" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryWebhooks : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookCollection&#xA;override this.GetContainerRegistryWebhooks : unit -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookCollection" Usage="containerRegistryResource.GetContainerRegistryWebhooks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ContainerRegistryWebhookResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ContainerRegistryWebhookResources and their operations over a ContainerRegistryWebhookResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentials">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt; GetCredentials (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt; GetCredentials(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetCredentials(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCredentials (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryListCredentialsResult)" />
      <MemberSignature Language="F#" Value="abstract member GetCredentials : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&#xA;override this.GetCredentials : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;" Usage="containerRegistryResource.GetCredentials cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the login credentials for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials
            Operation Id: Registries_ListCredentials
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentialsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt; GetCredentialsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt; GetCredentialsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetCredentialsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCredentialsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryListCredentialsResult))" />
      <MemberSignature Language="F#" Value="abstract member GetCredentialsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;&#xA;override this.GetCredentialsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;" Usage="containerRegistryResource.GetCredentialsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the login credentials for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials
            Operation Id: Registries_ListCredentials
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportPipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt; GetExportPipeline (string exportPipelineName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt; GetExportPipeline(string exportPipelineName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetExportPipeline(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportPipeline (exportPipelineName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExportPipelineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetExportPipeline : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&#xA;override this.GetExportPipeline : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;" Usage="containerRegistryResource.GetExportPipeline (exportPipelineName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportPipelineName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="exportPipelineName"> The name of the export pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the export pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}
            Operation Id: ExportPipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="exportPipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportPipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportPipelineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&gt; GetExportPipelineAsync (string exportPipelineName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&gt; GetExportPipelineAsync(string exportPipelineName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetExportPipelineAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportPipelineAsync (exportPipelineName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExportPipelineResource))" />
      <MemberSignature Language="F#" Value="abstract member GetExportPipelineAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&gt;&#xA;override this.GetExportPipelineAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&gt;" Usage="containerRegistryResource.GetExportPipelineAsync (exportPipelineName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ExportPipelineResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportPipelineName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="exportPipelineName"> The name of the export pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the export pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/exportPipelines/{exportPipelineName}
            Operation Id: ExportPipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="exportPipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportPipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportPipelines">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ExportPipelineCollection GetExportPipelines ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ExportPipelineCollection GetExportPipelines() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetExportPipelines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportPipelines () As ExportPipelineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetExportPipelines : unit -&gt; Azure.ResourceManager.ContainerRegistry.ExportPipelineCollection&#xA;override this.GetExportPipelines : unit -&gt; Azure.ResourceManager.ContainerRegistry.ExportPipelineCollection" Usage="containerRegistryResource.GetExportPipelines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ExportPipelineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ExportPipelineResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ExportPipelineResources and their operations over a ExportPipelineResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImportPipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt; GetImportPipeline (string importPipelineName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt; GetImportPipeline(string importPipelineName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetImportPipeline(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportPipeline (importPipelineName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImportPipelineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetImportPipeline : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&#xA;override this.GetImportPipeline : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;" Usage="containerRegistryResource.GetImportPipeline (importPipelineName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importPipelineName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="importPipelineName"> The name of the import pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the import pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importPipelines/{importPipelineName}
            Operation Id: ImportPipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="importPipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="importPipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportPipelineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&gt; GetImportPipelineAsync (string importPipelineName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&gt; GetImportPipelineAsync(string importPipelineName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetImportPipelineAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportPipelineAsync (importPipelineName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImportPipelineResource))" />
      <MemberSignature Language="F#" Value="abstract member GetImportPipelineAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&gt;&#xA;override this.GetImportPipelineAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&gt;" Usage="containerRegistryResource.GetImportPipelineAsync (importPipelineName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ImportPipelineResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importPipelineName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="importPipelineName"> The name of the import pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the import pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importPipelines/{importPipelineName}
            Operation Id: ImportPipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="importPipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="importPipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportPipelines">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ImportPipelineCollection GetImportPipelines ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ImportPipelineCollection GetImportPipelines() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetImportPipelines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportPipelines () As ImportPipelineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetImportPipelines : unit -&gt; Azure.ResourceManager.ContainerRegistry.ImportPipelineCollection&#xA;override this.GetImportPipelines : unit -&gt; Azure.ResourceManager.ContainerRegistry.ImportPipelineCollection" Usage="containerRegistryResource.GetImportPipelines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ImportPipelineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ImportPipelineResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ImportPipelineResources and their operations over a ImportPipelineResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScopeMap">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt; GetScopeMap (string scopeMapName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt; GetScopeMap(string scopeMapName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetScopeMap(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScopeMap (scopeMapName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ScopeMapResource)" />
      <MemberSignature Language="F#" Value="abstract member GetScopeMap : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&#xA;override this.GetScopeMap : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;" Usage="containerRegistryResource.GetScopeMap (scopeMapName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeMapName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="scopeMapName"> The name of the scope map. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified scope map.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
            Operation Id: ScopeMaps_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeMapName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeMapName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScopeMapAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&gt; GetScopeMapAsync (string scopeMapName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&gt; GetScopeMapAsync(string scopeMapName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetScopeMapAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScopeMapAsync (scopeMapName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ScopeMapResource))" />
      <MemberSignature Language="F#" Value="abstract member GetScopeMapAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&gt;&#xA;override this.GetScopeMapAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&gt;" Usage="containerRegistryResource.GetScopeMapAsync (scopeMapName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ScopeMapResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeMapName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="scopeMapName"> The name of the scope map. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the properties of the specified scope map.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}
            Operation Id: ScopeMaps_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeMapName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeMapName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScopeMaps">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ScopeMapCollection GetScopeMaps ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ScopeMapCollection GetScopeMaps() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetScopeMaps" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScopeMaps () As ScopeMapCollection" />
      <MemberSignature Language="F#" Value="abstract member GetScopeMaps : unit -&gt; Azure.ResourceManager.ContainerRegistry.ScopeMapCollection&#xA;override this.GetScopeMaps : unit -&gt; Azure.ResourceManager.ContainerRegistry.ScopeMapCollection" Usage="containerRegistryResource.GetScopeMaps " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ScopeMapCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ScopeMapResources in the ContainerRegistry. </summary>
        <returns> An object representing collection of ScopeMapResources and their operations over a ScopeMapResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt; GetUsages (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt; GetUsages(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetUsages(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsages (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ContainerRegistryUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;&#xA;override this.GetUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;" Usage="containerRegistryResource.GetUsages cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the quota usages for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages
            Operation Id: Registries_ListUsages
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt; GetUsagesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt; GetUsagesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.GetUsagesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsagesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ContainerRegistryUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;&#xA;override this.GetUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;" Usage="containerRegistryResource.GetUsagesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the quota usages for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages
            Operation Id: Registries_ListUsages
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportImage">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation ImportImage (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation ImportImage(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ImportImage(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportImage (waitUntil As WaitUntil, content As ContainerRegistryImportImageContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member ImportImage : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.ImportImage : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="containerRegistryResource.ImportImage (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters specifying the image to copy and the source container registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Copies an image to this container registry from the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage
            Operation Id: Registries_ImportImage
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; ImportImageAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; ImportImageAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ImportImageAsync(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportImageAsync (waitUntil As WaitUntil, content As ContainerRegistryImportImageContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member ImportImageAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.ImportImageAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="containerRegistryResource.ImportImageAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryImportImageContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters specifying the image to copy and the source container registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Copies an image to this container registry from the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage
            Operation Id: Registries_ImportImage
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateCredential">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt; RegenerateCredential (Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt; RegenerateCredential(class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.RegenerateCredential(Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateCredential (content As ContainerRegistryCredentialRegenerateContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryListCredentialsResult)" />
      <MemberSignature Language="F#" Value="abstract member RegenerateCredential : Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&#xA;override this.RegenerateCredential : Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;" Usage="containerRegistryResource.RegenerateCredential (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Specifies name of the password which should be regenerated -- password or password2. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Regenerates one of the login credentials for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential
            Operation Id: Registries_RegenerateCredential
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RegenerateCredentialAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt; RegenerateCredentialAsync (Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt; RegenerateCredentialAsync(class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.RegenerateCredentialAsync(Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegenerateCredentialAsync (content As ContainerRegistryCredentialRegenerateContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryListCredentialsResult))" />
      <MemberSignature Language="F#" Value="abstract member RegenerateCredentialAsync : Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;&#xA;override this.RegenerateCredentialAsync : Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;" Usage="containerRegistryResource.RegenerateCredentialAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryListCredentialsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryCredentialRegenerateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Specifies name of the password which should be regenerated -- password or password2. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Regenerates one of the login credentials for the specified container registry.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential
            Operation Id: Registries_RegenerateCredential
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;" Usage="containerRegistryResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;" Usage="containerRegistryResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleRun">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt; ScheduleRun (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt; ScheduleRun(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ScheduleRun(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScheduleRun (waitUntil As WaitUntil, content As ContainerRegistryRunContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ContainerRegistryRunResource)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleRun : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&#xA;override this.ScheduleRun : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;" Usage="containerRegistryResource.ScheduleRun (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters of a run that needs to scheduled. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Schedules a new run based on the request parameters and add it to the run queue.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun
            Operation Id: Schedules_ScheduleRun
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ScheduleRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt; ScheduleRunAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt; ScheduleRunAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.ScheduleRunAsync(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ScheduleRunAsync (waitUntil As WaitUntil, content As ContainerRegistryRunContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ContainerRegistryRunResource))" />
      <MemberSignature Language="F#" Value="abstract member ScheduleRunAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;&#xA;override this.ScheduleRunAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;" Usage="containerRegistryResource.ScheduleRunAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryRunContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The parameters of a run that needs to scheduled. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Schedules a new run based on the request parameters and add it to the run queue.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun
            Operation Id: Schedules_ScheduleRun
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of ContainerRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;" Usage="containerRegistryResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ContainerRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;" Usage="containerRegistryResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.Update(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, patch As ContainerRegistryPatch, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ContainerRegistryResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;" Usage="containerRegistryResource.Update (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The parameters for updating a container registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a container registry with the specified parameters.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, patch As ContainerRegistryPatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ContainerRegistryResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;" Usage="containerRegistryResource.UpdateAsync (waitUntil, patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.ContainerRegistry.Models.ContainerRegistryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The parameters for updating a container registry. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a container registry with the specified parameters.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}
            Operation Id: Registries_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
