<Type Name="MockableTerraformSubscriptionResource" FullName="Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableTerraformSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableTerraformSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableTerraformSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableTerraformSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Terraform</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableTerraformSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Terraform</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportTerraform">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt; ExportTerraform (Azure.WaitUntil waitUntil, Azure.ResourceManager.Terraform.Models.CommonExportProperties body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt; ExportTerraform(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Terraform.Models.CommonExportProperties body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource.ExportTerraform(Azure.WaitUntil,Azure.ResourceManager.Terraform.Models.CommonExportProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportTerraform (waitUntil As WaitUntil, body As CommonExportProperties, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of TerraformOperationStatus)" />
      <MemberSignature Language="F#" Value="abstract member ExportTerraform : Azure.WaitUntil * Azure.ResourceManager.Terraform.Models.CommonExportProperties * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&#xA;override this.ExportTerraform : Azure.WaitUntil * Azure.ResourceManager.Terraform.Models.CommonExportProperties * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;" Usage="mockableTerraformSubscriptionResource.ExportTerraform (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Terraform</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.ResourceManager.Terraform.Models.CommonExportProperties" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> The request body. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports the Terraform configuration of the specified resource(s).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AzureTerraform/exportTerraform</description></item><item><term>Operation Id</term><description>Terraform_ExportTerraform</description></item><item><term>Default Api Version</term><description>2023-07-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportTerraformAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&gt; ExportTerraformAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Terraform.Models.CommonExportProperties body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&gt; ExportTerraformAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Terraform.Models.CommonExportProperties body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Terraform.Mocking.MockableTerraformSubscriptionResource.ExportTerraformAsync(Azure.WaitUntil,Azure.ResourceManager.Terraform.Models.CommonExportProperties,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportTerraformAsync (waitUntil As WaitUntil, body As CommonExportProperties, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of TerraformOperationStatus))" />
      <MemberSignature Language="F#" Value="abstract member ExportTerraformAsync : Azure.WaitUntil * Azure.ResourceManager.Terraform.Models.CommonExportProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&gt;&#xA;override this.ExportTerraformAsync : Azure.WaitUntil * Azure.ResourceManager.Terraform.Models.CommonExportProperties * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&gt;" Usage="mockableTerraformSubscriptionResource.ExportTerraformAsync (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Terraform</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Terraform.Models.TerraformOperationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.ResourceManager.Terraform.Models.CommonExportProperties" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> The request body. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Exports the Terraform configuration of the specified resource(s).
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.AzureTerraform/exportTerraform</description></item><item><term>Operation Id</term><description>Terraform_ExportTerraform</description></item><item><term>Default Api Version</term><description>2023-07-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
