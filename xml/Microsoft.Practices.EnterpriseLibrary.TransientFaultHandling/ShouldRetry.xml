<Type Name="ShouldRetry" FullName="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ShouldRetry">
  <TypeSignature Language="C#" Value="public delegate bool ShouldRetry(int retryCount, Exception lastException, out TimeSpan delay);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ShouldRetry extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ShouldRetry" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ShouldRetry(retryCount As Integer, lastException As Exception, ByRef delay As TimeSpan) As Boolean " />
  <TypeSignature Language="F#" Value="type ShouldRetry = delegate of int * Exception *  -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="retryCount" Type="System.Int32" />
    <Parameter Name="lastException" Type="System.Exception" />
    <Parameter Name="delay" Type="System.TimeSpan" RefType="out" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="retryCount">The current retry attempt count.</param>
    <param name="lastException">The exception that caused the retry conditions to occur.</param>
    <param name="delay">The delay that indicates how long the current thread will be suspended before the next iteration is invoked.</param>
    <summary>
            Defines a callback delegate that will be invoked whenever a retry condition is encountered.
            </summary>
    <returns>
      <see langword="true" /> if a retry is allowed; otherwise, <see langword="false" />.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>