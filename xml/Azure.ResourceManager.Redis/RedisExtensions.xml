<Type Name="RedisExtensions" FullName="Azure.ResourceManager.Redis.RedisExtensions">
  <TypeSignature Language="C#" Value="public static class RedisExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RedisExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Redis.RedisExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RedisExtensions" />
  <TypeSignature Language="F#" Value="type RedisExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to Azure.ResourceManager.Redis. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckRedisNameAvailability">
      <MemberSignature Language="C#" Value="public static Azure.Response CheckRedisNameAvailability (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response CheckRedisNameAvailability(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailability(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckRedisNameAvailability (subscriptionResource As SubscriptionResource, content As CheckNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="static member CheckRedisNameAvailability : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response" Usage="Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailability (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Parameters supplied to the CheckNameAvailability Redis operation. The only supported resource type is 'Microsoft.Cache/redis'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the redis cache name is valid and is not already in use.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability
            Operation Id: Redis_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckRedisNameAvailability">
      <MemberSignature Language="C#" Value="public static Azure.Response CheckRedisNameAvailability (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response CheckRedisNameAvailability(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailability(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckRedisNameAvailability (subscriptionResource As SubscriptionResource, content As RedisNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="static member CheckRedisNameAvailability : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response" Usage="Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailability (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="content" Type="Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Parameters supplied to the CheckNameAvailability Redis operation. The only supported resource type is 'Microsoft.Cache/redis'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the redis cache name is valid and is not already in use.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability
            Operation Id: Redis_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckRedisNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&gt; CheckRedisNameAvailabilityAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CheckRedisNameAvailabilityAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailabilityAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckRedisNameAvailabilityAsync (subscriptionResource As SubscriptionResource, content As CheckNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="static member CheckRedisNameAvailabilityAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailabilityAsync (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.Redis.Models.CheckNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Parameters supplied to the CheckNameAvailability Redis operation. The only supported resource type is 'Microsoft.Cache/redis'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the redis cache name is valid and is not already in use.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability
            Operation Id: Redis_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckRedisNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&gt; CheckRedisNameAvailabilityAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CheckRedisNameAvailabilityAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailabilityAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckRedisNameAvailabilityAsync (subscriptionResource As SubscriptionResource, content As RedisNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="static member CheckRedisNameAvailabilityAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.CheckRedisNameAvailabilityAsync (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="content" Type="Azure.ResourceManager.Redis.Models.RedisNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Parameters supplied to the CheckNameAvailability Redis operation. The only supported resource type is 'Microsoft.Cache/redis'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the redis cache name is valid and is not already in use.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/CheckNameAvailability
            Operation Id: Redis_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRedis">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisCollection GetAllRedis (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisCollection GetAllRedis(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetAllRedis(Azure.ResourceManager.Resources.ResourceGroupResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllRedis (resourceGroupResource As ResourceGroupResource) As RedisCollection" />
      <MemberSignature Language="F#" Value="static member GetAllRedis : Azure.ResourceManager.Resources.ResourceGroupResource -&gt; Azure.ResourceManager.Redis.RedisCollection" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAllRedis resourceGroupResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <summary> Gets a collection of RedisResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of RedisResources and their operations over a RedisResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllRedis">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt; GetAllRedis (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt; GetAllRedis(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetAllRedis(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllRedis (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RedisResource)" />
      <MemberSignature Language="F#" Value="static member GetAllRedis : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAllRedis (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all Redis caches in the specified subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis
            Operation Id: Redis_ListBySubscription
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllRedisAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt; GetAllRedisAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt; GetAllRedisAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetAllRedisAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllRedisAsync (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RedisResource)" />
      <MemberSignature Language="F#" Value="static member GetAllRedisAsync : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAllRedisAsync (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all Redis caches in the specified subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis
            Operation Id: Redis_ListBySubscription
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncOperationStatus">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt; GetAsyncOperationStatus (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt; GetAsyncOperationStatus(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatus(Azure.ResourceManager.Resources.SubscriptionResource,Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAsyncOperationStatus (subscriptionResource As SubscriptionResource, location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RedisOperationStatus)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member GetAsyncOperationStatus : Azure.ResourceManager.Resources.SubscriptionResource * Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatus (subscriptionResource, location, operationId, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt; GetAsyncOperationStatus (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Redis.Models.OperationStatus&gt; GetAsyncOperationStatus(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAsyncOperationStatus (subscriptionResource As SubscriptionResource, location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of OperationStatus)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="static member GetAsyncOperationStatus : Azure.ResourceManager.Resources.SubscriptionResource * Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatus (subscriptionResource, location, operationId, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="location"> The location at which operation was triggered. </param>
        <param name="operationId"> The ID of asynchronous operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            For checking the ongoing status of an operation
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/locations/{location}/asyncOperations/{operationId}
            Operation Id: AsyncOperationStatus_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsyncOperationStatusAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;&gt; GetAsyncOperationStatusAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;&gt; GetAsyncOperationStatusAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatusAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAsyncOperationStatusAsync (subscriptionResource As SubscriptionResource, location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RedisOperationStatus))" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member GetAsyncOperationStatusAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatusAsync (subscriptionResource, location, operationId, cancellationToken)" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt;&gt; GetAsyncOperationStatusAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Redis.Models.OperationStatus&gt;&gt; GetAsyncOperationStatusAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAsyncOperationStatusAsync (subscriptionResource As SubscriptionResource, location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of OperationStatus))" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="static member GetAsyncOperationStatusAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt;&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetAsyncOperationStatusAsync (subscriptionResource, location, operationId, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet">System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.RedisOperationStatus&gt;&gt;</ReturnType>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.Models.OperationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="location"> The location at which operation was triggered. </param>
        <param name="operationId"> The ID of asynchronous operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            For checking the ongoing status of an operation
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/locations/{location}/asyncOperations/{operationId}
            Operation Id: AsyncOperationStatus_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRedis">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisCollection GetRedis (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisCollection GetRedis(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedis(Azure.ResourceManager.Resources.ResourceGroupResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedis (resourceGroupResource As ResourceGroupResource) As RedisCollection" />
      <MemberSignature Language="F#" Value="static member GetRedis : Azure.ResourceManager.Resources.ResourceGroupResource -&gt; Azure.ResourceManager.Redis.RedisCollection" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedis resourceGroupResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <summary> Gets a collection of RedisResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of RedisResources and their operations over a RedisResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedis">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt; GetRedis (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt; GetRedis(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedis(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedis (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RedisResource)" />
      <MemberSignature Language="F#" Value="static member GetRedis : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedis (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all Redis caches in the specified subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis
            Operation Id: Redis_ListBySubscription
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedis">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt; GetRedis (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt; GetRedis(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedis(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedis (resourceGroupResource As ResourceGroupResource, name As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RedisResource)" />
      <MemberSignature Language="F#" Value="static member GetRedis : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedis (resourceGroupResource, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="name"> The name of the Redis cache. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Redis cache (resource description).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
            Operation Id: Redis_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRedisAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt; GetRedisAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt; GetRedisAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisAsync (subscriptionResource As SubscriptionResource, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RedisResource)" />
      <MemberSignature Language="F#" Value="static member GetRedisAsync : Azure.ResourceManager.Resources.SubscriptionResource * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisAsync (subscriptionResource, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Redis.RedisResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all Redis caches in the specified subscription.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Cache/redis
            Operation Id: Redis_ListBySubscription
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt;&gt; GetRedisAsync (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Redis.RedisResource&gt;&gt; GetRedisAsync(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisAsync (resourceGroupResource As ResourceGroupResource, name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RedisResource))" />
      <MemberSignature Language="F#" Value="static member GetRedisAsync : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt;&gt;" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisAsync (resourceGroupResource, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Redis.RedisResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="name"> The name of the Redis cache. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Redis cache (resource description).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}
            Operation Id: Redis_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRedisFirewallRuleResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisFirewallRuleResource GetRedisFirewallRuleResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisFirewallRuleResource GetRedisFirewallRuleResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisFirewallRuleResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisFirewallRuleResource (client As ArmClient, id As ResourceIdentifier) As RedisFirewallRuleResource" />
      <MemberSignature Language="F#" Value="static member GetRedisFirewallRuleResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisFirewallRuleResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisFirewallRuleResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisFirewallRuleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisFirewallRuleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisFirewallRuleResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisFirewallRuleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisFirewallRuleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisLinkedServerWithPropertiesResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource GetRedisLinkedServerWithPropertiesResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource GetRedisLinkedServerWithPropertiesResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisLinkedServerWithPropertiesResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisLinkedServerWithPropertiesResource (client As ArmClient, id As ResourceIdentifier) As RedisLinkedServerWithPropertiesResource" />
      <MemberSignature Language="F#" Value="static member GetRedisLinkedServerWithPropertiesResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisLinkedServerWithPropertiesResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertiesResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisLinkedServerWithPropertyResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource GetRedisLinkedServerWithPropertyResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource GetRedisLinkedServerWithPropertyResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisLinkedServerWithPropertyResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisLinkedServerWithPropertyResource (client As ArmClient, id As ResourceIdentifier) As RedisLinkedServerWithPropertyResource" />
      <MemberSignature Language="F#" Value="static member GetRedisLinkedServerWithPropertyResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisLinkedServerWithPropertyResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisLinkedServerWithPropertyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisPatchScheduleResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisPatchScheduleResource GetRedisPatchScheduleResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisPatchScheduleResource GetRedisPatchScheduleResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisPatchScheduleResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisPatchScheduleResource (client As ArmClient, id As ResourceIdentifier) As RedisPatchScheduleResource" />
      <MemberSignature Language="F#" Value="static member GetRedisPatchScheduleResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisPatchScheduleResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisPatchScheduleResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisPatchScheduleResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisPatchScheduleResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisPatchScheduleResource.CreateResourceIdentifier(System.String,System.String,System.String,Azure.ResourceManager.Redis.Models.RedisPatchScheduleDefaultName)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisPatchScheduleResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisPatchScheduleResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisPrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource GetRedisPrivateEndpointConnectionResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource GetRedisPrivateEndpointConnectionResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisPrivateEndpointConnectionResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisPrivateEndpointConnectionResource (client As ArmClient, id As ResourceIdentifier) As RedisPrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="static member GetRedisPrivateEndpointConnectionResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisPrivateEndpointConnectionResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisPrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.Redis.RedisResource GetRedisResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.Redis.RedisResource GetRedisResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Redis.RedisExtensions.GetRedisResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRedisResource (client As ArmClient, id As ResourceIdentifier) As RedisResource" />
      <MemberSignature Language="F#" Value="static member GetRedisResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Redis.RedisResource" Usage="Azure.ResourceManager.Redis.RedisExtensions.GetRedisResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Redis</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Redis.RedisResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Redis.RedisResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Redis.RedisResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Redis.RedisResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
