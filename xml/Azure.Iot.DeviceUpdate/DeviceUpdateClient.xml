<Type Name="DeviceUpdateClient" FullName="Azure.IoT.DeviceUpdate.DeviceUpdateClient">
  <TypeSignature Language="C#" Value="public class DeviceUpdateClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DeviceUpdateClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.IoT.DeviceUpdate.DeviceUpdateClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DeviceUpdateClient" />
  <TypeSignature Language="F#" Value="type DeviceUpdateClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The DeviceUpdate service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DeviceUpdateClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of DeviceUpdateClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DeviceUpdateClient (string endpoint, string instanceId, Azure.Core.TokenCredential credential, Azure.IoT.DeviceUpdate.DeviceUpdateClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, string instanceId, class Azure.Core.TokenCredential credential, class Azure.IoT.DeviceUpdate.DeviceUpdateClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.#ctor(System.String,System.String,Azure.Core.TokenCredential,Azure.IoT.DeviceUpdate.DeviceUpdateClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, instanceId As String, credential As TokenCredential, Optional options As DeviceUpdateClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.IoT.DeviceUpdate.DeviceUpdateClient : string * string * Azure.Core.TokenCredential * Azure.IoT.DeviceUpdate.DeviceUpdateClientOptions -&gt; Azure.IoT.DeviceUpdate.DeviceUpdateClient" Usage="new Azure.IoT.DeviceUpdate.DeviceUpdateClient (endpoint, instanceId, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.IoT.DeviceUpdate.DeviceUpdateClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Account endpoint. </param>
        <param name="instanceId"> Account instance identifier. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DeviceUpdateClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="instanceId" />, or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeleteUpdate (bool waitForCompletion, string provider, string name, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeleteUpdate(bool waitForCompletion, string provider, string name, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.DeleteUpdate(System.Boolean,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteUpdate (waitForCompletion As Boolean, provider As String, name As String, version As String, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeleteUpdate : bool * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeleteUpdate : bool * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="deviceUpdateClient.DeleteUpdate (waitForCompletion, provider, name, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a specific update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeleteUpdateAsync (bool waitForCompletion, string provider, string name, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeleteUpdateAsync(bool waitForCompletion, string provider, string name, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.DeleteUpdateAsync(System.Boolean,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteUpdateAsync (waitForCompletion As Boolean, provider As String, name As String, version As String, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteUpdateAsync : bool * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteUpdateAsync : bool * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="deviceUpdateClient.DeleteUpdateAsync (waitForCompletion, provider, name, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete a specific update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetFile (string provider, string name, string version, string fileId, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetFile(string provider, string name, string version, string fileId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetFile(System.String,System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (provider As String, name As String, version As String, fileId As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string * string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetFile : string * string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="deviceUpdateClient.GetFile (provider, name, version, fileId, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="fileId"> File identifier. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a specific update file from the version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              fileId: string,
              fileName: string,
              sizeInBytes: number,
              hashes: Dictionary&lt;string, string&gt;,
              mimeType: string,
              scanResult: string,
              scanDetails: string,
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, <paramref name="version" />, or <paramref name="fileId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetFileAsync (string provider, string name, string version, string fileId, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetFileAsync(string provider, string name, string version, string fileId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetFileAsync(System.String,System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileAsync (provider As String, name As String, version As String, fileId As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetFileAsync : string * string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetFileAsync : string * string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="deviceUpdateClient.GetFileAsync (provider, name, version, fileId, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="fileId"> File identifier. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a specific update file from the version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              fileId: string,
              fileName: string,
              sizeInBytes: number,
              hashes: Dictionary&lt;string, string&gt;,
              mimeType: string,
              scanResult: string,
              scanDetails: string,
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, <paramref name="version" />, or <paramref name="fileId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetFiles (string provider, string name, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetFiles(string provider, string name, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetFiles(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles (provider As String, name As String, version As String, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetFiles : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetFiles (provider, name, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update file identifiers for the specified version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetFilesAsync (string provider, string name, string version, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetFilesAsync(string provider, string name, string version, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetFilesAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilesAsync (provider As String, name As String, version As String, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetFilesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetFilesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetFilesAsync (provider, name, version, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update file identifiers for the specified version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetNames (string provider, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetNames(string provider, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetNames(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNames (provider As String, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNames : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetNames : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetNames (provider, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update names that match the specified provider. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNamesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetNamesAsync (string provider, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetNamesAsync(string provider, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetNamesAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNamesAsync (provider As String, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNamesAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetNamesAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetNamesAsync (provider, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update names that match the specified provider. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetOperation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetOperation (string operationId, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetOperation(string operationId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetOperation(System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOperation (operationId As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetOperation : string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetOperation : string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="deviceUpdateClient.GetOperation (operationId, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationId"> Operation identifier. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Retrieve operation status. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              operationId: string,
              status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed",
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              resourceLocation: string,
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              },
              traceId: string,
              lastActionDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetOperationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetOperationAsync (string operationId, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetOperationAsync(string operationId, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetOperationAsync(System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOperationAsync (operationId As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetOperationAsync : string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetOperationAsync : string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="deviceUpdateClient.GetOperationAsync (operationId, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationId"> Operation identifier. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Retrieve operation status. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              operationId: string,
              status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed",
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              resourceLocation: string,
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              },
              traceId: string,
              lastActionDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetOperations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetOperations (string filter = default, int? top = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetOperations(string filter, valuetype System.Nullable`1&lt;int32&gt; top, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetOperations(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOperations (Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetOperations : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetOperations : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetOperations (filter, top, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'". </param>
        <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  operationId: string,
                  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed",
                  updateId: {
                    provider: string,
                    name: string,
                    version: string
                  },
                  resourceLocation: string,
                  error: {
                    code: string,
                    message: string,
                    target: string,
                    details: [Error],
                    innererror: {
                      code: string,
                      message: string,
                      errorDetail: string,
                      innerError: InnerError
                    },
                    occurredDateTime: string (ISO 8601 Format)
                  },
                  traceId: string,
                  lastActionDateTime: string (ISO 8601 Format),
                  createdDateTime: string (ISO 8601 Format),
                  etag: string
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOperationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetOperationsAsync (string filter = default, int? top = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetOperationsAsync(string filter, valuetype System.Nullable`1&lt;int32&gt; top, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetOperationsAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOperationsAsync (Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetOperationsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetOperationsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetOperationsAsync (filter, top, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> Restricts the set of operations returned. Only one specific filter is supported: "status eq 'NotStarted' or status eq 'Running'". </param>
        <param name="top"> Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all import update operations. Completed operations are kept for 7 days before auto-deleted. Delete operations are not returned by this API version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  operationId: string,
                  status: "Undefined" | "NotStarted" | "Running" | "Succeeded" | "Failed",
                  updateId: {
                    provider: string,
                    name: string,
                    version: string
                  },
                  resourceLocation: string,
                  error: {
                    code: string,
                    message: string,
                    target: string,
                    details: [Error],
                    innererror: {
                      code: string,
                      message: string,
                      errorDetail: string,
                      innerError: InnerError
                    },
                    occurredDateTime: string (ISO 8601 Format)
                  },
                  traceId: string,
                  lastActionDateTime: string (ISO 8601 Format),
                  createdDateTime: string (ISO 8601 Format),
                  etag: string
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviders">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetProviders (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetProviders(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetProviders(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProviders (Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProviders : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetProviders : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetProviders context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProvidersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetProvidersAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetProvidersAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetProvidersAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProvidersAsync (Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProvidersAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetProvidersAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetProvidersAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update providers that have been imported to Device Update for IoT Hub. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpdate (string provider, string name, string version, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpdate(string provider, string name, string version, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetUpdate(System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdate (provider As String, name As String, version As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpdate : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpdate : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="deviceUpdateClient.GetUpdate (provider, name, version, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a specific update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              description: string,
              friendlyName: string,
              isDeployable: boolean,
              updateType: string,
              installedCriteria: string,
              compatibility: [Dictionary&lt;string, string&gt;],
              instructions: {
                steps: [
                  {
                    type: "Inline" | "Reference",
                    description: string,
                    handler: string,
                    handlerProperties: AnyObject,
                    files: [string],
                    updateId: UpdateId
                  }
                ]
              },
              referencedBy: [UpdateId],
              scanResult: string,
              manifestVersion: string,
              importedDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpdateAsync (string provider, string name, string version, Azure.ETag? ifNoneMatch = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpdateAsync(string provider, string name, string version, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetUpdateAsync(System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateAsync (provider As String, name As String, version As String, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpdateAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="deviceUpdateClient.GetUpdateAsync (provider, name, version, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="version"> Update version. </param>
        <param name="ifNoneMatch"> Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a specific update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              description: string,
              friendlyName: string,
              isDeployable: boolean,
              updateType: string,
              installedCriteria: string,
              compatibility: [Dictionary&lt;string, string&gt;],
              instructions: {
                steps: [
                  {
                    type: "Inline" | "Reference",
                    description: string,
                    handler: string,
                    handlerProperties: AnyObject,
                    files: [string],
                    updateId: UpdateId
                  }
                ]
              },
              referencedBy: [UpdateId],
              scanResult: string,
              manifestVersion: string,
              importedDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" />, <paramref name="name" />, or <paramref name="version" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdates">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetUpdates (string search = default, string filter = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetUpdates(string search, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetUpdates(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdates (Optional search As String = Nothing, Optional filter As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdates : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetUpdates : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetUpdates (search, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="search" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="search"> Request updates matching a free-text search expression. </param>
        <param name="filter"> Filter updates by its properties. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  updateId: {
                    provider: string,
                    name: string,
                    version: string
                  },
                  description: string,
                  friendlyName: string,
                  isDeployable: boolean,
                  updateType: string,
                  installedCriteria: string,
                  compatibility: [Dictionary&lt;string, string&gt;],
                  instructions: {
                    steps: [
                      {
                        type: "Inline" | "Reference",
                        description: string,
                        handler: string,
                        handlerProperties: AnyObject,
                        files: [string],
                        updateId: UpdateId
                      }
                    ]
                  },
                  referencedBy: [UpdateId],
                  scanResult: string,
                  manifestVersion: string,
                  importedDateTime: string (ISO 8601 Format),
                  createdDateTime: string (ISO 8601 Format),
                  etag: string
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdatesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetUpdatesAsync (string search = default, string filter = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetUpdatesAsync(string search, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetUpdatesAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdatesAsync (Optional search As String = Nothing, Optional filter As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdatesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetUpdatesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetUpdatesAsync (search, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="search" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="search"> Request updates matching a free-text search expression. </param>
        <param name="filter"> Filter updates by its properties. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all updates that have been imported to Device Update for IoT Hub. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  updateId: {
                    provider: string,
                    name: string,
                    version: string
                  },
                  description: string,
                  friendlyName: string,
                  isDeployable: boolean,
                  updateType: string,
                  installedCriteria: string,
                  compatibility: [Dictionary&lt;string, string&gt;],
                  instructions: {
                    steps: [
                      {
                        type: "Inline" | "Reference",
                        description: string,
                        handler: string,
                        handlerProperties: AnyObject,
                        files: [string],
                        updateId: UpdateId
                      }
                    ]
                  },
                  referencedBy: [UpdateId],
                  scanResult: string,
                  manifestVersion: string,
                  importedDateTime: string (ISO 8601 Format),
                  createdDateTime: string (ISO 8601 Format),
                  etag: string
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVersions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetVersions (string provider, string name, string filter = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetVersions(string provider, string name, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetVersions(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVersions (provider As String, name As String, Optional filter As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetVersions : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetVersions : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetVersions (provider, name, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="filter"> Filter updates by its properties. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update versions that match the specified provider and name. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> or <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVersionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetVersionsAsync (string provider, string name, string filter = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetVersionsAsync(string provider, string name, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.GetVersionsAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVersionsAsync (provider As String, name As String, Optional filter As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetVersionsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetVersionsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="deviceUpdateClient.GetVersionsAsync (provider, name, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="provider"> Update provider. </param>
        <param name="name"> Update name. </param>
        <param name="filter"> Filter updates by its properties. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get a list of all update versions that match the specified provider and name. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [string],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> or <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; ImportUpdate (bool waitForCompletion, string action, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; ImportUpdate(bool waitForCompletion, string action, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.ImportUpdate(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportUpdate (waitForCompletion As Boolean, action As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member ImportUpdate : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.ImportUpdate : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="deviceUpdateClient.ImportUpdate (waitForCompletion, action, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="action"> Import update action. Allowed values: "import". </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import new update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              importManifest: {
                url: string (required),
                sizeInBytes: number (required),
                hashes: Dictionary&lt;string, string&gt; (required)
              } (required),
              friendlyName: string,
              files: [
                {
                  filename: string (required),
                  url: string (required)
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              description: string,
              friendlyName: string,
              isDeployable: boolean,
              updateType: string,
              installedCriteria: string,
              compatibility: [Dictionary&lt;string, string&gt;],
              instructions: {
                steps: [
                  {
                    type: "Inline" | "Reference",
                    description: string,
                    handler: string,
                    handlerProperties: AnyObject,
                    files: [string],
                    updateId: UpdateId
                  }
                ]
              },
              referencedBy: [UpdateId],
              scanResult: string,
              manifestVersion: string,
              importedDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportUpdateAsync (bool waitForCompletion, string action, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportUpdateAsync(bool waitForCompletion, string action, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.ImportUpdateAsync(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportUpdateAsync (waitForCompletion As Boolean, action As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportUpdateAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportUpdateAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="deviceUpdateClient.ImportUpdateAsync (waitForCompletion, action, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="action" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="action"> Import update action. Allowed values: "import". </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import new update version. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              importManifest: {
                url: string (required),
                sizeInBytes: number (required),
                hashes: Dictionary&lt;string, string&gt; (required)
              } (required),
              friendlyName: string,
              files: [
                {
                  filename: string (required),
                  url: string (required)
                }
              ]
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              updateId: {
                provider: string,
                name: string,
                version: string
              },
              description: string,
              friendlyName: string,
              isDeployable: boolean,
              updateType: string,
              installedCriteria: string,
              compatibility: [Dictionary&lt;string, string&gt;],
              instructions: {
                steps: [
                  {
                    type: "Inline" | "Reference",
                    description: string,
                    handler: string,
                    handlerProperties: AnyObject,
                    files: [string],
                    updateId: UpdateId
                  }
                ]
              },
              referencedBy: [UpdateId],
              scanResult: string,
              manifestVersion: string,
              importedDateTime: string (ISO 8601 Format),
              createdDateTime: string (ISO 8601 Format),
              etag: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: string,
                  message: string,
                  errorDetail: string,
                  innerError: InnerError
                },
                occurredDateTime: string (ISO 8601 Format)
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.IoT.DeviceUpdate.DeviceUpdateClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.IoT.DeviceUpdate.DeviceUpdateClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.IoT.DeviceUpdate</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
