<Type Name="QuickbaseLinkedService" FullName="Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService">
  <TypeSignature Language="C#" Value="public class QuickbaseLinkedService : Azure.ResourceManager.DataFactory.Models.FactoryLinkedServiceDefinition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuickbaseLinkedService extends Azure.ResourceManager.DataFactory.Models.FactoryLinkedServiceDefinition" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService" />
  <TypeSignature Language="VB.NET" Value="Public Class QuickbaseLinkedService&#xA;Inherits FactoryLinkedServiceDefinition" />
  <TypeSignature Language="F#" Value="type QuickbaseLinkedService = class&#xA;    inherit FactoryLinkedServiceDefinition" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.DataFactory.Models.FactoryLinkedServiceDefinition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Linked service for Quickbase. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuickbaseLinkedService (BinaryData uri, Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.BinaryData uri, class Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.#ctor(System.BinaryData,Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (uri As BinaryData, userToken As FactorySecretBaseDefinition)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService : BinaryData * Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition -&gt; Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService" Usage="new Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService (uri, userToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uri" Type="System.BinaryData" />
        <Parameter Name="userToken" Type="Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition" />
      </Parameters>
      <Docs>
        <param name="uri"> The url to connect Quickbase source. Type: string (or Expression with resultType string). </param>
        <param name="userToken">
            The user token for the Quickbase source.
            Please note <see cref="T:Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.ResourceManager.DataFactory.Models.FactorySecretString" /> and <see cref="T:Azure.ResourceManager.DataFactory.Models.AzureKeyVaultSecretReference" />.
            </param>
        <summary> Initializes a new instance of QuickbaseLinkedService. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> or <paramref name="userToken" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptedCredential">
      <MemberSignature Language="C#" Value="public BinaryData EncryptedCredential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData EncryptedCredential" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.EncryptedCredential" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptedCredential As BinaryData" />
      <MemberSignature Language="F#" Value="member this.EncryptedCredential : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.EncryptedCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public BinaryData Uri { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Property Uri As BinaryData" />
      <MemberSignature Language="F#" Value="member this.Uri : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The url to connect Quickbase source. Type: string (or Expression with resultType string).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition UserToken" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public Property UserToken As FactorySecretBaseDefinition" />
      <MemberSignature Language="F#" Value="member this.UserToken : Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition with get, set" Usage="Azure.ResourceManager.DataFactory.Models.QuickbaseLinkedService.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The user token for the Quickbase source.
            Please note <see cref="T:Azure.ResourceManager.DataFactory.Models.FactorySecretBaseDefinition" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.ResourceManager.DataFactory.Models.FactorySecretString" /> and <see cref="T:Azure.ResourceManager.DataFactory.Models.AzureKeyVaultSecretReference" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
