<Type Name="XmlReadSettings" FullName="Azure.ResourceManager.DataFactory.Models.XmlReadSettings">
  <TypeSignature Language="C#" Value="public class XmlReadSettings : Azure.ResourceManager.DataFactory.Models.FormatReadSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlReadSettings extends Azure.ResourceManager.DataFactory.Models.FormatReadSettings" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DataFactory.Models.XmlReadSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlReadSettings&#xA;Inherits FormatReadSettings" />
  <TypeSignature Language="F#" Value="type XmlReadSettings = class&#xA;    inherit FormatReadSettings" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.DataFactory.Models.FormatReadSettings</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Xml read settings. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReadSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of XmlReadSettings. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompressionProperties">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.CompressionReadSettings CompressionProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.Models.CompressionReadSettings CompressionProperties" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.CompressionProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property CompressionProperties As CompressionReadSettings" />
      <MemberSignature Language="F#" Value="member this.CompressionProperties : Azure.ResourceManager.DataFactory.Models.CompressionReadSettings with get, set" Usage="Azure.ResourceManager.DataFactory.Models.XmlReadSettings.CompressionProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.Models.CompressionReadSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Compression settings.
            Please note <see cref="T:Azure.ResourceManager.DataFactory.Models.CompressionReadSettings" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.ResourceManager.DataFactory.Models.TarGzipReadSettings" />, <see cref="T:Azure.ResourceManager.DataFactory.Models.TarReadSettings" /> and <see cref="T:Azure.ResourceManager.DataFactory.Models.ZipDeflateReadSettings" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectDataType">
      <MemberSignature Language="C#" Value="public BinaryData DetectDataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData DetectDataType" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.DetectDataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DetectDataType As BinaryData" />
      <MemberSignature Language="F#" Value="member this.DetectDataType : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.XmlReadSettings.DetectDataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespacePrefixes">
      <MemberSignature Language="C#" Value="public BinaryData NamespacePrefixes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData NamespacePrefixes" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.NamespacePrefixes" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespacePrefixes As BinaryData" />
      <MemberSignature Language="F#" Value="member this.NamespacePrefixes : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.XmlReadSettings.NamespacePrefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined for a namespace uri, the prefix of xml element/attribute name in the xml data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType object).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public BinaryData Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData Namespaces" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As BinaryData" />
      <MemberSignature Language="F#" Value="member this.Namespaces : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.XmlReadSettings.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationMode">
      <MemberSignature Language="C#" Value="public BinaryData ValidationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData ValidationMode" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.XmlReadSettings.ValidationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationMode As BinaryData" />
      <MemberSignature Language="F#" Value="member this.ValidationMode : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.XmlReadSettings.ValidationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string (or Expression with resultType string).
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
