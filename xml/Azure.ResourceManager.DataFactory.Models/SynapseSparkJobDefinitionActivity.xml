<Type Name="SynapseSparkJobDefinitionActivity" FullName="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity">
  <TypeSignature Language="C#" Value="public class SynapseSparkJobDefinitionActivity : Azure.ResourceManager.DataFactory.Models.ExecutionActivity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SynapseSparkJobDefinitionActivity extends Azure.ResourceManager.DataFactory.Models.ExecutionActivity" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity" />
  <TypeSignature Language="VB.NET" Value="Public Class SynapseSparkJobDefinitionActivity&#xA;Inherits ExecutionActivity" />
  <TypeSignature Language="F#" Value="type SynapseSparkJobDefinitionActivity = class&#xA;    inherit ExecutionActivity" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.DataFactory.Models.ExecutionActivity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Execute spark job activity. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SynapseSparkJobDefinitionActivity (string name, Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference sparkJob);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference sparkJob) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.#ctor(System.String,Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, sparkJob As SynapseSparkJobReference)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity : string * Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference -&gt; Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity" Usage="new Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity (name, sparkJob)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="sparkJob" Type="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference" />
      </Parameters>
      <Docs>
        <param name="name"> Activity name. </param>
        <param name="sparkJob"> Synapse spark job reference. </param>
        <summary> Initializes a new instance of SynapseSparkJobDefinitionActivity. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> or <paramref name="sparkJob" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;BinaryData&gt; Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.BinaryData&gt; Arguments" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Arguments As IList(Of BinaryData)" />
      <MemberSignature Language="F#" Value="member this.Arguments : System.Collections.Generic.IList&lt;BinaryData&gt;" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            User specified arguments to SynapseSparkJobDefinitionActivity.
            <para>
            To assign an object to the element of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassName">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; ClassName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; ClassName" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ClassName" />
      <MemberSignature Language="VB.NET" Value="Public Property ClassName As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="member this.ClassName : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ClassName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className' of the spark job definition you provide. Type: string (or Expression with resultType string). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conf">
      <MemberSignature Language="C#" Value="public BinaryData Conf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.BinaryData Conf" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Conf" />
      <MemberSignature Language="VB.NET" Value="Public Property Conf As BinaryData" />
      <MemberSignature Language="F#" Value="member this.Conf : BinaryData with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Conf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
            <para>
            To assign an object to this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigurationType">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.DataFactorySparkConfigurationType? ConfigurationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DataFactory.Models.DataFactorySparkConfigurationType&gt; ConfigurationType" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ConfigurationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ConfigurationType As Nullable(Of DataFactorySparkConfigurationType)" />
      <MemberSignature Language="F#" Value="member this.ConfigurationType : Nullable&lt;Azure.ResourceManager.DataFactory.Models.DataFactorySparkConfigurationType&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ConfigurationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.ResourceManager.DataFactory.Models.DataFactorySparkConfigurationType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The type of the spark config. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DriverSize">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; DriverSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; DriverSize" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.DriverSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DriverSize As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="member this.DriverSize : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.DriverSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for overriding 'driverCores' and 'driverMemory' of the spark job definition you provide. Type: string (or Expression with resultType string). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutorSize">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; ExecutorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; ExecutorSize" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ExecutorSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ExecutorSize As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="member this.ExecutorSize : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ExecutorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used for overriding 'executorCores' and 'executorMemory' of the spark job definition you provide. Type: string (or Expression with resultType string). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="File">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; File { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; File" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.File" />
      <MemberSignature Language="VB.NET" Value="Public Property File As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="member this.File : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.File" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or Expression with resultType string). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;BinaryData&gt; Files { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.BinaryData&gt; Files" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Files" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Files As IList(Of BinaryData)" />
      <MemberSignature Language="F#" Value="member this.Files : System.Collections.Generic.IList&lt;BinaryData&gt;" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.Files" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file, which will override the 'files' of the spark job definition you provide.
            <para>
            To assign an object to the element of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilesV2">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;BinaryData&gt; FilesV2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.BinaryData&gt; FilesV2" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.FilesV2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilesV2 As IList(Of BinaryData)" />
      <MemberSignature Language="F#" Value="member this.FilesV2 : System.Collections.Generic.IList&lt;BinaryData&gt;" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.FilesV2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark job definition you provide.
            <para>
            To assign an object to the element of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumExecutors">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;int&gt; NumExecutors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;int32&gt; NumExecutors" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.NumExecutors" />
      <MemberSignature Language="VB.NET" Value="Public Property NumExecutors As DataFactoryElement(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.NumExecutors : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;int&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.NumExecutors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide. Type: integer (or Expression with resultType integer). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PythonCodeReference">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;BinaryData&gt; PythonCodeReference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.BinaryData&gt; PythonCodeReference" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.PythonCodeReference" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PythonCodeReference As IList(Of BinaryData)" />
      <MemberSignature Language="F#" Value="member this.PythonCodeReference : System.Collections.Generic.IList&lt;BinaryData&gt;" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.PythonCodeReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark job definition you provide.
            <para>
            To assign an object to the element of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScanFolder">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;bool&gt; ScanFolder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;bool&gt; ScanFolder" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ScanFolder" />
      <MemberSignature Language="VB.NET" Value="Public Property ScanFolder As DataFactoryElement(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.ScanFolder : Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;bool&gt; with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.ScanFolder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the folders name are case sensitive. Type: boolean (or Expression with resultType boolean). </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparkConfig">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,BinaryData&gt; SparkConfig { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.BinaryData&gt; SparkConfig" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.SparkConfig" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SparkConfig As IDictionary(Of String, BinaryData)" />
      <MemberSignature Language="F#" Value="member this.SparkConfig : System.Collections.Generic.IDictionary&lt;string, BinaryData&gt;" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.SparkConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Spark configuration property.
            <para>
            To assign an object to the value of this property use <see cref="M:System.BinaryData.FromObjectAsJson``1(``0,System.Text.Json.JsonSerializerOptions)" />.
            </para><para>
            To assign an already formated json string to this property use <see cref="M:System.BinaryData.FromString(System.String)" />.
            </para><para>
            Examples:
            <list type="bullet"><item><term>BinaryData.FromObjectAsJson("foo")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromString("\"foo\"")</term><description>Creates a payload of "foo".</description></item><item><term>BinaryData.FromObjectAsJson(new { key = "value" })</term><description>Creates a payload of { "key": "value" }.</description></item><item><term>BinaryData.FromString("{\"key\": \"value\"}")</term><description>Creates a payload of { "key": "value" }.</description></item></list></para></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparkJob">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference SparkJob { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference SparkJob" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.SparkJob" />
      <MemberSignature Language="VB.NET" Value="Public Property SparkJob As SynapseSparkJobReference" />
      <MemberSignature Language="F#" Value="member this.SparkJob : Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.SparkJob" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.Models.SynapseSparkJobReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Synapse spark job reference. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetBigDataPool">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.BigDataPoolParametrizationReference TargetBigDataPool { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.Models.BigDataPoolParametrizationReference TargetBigDataPool" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.TargetBigDataPool" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetBigDataPool As BigDataPoolParametrizationReference" />
      <MemberSignature Language="F#" Value="member this.TargetBigDataPool : Azure.ResourceManager.DataFactory.Models.BigDataPoolParametrizationReference with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.TargetBigDataPool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.Models.BigDataPoolParametrizationReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool' of the spark job definition you provide. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetSparkConfiguration">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.DataFactory.Models.SparkConfigurationParametrizationReference TargetSparkConfiguration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.Models.SparkConfigurationParametrizationReference TargetSparkConfiguration" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.TargetSparkConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetSparkConfiguration As SparkConfigurationParametrizationReference" />
      <MemberSignature Language="F#" Value="member this.TargetSparkConfiguration : Azure.ResourceManager.DataFactory.Models.SparkConfigurationParametrizationReference with get, set" Usage="Azure.ResourceManager.DataFactory.Models.SynapseSparkJobDefinitionActivity.TargetSparkConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.Models.SparkConfigurationParametrizationReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The spark configuration of the spark job. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
