<Type Name="ContentSafetyClient" FullName="Azure.AI.ContentSafety.ContentSafetyClient">
  <TypeSignature Language="C#" Value="public class ContentSafetyClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContentSafetyClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.ContentSafety.ContentSafetyClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentSafetyClient" />
  <TypeSignature Language="F#" Value="type ContentSafetyClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ContentSafety service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContentSafetyClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ContentSafetyClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.ContentSafety.ContentSafetyClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.ContentSafety.ContentSafetyClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.ContentSafety.ContentSafetyClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ContentSafetyClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.AzureKeyCredential * Azure.AI.ContentSafety.ContentSafetyClientOptions -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.ContentSafety.ContentSafetyClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.ContentSafety.ContentSafetyClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.ContentSafety.ContentSafetyClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.ContentSafety.ContentSafetyClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As ContentSafetyClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.Core.TokenCredential * Azure.AI.ContentSafety.ContentSafetyClientOptions -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.ContentSafety.ContentSafetyClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage (Azure.AI.ContentSafety.AnalyzeImageOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage(class Azure.AI.ContentSafety.AnalyzeImageOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (options As AnalyzeImageOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeImageResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&#xA;override this.AnalyzeImage : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;" Usage="contentSafetyClient.AnalyzeImage (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.ContentSafety.AnalyzeImageOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The image analysis request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Image. </summary>
        <returns>To be added.</returns>
        <remarks> A synchronous API for the analysis of potentially harmful image content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeImage.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
]]></code>
This sample shows how to call AnalyzeImage with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
{
    Categories = { ImageCategory.Hate },
    OutputType = AnalyzeImageOutputType.FourSeverityLevels,
};
Response<AnalyzeImageResult> response = client.AnalyzeImage(options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeImage (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeImage(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeImage : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.AnalyzeImage (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Image
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeImage and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new object(),
});
Response response = client.AnalyzeImage(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeImage with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new
    {
        content = new object(),
        blobUrl = "http://localhost:3000",
    },
    categories = new object[]
    {
        "Hate"
    },
    outputType = "FourSeverityLevels",
});
Response response = client.AnalyzeImage(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage (BinaryData content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage(class System.BinaryData content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (content As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeImageResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : BinaryData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&#xA;override this.AnalyzeImage : BinaryData * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;" Usage="contentSafetyClient.AnalyzeImage (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Image with Binary Data. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage (Uri blobUri, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage(class System.Uri blobUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (blobUri As Uri, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeImageResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : Uri * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&#xA;override this.AnalyzeImage : Uri * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;" Usage="contentSafetyClient.AnalyzeImage (blobUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Image with Blob URI. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync (Azure.AI.ContentSafety.AnalyzeImageOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync(class Azure.AI.ContentSafety.AnalyzeImageOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (options As AnalyzeImageOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeImageResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;&#xA;override this.AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.ContentSafety.AnalyzeImageOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The image analysis request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Image. </summary>
        <returns>To be added.</returns>
        <remarks> A synchronous API for the analysis of potentially harmful image content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeImageAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData());
Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
]]></code>
This sample shows how to call AnalyzeImageAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeImageOptions options = new AnalyzeImageOptions(new ContentSafetyImageData())
{
    Categories = { ImageCategory.Hate },
    OutputType = AnalyzeImageOutputType.FourSeverityLevels,
};
Response<AnalyzeImageResult> response = await client.AnalyzeImageAsync(options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeImageAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeImageAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Image
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeImageAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new object(),
});
Response response = await client.AnalyzeImageAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeImageAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    image = new
    {
        content = new object(),
        blobUrl = "http://localhost:3000",
    },
    categories = new object[]
    {
        "Hate"
    },
    outputType = "FourSeverityLevels",
});
Response response = await client.AnalyzeImageAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync (BinaryData content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync(class System.BinaryData content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (content As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeImageResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;&#xA;override this.AnalyzeImageAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Image with Binary Data Async. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync (Uri blobUri, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync(class System.Uri blobUri, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(System.Uri,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (blobUri As Uri, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeImageResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;&#xA;override this.AnalyzeImageAsync : Uri * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (blobUri, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobUri" Type="System.Uri" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobUri">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Image with Blob URI Async. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeText">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText (Azure.AI.ContentSafety.AnalyzeTextOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText(class Azure.AI.ContentSafety.AnalyzeTextOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeText (options As AnalyzeTextOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeTextResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeText : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&#xA;override this.AnalyzeText : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;" Usage="contentSafetyClient.AnalyzeText (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.ContentSafety.AnalyzeTextOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The text analysis request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Text. </summary>
        <returns>To be added.</returns>
        <remarks> A synchronous API for the analysis of potentially harmful text content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeText.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
Response<AnalyzeTextResult> response = client.AnalyzeText(options);
]]></code>
This sample shows how to call AnalyzeText with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
{
    Categories = { TextCategory.Hate },
    BlocklistNames = { "<blocklistNames>" },
    HaltOnBlocklistHit = true,
    OutputType = AnalyzeTextOutputType.FourSeverityLevels,
};
Response<AnalyzeTextResult> response = client.AnalyzeText(options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeText">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeText (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeText(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeText (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeText : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeText : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.AnalyzeText (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Text
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeText and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = client.AnalyzeText(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeText with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
    categories = new object[]
    {
        "Hate"
    },
    blocklistNames = new object[]
    {
        "<blocklistNames>"
    },
    haltOnBlocklistHit = true,
    outputType = "FourSeverityLevels",
});
Response response = client.AnalyzeText(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeText">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText (string text, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText(string text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeText (text As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeTextResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeText : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&#xA;override this.AnalyzeText : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;" Usage="contentSafetyClient.AnalyzeText (text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync (Azure.AI.ContentSafety.AnalyzeTextOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync(class Azure.AI.ContentSafety.AnalyzeTextOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeTextAsync (options As AnalyzeTextOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeTextResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;&#xA;override this.AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeTextAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.ContentSafety.AnalyzeTextOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The text analysis request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Text. </summary>
        <returns>To be added.</returns>
        <remarks> A synchronous API for the analysis of potentially harmful text content. Currently, it supports four categories: Hate, SelfHarm, Sexual, and Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeTextAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>");
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
]]></code>
This sample shows how to call AnalyzeTextAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

AnalyzeTextOptions options = new AnalyzeTextOptions("<text>")
{
    Categories = { TextCategory.Hate },
    BlocklistNames = { "<blocklistNames>" },
    HaltOnBlocklistHit = true,
    OutputType = AnalyzeTextOutputType.FourSeverityLevels,
};
Response<AnalyzeTextResult> response = await client.AnalyzeTextAsync(options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeTextAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeTextAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeTextAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.AnalyzeTextAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Text
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeTextAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
});
Response response = await client.AnalyzeTextAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
]]></code>
This sample shows how to call AnalyzeTextAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ContentSafetyClient client = new ContentSafetyClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    text = "<text>",
    categories = new object[]
    {
        "Hate"
    },
    blocklistNames = new object[]
    {
        "<blocklistNames>"
    },
    haltOnBlocklistHit = true,
    outputType = "FourSeverityLevels",
});
Response response = await client.AnalyzeTextAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatch")[0].GetProperty("blocklistItemText").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("categoriesAnalysis")[0].GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync (string text, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync(string text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeTextAsync (text As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeTextResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;&#xA;override this.AnalyzeTextAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeTextAsync (text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary> Analyze Text Async. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.ContentSafety.ContentSafetyClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.ContentSafety.ContentSafetyClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
