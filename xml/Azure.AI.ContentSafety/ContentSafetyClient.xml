<Type Name="ContentSafetyClient" FullName="Azure.AI.ContentSafety.ContentSafetyClient">
  <TypeSignature Language="C#" Value="public class ContentSafetyClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContentSafetyClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.ContentSafety.ContentSafetyClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentSafetyClient" />
  <TypeSignature Language="F#" Value="type ContentSafetyClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ContentSafety service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ContentSafetyClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ContentSafetyClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentSafetyClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.ContentSafety.ContentSafetyClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.ContentSafety.ContentSafetyClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.ContentSafety.ContentSafetyClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ContentSafetyClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.ContentSafety.ContentSafetyClient : Uri * Azure.AzureKeyCredential * Azure.AI.ContentSafety.ContentSafetyClientOptions -&gt; Azure.AI.ContentSafety.ContentSafetyClient" Usage="new Azure.AI.ContentSafety.ContentSafetyClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.ContentSafety.ContentSafetyClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://&lt;resource-name&gt;.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ContentSafetyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddBlockItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt; AddBlockItems (string blocklistName, Azure.AI.ContentSafety.AddBlockItemsOptions addBlockItemsOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AddBlockItemsResult&gt; AddBlockItems(string blocklistName, class Azure.AI.ContentSafety.AddBlockItemsOptions addBlockItemsOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItems(System.String,Azure.AI.ContentSafety.AddBlockItemsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddBlockItems (blocklistName As String, addBlockItemsOptions As AddBlockItemsOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AddBlockItemsResult)" />
      <MemberSignature Language="F#" Value="abstract member AddBlockItems : string * Azure.AI.ContentSafety.AddBlockItemsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;&#xA;override this.AddBlockItems : string * Azure.AI.ContentSafety.AddBlockItemsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;" Usage="contentSafetyClient.AddBlockItems (blocklistName, addBlockItemsOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="addBlockItemsOptions" Type="Azure.AI.ContentSafety.AddBlockItemsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="addBlockItemsOptions"> The request of adding blockItems to text blocklist. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add BlockItems To Text Blocklist. </summary>
        <returns>To be added.</returns>
        <remarks> Add blockItems to a text blocklist. You can add at most 100 BlockItems in one request. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="addBlockItemsOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AddBlockItems with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var addBlockItemsOptions = new AddBlockItemsOptions(new TextBlockItemInfo[] 
{
    new TextBlockItemInfo("<text>")
{
        Description = "<Description>",
    }
});
var result = client.AddBlockItems("<blocklistName>", addBlockItemsOptions);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AddBlockItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddBlockItems (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddBlockItems(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItems(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddBlockItems (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddBlockItems : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddBlockItems : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.AddBlockItems (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Add BlockItems To Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItems(System.String,Azure.AI.ContentSafety.AddBlockItemsOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AddBlockItems with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blockItems = new[] {
        new {
            description = "<description>",
            text = "<text>",
        }
    },
};

Response response = client.AddBlockItems("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AddBlockItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;&gt; AddBlockItemsAsync (string blocklistName, Azure.AI.ContentSafety.AddBlockItemsOptions addBlockItemsOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AddBlockItemsResult&gt;&gt; AddBlockItemsAsync(string blocklistName, class Azure.AI.ContentSafety.AddBlockItemsOptions addBlockItemsOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItemsAsync(System.String,Azure.AI.ContentSafety.AddBlockItemsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddBlockItemsAsync (blocklistName As String, addBlockItemsOptions As AddBlockItemsOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AddBlockItemsResult))" />
      <MemberSignature Language="F#" Value="abstract member AddBlockItemsAsync : string * Azure.AI.ContentSafety.AddBlockItemsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;&gt;&#xA;override this.AddBlockItemsAsync : string * Azure.AI.ContentSafety.AddBlockItemsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;&gt;" Usage="contentSafetyClient.AddBlockItemsAsync (blocklistName, addBlockItemsOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AddBlockItemsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="addBlockItemsOptions" Type="Azure.AI.ContentSafety.AddBlockItemsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="addBlockItemsOptions"> The request of adding blockItems to text blocklist. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add BlockItems To Text Blocklist. </summary>
        <returns>To be added.</returns>
        <remarks> Add blockItems to a text blocklist. You can add at most 100 BlockItems in one request. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="addBlockItemsOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AddBlockItemsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var addBlockItemsOptions = new AddBlockItemsOptions(new TextBlockItemInfo[] 
{
    new TextBlockItemInfo("<text>")
{
        Description = "<Description>",
    }
});
var result = await client.AddBlockItemsAsync("<blocklistName>", addBlockItemsOptions);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AddBlockItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddBlockItemsAsync (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddBlockItemsAsync(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItemsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddBlockItemsAsync (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddBlockItemsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddBlockItemsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.AddBlockItemsAsync (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Add BlockItems To Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AddBlockItemsAsync(System.String,Azure.AI.ContentSafety.AddBlockItemsOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AddBlockItemsAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blockItems = new[] {
        new {
            description = "<description>",
            text = "<text>",
        }
    },
};

Response response = await client.AddBlockItemsAsync("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage (Azure.AI.ContentSafety.AnalyzeImageOptions body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt; AnalyzeImage(class Azure.AI.ContentSafety.AnalyzeImageOptions body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (body As AnalyzeImageOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeImageResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&#xA;override this.AnalyzeImage : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;" Usage="contentSafetyClient.AnalyzeImage (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.AI.ContentSafety.AnalyzeImageOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> The analysis request of the image. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Image. </summary>
        <returns>To be added.</returns>
        <remarks> A sync API for harmful content analysis for image. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeImage with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var body = new AnalyzeImageOptions(new ImageData()
{
    Content = BinaryData.FromString("<your binary data content>"),
    BlobUrl = new Uri("http://localhost:3000"),
})
{
    Categories = 
{
        ImageCategory.Hate
    },
};
var result = client.AnalyzeImage(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeImage (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeImage(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImage (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImage : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeImage : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.AnalyzeImage (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Image
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImage(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeImage with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    image = new {},
};

Response response = client.AnalyzeImage(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AnalyzeImage with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    image = new {
        content = new {},
        blobUrl = "http://localhost:3000",
    },
    categories = new[] {
        "Hate"
    },
};

Response response = client.AnalyzeImage(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync (Azure.AI.ContentSafety.AnalyzeImageOptions body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt; AnalyzeImageAsync(class Azure.AI.ContentSafety.AnalyzeImageOptions body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (body As AnalyzeImageOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeImageResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;&#xA;override this.AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeImageResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.AI.ContentSafety.AnalyzeImageOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> The analysis request of the image. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Image. </summary>
        <returns>To be added.</returns>
        <remarks> A sync API for harmful content analysis for image. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeImageAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var body = new AnalyzeImageOptions(new ImageData()
{
    Content = BinaryData.FromString("<your binary data content>"),
    BlobUrl = new Uri("http://localhost:3000"),
})
{
    Categories = 
{
        ImageCategory.Hate
    },
};
var result = await client.AnalyzeImageAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeImageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeImageAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeImageAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeImageAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.AnalyzeImageAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Image
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeImageAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    image = new {},
};

Response response = await client.AnalyzeImageAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AnalyzeImageAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    image = new {
        content = new {},
        blobUrl = "http://localhost:3000",
    },
    categories = new[] {
        "Hate"
    },
};

Response response = await client.AnalyzeImageAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeText">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText (Azure.AI.ContentSafety.AnalyzeTextOptions body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt; AnalyzeText(class Azure.AI.ContentSafety.AnalyzeTextOptions body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeText (body As AnalyzeTextOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeTextResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeText : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&#xA;override this.AnalyzeText : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;" Usage="contentSafetyClient.AnalyzeText (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.AI.ContentSafety.AnalyzeTextOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> The request of text analysis. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Text. </summary>
        <returns>To be added.</returns>
        <remarks> A sync API for harmful content analysis for text. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeText with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var body = new AnalyzeTextOptions("<text>")
{
    Categories = 
{
        TextCategory.Hate
    },
    BlocklistNames = 
{
        "<null>"
    },
    BreakByBlocklists = true,
};
var result = client.AnalyzeText(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeText">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeText (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeText(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeText (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeText : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeText : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.AnalyzeText (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Text
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeText(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeText with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    text = "<text>",
};

Response response = client.AnalyzeText(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AnalyzeText with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    text = "<text>",
    categories = new[] {
        "Hate"
    },
    blocklistNames = new[] {
        "<String>"
    },
    breakByBlocklists = true,
};

Response response = client.AnalyzeText(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemText").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync (Azure.AI.ContentSafety.AnalyzeTextOptions body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt; AnalyzeTextAsync(class Azure.AI.ContentSafety.AnalyzeTextOptions body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeTextAsync (body As AnalyzeTextOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeTextResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;&#xA;override this.AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;" Usage="contentSafetyClient.AnalyzeTextAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.AnalyzeTextResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.AI.ContentSafety.AnalyzeTextOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> The request of text analysis. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Analyze Text. </summary>
        <returns>To be added.</returns>
        <remarks> A sync API for harmful content analysis for text. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call AnalyzeTextAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var body = new AnalyzeTextOptions("<text>")
{
    Categories = 
{
        TextCategory.Hate
    },
    BlocklistNames = 
{
        "<null>"
    },
    BreakByBlocklists = true,
};
var result = await client.AnalyzeTextAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeTextAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeTextAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeTextAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeTextAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.AnalyzeTextAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Analyze Text
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AnalyzeTextAsync with required request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    text = "<text>",
};

Response response = await client.AnalyzeTextAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AnalyzeTextAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    text = "<text>",
    categories = new[] {
        "Hate"
    },
    blocklistNames = new[] {
        "<String>"
    },
    breakByBlocklists = true,
};

Response response = await client.AnalyzeTextAsync(RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemText").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateTextBlocklist">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdateTextBlocklist (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdateTextBlocklist(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.CreateOrUpdateTextBlocklist(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateTextBlocklist (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateTextBlocklist : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdateTextBlocklist : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.CreateOrUpdateTextBlocklist (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Or Update Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateTextBlocklist with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blocklistName = "<blocklistName>",
};

Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
]]></code>
This sample shows how to call CreateOrUpdateTextBlocklist with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blocklistName = "<blocklistName>",
    description = "<description>",
};

Response response = client.CreateOrUpdateTextBlocklist("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateTextBlocklistAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateTextBlocklistAsync (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateTextBlocklistAsync(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.CreateOrUpdateTextBlocklistAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateTextBlocklistAsync (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateTextBlocklistAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateTextBlocklistAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.CreateOrUpdateTextBlocklistAsync (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Or Update Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateTextBlocklistAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blocklistName = "<blocklistName>",
};

Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
]]></code>
This sample shows how to call CreateOrUpdateTextBlocklistAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blocklistName = "<blocklistName>",
    description = "<description>",
};

Response response = await client.CreateOrUpdateTextBlocklistAsync("<blocklistName>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTextBlocklist">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTextBlocklist (string blocklistName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTextBlocklist(string blocklistName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.DeleteTextBlocklist(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTextBlocklist (blocklistName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTextBlocklist : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTextBlocklist : string * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.DeleteTextBlocklist (blocklistName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete Text Blocklist By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTextBlocklist with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = client.DeleteTextBlocklist("<blocklistName>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTextBlocklistAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTextBlocklistAsync (string blocklistName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTextBlocklistAsync(string blocklistName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.DeleteTextBlocklistAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTextBlocklistAsync (blocklistName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTextBlocklistAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTextBlocklistAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.DeleteTextBlocklistAsync (blocklistName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete Text Blocklist By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTextBlocklistAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = await client.DeleteTextBlocklistAsync("<blocklistName>");
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklist">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTextBlocklist (string blocklistName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTextBlocklist(string blocklistName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklist(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklist (blocklistName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklist : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTextBlocklist : string * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.GetTextBlocklist (blocklistName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Text Blocklist By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklist(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklist with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = client.GetTextBlocklist("<blocklistName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklist">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklist (string blocklistName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklist(string blocklistName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklist(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklist (blocklistName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TextBlocklist)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklist : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&#xA;override this.GetTextBlocklist : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;" Usage="contentSafetyClient.GetTextBlocklist (blocklistName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get Text Blocklist By blocklistName. </summary>
        <returns>To be added.</returns>
        <remarks> Returns text blocklist details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklist with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var result = client.GetTextBlocklist("<blocklistName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTextBlocklistAsync (string blocklistName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTextBlocklistAsync(string blocklistName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistAsync (blocklistName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTextBlocklistAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.GetTextBlocklistAsync (blocklistName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Text Blocklist By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = await client.GetTextBlocklistAsync("<blocklistName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blocklistName").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&gt; GetTextBlocklistAsync (string blocklistName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.TextBlocklist&gt;&gt; GetTextBlocklistAsync(string blocklistName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistAsync (blocklistName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TextBlocklist))" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&gt;&#xA;override this.GetTextBlocklistAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&gt;" Usage="contentSafetyClient.GetTextBlocklistAsync (blocklistName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get Text Blocklist By blocklistName. </summary>
        <returns>To be added.</returns>
        <remarks> Returns text blocklist details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklistAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var result = await client.GetTextBlocklistAsync("<blocklistName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItem">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTextBlocklistItem (string blocklistName, string blockItemId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTextBlocklistItem(string blocklistName, string blockItemId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItem(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItem (blocklistName As String, blockItemId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItem : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTextBlocklistItem : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.GetTextBlocklistItem (blocklistName, blockItemId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="blockItemId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="blockItemId"> Block Item Id. It will be uuid. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get BlockItem By blocklistName And blockItemId
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItem(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistItem with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("text").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItem">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItem (string blocklistName, string blockItemId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItem(string blocklistName, string blockItemId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItem(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItem (blocklistName As String, blockItemId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TextBlockItem)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItem : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&#xA;override this.GetTextBlocklistItem : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;" Usage="contentSafetyClient.GetTextBlocklistItem (blocklistName, blockItemId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="blockItemId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="blockItemId"> Block Item Id. It will be uuid. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get BlockItem By blocklistName And blockItemId. </summary>
        <returns>To be added.</returns>
        <remarks> Get blockItem By blockItemId from a text blocklist. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklistItem with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var result = client.GetTextBlocklistItem("<blocklistName>", "<blockItemId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTextBlocklistItemAsync (string blocklistName, string blockItemId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTextBlocklistItemAsync(string blocklistName, string blockItemId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItemAsync (blocklistName As String, blockItemId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItemAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTextBlocklistItemAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.GetTextBlocklistItemAsync (blocklistName, blockItemId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="blockItemId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="blockItemId"> Block Item Id. It will be uuid. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get BlockItem By blocklistName And blockItemId
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistItemAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

Response response = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("blockItemId").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("text").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&gt; GetTextBlocklistItemAsync (string blocklistName, string blockItemId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.ContentSafety.TextBlockItem&gt;&gt; GetTextBlocklistItemAsync(string blocklistName, string blockItemId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItemAsync (blocklistName As String, blockItemId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TextBlockItem))" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItemAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&gt;&#xA;override this.GetTextBlocklistItemAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&gt;" Usage="contentSafetyClient.GetTextBlocklistItemAsync (blocklistName, blockItemId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="blockItemId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="blockItemId"> Block Item Id. It will be uuid. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get BlockItem By blocklistName And blockItemId. </summary>
        <returns>To be added.</returns>
        <remarks> Get blockItem By blockItemId from a text blocklist. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> or <paramref name="blockItemId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklistItemAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var result = await client.GetTextBlocklistItemAsync("<blocklistName>", "<blockItemId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetTextBlocklistItems (string blocklistName, int? maxCount, int? skip, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetTextBlocklistItems(string blocklistName, valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItems (blocklistName As String, maxCount As Nullable(Of Integer), skip As Nullable(Of Integer), maxpagesize As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItems : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetTextBlocklistItems : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="contentSafetyClient.GetTextBlocklistItems (blocklistName, maxCount, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get All BlockItems By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistItems with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

foreach (var item in client.GetTextBlocklistItems("<blocklistName>", 1234, 1234, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("blockItemId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("text").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItems (string blocklistName, int? maxCount = default, int? skip = default, int? maxpagesize = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItems(string blocklistName, valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItems(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItems (blocklistName As String, Optional maxCount As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of TextBlockItem)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItems : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&#xA;override this.GetTextBlocklistItems : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;" Usage="contentSafetyClient.GetTextBlocklistItems (blocklistName, maxCount, skip, maxpagesize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get All BlockItems By blocklistName. </summary>
        <returns>To be added.</returns>
        <remarks> Get all blockItems in a text blocklist. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklistItems with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

foreach (var item in client.GetTextBlocklistItems("<blocklistName>", 1234, 1234, 1234))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItemsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetTextBlocklistItemsAsync (string blocklistName, int? maxCount, int? skip, int? maxpagesize, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetTextBlocklistItemsAsync(string blocklistName, valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItemsAsync (blocklistName As String, maxCount As Nullable(Of Integer), skip As Nullable(Of Integer), maxpagesize As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItemsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetTextBlocklistItemsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="contentSafetyClient.GetTextBlocklistItemsAsync (blocklistName, maxCount, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get All BlockItems By blocklistName
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistItemsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

await foreach (var item in client.GetTextBlocklistItemsAsync("<blocklistName>", 1234, 1234, 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("blockItemId").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("text").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistItemsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItemsAsync (string blocklistName, int? maxCount = default, int? skip = default, int? maxpagesize = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.ContentSafety.TextBlockItem&gt; GetTextBlocklistItemsAsync(string blocklistName, valuetype System.Nullable`1&lt;int32&gt; maxCount, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistItemsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistItemsAsync (blocklistName As String, Optional maxCount As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of TextBlockItem)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistItemsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;&#xA;override this.GetTextBlocklistItemsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;" Usage="contentSafetyClient.GetTextBlocklistItemsAsync (blocklistName, maxCount, skip, maxpagesize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlockItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="maxCount"> The number of result items to return. </param>
        <param name="skip"> The number of result items to skip. </param>
        <param name="maxpagesize"> The maximum number of result items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get All BlockItems By blocklistName. </summary>
        <returns>To be added.</returns>
        <remarks> Get all blockItems in a text blocklist. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTextBlocklistItemsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

await foreach (var item in client.GetTextBlocklistItemsAsync("<blocklistName>", 1234, 1234, 1234))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklists">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetTextBlocklists (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetTextBlocklists(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklists(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklists (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklists : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetTextBlocklists : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="contentSafetyClient.GetTextBlocklists context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get All Text Blocklists
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklists(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklists with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

foreach (var item in client.GetTextBlocklists(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("blocklistName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklists">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklists (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklists(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklists(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklists (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of TextBlocklist)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklists : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&#xA;override this.GetTextBlocklists : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;" Usage="contentSafetyClient.GetTextBlocklists cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get All Text Blocklists. </summary>
        <returns>To be added.</returns>
        <remarks> Get all text blocklists details. </remarks>
        <example>
This sample shows how to call GetTextBlocklists.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

foreach (var item in client.GetTextBlocklists())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetTextBlocklistsAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetTextBlocklistsAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistsAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistsAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetTextBlocklistsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="contentSafetyClient.GetTextBlocklistsAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get All Text Blocklists
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistsAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTextBlocklistsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

await foreach (var item in client.GetTextBlocklistsAsync(new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("blocklistName").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTextBlocklistsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.ContentSafety.TextBlocklist&gt; GetTextBlocklistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.GetTextBlocklistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTextBlocklistsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of TextBlocklist)" />
      <MemberSignature Language="F#" Value="abstract member GetTextBlocklistsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;&#xA;override this.GetTextBlocklistsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;" Usage="contentSafetyClient.GetTextBlocklistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.ContentSafety.TextBlocklist&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get All Text Blocklists. </summary>
        <returns>To be added.</returns>
        <remarks> Get all text blocklists details. </remarks>
        <example>
This sample shows how to call GetTextBlocklistsAsync.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

await foreach (var item in client.GetTextBlocklistsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.ContentSafety.ContentSafetyClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.ContentSafety.ContentSafetyClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBlockItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RemoveBlockItems (string blocklistName, Azure.AI.ContentSafety.RemoveBlockItemsOptions removeBlockItemsOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RemoveBlockItems(string blocklistName, class Azure.AI.ContentSafety.RemoveBlockItemsOptions removeBlockItemsOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItems(System.String,Azure.AI.ContentSafety.RemoveBlockItemsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveBlockItems (blocklistName As String, removeBlockItemsOptions As RemoveBlockItemsOptions, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RemoveBlockItems : string * Azure.AI.ContentSafety.RemoveBlockItemsOptions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.RemoveBlockItems : string * Azure.AI.ContentSafety.RemoveBlockItemsOptions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="contentSafetyClient.RemoveBlockItems (blocklistName, removeBlockItemsOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="removeBlockItemsOptions" Type="Azure.AI.ContentSafety.RemoveBlockItemsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="removeBlockItemsOptions"> The request of removing blockItems from text blocklist. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Remove BlockItems From Text Blocklist. </summary>
        <returns>To be added.</returns>
        <remarks> Remove blockItems from a text blocklist. You can remove at most 100 BlockItems in one request. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="removeBlockItemsOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RemoveBlockItems with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var removeBlockItemsOptions = new RemoveBlockItemsOptions(new string[] 
{
    "<null>"
});
var result = client.RemoveBlockItems("<blocklistName>", removeBlockItemsOptions);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveBlockItems">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RemoveBlockItems (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RemoveBlockItems(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItems(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveBlockItems (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RemoveBlockItems : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RemoveBlockItems : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="contentSafetyClient.RemoveBlockItems (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Remove BlockItems From Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItems(System.String,Azure.AI.ContentSafety.RemoveBlockItemsOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveBlockItems with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blockItemIds = new[] {
        "<String>"
    },
};

Response response = client.RemoveBlockItems("<blocklistName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveBlockItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RemoveBlockItemsAsync (string blocklistName, Azure.AI.ContentSafety.RemoveBlockItemsOptions removeBlockItemsOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RemoveBlockItemsAsync(string blocklistName, class Azure.AI.ContentSafety.RemoveBlockItemsOptions removeBlockItemsOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItemsAsync(System.String,Azure.AI.ContentSafety.RemoveBlockItemsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveBlockItemsAsync (blocklistName As String, removeBlockItemsOptions As RemoveBlockItemsOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RemoveBlockItemsAsync : string * Azure.AI.ContentSafety.RemoveBlockItemsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RemoveBlockItemsAsync : string * Azure.AI.ContentSafety.RemoveBlockItemsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.RemoveBlockItemsAsync (blocklistName, removeBlockItemsOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="removeBlockItemsOptions" Type="Azure.AI.ContentSafety.RemoveBlockItemsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="removeBlockItemsOptions"> The request of removing blockItems from text blocklist. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Remove BlockItems From Text Blocklist. </summary>
        <returns>To be added.</returns>
        <remarks> Remove blockItems from a text blocklist. You can remove at most 100 BlockItems in one request. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="removeBlockItemsOptions" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RemoveBlockItemsAsync with required parameters.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var removeBlockItemsOptions = new RemoveBlockItemsOptions(new string[] 
{
    "<null>"
});
var result = await client.RemoveBlockItemsAsync("<blocklistName>", removeBlockItemsOptions);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveBlockItemsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RemoveBlockItemsAsync (string blocklistName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RemoveBlockItemsAsync(string blocklistName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItemsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveBlockItemsAsync (blocklistName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RemoveBlockItemsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RemoveBlockItemsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="contentSafetyClient.RemoveBlockItemsAsync (blocklistName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.ContentSafety</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blocklistName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="blocklistName"> Text blocklist name. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Remove BlockItems From Text Blocklist
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.ContentSafety.ContentSafetyClient.RemoveBlockItemsAsync(System.String,Azure.AI.ContentSafety.RemoveBlockItemsOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="blocklistName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="blocklistName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveBlockItemsAsync with required parameters and request content.
<code><![CDATA[
var credential = new AzureKeyCredential("<key>");
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new ContentSafetyClient(endpoint, credential);

var data = new {
    blockItemIds = new[] {
        "<String>"
    },
};

Response response = await client.RemoveBlockItemsAsync("<blocklistName>", RequestContent.Create(data));
Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
