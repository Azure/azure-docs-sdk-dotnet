<Type Name="ContainerInstanceGitRepoVolume" FullName="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume">
  <TypeSignature Language="C#" Value="public class ContainerInstanceGitRepoVolume : System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerInstanceGitRepoVolume extends System.Object implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerInstanceGitRepoVolume&#xA;Implements IJsonModel(Of ContainerInstanceGitRepoVolume), IPersistableModel(Of ContainerInstanceGitRepoVolume)" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="F#" Value="type ContainerInstanceGitRepoVolume = class&#xA;    interface IJsonModel&lt;ContainerInstanceGitRepoVolume&gt;&#xA;    interface IPersistableModel&lt;ContainerInstanceGitRepoVolume&gt;" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="C#" Value="public class ContainerInstanceGitRepoVolume" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerInstanceGitRepoVolume extends System.Object" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerInstanceGitRepoVolume" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="F#" Value="type ContainerInstanceGitRepoVolume = class" FrameworkAlternate="azure-dotnet-preview" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="azure-dotnet">
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> Represents a volume that is populated with the contents of a git repository. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerInstanceGitRepoVolume (string repository);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string repository) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (repository As String)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume : string -&gt; Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume" Usage="new Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume repository" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="repository" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="repository"> Repository URL. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume" />. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="repository" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Directory">
      <MemberSignature Language="C#" Value="public string Directory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Directory" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Directory" />
      <MemberSignature Language="VB.NET" Value="Public Property Directory As String" />
      <MemberSignature Language="F#" Value="member this.Directory : string with get, set" Usage="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Directory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Repository">
      <MemberSignature Language="C#" Value="public string Repository { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Repository" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Repository" />
      <MemberSignature Language="VB.NET" Value="Public Property Repository As String" />
      <MemberSignature Language="F#" Value="member this.Repository : string with get, set" Usage="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Repository" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Repository URL. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Revision">
      <MemberSignature Language="C#" Value="public string Revision { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Revision" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Revision" />
      <MemberSignature Language="VB.NET" Value="Public Property Revision As String" />
      <MemberSignature Language="F#" Value="member this.Revision : string with get, set" Usage="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.Revision" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Commit hash for the specified revision. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume IJsonModel&lt;ContainerInstanceGitRepoVolume&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#ContainerInstance#Models#ContainerInstanceGitRepoVolume&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As ContainerInstanceGitRepoVolume Implements IJsonModel(Of ContainerInstanceGitRepoVolume).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume" Usage="containerInstanceGitRepoVolume.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;ContainerInstanceGitRepoVolume&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#ContainerInstance#Models#ContainerInstanceGitRepoVolume&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of ContainerInstanceGitRepoVolume).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="containerInstanceGitRepoVolume.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume IPersistableModel&lt;ContainerInstanceGitRepoVolume&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ContainerInstance#Models#ContainerInstanceGitRepoVolume&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As ContainerInstanceGitRepoVolume Implements IPersistableModel(Of ContainerInstanceGitRepoVolume).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume" Usage="containerInstanceGitRepoVolume.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ContainerInstance#Models#ContainerInstanceGitRepoVolume&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of ContainerInstanceGitRepoVolume).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="containerInstanceGitRepoVolume.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param></summary>
        <returns>The format that the model uses when communicating with the serivce.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;ContainerInstanceGitRepoVolume&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#ContainerInstance#Models#ContainerInstanceGitRepoVolume&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of ContainerInstanceGitRepoVolume).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="containerInstanceGitRepoVolume.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.ContainerInstance.Models.ContainerInstanceGitRepoVolume&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerInstance</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
