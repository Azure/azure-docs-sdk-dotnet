<Type Name="MockableHybridComputeResourceGroupResource" FullName="Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource">
  <TypeSignature Language="C#" Value="public class MockableHybridComputeResourceGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableHybridComputeResourceGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableHybridComputeResourceGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableHybridComputeResourceGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ResourceGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableHybridComputeResourceGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeGateway">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt; GetHybridComputeGateway (string gatewayName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt; GetHybridComputeGateway(string gatewayName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeGateway(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeGateway (gatewayName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of HybridComputeGatewayResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeGateway : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&#xA;override this.GetHybridComputeGateway : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeGateway (gatewayName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gatewayName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gatewayName"> The name of the Gateway. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the view of a gateway.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/gateways/{gatewayName}</description></item><item><term>Operation Id</term><description>Gateways_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="gatewayName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="gatewayName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeGatewayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&gt; GetHybridComputeGatewayAsync (string gatewayName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&gt; GetHybridComputeGatewayAsync(string gatewayName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeGatewayAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeGatewayAsync (gatewayName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of HybridComputeGatewayResource))" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeGatewayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&gt;&#xA;override this.GetHybridComputeGatewayAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeGatewayAsync (gatewayName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gatewayName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="gatewayName"> The name of the Gateway. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the view of a gateway.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/gateways/{gatewayName}</description></item><item><term>Operation Id</term><description>Gateways_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeGatewayResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="gatewayName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="gatewayName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeGateways">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputeGatewayCollection GetHybridComputeGateways ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputeGatewayCollection GetHybridComputeGateways() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeGateways" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeGateways () As HybridComputeGatewayCollection" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeGateways : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeGatewayCollection&#xA;override this.GetHybridComputeGateways : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeGatewayCollection" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeGateways " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputeGatewayCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of HybridComputeGatewayResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of HybridComputeGatewayResources and their operations over a HybridComputeGatewayResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeLicense">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt; GetHybridComputeLicense (string licenseName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt; GetHybridComputeLicense(string licenseName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeLicense(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeLicense (licenseName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of HybridComputeLicenseResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeLicense : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&#xA;override this.GetHybridComputeLicense : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeLicense (licenseName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="licenseName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="licenseName"> The name of the license. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the view of a license.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/licenses/{licenseName}</description></item><item><term>Operation Id</term><description>Licenses_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="licenseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="licenseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeLicenseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&gt; GetHybridComputeLicenseAsync (string licenseName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&gt; GetHybridComputeLicenseAsync(string licenseName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeLicenseAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeLicenseAsync (licenseName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of HybridComputeLicenseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeLicenseAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&gt;&#xA;override this.GetHybridComputeLicenseAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeLicenseAsync (licenseName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="licenseName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="licenseName"> The name of the license. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the view of a license.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/licenses/{licenseName}</description></item><item><term>Operation Id</term><description>Licenses_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeLicenseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="licenseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="licenseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeLicenses">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputeLicenseCollection GetHybridComputeLicenses ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputeLicenseCollection GetHybridComputeLicenses() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeLicenses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeLicenses () As HybridComputeLicenseCollection" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeLicenses : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeLicenseCollection&#xA;override this.GetHybridComputeLicenses : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeLicenseCollection" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeLicenses " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputeLicenseCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of HybridComputeLicenseResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of HybridComputeLicenseResources and their operations over a HybridComputeLicenseResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachine">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachine (string machineName, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachine(string machineName, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeMachine(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachine (machineName As String, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of HybridComputeMachineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachine : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&#xA;override this.GetHybridComputeMachine : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeMachine (machineName, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="machineName"> The name of the hybrid machine. </param>
        <param name="expand"> The expand expression to apply on the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the model view or the instance view of a hybrid machine.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}</description></item><item><term>Operation Id</term><description>Machines_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="machineName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&gt; GetHybridComputeMachineAsync (string machineName, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&gt; GetHybridComputeMachineAsync(string machineName, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeMachineAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachineAsync (machineName As String, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of HybridComputeMachineResource))" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&gt;&#xA;override this.GetHybridComputeMachineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeMachineAsync (machineName, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="machineName"> The name of the hybrid machine. </param>
        <param name="expand"> The expand expression to apply on the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves information about the model view or the instance view of a hybrid machine.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}</description></item><item><term>Operation Id</term><description>Machines_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="machineName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachines">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputeMachineCollection GetHybridComputeMachines ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputeMachineCollection GetHybridComputeMachines() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputeMachines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachines () As HybridComputeMachineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachines : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineCollection&#xA;override this.GetHybridComputeMachines : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineCollection" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputeMachines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputeMachineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of HybridComputeMachineResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of HybridComputeMachineResources and their operations over a HybridComputeMachineResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScope">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScope (string scopeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScope(string scopeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScope(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScope (scopeName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of HybridComputePrivateLinkScopeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScope : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&#xA;override this.GetHybridComputePrivateLinkScope : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScope (scopeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scopeName"> The name of the Azure Arc PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Arc PrivateLinkScope.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScopeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&gt; GetHybridComputePrivateLinkScopeAsync (string scopeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&gt; GetHybridComputePrivateLinkScopeAsync(string scopeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScopeAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScopeAsync (scopeName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of HybridComputePrivateLinkScopeResource))" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScopeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&gt;&#xA;override this.GetHybridComputePrivateLinkScopeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&gt;" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScopeAsync (scopeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scopeName"> The name of the Azure Arc PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Arc PrivateLinkScope.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_Get</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScopes">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeCollection GetHybridComputePrivateLinkScopes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeCollection GetHybridComputePrivateLinkScopes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScopes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScopes () As HybridComputePrivateLinkScopeCollection" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScopes : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeCollection&#xA;override this.GetHybridComputePrivateLinkScopes : unit -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeCollection" Usage="mockableHybridComputeResourceGroupResource.GetHybridComputePrivateLinkScopes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of HybridComputePrivateLinkScopeResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of HybridComputePrivateLinkScopeResources and their operations over a HybridComputePrivateLinkScopeResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTargetResourceSetting">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt; UpdateTargetResourceSetting (string baseProvider, string baseResourceType, string baseResourceName, string settingsResourceName, Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings hybridComputeTargetResourceSettings, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt; UpdateTargetResourceSetting(string baseProvider, string baseResourceType, string baseResourceName, string settingsResourceName, class Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings hybridComputeTargetResourceSettings, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.UpdateTargetResourceSetting(System.String,System.String,System.String,System.String,Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTargetResourceSetting (baseProvider As String, baseResourceType As String, baseResourceName As String, settingsResourceName As String, hybridComputeTargetResourceSettings As HybridComputeTargetResourceSettings, Optional cancellationToken As CancellationToken = Nothing) As Response(Of HybridComputeTargetResourceSettings)" />
      <MemberSignature Language="F#" Value="abstract member UpdateTargetResourceSetting : string * string * string * string * Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&#xA;override this.UpdateTargetResourceSetting : string * string * string * string * Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;" Usage="mockableHybridComputeResourceGroupResource.UpdateTargetResourceSetting (baseProvider, baseResourceType, baseResourceName, settingsResourceName, hybridComputeTargetResourceSettings, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseProvider" Type="System.String" />
        <Parameter Name="baseResourceType" Type="System.String" />
        <Parameter Name="baseResourceName" Type="System.String" />
        <Parameter Name="settingsResourceName" Type="System.String" />
        <Parameter Name="hybridComputeTargetResourceSettings" Type="Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="baseProvider"> The name of the base Resource Provider. </param>
        <param name="baseResourceType"> The name of the base Resource Type. </param>
        <param name="baseResourceName"> The name of the base resource. </param>
        <param name="settingsResourceName"> The name of the settings resource. </param>
        <param name="hybridComputeTargetResourceSettings"> Settings details. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates the base Settings of the target resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{baseProvider}/{baseResourceType}/{baseResourceName}/providers/Microsoft.HybridCompute/settings/{settingsResourceName}</description></item><item><term>Operation Id</term><description>Settings_Update</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseProvider" />, <paramref name="baseResourceType" />, <paramref name="baseResourceName" /> or <paramref name="settingsResourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseProvider" />, <paramref name="baseResourceType" />, <paramref name="baseResourceName" />, <paramref name="settingsResourceName" /> or <paramref name="hybridComputeTargetResourceSettings" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateTargetResourceSettingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&gt; UpdateTargetResourceSettingAsync (string baseProvider, string baseResourceType, string baseResourceName, string settingsResourceName, Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings hybridComputeTargetResourceSettings, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&gt; UpdateTargetResourceSettingAsync(string baseProvider, string baseResourceType, string baseResourceName, string settingsResourceName, class Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings hybridComputeTargetResourceSettings, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeResourceGroupResource.UpdateTargetResourceSettingAsync(System.String,System.String,System.String,System.String,Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTargetResourceSettingAsync (baseProvider As String, baseResourceType As String, baseResourceName As String, settingsResourceName As String, hybridComputeTargetResourceSettings As HybridComputeTargetResourceSettings, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of HybridComputeTargetResourceSettings))" />
      <MemberSignature Language="F#" Value="abstract member UpdateTargetResourceSettingAsync : string * string * string * string * Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&gt;&#xA;override this.UpdateTargetResourceSettingAsync : string * string * string * string * Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&gt;" Usage="mockableHybridComputeResourceGroupResource.UpdateTargetResourceSettingAsync (baseProvider, baseResourceType, baseResourceName, settingsResourceName, hybridComputeTargetResourceSettings, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseProvider" Type="System.String" />
        <Parameter Name="baseResourceType" Type="System.String" />
        <Parameter Name="baseResourceName" Type="System.String" />
        <Parameter Name="settingsResourceName" Type="System.String" />
        <Parameter Name="hybridComputeTargetResourceSettings" Type="Azure.ResourceManager.HybridCompute.Models.HybridComputeTargetResourceSettings" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="baseProvider"> The name of the base Resource Provider. </param>
        <param name="baseResourceType"> The name of the base Resource Type. </param>
        <param name="baseResourceName"> The name of the base resource. </param>
        <param name="settingsResourceName"> The name of the settings resource. </param>
        <param name="hybridComputeTargetResourceSettings"> Settings details. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates the base Settings of the target resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{baseProvider}/{baseResourceType}/{baseResourceName}/providers/Microsoft.HybridCompute/settings/{settingsResourceName}</description></item><item><term>Operation Id</term><description>Settings_Update</description></item><item><term>Default Api Version</term><description>2024-05-20-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="baseProvider" />, <paramref name="baseResourceType" />, <paramref name="baseResourceName" /> or <paramref name="settingsResourceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseProvider" />, <paramref name="baseResourceType" />, <paramref name="baseResourceName" />, <paramref name="settingsResourceName" /> or <paramref name="hybridComputeTargetResourceSettings" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
