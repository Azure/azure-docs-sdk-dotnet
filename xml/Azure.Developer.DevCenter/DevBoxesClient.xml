<Type Name="DevBoxesClient" FullName="Azure.Developer.DevCenter.DevBoxesClient">
  <TypeSignature Language="C#" Value="public class DevBoxesClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DevBoxesClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Developer.DevCenter.DevBoxesClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DevBoxesClient" />
  <TypeSignature Language="F#" Value="type DevBoxesClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The DevBoxes service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DevBoxesClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of DevBoxesClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevBoxesClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevBoxesClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Developer.DevCenter.DevBoxesClient" Usage="new Azure.Developer.DevCenter.DevBoxesClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of DevBoxesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevBoxesClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Developer.DevCenter.DevCenterClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Developer.DevCenter.DevCenterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Developer.DevCenter.DevCenterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As DevCenterClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevBoxesClient : Uri * Azure.Core.TokenCredential * Azure.Developer.DevCenter.DevCenterClientOptions -&gt; Azure.Developer.DevCenter.DevBoxesClient" Usage="new Azure.Developer.DevCenter.DevBoxesClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Developer.DevCenter.DevCenterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DevBoxesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt; CreateDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, Azure.Developer.DevCenter.Models.DevBox devBox, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; CreateDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, class Azure.Developer.DevCenter.Models.DevBox devBox, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBox(Azure.WaitUntil,System.String,System.String,Azure.Developer.DevCenter.Models.DevBox,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBox As DevBox, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBox : Azure.WaitUntil * string * string * Azure.Developer.DevCenter.Models.DevBox * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.CreateDevBox : Azure.WaitUntil * string * string * Azure.Developer.DevCenter.Models.DevBox * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.CreateDevBox (waitUntil, projectName, userId, devBox, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBox" Type="Azure.Developer.DevCenter.Models.DevBox" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute the operation. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBox"> Represents the body request of a Dev Box creation. Dev Box Pool name is required. Optionally set the owner of the Dev Box as local administrator. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or replaces a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBox" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBox(WaitUntil,string,string,string,DevBox,CancellationToken)']/*" />
      </Docs>
    </Member>
    <Member MemberName="CreateDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBox(Azure.WaitUntil,System.String,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBox : Azure.WaitUntil * string * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateDevBox : Azure.WaitUntil * string * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="devBoxesClient.CreateDevBox (waitUntil, projectName, userId, devBoxName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute the operation. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or replaces a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateDevBox and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
});
Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBox with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
    localAdministrator = "Enabled",
});
Operation<BinaryData> operation = client.CreateDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt; CreateDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, Azure.Developer.DevCenter.Models.DevBox devBox, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt;&gt; CreateDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, class Azure.Developer.DevCenter.Models.DevBox devBox, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBoxAsync(Azure.WaitUntil,System.String,System.String,Azure.Developer.DevCenter.Models.DevBox,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBox As DevBox, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of DevBox))" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBoxAsync : Azure.WaitUntil * string * string * Azure.Developer.DevCenter.Models.DevBox * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;&#xA;override this.CreateDevBoxAsync : Azure.WaitUntil * string * string * Azure.Developer.DevCenter.Models.DevBox * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;" Usage="devBoxesClient.CreateDevBoxAsync (waitUntil, projectName, userId, devBox, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBox" Type="Azure.Developer.DevCenter.Models.DevBox" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute the operation. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBox"> Represents the body request of a Dev Box creation. Dev Box Pool name is required. Optionally set the owner of the Dev Box as local administrator. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or replaces a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBox" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="Docs/DevBoxesClient.xml" path="doc/members/member[@name='CreateDevBoxAsync(WaitUntil,string,string,string,DevBox,CancellationToken)']/*" />
      </Docs>
    </Member>
    <Member MemberName="CreateDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.CreateDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="devBoxesClient.CreateDevBoxAsync (waitUntil, projectName, userId, devBoxName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute the operation. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates or replaces a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateDevBoxAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
});
Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call CreateDevBoxAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    poolName = "<poolName>",
    localAdministrator = "Enabled",
});
Operation<BinaryData> operation = await client.CreateDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DelayAction (string projectName, string userId, string devBoxName, string actionName, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DelayAction(string projectName, string userId, string devBoxName, string actionName, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAction(System.String,System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAction (projectName As String, userId As String, devBoxName As String, actionName As String, delayUntil As DateTimeOffset, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member DelayAction : string * string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DelayAction : string * string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.DelayAction (projectName, userId, devBoxName, actionName, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays the occurrence of an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAction(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call DelayAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt; DelayAction (string projectName, string userId, string devBoxName, string actionName, DateTimeOffset delayUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt; DelayAction(string projectName, string userId, string devBoxName, string actionName, valuetype System.DateTimeOffset delayUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAction(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAction (projectName As String, userId As String, devBoxName As String, actionName As String, delayUntil As DateTimeOffset, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DevBoxAction)" />
      <MemberSignature Language="F#" Value="abstract member DelayAction : string * string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&#xA;override this.DelayAction : string * string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;" Usage="devBoxesClient.DelayAction (projectName, userId, devBoxName, actionName, delayUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delays the occurrence of an action. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DelayAction.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code>
This sample shows how to call DelayAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = client.DelayAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DelayActionAsync (string projectName, string userId, string devBoxName, string actionName, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DelayActionAsync(string projectName, string userId, string devBoxName, string actionName, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayActionAsync(System.String,System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayActionAsync (projectName As String, userId As String, devBoxName As String, actionName As String, delayUntil As DateTimeOffset, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DelayActionAsync : string * string * string * string * DateTimeOffset * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DelayActionAsync : string * string * string * string * DateTimeOffset * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.DelayActionAsync (projectName, userId, devBoxName, actionName, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays the occurrence of an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.DelayActionAsync(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call DelayActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt; DelayActionAsync (string projectName, string userId, string devBoxName, string actionName, DateTimeOffset delayUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt; DelayActionAsync(string projectName, string userId, string devBoxName, string actionName, valuetype System.DateTimeOffset delayUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayActionAsync(System.String,System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayActionAsync (projectName As String, userId As String, devBoxName As String, actionName As String, delayUntil As DateTimeOffset, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DevBoxAction))" />
      <MemberSignature Language="F#" Value="abstract member DelayActionAsync : string * string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;&#xA;override this.DelayActionAsync : string * string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;" Usage="devBoxesClient.DelayActionAsync (projectName, userId, devBoxName, actionName, delayUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delays the occurrence of an action. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DelayActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code>
This sample shows how to call DelayActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = await client.DelayActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAllActions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; DelayAllActions (string projectName, string userId, string devBoxName, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; DelayAllActions(string projectName, string userId, string devBoxName, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActions(System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAllActions (projectName As String, userId As String, devBoxName As String, delayUntil As DateTimeOffset, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DelayAllActions : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.DelayAllActions : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.DelayAllActions (projectName, userId, devBoxName, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays all actions.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActions(System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayAllActions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
}
]]></code>
This sample shows how to call DelayAllActions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAllActions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt; DelayAllActions (string projectName, string userId, string devBoxName, DateTimeOffset delayUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt; DelayAllActions(string projectName, string userId, string devBoxName, valuetype System.DateTimeOffset delayUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActions(System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAllActions (projectName As String, userId As String, devBoxName As String, delayUntil As DateTimeOffset, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBoxActionDelayResult)" />
      <MemberSignature Language="F#" Value="abstract member DelayAllActions : string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;&#xA;override this.DelayAllActions : string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;" Usage="devBoxesClient.DelayAllActions (projectName, userId, devBoxName, delayUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delays all actions. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DelayAllActions.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxActionDelayResult item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z")))
{
}
]]></code>
This sample shows how to call DelayAllActions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxActionDelayResult item in client.DelayAllActions("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z")))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAllActionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; DelayAllActionsAsync (string projectName, string userId, string devBoxName, DateTimeOffset delayUntil, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; DelayAllActionsAsync(string projectName, string userId, string devBoxName, valuetype System.DateTimeOffset delayUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActionsAsync(System.String,System.String,System.String,System.DateTimeOffset,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAllActionsAsync (projectName As String, userId As String, devBoxName As String, delayUntil As DateTimeOffset, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DelayAllActionsAsync : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.DelayAllActionsAsync : string * string * string * DateTimeOffset * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.DelayAllActionsAsync (projectName, userId, devBoxName, delayUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delays all actions.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActionsAsync(System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DelayAllActionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
}
]]></code>
This sample shows how to call DelayAllActionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("result").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("action").GetProperty("next").GetProperty("scheduledTime").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DelayAllActionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt; DelayAllActionsAsync (string projectName, string userId, string devBoxName, DateTimeOffset delayUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt; DelayAllActionsAsync(string projectName, string userId, string devBoxName, valuetype System.DateTimeOffset delayUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DelayAllActionsAsync(System.String,System.String,System.String,System.DateTimeOffset,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DelayAllActionsAsync (projectName As String, userId As String, devBoxName As String, delayUntil As DateTimeOffset, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBoxActionDelayResult)" />
      <MemberSignature Language="F#" Value="abstract member DelayAllActionsAsync : string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;&#xA;override this.DelayAllActionsAsync : string * string * string * DateTimeOffset * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;" Usage="devBoxesClient.DelayAllActionsAsync (projectName, userId, devBoxName, delayUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxActionDelayResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="delayUntil" Type="System.DateTimeOffset" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="delayUntil"> The time to delay the Dev Box action or actions until. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delays all actions. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DelayAllActionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxActionDelayResult item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z")))
{
}
]]></code>
This sample shows how to call DelayAllActionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxActionDelayResult item in client.DelayAllActionsAsync("<projectName>", "<userId>", "<devBoxName>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z")))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation DeleteDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation DeleteDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DeleteDevBox(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member DeleteDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.DeleteDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.DeleteDevBox (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call DeleteDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.DeleteDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeleteDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeleteDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.DeleteDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeleteDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.DeleteDevBoxAsync (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call DeleteDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.DeleteDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllDevBoxes (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllDevBoxes(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxes(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxes (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxes : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxes : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetAllDevBoxes context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes that the caller has access to in the DevCenter.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxes(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllDevBoxes(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetAllDevBoxes with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllDevBoxes(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxes (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxes(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxes(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxes (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxes : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetAllDevBoxes : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetAllDevBoxes cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes that the caller has access to in the DevCenter. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetAllDevBoxes.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetAllDevBoxes())
{
}
]]></code>
This sample shows how to call GetAllDevBoxes with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetAllDevBoxes())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllDevBoxesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetAllDevBoxesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes that the caller has access to in the DevCenter.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllDevBoxesAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetAllDevBoxesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllDevBoxesAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetAllDevBoxesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetAllDevBoxesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes that the caller has access to in the DevCenter. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetAllDevBoxesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetAllDevBoxesAsync())
{
}
]]></code>
This sample shows how to call GetAllDevBoxesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetAllDevBoxesAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllDevBoxesByUser (string userId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesByUser(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUser(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUser (userId As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUser : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesByUser : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetAllDevBoxesByUser (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the Dev Center for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUser(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUser and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllDevBoxesByUser("<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetAllDevBoxesByUser with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetAllDevBoxesByUser("<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesByUser (string userId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesByUser(string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUser(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUser (userId As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUser : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetAllDevBoxesByUser : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetAllDevBoxesByUser (userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes in the Dev Center for a particular user. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUser.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetAllDevBoxesByUser("<userId>"))
{
}
]]></code>
This sample shows how to call GetAllDevBoxesByUser with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetAllDevBoxesByUser("<userId>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUserAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllDevBoxesByUserAsync (string userId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesByUserAsync(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUserAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUserAsync (userId As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUserAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesByUserAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetAllDevBoxesByUserAsync (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the Dev Center for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUserAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUserAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllDevBoxesByUserAsync("<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetAllDevBoxesByUserAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetAllDevBoxesByUserAsync("<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUserAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesByUserAsync (string userId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetAllDevBoxesByUserAsync(string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetAllDevBoxesByUserAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUserAsync (userId As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUserAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetAllDevBoxesByUserAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetAllDevBoxesByUserAsync (userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes in the Dev Center for a particular user. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetAllDevBoxesByUserAsync("<userId>"))
{
}
]]></code>
This sample shows how to call GetAllDevBoxesByUserAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetAllDevBoxesByUserAsync("<userId>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDevBox (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDevBox(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBox(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBox (projectName As String, userId As String, devBoxName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDevBox : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDevBox : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetDevBox (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBox(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBox and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBox with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBox (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBox(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBox(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBox (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBox : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetDevBox : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetDevBox (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBox> response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call GetDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBox> response = client.GetDevBox("<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDevBoxAction (string projectName, string userId, string devBoxName, string actionName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDevBoxAction(string projectName, string userId, string devBoxName, string actionName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAction(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxAction (projectName As String, userId As String, devBoxName As String, actionName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxAction : string * string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDevBoxAction : string * string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetDevBoxAction (projectName, userId, devBoxName, actionName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAction(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxAction and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call GetDevBoxAction with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxAction (string projectName, string userId, string devBoxName, string actionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxAction(string projectName, string userId, string devBoxName, string actionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAction(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxAction (projectName As String, userId As String, devBoxName As String, actionName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DevBoxAction)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxAction : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&#xA;override this.GetDevBoxAction : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;" Usage="devBoxesClient.GetDevBoxAction (projectName, userId, devBoxName, actionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an action. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxAction.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
]]></code>
This sample shows how to call GetDevBoxAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = client.GetDevBoxAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDevBoxActionAsync (string projectName, string userId, string devBoxName, string actionName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDevBoxActionAsync(string projectName, string userId, string devBoxName, string actionName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionAsync(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActionAsync (projectName As String, userId As String, devBoxName As String, actionName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActionAsync : string * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDevBoxActionAsync : string * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetDevBoxActionAsync (projectName, userId, devBoxName, actionName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxActionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
]]></code>
This sample shows how to call GetDevBoxActionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("actionType").ToString());
Console.WriteLine(result.GetProperty("sourceId").ToString());
Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt; GetDevBoxActionAsync (string projectName, string userId, string devBoxName, string actionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt; GetDevBoxActionAsync(string projectName, string userId, string devBoxName, string actionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActionAsync (projectName As String, userId As String, devBoxName As String, actionName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DevBoxAction))" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActionAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;&#xA;override this.GetDevBoxActionAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;" Usage="devBoxesClient.GetDevBoxActionAsync (projectName, userId, devBoxName, actionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an action. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
]]></code>
This sample shows how to call GetDevBoxActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxAction> response = await client.GetDevBoxActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDevBoxActions (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDevBoxActions(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActions(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActions (projectName As String, userId As String, devBoxName As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActions : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxActions : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxActions (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists actions on a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActions(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxActions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
This sample shows how to call GetDevBoxActions with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxActions (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxActions(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActions(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActions (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBoxAction)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActions : string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&#xA;override this.GetDevBoxActions : string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;" Usage="devBoxesClient.GetDevBoxActions (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists actions on a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxActions.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxAction item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>"))
{
}
]]></code>
This sample shows how to call GetDevBoxActions with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxAction item in client.GetDevBoxActions("<projectName>", "<userId>", "<devBoxName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDevBoxActionsAsync (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDevBoxActionsAsync(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionsAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActionsAsync (projectName As String, userId As String, devBoxName As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActionsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxActionsAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxActionsAsync (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists actions on a Dev Box.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxActionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
}
]]></code>
This sample shows how to call GetDevBoxActionsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("actionType").ToString());
    Console.WriteLine(result.GetProperty("sourceId").ToString());
    Console.WriteLine(result.GetProperty("suspendedUntil").ToString());
    Console.WriteLine(result.GetProperty("next").GetProperty("scheduledTime").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxActionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxActionsAsync (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxAction&gt; GetDevBoxActionsAsync(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxActionsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxActionsAsync (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBoxAction)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxActionsAsync : string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;&#xA;override this.GetDevBoxActionsAsync : string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;" Usage="devBoxesClient.GetDevBoxActionsAsync (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxAction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists actions on a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxActionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxAction item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>"))
{
}
]]></code>
This sample shows how to call GetDevBoxActionsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxAction item in client.GetDevBoxActionsAsync("<projectName>", "<userId>", "<devBoxName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDevBoxAsync (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDevBoxAsync(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxAsync (projectName As String, userId As String, devBoxName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDevBoxAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetDevBoxAsync (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
]]></code>
This sample shows how to call GetDevBoxAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("projectName").ToString());
Console.WriteLine(result.GetProperty("poolName").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("provisioningState").ToString());
Console.WriteLine(result.GetProperty("actionState").ToString());
Console.WriteLine(result.GetProperty("powerState").ToString());
Console.WriteLine(result.GetProperty("uniqueId").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("user").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("createdTime").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt; GetDevBoxAsync (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt;&gt; GetDevBoxAsync(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxAsync (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DevBox))" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;&#xA;override this.GetDevBoxAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;" Usage="devBoxesClient.GetDevBoxAsync (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a Dev Box. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBox> response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call GetDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBox> response = await client.GetDevBoxAsync("<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDevBoxes (string projectName, string userId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDevBoxes(string projectName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxes(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxes (projectName As String, userId As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxes : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxes : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxes (projectName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the project for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxes(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetDevBoxes("<projectName>", "<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxes with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetDevBoxes("<projectName>", "<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBoxes (string projectName, string userId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBoxes(string projectName, string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxes(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxes (projectName As String, userId As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxes : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetDevBoxes : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetDevBoxes (projectName, userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes in the project for a particular user. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxes.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetDevBoxes("<projectName>", "<userId>"))
{
}
]]></code>
This sample shows how to call GetDevBoxes with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBox item in client.GetDevBoxes("<projectName>", "<userId>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDevBoxesAsync (string projectName, string userId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDevBoxesAsync(string projectName, string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxesAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxesAsync (projectName As String, userId As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDevBoxesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetDevBoxesAsync (projectName, userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the project for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxesAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDevBoxesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetDevBoxesAsync("<projectName>", "<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
}
]]></code>
This sample shows how to call GetDevBoxesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetDevBoxesAsync("<projectName>", "<userId>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("target").ToString());
    Console.WriteLine(result.GetProperty("error").GetProperty("innererror").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDevBoxesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBoxesAsync (string projectName, string userId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBox&gt; GetDevBoxesAsync(string projectName, string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxesAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDevBoxesAsync (projectName As String, userId As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBox)" />
      <MemberSignature Language="F#" Value="abstract member GetDevBoxesAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;&#xA;override this.GetDevBoxesAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;" Usage="devBoxesClient.GetDevBoxesAsync (projectName, userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBox&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists Dev Boxes in the project for a particular user. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDevBoxesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetDevBoxesAsync("<projectName>", "<userId>"))
{
}
]]></code>
This sample shows how to call GetDevBoxesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBox item in client.GetDevBoxesAsync("<projectName>", "<userId>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetPool (string projectName, string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetPool(string projectName, string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPool(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPool (projectName As String, poolName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetPool : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetPool : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetPool (projectName, poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a pool
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetPool(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetPool("<projectName>", "<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code>
This sample shows how to call GetPool with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetPool("<projectName>", "<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPool (string projectName, string poolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPool(string projectName, string poolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPool(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPool (projectName As String, poolName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DevBoxPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPool : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&#xA;override this.GetPool : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;" Usage="devBoxesClient.GetPool (projectName, poolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxPool> response = client.GetPool("<projectName>", "<poolName>");
]]></code>
This sample shows how to call GetPool with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxPool> response = client.GetPool("<projectName>", "<poolName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetPoolAsync (string projectName, string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetPoolAsync(string projectName, string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolAsync (projectName As String, poolName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetPoolAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetPoolAsync (projectName, poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a pool
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code>
This sample shows how to call GetPoolAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetPoolAsync("<projectName>", "<poolName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("location").ToString());
Console.WriteLine(result.GetProperty("osType").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
Console.WriteLine(result.GetProperty("localAdministrator").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
Console.WriteLine(result.GetProperty("healthStatus").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&gt; GetPoolAsync (string projectName, string poolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxPool&gt;&gt; GetPoolAsync(string projectName, string poolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolAsync (projectName As String, poolName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DevBoxPool))" />
      <MemberSignature Language="F#" Value="abstract member GetPoolAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&gt;&#xA;override this.GetPoolAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&gt;" Usage="devBoxesClient.GetPoolAsync (projectName, poolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxPool> response = await client.GetPoolAsync("<projectName>", "<poolName>");
]]></code>
This sample shows how to call GetPoolAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxPool> response = await client.GetPoolAsync("<projectName>", "<poolName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetPools (string projectName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetPools(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPools(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPools (projectName As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPools : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetPools : string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetPools (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available pools
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetPools(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPools and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetPools("<projectName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
This sample shows how to call GetPools with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetPools("<projectName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPools (string projectName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPools(string projectName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPools(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPools (projectName As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBoxPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPools : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&#xA;override this.GetPools : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;" Usage="devBoxesClient.GetPools (projectName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists available pools. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPools.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxPool item in client.GetPools("<projectName>"))
{
}
]]></code>
This sample shows how to call GetPools with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxPool item in client.GetPools("<projectName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetPoolsAsync (string projectName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetPoolsAsync(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolsAsync (projectName As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolsAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetPoolsAsync : string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetPoolsAsync (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available pools
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolsAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetPoolsAsync("<projectName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("stopOnDisconnect").GetProperty("gracePeriodMinutes").ToString());
    Console.WriteLine(result.GetProperty("healthStatus").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPoolsAsync (string projectName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxPool&gt; GetPoolsAsync(string projectName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetPoolsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolsAsync (projectName As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBoxPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;&#xA;override this.GetPoolsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;" Usage="devBoxesClient.GetPoolsAsync (projectName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists available pools. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPoolsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxPool item in client.GetPoolsAsync("<projectName>"))
{
}
]]></code>
This sample shows how to call GetPoolsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxPool item in client.GetPoolsAsync("<projectName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRemoteConnection (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRemoteConnection(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnection(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnection (projectName As String, userId As String, devBoxName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnection : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRemoteConnection : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetRemoteConnection (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets RDP Connection info
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnection(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRemoteConnection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnection with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt; GetRemoteConnection (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.RemoteConnection&gt; GetRemoteConnection(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnection(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnection (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RemoteConnection)" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnection : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;&#xA;override this.GetRemoteConnection : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;" Usage="devBoxesClient.GetRemoteConnection (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets RDP Connection info. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRemoteConnection.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<RemoteConnection> response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call GetRemoteConnection with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<RemoteConnection> response = client.GetRemoteConnection("<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRemoteConnectionAsync (string projectName, string userId, string devBoxName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRemoteConnectionAsync(string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnectionAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnectionAsync (projectName As String, userId As String, devBoxName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnectionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRemoteConnectionAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetRemoteConnectionAsync (projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets RDP Connection info
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnectionAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRemoteConnectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("webUrl").ToString());
Console.WriteLine(result.GetProperty("rdpConnectionUrl").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRemoteConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;&gt; GetRemoteConnectionAsync (string projectName, string userId, string devBoxName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.RemoteConnection&gt;&gt; GetRemoteConnectionAsync(string projectName, string userId, string devBoxName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetRemoteConnectionAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRemoteConnectionAsync (projectName As String, userId As String, devBoxName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RemoteConnection))" />
      <MemberSignature Language="F#" Value="abstract member GetRemoteConnectionAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;&gt;&#xA;override this.GetRemoteConnectionAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;&gt;" Usage="devBoxesClient.GetRemoteConnectionAsync (projectName, userId, devBoxName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.RemoteConnection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> The name of a Dev Box. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets RDP Connection info. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRemoteConnectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<RemoteConnection> response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call GetRemoteConnectionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<RemoteConnection> response = await client.GetRemoteConnectionAsync("<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSchedule (string projectName, string poolName, string scheduleName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSchedule(string projectName, string poolName, string scheduleName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedule(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedule (projectName As String, poolName As String, scheduleName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSchedule : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSchedule : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.GetSchedule (projectName, poolName, scheduleName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="scheduleName"> Display name for the Schedule. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedule(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
This sample shows how to call GetSchedule with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedule (string projectName, string poolName, string scheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedule(string projectName, string poolName, string scheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedule(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedule (projectName As String, poolName As String, scheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DevBoxSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedule : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&#xA;override this.GetSchedule : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;" Usage="devBoxesClient.GetSchedule (projectName, poolName, scheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="scheduleName"> Display name for the Schedule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxSchedule> response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>");
]]></code>
This sample shows how to call GetSchedule with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxSchedule> response = client.GetSchedule("<projectName>", "<poolName>", "<scheduleName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetScheduleAsync (string projectName, string poolName, string scheduleName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetScheduleAsync(string projectName, string poolName, string scheduleName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetScheduleAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduleAsync (projectName As String, poolName As String, scheduleName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetScheduleAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetScheduleAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.GetScheduleAsync (projectName, poolName, scheduleName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="scheduleName"> Display name for the Schedule. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetScheduleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code>
This sample shows how to call GetScheduleAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("frequency").ToString());
Console.WriteLine(result.GetProperty("time").ToString());
Console.WriteLine(result.GetProperty("timeZone").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&gt; GetScheduleAsync (string projectName, string poolName, string scheduleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&gt; GetScheduleAsync(string projectName, string poolName, string scheduleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetScheduleAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduleAsync (projectName As String, poolName As String, scheduleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DevBoxSchedule))" />
      <MemberSignature Language="F#" Value="abstract member GetScheduleAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&gt;&#xA;override this.GetScheduleAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&gt;" Usage="devBoxesClient.GetScheduleAsync (projectName, poolName, scheduleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="scheduleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="scheduleName"> Display name for the Schedule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="poolName" /> or <paramref name="scheduleName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxSchedule> response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>");
]]></code>
This sample shows how to call GetScheduleAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response<DevBoxSchedule> response = await client.GetScheduleAsync("<projectName>", "<poolName>", "<scheduleName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSchedules (string projectName, string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSchedules(string projectName, string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedules(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedules (projectName As String, poolName As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedules : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSchedules : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetSchedules (projectName, poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available schedules for a pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedules(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetSchedules("<projectName>", "<poolName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
This sample shows how to call GetSchedules with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (BinaryData item in client.GetSchedules("<projectName>", "<poolName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedules (string projectName, string poolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedules(string projectName, string poolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedules(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedules (projectName As String, poolName As String, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DevBoxSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedules : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&#xA;override this.GetSchedules : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;" Usage="devBoxesClient.GetSchedules (projectName, poolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists available schedules for a pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxSchedule item in client.GetSchedules("<projectName>", "<poolName>"))
{
}
]]></code>
This sample shows how to call GetSchedules with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

foreach (DevBoxSchedule item in client.GetSchedules("<projectName>", "<poolName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSchedulesAsync (string projectName, string poolName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSchedulesAsync(string projectName, string poolName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedulesAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedulesAsync (projectName As String, poolName As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedulesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSchedulesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devBoxesClient.GetSchedulesAsync (projectName, poolName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists available schedules for a pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedulesAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetSchedulesAsync("<projectName>", "<poolName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code>
This sample shows how to call GetSchedulesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (BinaryData item in client.GetSchedulesAsync("<projectName>", "<poolName>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("frequency").ToString());
    Console.WriteLine(result.GetProperty("time").ToString());
    Console.WriteLine(result.GetProperty("timeZone").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedulesAsync (string projectName, string poolName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Developer.DevCenter.Models.DevBoxSchedule&gt; GetSchedulesAsync(string projectName, string poolName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.GetSchedulesAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSchedulesAsync (projectName As String, poolName As String, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DevBoxSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetSchedulesAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;&#xA;override this.GetSchedulesAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;" Usage="devBoxesClient.GetSchedulesAsync (projectName, poolName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Developer.DevCenter.Models.DevBoxSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="poolName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="poolName"> Pool name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists available schedules for a pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="poolName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxSchedule item in client.GetSchedulesAsync("<projectName>", "<poolName>"))
{
}
]]></code>
This sample shows how to call GetSchedulesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

await foreach (DevBoxSchedule item in client.GetSchedulesAsync("<projectName>", "<poolName>"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Developer.DevCenter.DevBoxesClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Developer.DevCenter.DevBoxesClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestartDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation RestartDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation RestartDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.RestartDevBox(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RestartDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member RestartDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.RestartDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.RestartDevBox (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Restarts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RestartDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call RestartDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.RestartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RestartDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; RestartDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; RestartDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.RestartDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RestartDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member RestartDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.RestartDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.RestartDevBoxAsync (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Restarts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RestartDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call RestartDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.RestartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SkipAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SkipAction (string projectName, string userId, string devBoxName, string actionName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SkipAction(string projectName, string userId, string devBoxName, string actionName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.SkipAction(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SkipAction (projectName As String, userId As String, devBoxName As String, actionName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SkipAction : string * string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SkipAction : string * string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="devBoxesClient.SkipAction (projectName, userId, devBoxName, actionName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Skips an occurrence of an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SkipAction.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipAction with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = client.SkipAction("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SkipActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SkipActionAsync (string projectName, string userId, string devBoxName, string actionName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SkipActionAsync(string projectName, string userId, string devBoxName, string actionName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.SkipActionAsync(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SkipActionAsync (projectName As String, userId As String, devBoxName As String, actionName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SkipActionAsync : string * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SkipActionAsync : string * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devBoxesClient.SkipActionAsync (projectName, userId, devBoxName, actionName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="actionName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="actionName"> The name of the action. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Skips an occurrence of an action.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" />, <paramref name="devBoxName" /> or <paramref name="actionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SkipActionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SkipActionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Response response = await client.SkipActionAsync("<projectName>", "<userId>", "<devBoxName>", "<actionName>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation StartDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation StartDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StartDevBox(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member StartDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.StartDevBox : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.StartDevBox (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call StartDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.StartDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; StartDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; StartDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StartDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member StartDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.StartDevBoxAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.StartDevBoxAsync (waitUntil, projectName, userId, devBoxName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call StartDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.StartDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopDevBox">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation StopDevBox (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, bool? hibernate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation StopDevBox(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, valuetype System.Nullable`1&lt;bool&gt; hibernate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StopDevBox(Azure.WaitUntil,System.String,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopDevBox (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional hibernate As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member StopDevBox : Azure.WaitUntil * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.StopDevBox : Azure.WaitUntil * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Operation" Usage="devBoxesClient.StopDevBox (waitUntil, projectName, userId, devBoxName, hibernate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="hibernate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopDevBox.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call StopDevBox with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = client.StopDevBox(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", hibernate: true);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopDevBoxAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; StopDevBoxAsync (Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, bool? hibernate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; StopDevBoxAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string userId, string devBoxName, valuetype System.Nullable`1&lt;bool&gt; hibernate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevBoxesClient.StopDevBoxAsync(Azure.WaitUntil,System.String,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopDevBoxAsync (waitUntil As WaitUntil, projectName As String, userId As String, devBoxName As String, Optional hibernate As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member StopDevBoxAsync : Azure.WaitUntil * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.StopDevBoxAsync : Azure.WaitUntil * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="devBoxesClient.StopDevBoxAsync (waitUntil, projectName, userId, devBoxName, hibernate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="devBoxName" Type="System.String" />
        <Parameter Name="hibernate" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> Name of the project. </param>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. </param>
        <param name="devBoxName"> Display name for the Dev Box. </param>
        <param name="hibernate"> Optional parameter to hibernate the dev box. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops a Dev Box
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="userId" /> or <paramref name="devBoxName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopDevBoxAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>");
]]></code>
This sample shows how to call StopDevBoxAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
DevBoxesClient client = new DevBoxesClient(endpoint, credential);

Operation operation = await client.StopDevBoxAsync(WaitUntil.Completed, "<projectName>", "<userId>", "<devBoxName>", hibernate: true);
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
