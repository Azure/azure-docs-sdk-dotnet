<Type Name="DevCenterClient" FullName="Azure.Developer.DevCenter.DevCenterClient">
  <TypeSignature Language="C#" Value="public class DevCenterClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DevCenterClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Developer.DevCenter.DevCenterClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DevCenterClient" />
  <TypeSignature Language="F#" Value="type DevCenterClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The DevCenter service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DevCenterClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of DevCenterClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevCenterClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevCenterClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Developer.DevCenter.DevCenterClient" Usage="new Azure.Developer.DevCenter.DevCenterClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of DevCenterClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DevCenterClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Developer.DevCenter.DevCenterClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Developer.DevCenter.DevCenterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Developer.DevCenter.DevCenterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As DevCenterClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Developer.DevCenter.DevCenterClient : Uri * Azure.Core.TokenCredential * Azure.Developer.DevCenter.DevCenterClientOptions -&gt; Azure.Developer.DevCenter.DevCenterClient" Usage="new Azure.Developer.DevCenter.DevCenterClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Developer.DevCenter.DevCenterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The DevCenter-specific URI to operate on. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of DevCenterClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllDevBoxes (string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllDevBoxes(string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetAllDevBoxes(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxes (filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxes : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxes : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devCenterClient.GetAllDevBoxes (filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes that the caller has access to in the DevCenter.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxes with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

foreach (var item in client.GetAllDevBoxes("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllDevBoxesAsync (string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesAsync(string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetAllDevBoxesAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesAsync (filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devCenterClient.GetAllDevBoxesAsync (filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes that the caller has access to in the DevCenter.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

await foreach (var item in client.GetAllDevBoxesAsync("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAllDevBoxesByUser (string userId, string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesByUser(string userId, string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetAllDevBoxesByUser(System.String,System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUser (userId As String, filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUser : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesByUser : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devCenterClient.GetAllDevBoxesByUser (userId, filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the Dev Center for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUser with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

foreach (var item in client.GetAllDevBoxesByUser("<userId>", "<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAllDevBoxesByUserAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAllDevBoxesByUserAsync (string userId, string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAllDevBoxesByUserAsync(string userId, string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetAllDevBoxesByUserAsync(System.String,System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllDevBoxesByUserAsync (userId As String, filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllDevBoxesByUserAsync : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAllDevBoxesByUserAsync : string * string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devCenterClient.GetAllDevBoxesByUserAsync (userId, filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The AAD object id of the user. If value is 'me', the identity is taken from the authentication context. The default value is "me". </param>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists Dev Boxes in the Dev Center for a particular user.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>DevBoxListResultValue</c>:
<code>{
  name: string, # Optional. Display name for the Dev Box
  projectName: string, # Optional. Name of the project this Dev Box belongs to
  poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
  hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
  provisioningState: string, # Optional. The current provisioning state of the Dev Box.
  actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
  powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
  uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
  errorDetails: {
    code: string, # Optional. The error code.
    message: string, # Optional. The error message.
  }, # Optional. Provisioning or action error details. Populated only for error states.
  location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
  osType: "Windows", # Optional. The operating system type of this Dev Box.
  user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
  hardwareProfile: {
    skuName: string, # Optional. The name of the SKU
    vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
    memoryGB: number, # Optional. The amount of memory available for the Dev Box.
  }, # Optional. Information about the Dev Box's hardware resources
  storageProfile: {
    osDisk: {
      diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
    }, # Optional. Settings for the operating system disk.
  }, # Optional. Storage settings for this Dev Box
  imageReference: {
    name: string, # Optional. The name of the image used.
    version: string, # Optional. The version of the image.
    operatingSystem: string, # Optional. The operating system of the image.
    osBuildNumber: string, # Optional. The operating system build number of the image.
    publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
  }, # Optional. Information about the image used for this Dev Box
  createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
  localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetAllDevBoxesByUserAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

await foreach (var item in client.GetAllDevBoxesByUserAsync("<userId>", "<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("projectName").ToString());
    Console.WriteLine(result.GetProperty("poolName").ToString());
    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());
    Console.WriteLine(result.GetProperty("provisioningState").ToString());
    Console.WriteLine(result.GetProperty("actionState").ToString());
    Console.WriteLine(result.GetProperty("powerState").ToString());
    Console.WriteLine(result.GetProperty("uniqueId").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("location").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("user").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());
    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());
    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());
    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());
    Console.WriteLine(result.GetProperty("createdTime").ToString());
    Console.WriteLine(result.GetProperty("localAdministrator").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetProject (string projectName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetProject(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetProject(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProject (projectName As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetProject : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetProject : string * Azure.RequestContext -&gt; Azure.Response" Usage="devCenterClient.GetProject (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a project.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  name: string, # Optional. Name of the project
  description: string, # Optional. Description of the project.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetProject with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

Response response = client.GetProject("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetProjectAsync (string projectName, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetProjectAsync(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetProjectAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectAsync (projectName As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetProjectAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="devCenterClient.GetProjectAsync (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The DevCenter Project upon which to execute operations. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a project.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Project</c>:
<code>{
  name: string, # Optional. Name of the project
  description: string, # Optional. Description of the project.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetProjectAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

Response response = await client.GetProjectAsync("<projectName>", new RequestContext());

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetProjects">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetProjects (string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetProjects(string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetProjects(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjects (filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjects : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetProjects : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="devCenterClient.GetProjects (filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all projects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProjectListResultValue</c>:
<code>{
  name: string, # Optional. Name of the project
  description: string, # Optional. Description of the project.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetProjects with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

foreach (var item in client.GetProjects("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetProjectsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetProjectsAsync (string filter, int? maxCount, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetProjectsAsync(string filter, valuetype System.Nullable`1&lt;int32&gt; maxCount, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Developer.DevCenter.DevCenterClient.GetProjectsAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectsAsync (filter As String, maxCount As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetProjectsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="devCenterClient.GetProjectsAsync (filter, maxCount, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="maxCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter clause to apply to the operation. </param>
        <param name="maxCount"> The maximum number of resources to return from the operation. Example: 'top=10'. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all projects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>ProjectListResultValue</c>:
<code>{
  name: string, # Optional. Name of the project
  description: string, # Optional. Description of the project.
}
</code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetProjectsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new DevCenterClient(endpoint, credential);

await foreach (var item in client.GetProjectsAsync("<filter>", 1234, new RequestContext()))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Developer.DevCenter.DevCenterClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Developer.DevCenter.DevCenterClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Developer.DevCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
