<Type Name="AnalyzeTextOptions" FullName="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions">
  <TypeSignature Language="C#" Value="public class AnalyzeTextOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AnalyzeTextOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class AnalyzeTextOptions" />
  <TypeSignature Language="F#" Value="type AnalyzeTextOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Search.Documents</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Specifies some text and analysis components used to break that text into tokens. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnalyzeTextOptions (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions : string -&gt; Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions" Usage="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"> The text to break into tokens. </param>
        <summary> Initializes a new instance of AnalyzeTextOptions. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnalyzeTextOptions (string text, Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName analyzerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, valuetype Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName analyzerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.#ctor(System.String,Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, analyzerName As LexicalAnalyzerName)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions : string * Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName -&gt; Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions" Usage="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions (text, analyzerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="analyzerName" Type="Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName" />
      </Parameters>
      <Docs>
        <param name="text">Required text to break into tokens.</param>
        <param name="analyzerName">The name of the analyzer to use to break the given <paramref name="text" />.</param>
        <summary>
            Initializes a new instance of AnalyzeRequest.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AnalyzeTextOptions (string text, Azure.Search.Documents.Indexes.Models.LexicalTokenizerName tokenizerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, valuetype Azure.Search.Documents.Indexes.Models.LexicalTokenizerName tokenizerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.#ctor(System.String,Azure.Search.Documents.Indexes.Models.LexicalTokenizerName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, tokenizerName As LexicalTokenizerName)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions : string * Azure.Search.Documents.Indexes.Models.LexicalTokenizerName -&gt; Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions" Usage="new Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions (text, tokenizerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="tokenizerName" Type="Azure.Search.Documents.Indexes.Models.LexicalTokenizerName" />
      </Parameters>
      <Docs>
        <param name="text">Required text to break into tokens.</param>
        <param name="tokenizerName">The name of the tokenizer to use to break the given <paramref name="text" />.</param>
        <summary>
            Initializes a new instance of AnalyzeRequest.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzerName">
      <MemberSignature Language="C#" Value="public Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName? AnalyzerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName&gt; AnalyzerName" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.AnalyzerName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AnalyzerName As Nullable(Of LexicalAnalyzerName)" />
      <MemberSignature Language="F#" Value="member this.AnalyzerName : Nullable&lt;Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName&gt;" Usage="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.AnalyzerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.Search.Documents.Indexes.Models.LexicalAnalyzerName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; CharFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; CharFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.CharFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharFilters As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.CharFilters : System.Collections.Generic.IList&lt;string&gt;" Usage="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.CharFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The text to break into tokens. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.TokenFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenFilters As IList(Of TokenFilterName)" />
      <MemberSignature Language="F#" Value="member this.TokenFilters : System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;" Usage="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.TokenFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizerName">
      <MemberSignature Language="C#" Value="public Azure.Search.Documents.Indexes.Models.LexicalTokenizerName? TokenizerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.Search.Documents.Indexes.Models.LexicalTokenizerName&gt; TokenizerName" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.TokenizerName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenizerName As Nullable(Of LexicalTokenizerName)" />
      <MemberSignature Language="F#" Value="member this.TokenizerName : Nullable&lt;Azure.Search.Documents.Indexes.Models.LexicalTokenizerName&gt;" Usage="Azure.Search.Documents.Indexes.Models.AnalyzeTextOptions.TokenizerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.Search.Documents.Indexes.Models.LexicalTokenizerName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
