<Type Name="CustomAnalyzer" FullName="Azure.Search.Documents.Indexes.Models.CustomAnalyzer">
  <TypeSignature Language="C#" Value="public class CustomAnalyzer : Azure.Search.Documents.Indexes.Models.LexicalAnalyzer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomAnalyzer extends Azure.Search.Documents.Indexes.Models.LexicalAnalyzer" />
  <TypeSignature Language="DocId" Value="T:Azure.Search.Documents.Indexes.Models.CustomAnalyzer" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomAnalyzer&#xA;Inherits LexicalAnalyzer" />
  <TypeSignature Language="F#" Value="type CustomAnalyzer = class&#xA;    inherit LexicalAnalyzer" />
  <AssemblyInfo>
    <AssemblyName>Azure.Search.Documents</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Search.Documents.Indexes.Models.LexicalAnalyzer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Allows you to take control over the process of converting text into indexable/searchable tokens. It's a user-defined configuration consisting of a single predefined tokenizer and one or more filters. The tokenizer is responsible for breaking text into tokens, and the filters for modifying tokens emitted by the tokenizer. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomAnalyzer (string name, Azure.Search.Documents.Indexes.Models.LexicalTokenizerName tokenizerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype Azure.Search.Documents.Indexes.Models.LexicalTokenizerName tokenizerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.Indexes.Models.CustomAnalyzer.#ctor(System.String,Azure.Search.Documents.Indexes.Models.LexicalTokenizerName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, tokenizerName As LexicalTokenizerName)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.Indexes.Models.CustomAnalyzer : string * Azure.Search.Documents.Indexes.Models.LexicalTokenizerName -&gt; Azure.Search.Documents.Indexes.Models.CustomAnalyzer" Usage="new Azure.Search.Documents.Indexes.Models.CustomAnalyzer (name, tokenizerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tokenizerName" Type="Azure.Search.Documents.Indexes.Models.LexicalTokenizerName" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. </param>
        <param name="tokenizerName"> The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as breaking a sentence into words. </param>
        <summary> Initializes a new instance of CustomAnalyzer. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="CharFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; CharFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; CharFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.CustomAnalyzer.CharFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharFilters As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.CharFilters : System.Collections.Generic.IList&lt;string&gt;" Usage="Azure.Search.Documents.Indexes.Models.CustomAnalyzer.CharFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> A list of character filters used to prepare input text before it is processed by the tokenizer. For instance, they can replace certain characters or symbols. The filters are run in the order in which they are listed. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.CustomAnalyzer.TokenFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenFilters As IList(Of TokenFilterName)" />
      <MemberSignature Language="F#" Value="member this.TokenFilters : System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;" Usage="Azure.Search.Documents.Indexes.Models.CustomAnalyzer.TokenFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> A list of token filters used to filter out or modify the tokens generated by a tokenizer. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which they are listed. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenizerName">
      <MemberSignature Language="C#" Value="public Azure.Search.Documents.Indexes.Models.LexicalTokenizerName TokenizerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Azure.Search.Documents.Indexes.Models.LexicalTokenizerName TokenizerName" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.CustomAnalyzer.TokenizerName" />
      <MemberSignature Language="VB.NET" Value="Public Property TokenizerName As LexicalTokenizerName" />
      <MemberSignature Language="F#" Value="member this.TokenizerName : Azure.Search.Documents.Indexes.Models.LexicalTokenizerName with get, set" Usage="Azure.Search.Documents.Indexes.Models.CustomAnalyzer.TokenizerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Search.Documents.Indexes.Models.LexicalTokenizerName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The name of the tokenizer to use to divide continuous text into a sequence of tokens, such as breaking a sentence into words. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
