<Type Name="CustomNormalizer" FullName="Azure.Search.Documents.Indexes.Models.CustomNormalizer">
  <TypeSignature Language="C#" Value="public class CustomNormalizer : Azure.Search.Documents.Indexes.Models.LexicalNormalizer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomNormalizer extends Azure.Search.Documents.Indexes.Models.LexicalNormalizer" />
  <TypeSignature Language="DocId" Value="T:Azure.Search.Documents.Indexes.Models.CustomNormalizer" />
  <TypeSignature Language="VB.NET" Value="Public Class CustomNormalizer&#xA;Inherits LexicalNormalizer" />
  <TypeSignature Language="F#" Value="type CustomNormalizer = class&#xA;    inherit LexicalNormalizer" />
  <AssemblyInfo>
    <AssemblyName>Azure.Search.Documents</AssemblyName>
    <AssemblyVersion>11.4.0.0</AssemblyVersion>
    <AssemblyVersion>11.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Search.Documents.Indexes.Models.LexicalNormalizer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Allows you to configure normalization for filterable, sortable, and facetable fields, which by default operate with strict matching. This is a user-defined configuration consisting of at least one or more filters, which modify the token that is stored. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomNormalizer (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.Indexes.Models.CustomNormalizer.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.Indexes.Models.CustomNormalizer : string -&gt; Azure.Search.Documents.Indexes.Models.CustomNormalizer" Usage="new Azure.Search.Documents.Indexes.Models.CustomNormalizer name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>11.4.0.0</AssemblyVersion>
        <AssemblyVersion>11.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the normalizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. It cannot end in '.microsoft' nor '.lucene', nor be named 'asciifolding', 'standard', 'lowercase', 'uppercase', or 'elision'. </param>
        <summary> Initializes a new instance of CustomNormalizer. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CharFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.CharFilterName&gt; CharFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype Azure.Search.Documents.Indexes.Models.CharFilterName&gt; CharFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.CustomNormalizer.CharFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharFilters As IList(Of CharFilterName)" />
      <MemberSignature Language="F#" Value="member this.CharFilters : System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.CharFilterName&gt;" Usage="Azure.Search.Documents.Indexes.Models.CustomNormalizer.CharFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>11.4.0.0</AssemblyVersion>
        <AssemblyVersion>11.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.CharFilterName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> A list of character filters used to prepare input text before it is processed. For instance, they can replace certain characters or symbols. The filters are run in the order in which they are listed. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenFilters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype Azure.Search.Documents.Indexes.Models.TokenFilterName&gt; TokenFilters" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.Indexes.Models.CustomNormalizer.TokenFilters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenFilters As IList(Of TokenFilterName)" />
      <MemberSignature Language="F#" Value="member this.TokenFilters : System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;" Usage="Azure.Search.Documents.Indexes.Models.CustomNormalizer.TokenFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>11.4.0.0</AssemblyVersion>
        <AssemblyVersion>11.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Search.Documents.Indexes.Models.TokenFilterName&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> A list of token filters used to filter out or modify the input token. For example, you can specify a lowercase filter that converts all characters to lowercase. The filters are run in the order in which they are listed. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
