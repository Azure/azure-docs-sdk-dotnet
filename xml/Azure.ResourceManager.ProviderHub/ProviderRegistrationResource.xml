<Type Name="ProviderRegistrationResource" FullName="Azure.ResourceManager.ProviderHub.ProviderRegistrationResource">
  <TypeSignature Language="C#" Value="public class ProviderRegistrationResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProviderRegistrationResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderRegistrationResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type ProviderRegistrationResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a ProviderRegistration along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetProviderRegistrationResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> using the GetProviderRegistration method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderRegistrationResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckinManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt; CheckinManifest (Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams checkinManifestParams, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt; CheckinManifest(class Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams checkinManifestParams, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.CheckinManifest(Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckinManifest (checkinManifestParams As CheckinManifestParams, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CheckinManifestInfo)" />
      <MemberSignature Language="F#" Value="abstract member CheckinManifest : Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&#xA;override this.CheckinManifest : Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;" Usage="providerRegistrationResource.CheckinManifest (checkinManifestParams, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkinManifestParams" Type="Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="checkinManifestParams"> The required body parameters supplied to the checkin manifest operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checkin the manifest.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/checkinManifest
            Operation Id: CheckinManifest
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="checkinManifestParams" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckinManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&gt; CheckinManifestAsync (Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams checkinManifestParams, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&gt; CheckinManifestAsync(class Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams checkinManifestParams, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.CheckinManifestAsync(Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckinManifestAsync (checkinManifestParams As CheckinManifestParams, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CheckinManifestInfo))" />
      <MemberSignature Language="F#" Value="abstract member CheckinManifestAsync : Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&gt;&#xA;override this.CheckinManifestAsync : Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&gt;" Usage="providerRegistrationResource.CheckinManifestAsync (checkinManifestParams, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.CheckinManifestInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkinManifestParams" Type="Azure.ResourceManager.ProviderHub.Models.CheckinManifestParams" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="checkinManifestParams"> The required body parameters supplied to the checkin manifest operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checkin the manifest.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/checkinManifest
            Operation Id: CheckinManifest
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="checkinManifestParams" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string providerNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string providerNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.CreateResourceIdentifier(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, providerNamespace As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.CreateResourceIdentifier (subscriptionId, providerNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="providerNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="providerNamespace">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ProviderHub.ProviderRegistrationData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.ProviderHub.ProviderRegistrationData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As ProviderRegistrationData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.ProviderHub.ProviderRegistrationData" Usage="Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ProviderHub.ProviderRegistrationData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="providerRegistrationResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a provider registration.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="providerRegistrationResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a provider registration.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteResourcesResourceAction">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt; DeleteResourcesResourceAction (Azure.WaitUntil waitUntil, string resourceActionName, Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction properties, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt; DeleteResourcesResourceAction(valuetype Azure.WaitUntil waitUntil, string resourceActionName, class Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction properties, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.DeleteResourcesResourceAction(Azure.WaitUntil,System.String,Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteResourcesResourceAction (waitUntil As WaitUntil, resourceActionName As String, properties As ResourceManagementAction, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ResourceManagementAction)" />
      <MemberSignature Language="F#" Value="abstract member DeleteResourcesResourceAction : Azure.WaitUntil * string * Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&#xA;override this.DeleteResourcesResourceAction : Azure.WaitUntil * string * Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;" Usage="providerRegistrationResource.DeleteResourcesResourceAction (waitUntil, resourceActionName, properties, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="resourceActionName" Type="System.String" />
        <Parameter Name="properties" Type="Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="resourceActionName"> The resource action name. </param>
        <param name="properties"> The properties supplied to the DeleteResources operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes resources.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourceActions/{resourceActionName}/deleteResources
            Operation Id: ResourceActions_DeleteResources
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceActionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceActionName" /> or <paramref name="properties" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteResourcesResourceActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&gt; DeleteResourcesResourceActionAsync (Azure.WaitUntil waitUntil, string resourceActionName, Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction properties, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&gt; DeleteResourcesResourceActionAsync(valuetype Azure.WaitUntil waitUntil, string resourceActionName, class Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction properties, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.DeleteResourcesResourceActionAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteResourcesResourceActionAsync (waitUntil As WaitUntil, resourceActionName As String, properties As ResourceManagementAction, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ResourceManagementAction))" />
      <MemberSignature Language="F#" Value="abstract member DeleteResourcesResourceActionAsync : Azure.WaitUntil * string * Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&gt;&#xA;override this.DeleteResourcesResourceActionAsync : Azure.WaitUntil * string * Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&gt;" Usage="providerRegistrationResource.DeleteResourcesResourceActionAsync (waitUntil, resourceActionName, properties, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="resourceActionName" Type="System.String" />
        <Parameter Name="properties" Type="Azure.ResourceManager.ProviderHub.Models.ResourceManagementAction" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="resourceActionName"> The resource action name. </param>
        <param name="properties"> The properties supplied to the DeleteResources operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes resources.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourceActions/{resourceActionName}/deleteResources
            Operation Id: ResourceActions_DeleteResources
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceActionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceActionName" /> or <paramref name="properties" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateManifest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt; GenerateManifest (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt; GenerateManifest(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GenerateManifest(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateManifest (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ResourceProviderManifest)" />
      <MemberSignature Language="F#" Value="abstract member GenerateManifest : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&#xA;override this.GenerateManifest : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;" Usage="providerRegistrationResource.GenerateManifest cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generates the manifest for the given provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateManifest
            Operation Id: GenerateManifest
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateManifestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&gt; GenerateManifestAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&gt; GenerateManifestAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GenerateManifestAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateManifestAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ResourceProviderManifest))" />
      <MemberSignature Language="F#" Value="abstract member GenerateManifestAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&gt;&#xA;override this.GenerateManifestAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&gt;" Usage="providerRegistrationResource.GenerateManifestAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.Models.ResourceProviderManifest&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generates the manifest for the given provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateManifest
            Operation Id: GenerateManifest
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOperations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt; GenerateOperations (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt; GenerateOperations(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GenerateOperations(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateOperations (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of OperationsDefinition)" />
      <MemberSignature Language="F#" Value="abstract member GenerateOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;&#xA;override this.GenerateOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;" Usage="providerRegistrationResource.GenerateOperations cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generates the operations api for the given provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateOperations
            Operation Id: ProviderRegistrations_GenerateOperations
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ProviderHub.Models.OperationsDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateOperationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt; GenerateOperationsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt; GenerateOperationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GenerateOperationsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateOperationsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of OperationsDefinition)" />
      <MemberSignature Language="F#" Value="abstract member GenerateOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;&#xA;override this.GenerateOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;" Usage="providerRegistrationResource.GenerateOperationsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ProviderHub.Models.OperationsDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generates the operations api for the given provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateOperations
            Operation Id: ProviderRegistrations_GenerateOperations
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ProviderHub.Models.OperationsDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ProviderRegistrationResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;" Usage="providerRegistrationResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the provider registration details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ProviderRegistrationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;" Usage="providerRegistrationResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the provider registration details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomRollout">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt; GetCustomRollout (string rolloutName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt; GetCustomRollout(string rolloutName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetCustomRollout(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomRollout (rolloutName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CustomRolloutResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCustomRollout : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&#xA;override this.GetCustomRollout : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;" Usage="providerRegistrationResource.GetCustomRollout (rolloutName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rolloutName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rolloutName"> The rollout name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the custom rollout details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/customRollouts/{rolloutName}
            Operation Id: CustomRollouts_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rolloutName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rolloutName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomRolloutAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&gt; GetCustomRolloutAsync (string rolloutName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&gt; GetCustomRolloutAsync(string rolloutName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetCustomRolloutAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomRolloutAsync (rolloutName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CustomRolloutResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCustomRolloutAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&gt;&#xA;override this.GetCustomRolloutAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&gt;" Usage="providerRegistrationResource.GetCustomRolloutAsync (rolloutName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.CustomRolloutResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rolloutName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rolloutName"> The rollout name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the custom rollout details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/customRollouts/{rolloutName}
            Operation Id: CustomRollouts_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rolloutName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rolloutName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomRollouts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ProviderHub.CustomRolloutCollection GetCustomRollouts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ProviderHub.CustomRolloutCollection GetCustomRollouts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetCustomRollouts" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomRollouts () As CustomRolloutCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCustomRollouts : unit -&gt; Azure.ResourceManager.ProviderHub.CustomRolloutCollection&#xA;override this.GetCustomRollouts : unit -&gt; Azure.ResourceManager.ProviderHub.CustomRolloutCollection" Usage="providerRegistrationResource.GetCustomRollouts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ProviderHub.CustomRolloutCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of CustomRolloutResources in the ProviderRegistration. </summary>
        <returns> An object representing collection of CustomRolloutResources and their operations over a CustomRolloutResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultRollout">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt; GetDefaultRollout (string rolloutName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt; GetDefaultRollout(string rolloutName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetDefaultRollout(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultRollout (rolloutName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DefaultRolloutResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultRollout : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&#xA;override this.GetDefaultRollout : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;" Usage="providerRegistrationResource.GetDefaultRollout (rolloutName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rolloutName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rolloutName"> The rollout name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the default rollout details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}
            Operation Id: DefaultRollouts_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rolloutName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rolloutName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultRolloutAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&gt; GetDefaultRolloutAsync (string rolloutName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&gt; GetDefaultRolloutAsync(string rolloutName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetDefaultRolloutAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultRolloutAsync (rolloutName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DefaultRolloutResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultRolloutAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&gt;&#xA;override this.GetDefaultRolloutAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&gt;" Usage="providerRegistrationResource.GetDefaultRolloutAsync (rolloutName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.DefaultRolloutResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rolloutName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rolloutName"> The rollout name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the default rollout details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/defaultRollouts/{rolloutName}
            Operation Id: DefaultRollouts_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rolloutName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rolloutName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultRollouts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ProviderHub.DefaultRolloutCollection GetDefaultRollouts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ProviderHub.DefaultRolloutCollection GetDefaultRollouts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetDefaultRollouts" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultRollouts () As DefaultRolloutCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultRollouts : unit -&gt; Azure.ResourceManager.ProviderHub.DefaultRolloutCollection&#xA;override this.GetDefaultRollouts : unit -&gt; Azure.ResourceManager.ProviderHub.DefaultRolloutCollection" Usage="providerRegistrationResource.GetDefaultRollouts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ProviderHub.DefaultRolloutCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DefaultRolloutResources in the ProviderRegistration. </summary>
        <returns> An object representing collection of DefaultRolloutResources and their operations over a DefaultRolloutResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationRegistration">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt; GetNotificationRegistration (string notificationRegistrationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt; GetNotificationRegistration(string notificationRegistrationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetNotificationRegistration(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNotificationRegistration (notificationRegistrationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of NotificationRegistrationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&#xA;override this.GetNotificationRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;" Usage="providerRegistrationResource.GetNotificationRegistration (notificationRegistrationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notificationRegistrationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="notificationRegistrationName"> The notification registration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the notification registration details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/notificationRegistrations/{notificationRegistrationName}
            Operation Id: NotificationRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="notificationRegistrationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notificationRegistrationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationRegistrationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&gt; GetNotificationRegistrationAsync (string notificationRegistrationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&gt; GetNotificationRegistrationAsync(string notificationRegistrationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetNotificationRegistrationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNotificationRegistrationAsync (notificationRegistrationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of NotificationRegistrationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&gt;&#xA;override this.GetNotificationRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&gt;" Usage="providerRegistrationResource.GetNotificationRegistrationAsync (notificationRegistrationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.NotificationRegistrationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notificationRegistrationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="notificationRegistrationName"> The notification registration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the notification registration details.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/notificationRegistrations/{notificationRegistrationName}
            Operation Id: NotificationRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="notificationRegistrationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="notificationRegistrationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationRegistrations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ProviderHub.NotificationRegistrationCollection GetNotificationRegistrations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ProviderHub.NotificationRegistrationCollection GetNotificationRegistrations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetNotificationRegistrations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNotificationRegistrations () As NotificationRegistrationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationRegistrations : unit -&gt; Azure.ResourceManager.ProviderHub.NotificationRegistrationCollection&#xA;override this.GetNotificationRegistrations : unit -&gt; Azure.ResourceManager.ProviderHub.NotificationRegistrationCollection" Usage="providerRegistrationResource.GetNotificationRegistrations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ProviderHub.NotificationRegistrationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of NotificationRegistrationResources in the ProviderRegistration. </summary>
        <returns> An object representing collection of NotificationRegistrationResources and their operations over a NotificationRegistrationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceTypeRegistration">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt; GetResourceTypeRegistration (string resourceType, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt; GetResourceTypeRegistration(string resourceType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetResourceTypeRegistration(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceTypeRegistration (resourceType As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ResourceTypeRegistrationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceTypeRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&#xA;override this.GetResourceTypeRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;" Usage="providerRegistrationResource.GetResourceTypeRegistration (resourceType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceType" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceType"> The resource type. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a resource type details in the given subscription and provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}
            Operation Id: ResourceTypeRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceType" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceType" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetResourceTypeRegistrationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&gt; GetResourceTypeRegistrationAsync (string resourceType, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&gt; GetResourceTypeRegistrationAsync(string resourceType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetResourceTypeRegistrationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceTypeRegistrationAsync (resourceType As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ResourceTypeRegistrationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetResourceTypeRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&gt;&#xA;override this.GetResourceTypeRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&gt;" Usage="providerRegistrationResource.GetResourceTypeRegistrationAsync (resourceType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceType" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceType"> The resource type. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a resource type details in the given subscription and provider.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}
            Operation Id: ResourceTypeRegistrations_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceType" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceType" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetResourceTypeRegistrations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationCollection GetResourceTypeRegistrations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationCollection GetResourceTypeRegistrations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.GetResourceTypeRegistrations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceTypeRegistrations () As ResourceTypeRegistrationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetResourceTypeRegistrations : unit -&gt; Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationCollection&#xA;override this.GetResourceTypeRegistrations : unit -&gt; Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationCollection" Usage="providerRegistrationResource.GetResourceTypeRegistrations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ProviderHub.ResourceTypeRegistrationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ResourceTypeRegistrationResources in the ProviderRegistration. </summary>
        <returns> An object representing collection of ResourceTypeRegistrationResources and their operations over a ResourceTypeRegistrationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.ProviderHub.ProviderRegistrationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ProviderHub.ProviderRegistrationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.Update(Azure.WaitUntil,Azure.ResourceManager.ProviderHub.ProviderRegistrationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, data As ProviderRegistrationData, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ProviderRegistrationResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.ProviderHub.ProviderRegistrationData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.ProviderHub.ProviderRegistrationData * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;" Usage="providerRegistrationResource.Update (waitUntil, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.ProviderHub.ProviderRegistrationData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> The provider registration properties supplied to the CreateOrUpdate operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates or updates the provider registration.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.ProviderHub.ProviderRegistrationData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.ProviderHub.ProviderRegistrationData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ProviderHub.ProviderRegistrationResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.ProviderHub.ProviderRegistrationData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, data As ProviderRegistrationData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ProviderRegistrationResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ProviderHub.ProviderRegistrationData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.ProviderHub.ProviderRegistrationData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;" Usage="providerRegistrationResource.UpdateAsync (waitUntil, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ProviderHub</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ProviderHub.ProviderRegistrationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.ProviderHub.ProviderRegistrationData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> The provider registration properties supplied to the CreateOrUpdate operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates or updates the provider registration.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}
            Operation Id: ProviderRegistrations_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
