<Type Name="ITokenAcquisition" FullName="Microsoft.Identity.Web.ITokenAcquisition">
  <TypeSignature Language="C#" Value="public interface ITokenAcquisition" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITokenAcquisition" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Web.ITokenAcquisition" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITokenAcquisition" />
  <TypeSignature Language="F#" Value="type ITokenAcquisition = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Web</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Interface for the token acquisition service (encapsulating MSAL.NET).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetAccessTokenForAppAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetAccessTokenForAppAsync (string scope, string? tenant = default, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetAccessTokenForAppAsync(string scope, string tenant, class Microsoft.Identity.Web.TokenAcquisitionOptions tokenAcquisitionOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessTokenForAppAsync (scope As String, Optional tenant As String = Nothing, Optional tokenAcquisitionOptions As TokenAcquisitionOptions = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessTokenForAppAsync : string * string * Microsoft.Identity.Web.TokenAcquisitionOptions -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iTokenAcquisition.GetAccessTokenForAppAsync (scope, tenant, tokenAcquisitionOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="tenant" Type="System.String" />
        <Parameter Name="tokenAcquisitionOptions" Type="Microsoft.Identity.Web.TokenAcquisitionOptions" />
      </Parameters>
      <Docs>
        <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
        <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
        <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        <summary>
            Acquires a token from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
        <returns>An access token for the app itself, based on its scopes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessTokenForUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt;? GetAccessTokenForUserAsync (System.Collections.Generic.IEnumerable&lt;string&gt;? scopes, string tenantId = default, string userFlow = default, System.Security.Claims.ClaimsPrincipal user = default, Microsoft.Identity.Web.TokenAcquisitionOptions tokenAcquisitionOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetAccessTokenForUserAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string tenantId, string userFlow, class System.Security.Claims.ClaimsPrincipal user, class Microsoft.Identity.Web.TokenAcquisitionOptions tokenAcquisitionOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAccessTokenForUserAsync (scopes As IEnumerable(Of String), Optional tenantId As String = Nothing, Optional userFlow As String = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional tokenAcquisitionOptions As TokenAcquisitionOptions = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessTokenForUserAsync : seq&lt;string&gt; * string * string * System.Security.Claims.ClaimsPrincipal * Microsoft.Identity.Web.TokenAcquisitionOptions -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iTokenAcquisition.GetAccessTokenForUserAsync (scopes, tenantId, userFlow, user, tokenAcquisitionOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="userFlow" Type="System.String" />
        <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="tokenAcquisitionOptions" Type="Microsoft.Identity.Web.TokenAcquisitionOptions" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes to request for the downstream API to call.</param>
        <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
        <param name="userFlow">Azure AD B2C UserFlow to target.</param>
        <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
        <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        <summary>
            Typically used from an ASP.NET Core web app or web API controller, this method gets an access token
            for a downstream API on behalf of the user account which claims are provided in the <see cref="P:Microsoft.AspNetCore.Http.HttpContext.User" />
            member of the controller's <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> parameter.
            </summary>
        <returns>An access token to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthenticationResultForUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;? GetAuthenticationResultForUserAsync (System.Collections.Generic.IEnumerable&lt;string&gt;? scopes, string tenantId = default, string userFlow = default, System.Security.Claims.ClaimsPrincipal user = default, Microsoft.Identity.Web.TokenAcquisitionOptions tokenAcquisitionOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; GetAuthenticationResultForUserAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string tenantId, string userFlow, class System.Security.Claims.ClaimsPrincipal user, class Microsoft.Identity.Web.TokenAcquisitionOptions tokenAcquisitionOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthenticationResultForUserAsync (scopes As IEnumerable(Of String), Optional tenantId As String = Nothing, Optional userFlow As String = Nothing, Optional user As ClaimsPrincipal = Nothing, Optional tokenAcquisitionOptions As TokenAcquisitionOptions = Nothing) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member GetAuthenticationResultForUserAsync : seq&lt;string&gt; * string * string * System.Security.Claims.ClaimsPrincipal * Microsoft.Identity.Web.TokenAcquisitionOptions -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iTokenAcquisition.GetAuthenticationResultForUserAsync (scopes, tenantId, userFlow, user, tokenAcquisitionOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="tenantId" Type="System.String" />
        <Parameter Name="userFlow" Type="System.String" />
        <Parameter Name="user" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="tokenAcquisitionOptions" Type="Microsoft.Identity.Web.TokenAcquisitionOptions" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes to request for the downstream API to call.</param>
        <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
        <param name="userFlow">Azure AD B2C UserFlow to target.</param>
        <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
        <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        <summary>
            Typically used from an ASP.NET Core web app or web API controller, this method gets an access token
            for a downstream API on behalf of the user account which claims are provided in the <see cref="P:Microsoft.AspNetCore.Http.HttpContext.User" />
            member of the controller's <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> parameter.
            </summary>
        <returns>An <see cref="T:Microsoft.Identity.Client.AuthenticationResult" /> to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplyForbiddenWithWwwAuthenticateHeaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReplyForbiddenWithWwwAuthenticateHeaderAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.MsalUiRequiredException msalServiceException, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReplyForbiddenWithWwwAuthenticateHeaderAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.MsalUiRequiredException msalServiceException, class Microsoft.AspNetCore.Http.HttpResponse httpResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeaderAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,Microsoft.AspNetCore.Http.HttpResponse)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReplyForbiddenWithWwwAuthenticateHeaderAsync (scopes As IEnumerable(Of String), msalServiceException As MsalUiRequiredException, Optional httpResponse As HttpResponse = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ReplyForbiddenWithWwwAuthenticateHeaderAsync : seq&lt;string&gt; * Microsoft.Identity.Client.MsalUiRequiredException * Microsoft.AspNetCore.Http.HttpResponse -&gt; System.Threading.Tasks.Task" Usage="iTokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeaderAsync (scopes, msalServiceException, httpResponse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Web</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="msalServiceException" Type="Microsoft.Identity.Client.MsalUiRequiredException" />
        <Parameter Name="httpResponse" Type="Microsoft.AspNetCore.Http.HttpResponse" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes to consent to.</param>
        <param name="msalServiceException">
          <see cref="T:Microsoft.Identity.Client.MsalUiRequiredException" /> triggering the challenge.</param>
        <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse" /> to update.</param>
        <summary>
            Used in web APIs (which therefore cannot have an interaction with the user).
            Replies to the client through the HttpResponse by sending a 403 (forbidden) and populating wwwAuthenticateHeaders so that
            the client can trigger an interaction with the user so the user can consent to more scopes.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
