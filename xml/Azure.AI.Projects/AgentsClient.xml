<Type Name="AgentsClient" FullName="Azure.AI.Projects.AgentsClient">
  <TypeSignature Language="C#" Value="public class AgentsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AgentsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Projects.AgentsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AgentsClient" />
  <TypeSignature Language="F#" Value="type AgentsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Projects</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Agents sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AgentsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of AgentsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AgentsClient (string connectionString, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Projects.AgentsClient : string * Azure.Core.TokenCredential -&gt; Azure.AI.Projects.AgentsClient" Usage="new Azure.AI.Projects.AgentsClient (connectionString, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="connectionString">The Azure AI Foundry project connection string, in the form `endpoint;subscription_id;resource_group_name;project_name`.</param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AzureAIClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AgentsClient (string connectionString, Azure.Core.TokenCredential credential, Azure.AI.Projects.AIProjectClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Core.TokenCredential credential, class Azure.AI.Projects.AIProjectClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.AI.Projects.AIProjectClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As TokenCredential, options As AIProjectClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Projects.AgentsClient : string * Azure.Core.TokenCredential * Azure.AI.Projects.AIProjectClientOptions -&gt; Azure.AI.Projects.AgentsClient" Usage="new Azure.AI.Projects.AgentsClient (connectionString, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Projects.AIProjectClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">The Azure AI Foundry project connection string, in the form `endpoint;subscription_id;resource_group_name;project_name`.</param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary>
            Initializes a new instance of AzureAIClient.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" /> is an empty string. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AgentsClient (Uri endpoint, string subscriptionId, string resourceGroupName, string projectName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string subscriptionId, string resourceGroupName, string projectName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.#ctor(System.Uri,System.String,System.String,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, subscriptionId As String, resourceGroupName As String, projectName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Projects.AgentsClient : Uri * string * string * string * Azure.Core.TokenCredential -&gt; Azure.AI.Projects.AgentsClient" Usage="new Azure.AI.Projects.AgentsClient (endpoint, subscriptionId, resourceGroupName, projectName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Azure AI Foundry project endpoint, in the form `https://&lt;azure-region&gt;.api.azureml.ms` or `https://&lt;private-link-guid&gt;.&lt;azure-region&gt;.api.azureml.ms`, where &lt;azure-region&gt; is the Azure region where the project is deployed (e.g. westus) and &lt;private-link-guid&gt; is the GUID of the Enterprise private link. </param>
        <param name="subscriptionId"> The Azure subscription ID. </param>
        <param name="resourceGroupName"> The name of the Azure Resource Group. </param>
        <param name="projectName"> The Azure AI Foundry project name. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AzureAIClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="projectName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AgentsClient (Uri endpoint, string subscriptionId, string resourceGroupName, string projectName, Azure.Core.TokenCredential credential, Azure.AI.Projects.AIProjectClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string subscriptionId, string resourceGroupName, string projectName, class Azure.Core.TokenCredential credential, class Azure.AI.Projects.AIProjectClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.#ctor(System.Uri,System.String,System.String,System.String,Azure.Core.TokenCredential,Azure.AI.Projects.AIProjectClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, subscriptionId As String, resourceGroupName As String, projectName As String, credential As TokenCredential, options As AIProjectClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Projects.AgentsClient : Uri * string * string * string * Azure.Core.TokenCredential * Azure.AI.Projects.AIProjectClientOptions -&gt; Azure.AI.Projects.AgentsClient" Usage="new Azure.AI.Projects.AgentsClient (endpoint, subscriptionId, resourceGroupName, projectName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Projects.AIProjectClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Azure AI Foundry project endpoint, in the form `https://&lt;azure-region&gt;.api.azureml.ms` or `https://&lt;private-link-guid&gt;.&lt;azure-region&gt;.api.azureml.ms`, where &lt;azure-region&gt; is the Azure region where the project is deployed (e.g. westus) and &lt;private-link-guid&gt; is the GUID of the Enterprise private link. </param>
        <param name="subscriptionId"> The Azure subscription ID. </param>
        <param name="resourceGroupName"> The name of the Azure Resource Group. </param>
        <param name="projectName"> The Azure AI Foundry project name. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of AzureAIClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="subscriptionId" />, <paramref name="resourceGroupName" />, <paramref name="projectName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />, <paramref name="resourceGroupName" /> or <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelRun (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelRun(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelRun(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRun (threadId As String, runId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelRun : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelRun : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CancelRun (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a run of an in progress thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CancelRun(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; CancelRun (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; CancelRun(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelRun(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRun (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CancelRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.CancelRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.CancelRun (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancels a run of an in progress thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelRunAsync (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelRunAsync(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelRunAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRunAsync (threadId As String, runId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CancelRunAsync (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a run of an in progress thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CancelRunAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; CancelRunAsync (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; CancelRunAsync(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelRunAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelRunAsync (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CancelRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.CancelRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.CancelRunAsync (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancels a run of an in progress thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelVectorStoreFileBatch (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelVectorStoreFileBatch(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatch(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatch (vectorStoreId As String, batchId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CancelVectorStoreFileBatch (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt; CancelVectorStoreFileBatch (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt; CancelVectorStoreFileBatch(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatch (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&#xA;override this.CancelVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;" Usage="agentsClient.CancelVectorStoreFileBatch (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelVectorStoreFileBatchAsync (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelVectorStoreFileBatchAsync(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatchAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CancelVectorStoreFileBatchAsync (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; CancelVectorStoreFileBatchAsync (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; CancelVectorStoreFileBatchAsync(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CancelVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member CancelVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;&#xA;override this.CancelVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;" Usage="agentsClient.CancelVectorStoreFileBatchAsync (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateAgent (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateAgent(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateAgent(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgent (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateAgent : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateAgent : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateAgent (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateAgent(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.Agent&gt; CreateAgent (string model, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; tools = default, Azure.AI.Projects.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt; CreateAgent(string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; tools, class Azure.AI.Projects.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateAgent(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgent (model As String, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Agent)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgent : string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;&#xA;override this.CreateAgent : string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;" Usage="agentsClient.CreateAgent (model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.Agent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The name of the new agent. </param>
        <param name="description"> The description of the new agent. </param>
        <param name="instructions"> The system instructions for the new agent to use. </param>
        <param name="tools"> The collection of tools to enable for the new agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
             tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="model" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAgentAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAgentAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateAgentAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAgentAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateAgentAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateAgentAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt; CreateAgentAsync (string model, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; tools = default, Azure.AI.Projects.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt;&gt; CreateAgentAsync(string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; tools, class Azure.AI.Projects.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateAgentAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentAsync (model As String, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Agent))" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentAsync : string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;&#xA;override this.CreateAgentAsync : string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;" Usage="agentsClient.CreateAgentAsync (model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The name of the new agent. </param>
        <param name="description"> The description of the new agent. </param>
        <param name="instructions"> The system instructions for the new agent to use. </param>
        <param name="tools"> The collection of tools to enable for the new agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example, the `code_interpreter`
             tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="model" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateMessage (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateMessage(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessage(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateMessage : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateMessage (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new message on a specified thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateMessage(System.String,Azure.AI.Projects.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Projects.MessageRole role, BinaryData content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Projects.MessageRole role, class System.BinaryData content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessage(System.String,Azure.AI.Projects.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, content As BinaryData, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Projects.MessageRole * BinaryData * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Projects.MessageRole * BinaryData * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;" Usage="agentsClient.CreateMessage (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            `user`, which indicates the message is sent by an actual user (and should be
            used in most cases to represent user-generated messages), and `assistant`,
            which indicates the message is generated by the agent (use this value to insert
            messages from the agent into the conversation).
            </param>
        <param name="content">
            The content of the initial message. This may be a basic string (if you only
            need text) or an array of typed content blocks (for example, text, image_file,
            image_url, and so on).
            </param>
        <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new message on a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Projects.MessageRole role, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageInputContentBlock&gt; contentBlocks, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Projects.MessageRole role, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageInputContentBlock&gt; contentBlocks, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessage(System.String,Azure.AI.Projects.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, contentBlocks As IEnumerable(Of MessageInputContentBlock), Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Projects.MessageRole * seq&lt;Azure.AI.Projects.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Projects.MessageRole * seq&lt;Azure.AI.Projects.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;" Usage="agentsClient.CreateMessage (threadId, role, contentBlocks, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="contentBlocks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageInputContentBlock&gt;" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity creating the message. For instance:
            - <c>MessageRole.User</c>: an actual user message
            - <c>MessageRole.Assistant</c>: an agent-generated response.
            </param>
        <param name="contentBlocks">
            A collection of specialized content blocks (e.g. <see cref="T:Azure.AI.Projects.MessageInputTextBlock" />,
            <see cref="T:Azure.AI.Projects.MessageInputImageUrlBlock" />, <see cref="T:Azure.AI.Projects.MessageInputImageFileBlock" />, etc.).
            </param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Synchronous variant of <see cref="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />.
            Creates a new message using multiple structured content blocks.
            </summary>
        <returns>A <see cref="T:Azure.AI.Projects.ThreadMessage" /> encapsulating the newly created message.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="threadId" /> is null or empty, or if <paramref name="contentBlocks" /> is null.
            </exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt; CreateMessage (string threadId, Azure.AI.Projects.MessageRole role, string content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt; CreateMessage(string threadId, valuetype Azure.AI.Projects.MessageRole role, string content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessage(System.String,Azure.AI.Projects.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessage (threadId As String, role As MessageRole, content As String, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessage : string * Azure.AI.Projects.MessageRole * string * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&#xA;override this.CreateMessage : string * Azure.AI.Projects.MessageRole * string * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;" Usage="agentsClient.CreateMessage (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            - <c>user</c>: Indicates the message is sent by an actual user.
            - <c>assistant</c>: Indicates the message is generated by the agent.
            </param>
        <param name="content">The plain text content of the message.</param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Synchronous variant of <see cref="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />.
            </summary>
        <returns>The newly created <see cref="T:Azure.AI.Projects.ThreadMessage" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="threadId" /> or <paramref name="content" /> is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateMessageAsync (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateMessageAsync(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateMessageAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateMessageAsync (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new message on a specified thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Projects.MessageRole role, BinaryData content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Projects.MessageRole role, class System.BinaryData content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.BinaryData,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, content As BinaryData, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Projects.MessageRole * BinaryData * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Projects.MessageRole * BinaryData * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.CreateMessageAsync (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="content" Type="System.BinaryData" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            `user`, which indicates the message is sent by an actual user (and should be
            used in most cases to represent user-generated messages), and `assistant`,
            which indicates the message is generated by the agent (use this value to insert
            messages from the agent into the conversation).
            </param>
        <param name="content">
            The content of the initial message. This may be a basic string (if you only
            need text) or an array of typed content blocks (for example, text, image_file,
            image_url, and so on).
            </param>
        <param name="attachments"> A list of files attached to the message, and the tools they should be added to. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new message on a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Projects.MessageRole role, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageInputContentBlock&gt; contentBlocks, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Projects.MessageRole role, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageInputContentBlock&gt; contentBlocks, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageInputContentBlock},System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, contentBlocks As IEnumerable(Of MessageInputContentBlock), Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Projects.MessageRole * seq&lt;Azure.AI.Projects.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Projects.MessageRole * seq&lt;Azure.AI.Projects.MessageInputContentBlock&gt; * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.CreateMessageAsync (threadId, role, contentBlocks, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="contentBlocks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageInputContentBlock&gt;" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity creating the message. For instance:
            - <c>MessageRole.User</c>: an actual user message
            - <c>MessageRole.Assistant</c>: an agent-generated response
            </param>
        <param name="contentBlocks">
            A collection of specialized content blocks (e.g. <see cref="T:Azure.AI.Projects.MessageInputTextBlock" />,
            <see cref="T:Azure.AI.Projects.MessageInputImageUrlBlock" />, <see cref="T:Azure.AI.Projects.MessageInputImageFileBlock" />, etc.).
            </param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Creates a new message on a specified thread using a collection of content blocks,
            such as text or image references.
            </summary>
        <returns>A <see cref="T:Azure.AI.Projects.ThreadMessage" /> encapsulating the newly created message.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="threadId" /> is null or empty, or if <paramref name="contentBlocks" /> is null.
            </exception>
        <exception cref="T:System.ArgumentException">Thrown if <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync (string threadId, Azure.AI.Projects.MessageRole role, string content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt; attachments = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; CreateMessageAsync(string threadId, valuetype Azure.AI.Projects.MessageRole role, string content, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.MessageAttachment&gt; attachments, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateMessageAsync(System.String,Azure.AI.Projects.MessageRole,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.MessageAttachment},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageAsync (threadId As String, role As MessageRole, content As String, Optional attachments As IEnumerable(Of MessageAttachment) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageAsync : string * Azure.AI.Projects.MessageRole * string * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.CreateMessageAsync : string * Azure.AI.Projects.MessageRole * string * seq&lt;Azure.AI.Projects.MessageAttachment&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.CreateMessageAsync (threadId, role, content, attachments, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="role" Type="Azure.AI.Projects.MessageRole" />
        <Parameter Name="content" Type="System.String" />
        <Parameter Name="attachments" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.MessageAttachment&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId">Identifier of the thread.</param>
        <param name="role">
            The role of the entity that is creating the message. Allowed values include:
            - <c>user</c>: Indicates the message is sent by an actual user.
            - <c>assistant</c>: Indicates the message is generated by the agent.
            </param>
        <param name="content">The plain text content of the message.</param>
        <param name="attachments">An optional list of files attached to the message.</param>
        <param name="metadata">Optional metadata as key/value pairs.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Creates a new message on a specified thread, accepting a simple textual content string.
            This API overload matches the original user experience of providing a plain string.
            </summary>
        <returns>The newly created <see cref="T:Azure.AI.Projects.ThreadMessage" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="threadId" /> or <paramref name="content" /> is null.</exception>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="threadId" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; CreateRun (Azure.AI.Projects.AgentThread thread, Azure.AI.Projects.Agent agent, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; CreateRun(class Azure.AI.Projects.AgentThread thread, class Azure.AI.Projects.Agent agent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRun(Azure.AI.Projects.AgentThread,Azure.AI.Projects.Agent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (thread As AgentThread, agent As Agent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : Azure.AI.Projects.AgentThread * Azure.AI.Projects.Agent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.CreateRun : Azure.AI.Projects.AgentThread * Azure.AI.Projects.Agent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.CreateRun (thread, agent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Azure.AI.Projects.AgentThread" />
        <Parameter Name="agent" Type="Azure.AI.Projects.Agent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thread"> The thread that should be run. </param>
        <param name="agent"> The agent that should run the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a new run of the specified thread using a specified agent.
            </summary>
        <returns> A new <see cref="T:Azure.AI.Projects.ThreadRun" /> instance. </returns>
        <remarks>
            This method will create the run with default configuration.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateRun (string threadId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateRun(string threadId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRun(System.String,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (threadId As String, content As RequestContent, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateRun : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateRun (threadId, content, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new run for an agent thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateRun(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; CreateRun (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; CreateRun(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRun(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRun (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CreateRun : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.CreateRun : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.CreateRun (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="include">
             A list of additional fields to include in the response.
             Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new run for an agent thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; CreateRunAsync (Azure.AI.Projects.AgentThread thread, Azure.AI.Projects.Agent agent, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; CreateRunAsync(class Azure.AI.Projects.AgentThread thread, class Azure.AI.Projects.Agent agent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRunAsync(Azure.AI.Projects.AgentThread,Azure.AI.Projects.Agent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (thread As AgentThread, agent As Agent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : Azure.AI.Projects.AgentThread * Azure.AI.Projects.Agent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.CreateRunAsync : Azure.AI.Projects.AgentThread * Azure.AI.Projects.Agent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.CreateRunAsync (thread, agent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="Azure.AI.Projects.AgentThread" />
        <Parameter Name="agent" Type="Azure.AI.Projects.Agent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thread"> The thread that should be run. </param>
        <param name="agent"> The agent that should run the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a new run of the specified thread using a specified agent.
            </summary>
        <returns> A new <see cref="T:Azure.AI.Projects.ThreadRun" /> instance. </returns>
        <remarks>
            This method will create the run with default configuration.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateRunAsync (string threadId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateRunAsync(string threadId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRunAsync(System.String,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (threadId As String, content As RequestContent, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateRunAsync : string * Azure.Core.RequestContent * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateRunAsync (threadId, content, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new run for an agent thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateRunAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; CreateRunAsync (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; CreateRunAsync(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRunAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunAsync (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CreateRunAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.CreateRunAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.CreateRunAsync (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="include">
             A list of additional fields to include in the response.
             Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new run for an agent thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunStreaming">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt; CreateRunStreaming (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default, Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.CollectionResult`1&lt;class Azure.AI.Projects.StreamingUpdate&gt; CreateRunStreaming(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken, class Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRunStreaming(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken,Azure.AI.Projects.AutoFunctionCallOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunStreaming (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing, Optional autoFunctionCallOptions As AutoFunctionCallOptions = Nothing) As CollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunStreaming : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;&#xA;override this.CreateRunStreaming : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;" Usage="agentsClient.CreateRunStreaming (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken, autoFunctionCallOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="autoFunctionCallOptions" Type="Azure.AI.Projects.AutoFunctionCallOptions" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <param name="autoFunctionCallOptions">If specified, function calls defined in tools will be called automatically.</param>
        <summary>
             Begins a new streaming <see cref="T:Azure.AI.Projects.ThreadRun" /> that evaluates a <see cref="T:Azure.AI.Projects.AgentThread" /> using a specified
             <see cref="T:Azure.AI.Projects.Agent" />.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateRunStreamingAsync">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt; CreateRunStreamingAsync (string threadId, string assistantId, string overrideModelName = default, string overrideInstructions = default, string additionalInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default, Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.AsyncCollectionResult`1&lt;class Azure.AI.Projects.StreamingUpdate&gt; CreateRunStreamingAsync(string threadId, string assistantId, string overrideModelName, string overrideInstructions, string additionalInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; additionalMessages, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken, class Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateRunStreamingAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken,Azure.AI.Projects.AutoFunctionCallOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateRunStreamingAsync (threadId As String, assistantId As String, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional additionalInstructions As String = Nothing, Optional additionalMessages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing, Optional autoFunctionCallOptions As AutoFunctionCallOptions = Nothing) As AsyncCollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member CreateRunStreamingAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;&#xA;override this.CreateRunStreamingAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;" Usage="agentsClient.CreateRunStreamingAsync (threadId, assistantId, overrideModelName, overrideInstructions, additionalInstructions, additionalMessages, overrideTools, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken, autoFunctionCallOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="additionalInstructions" Type="System.String" />
        <Parameter Name="additionalMessages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="autoFunctionCallOptions" Type="Azure.AI.Projects.AutoFunctionCallOptions" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="assistantId"> The ID of the agent that should run the thread. </param>
        <param name="overrideModelName"> The overridden model name that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions that the agent should use to run the thread. </param>
        <param name="additionalInstructions">
             Additional instructions to append at the end of the instructions for the run. This is useful for modifying the behavior
             on a per-run basis without overriding other instructions.
             </param>
        <param name="additionalMessages"> Adds additional messages to the thread before creating the run. </param>
        <param name="overrideTools"> The overridden list of enabled tools that the agent should use to run the thread. </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort
             to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of
             completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <param name="autoFunctionCallOptions">If specified, function calls defined in tools will be called automatically.</param>
        <summary>
             Begins a new streaming <see cref="T:Azure.AI.Projects.ThreadRun" /> that evaluates a <see cref="T:Azure.AI.Projects.AgentThread" /> using a specified
             <see cref="T:Azure.AI.Projects.Agent" />.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateThread (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateThread(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThread(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThread (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateThread : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateThread : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateThread (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new thread. Threads contain messages and can be run by agents.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateThread(System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentThread&gt; CreateThread (System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; messages = default, Azure.AI.Projects.ToolResources toolResources = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt; CreateThread(class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; messages, class Azure.AI.Projects.ToolResources toolResources, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThread(System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThread (Optional messages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional toolResources As ToolResources = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentThread)" />
      <MemberSignature Language="F#" Value="abstract member CreateThread : seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&#xA;override this.CreateThread : seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;" Usage="agentsClient.CreateThread (messages, toolResources, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages"> The initial messages to associate with the new thread. </param>
        <param name="toolResources">
            A set of resources that are made available to the agent's tools in this thread. The resources are specific to the
            type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.
            </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new thread. Threads contain messages and can be run by agents. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAndRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateThreadAndRun (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateThreadAndRun(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRun(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAndRun (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAndRun : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateThreadAndRun : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateThreadAndRun (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent thread and immediately starts a run using that new thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRun(System.String,Azure.AI.Projects.AgentThreadCreationOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.UpdateToolResourcesOptions,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAndRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; CreateThreadAndRun (string assistantId, Azure.AI.Projects.AgentThreadCreationOptions thread = default, string overrideModelName = default, string overrideInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, Azure.AI.Projects.UpdateToolResourcesOptions toolResources = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; CreateThreadAndRun(string assistantId, class Azure.AI.Projects.AgentThreadCreationOptions thread, string overrideModelName, string overrideInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, class Azure.AI.Projects.UpdateToolResourcesOptions toolResources, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRun(System.String,Azure.AI.Projects.AgentThreadCreationOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.UpdateToolResourcesOptions,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAndRun (assistantId As String, Optional thread As AgentThreadCreationOptions = Nothing, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As UpdateToolResourcesOptions = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAndRun : string * Azure.AI.Projects.AgentThreadCreationOptions * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.UpdateToolResourcesOptions * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.CreateThreadAndRun : string * Azure.AI.Projects.AgentThreadCreationOptions * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.UpdateToolResourcesOptions * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.CreateThreadAndRun (assistantId, thread, overrideModelName, overrideInstructions, overrideTools, toolResources, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="thread" Type="Azure.AI.Projects.AgentThreadCreationOptions" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.UpdateToolResourcesOptions" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent for which the thread should be created. </param>
        <param name="thread"> The details used to create the new thread. If no thread is provided, an empty one will be created. </param>
        <param name="overrideModelName"> The overridden model that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions the agent should use to run the thread. </param>
        <param name="overrideTools"> The overridden list of enabled tools the agent should use to run the thread. </param>
        <param name="toolResources"> Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens
             specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent thread and immediately starts a run using that new thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAndRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateThreadAndRunAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateThreadAndRunAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRunAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAndRunAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAndRunAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateThreadAndRunAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateThreadAndRunAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new agent thread and immediately starts a run using that new thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRunAsync(System.String,Azure.AI.Projects.AgentThreadCreationOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.UpdateToolResourcesOptions,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAndRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; CreateThreadAndRunAsync (string assistantId, Azure.AI.Projects.AgentThreadCreationOptions thread = default, string overrideModelName = default, string overrideInstructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; overrideTools = default, Azure.AI.Projects.UpdateToolResourcesOptions toolResources = default, bool? stream = default, float? temperature = default, float? topP = default, int? maxPromptTokens = default, int? maxCompletionTokens = default, Azure.AI.Projects.TruncationObject truncationStrategy = default, BinaryData toolChoice = default, BinaryData responseFormat = default, bool? parallelToolCalls = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; CreateThreadAndRunAsync(string assistantId, class Azure.AI.Projects.AgentThreadCreationOptions thread, string overrideModelName, string overrideInstructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; overrideTools, class Azure.AI.Projects.UpdateToolResourcesOptions toolResources, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, valuetype System.Nullable`1&lt;int32&gt; maxPromptTokens, valuetype System.Nullable`1&lt;int32&gt; maxCompletionTokens, class Azure.AI.Projects.TruncationObject truncationStrategy, class System.BinaryData toolChoice, class System.BinaryData responseFormat, valuetype System.Nullable`1&lt;bool&gt; parallelToolCalls, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAndRunAsync(System.String,Azure.AI.Projects.AgentThreadCreationOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.UpdateToolResourcesOptions,System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.AI.Projects.TruncationObject,System.BinaryData,System.BinaryData,System.Nullable{System.Boolean},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAndRunAsync (assistantId As String, Optional thread As AgentThreadCreationOptions = Nothing, Optional overrideModelName As String = Nothing, Optional overrideInstructions As String = Nothing, Optional overrideTools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As UpdateToolResourcesOptions = Nothing, Optional stream As Nullable(Of Boolean) = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional maxPromptTokens As Nullable(Of Integer) = Nothing, Optional maxCompletionTokens As Nullable(Of Integer) = Nothing, Optional truncationStrategy As TruncationObject = Nothing, Optional toolChoice As BinaryData = Nothing, Optional responseFormat As BinaryData = Nothing, Optional parallelToolCalls As Nullable(Of Boolean) = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAndRunAsync : string * Azure.AI.Projects.AgentThreadCreationOptions * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.UpdateToolResourcesOptions * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.CreateThreadAndRunAsync : string * Azure.AI.Projects.AgentThreadCreationOptions * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.UpdateToolResourcesOptions * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.AI.Projects.TruncationObject * BinaryData * BinaryData * Nullable&lt;bool&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.CreateThreadAndRunAsync (assistantId, thread, overrideModelName, overrideInstructions, overrideTools, toolResources, stream, temperature, topP, maxPromptTokens, maxCompletionTokens, truncationStrategy, toolChoice, responseFormat, parallelToolCalls, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="thread" Type="Azure.AI.Projects.AgentThreadCreationOptions" />
        <Parameter Name="overrideModelName" Type="System.String" />
        <Parameter Name="overrideInstructions" Type="System.String" />
        <Parameter Name="overrideTools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.UpdateToolResourcesOptions" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="maxPromptTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxCompletionTokens" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="truncationStrategy" Type="Azure.AI.Projects.TruncationObject" />
        <Parameter Name="toolChoice" Type="System.BinaryData" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="parallelToolCalls" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent for which the thread should be created. </param>
        <param name="thread"> The details used to create the new thread. If no thread is provided, an empty one will be created. </param>
        <param name="overrideModelName"> The overridden model that the agent should use to run the thread. </param>
        <param name="overrideInstructions"> The overridden system instructions the agent should use to run the thread. </param>
        <param name="overrideTools"> The overridden list of enabled tools the agent should use to run the thread. </param>
        <param name="toolResources"> Override the tools the agent can use for this run. This is useful for modifying the behavior on a per-run basis. </param>
        <param name="stream">
             If `true`, returns a stream of events that happen during the Run as server-sent events,
             terminating when the Run enters a terminal state with a `data: [DONE]` message.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
             more random, while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model
             considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
             comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="maxPromptTokens">
             The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified,
             the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="maxCompletionTokens">
             The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only
             the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens
             specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
             </param>
        <param name="truncationStrategy"> The strategy to use for dropping messages as the context windows moves forward. </param>
        <param name="toolChoice"> Controls whether or not and which tool is called by the model. </param>
        <param name="responseFormat"> Specifies the format that the model must output. </param>
        <param name="parallelToolCalls"> If `true` functions will run in parallel during tool use. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new agent thread and immediately starts a run using that new thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateThreadAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateThreadAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateThreadAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateThreadAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a new thread. Threads contain messages and can be run by agents.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateThreadAsync(System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt; CreateThreadAsync (System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt; messages = default, Azure.AI.Projects.ToolResources toolResources = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt;&gt; CreateThreadAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ThreadMessageOptions&gt; messages, class Azure.AI.Projects.ToolResources toolResources, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateThreadAsync(System.Collections.Generic.IEnumerable{Azure.AI.Projects.ThreadMessageOptions},Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateThreadAsync (Optional messages As IEnumerable(Of ThreadMessageOptions) = Nothing, Optional toolResources As ToolResources = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentThread))" />
      <MemberSignature Language="F#" Value="abstract member CreateThreadAsync : seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;&#xA;override this.CreateThreadAsync : seq&lt;Azure.AI.Projects.ThreadMessageOptions&gt; * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;" Usage="agentsClient.CreateThreadAsync (messages, toolResources, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ThreadMessageOptions&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="messages"> The initial messages to associate with the new thread. </param>
        <param name="toolResources">
            A set of resources that are made available to the agent's tools in this thread. The resources are specific to the
            type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.
            </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new thread. Threads contain messages and can be run by agents. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateVectorStore (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateVectorStore(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStore(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStore (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStore : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateVectorStore : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateVectorStore (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStore(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.AI.Projects.VectorStoreConfiguration,Azure.AI.Projects.VectorStoreExpirationPolicy,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStore&gt; CreateVectorStore (System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, string name = default, Azure.AI.Projects.VectorStoreConfiguration storeConfiguration = default, Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt; CreateVectorStore(class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, string name, class Azure.AI.Projects.VectorStoreConfiguration storeConfiguration, class Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStore(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.AI.Projects.VectorStoreConfiguration,Azure.AI.Projects.VectorStoreExpirationPolicy,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStore (Optional fileIds As IEnumerable(Of String) = Nothing, Optional name As String = Nothing, Optional storeConfiguration As VectorStoreConfiguration = Nothing, Optional expiresAfter As VectorStoreExpirationPolicy = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStore)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStore : seq&lt;string&gt; * string * Azure.AI.Projects.VectorStoreConfiguration * Azure.AI.Projects.VectorStoreExpirationPolicy * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&#xA;override this.CreateVectorStore : seq&lt;string&gt; * string * Azure.AI.Projects.VectorStoreConfiguration * Azure.AI.Projects.VectorStoreExpirationPolicy * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;" Usage="agentsClient.CreateVectorStore (fileIds, name, storeConfiguration, expiresAfter, chunkingStrategy, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="storeConfiguration" Type="Azure.AI.Projects.VectorStoreConfiguration" />
        <Parameter Name="expiresAfter" Type="Azure.AI.Projects.VectorStoreExpirationPolicy" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileIds"> A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files. </param>
        <param name="name"> The name of the vector store. </param>
        <param name="storeConfiguration"> The vector store configuration, used when vector store is created from Azure asset URIs. </param>
        <param name="expiresAfter"> Details on when this vector store expires. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. Only applicable if file_ids is non-empty. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateVectorStoreAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateVectorStoreAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateVectorStoreAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateVectorStoreAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreAsync(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.AI.Projects.VectorStoreConfiguration,Azure.AI.Projects.VectorStoreExpirationPolicy,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt; CreateVectorStoreAsync (System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, string name = default, Azure.AI.Projects.VectorStoreConfiguration storeConfiguration = default, Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt;&gt; CreateVectorStoreAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, string name, class Azure.AI.Projects.VectorStoreConfiguration storeConfiguration, class Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreAsync(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.AI.Projects.VectorStoreConfiguration,Azure.AI.Projects.VectorStoreExpirationPolicy,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreAsync (Optional fileIds As IEnumerable(Of String) = Nothing, Optional name As String = Nothing, Optional storeConfiguration As VectorStoreConfiguration = Nothing, Optional expiresAfter As VectorStoreExpirationPolicy = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStore))" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreAsync : seq&lt;string&gt; * string * Azure.AI.Projects.VectorStoreConfiguration * Azure.AI.Projects.VectorStoreExpirationPolicy * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;&#xA;override this.CreateVectorStoreAsync : seq&lt;string&gt; * string * Azure.AI.Projects.VectorStoreConfiguration * Azure.AI.Projects.VectorStoreExpirationPolicy * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;" Usage="agentsClient.CreateVectorStoreAsync (fileIds, name, storeConfiguration, expiresAfter, chunkingStrategy, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="storeConfiguration" Type="Azure.AI.Projects.VectorStoreConfiguration" />
        <Parameter Name="expiresAfter" Type="Azure.AI.Projects.VectorStoreExpirationPolicy" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileIds"> A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files. </param>
        <param name="name"> The name of the vector store. </param>
        <param name="storeConfiguration"> The vector store configuration, used when vector store is created from Azure asset URIs. </param>
        <param name="expiresAfter"> Details on when this vector store expires. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. Only applicable if file_ids is non-empty. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateVectorStoreFile (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateVectorStoreFile(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFile(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFile (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFile : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateVectorStoreFile : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateVectorStoreFile (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file by attaching a file to a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFile(System.String,System.String,Azure.AI.Projects.VectorStoreDataSource,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt; CreateVectorStoreFile (string vectorStoreId, string fileId = default, Azure.AI.Projects.VectorStoreDataSource dataSource = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFile&gt; CreateVectorStoreFile(string vectorStoreId, string fileId, class Azure.AI.Projects.VectorStoreDataSource dataSource, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFile(System.String,System.String,Azure.AI.Projects.VectorStoreDataSource,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFile (vectorStoreId As String, Optional fileId As String = Nothing, Optional dataSource As VectorStoreDataSource = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFile : string * string * Azure.AI.Projects.VectorStoreDataSource * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&#xA;override this.CreateVectorStoreFile : string * string * Azure.AI.Projects.VectorStoreDataSource * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;" Usage="agentsClient.CreateVectorStoreFile (vectorStoreId, fileId, dataSource, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="dataSource" Type="Azure.AI.Projects.VectorStoreDataSource" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="dataSource"> Azure asset ID. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file by attaching a file to a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateVectorStoreFileAsync (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateVectorStoreFileAsync(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileAsync (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateVectorStoreFileAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateVectorStoreFileAsync (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file by attaching a file to a vector store.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileAsync(System.String,System.String,Azure.AI.Projects.VectorStoreDataSource,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt; CreateVectorStoreFileAsync (string vectorStoreId, string fileId = default, Azure.AI.Projects.VectorStoreDataSource dataSource = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFile&gt;&gt; CreateVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.AI.Projects.VectorStoreDataSource dataSource, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileAsync(System.String,System.String,Azure.AI.Projects.VectorStoreDataSource,Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileAsync (vectorStoreId As String, Optional fileId As String = Nothing, Optional dataSource As VectorStoreDataSource = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileAsync : string * string * Azure.AI.Projects.VectorStoreDataSource * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;&#xA;override this.CreateVectorStoreFileAsync : string * string * Azure.AI.Projects.VectorStoreDataSource * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;" Usage="agentsClient.CreateVectorStoreFileAsync (vectorStoreId, fileId, dataSource, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="dataSource" Type="Azure.AI.Projects.VectorStoreDataSource" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="dataSource"> Azure asset ID. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file by attaching a file to a vector store. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateVectorStoreFileBatch (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateVectorStoreFileBatch(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatch(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatch (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatch : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateVectorStoreFileBatch : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.CreateVectorStoreFileBatch (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatch(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.VectorStoreDataSource},Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt; CreateVectorStoreFileBatch (string vectorStoreId, System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.VectorStoreDataSource&gt; dataSources = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt; CreateVectorStoreFileBatch(string vectorStoreId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.VectorStoreDataSource&gt; dataSources, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatch(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.VectorStoreDataSource},Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatch (vectorStoreId As String, Optional fileIds As IEnumerable(Of String) = Nothing, Optional dataSources As IEnumerable(Of VectorStoreDataSource) = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatch : string * seq&lt;string&gt; * seq&lt;Azure.AI.Projects.VectorStoreDataSource&gt; * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&#xA;override this.CreateVectorStoreFileBatch : string * seq&lt;string&gt; * seq&lt;Azure.AI.Projects.VectorStoreDataSource&gt; * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;" Usage="agentsClient.CreateVectorStoreFileBatch (vectorStoreId, fileIds, dataSources, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="dataSources" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.VectorStoreDataSource&gt;" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileIds"> List of file identifiers. </param>
        <param name="dataSources"> List of Azure assets. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateVectorStoreFileBatchAsync (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateVectorStoreFileBatchAsync(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatchAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatchAsync (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatchAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateVectorStoreFileBatchAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.CreateVectorStoreFileBatchAsync (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.VectorStoreDataSource},Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; CreateVectorStoreFileBatchAsync (string vectorStoreId, System.Collections.Generic.IEnumerable&lt;string&gt; fileIds = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.VectorStoreDataSource&gt; dataSources = default, Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; CreateVectorStoreFileBatchAsync(string vectorStoreId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileIds, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.VectorStoreDataSource&gt; dataSources, class Azure.AI.Projects.VectorStoreChunkingStrategyRequest chunkingStrategy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.CreateVectorStoreFileBatchAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Azure.AI.Projects.VectorStoreDataSource},Azure.AI.Projects.VectorStoreChunkingStrategyRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateVectorStoreFileBatchAsync (vectorStoreId As String, Optional fileIds As IEnumerable(Of String) = Nothing, Optional dataSources As IEnumerable(Of VectorStoreDataSource) = Nothing, Optional chunkingStrategy As VectorStoreChunkingStrategyRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member CreateVectorStoreFileBatchAsync : string * seq&lt;string&gt; * seq&lt;Azure.AI.Projects.VectorStoreDataSource&gt; * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;&#xA;override this.CreateVectorStoreFileBatchAsync : string * seq&lt;string&gt; * seq&lt;Azure.AI.Projects.VectorStoreDataSource&gt; * Azure.AI.Projects.VectorStoreChunkingStrategyRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;" Usage="agentsClient.CreateVectorStoreFileBatchAsync (vectorStoreId, fileIds, dataSources, chunkingStrategy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="dataSources" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.VectorStoreDataSource&gt;" />
        <Parameter Name="chunkingStrategy" Type="Azure.AI.Projects.VectorStoreChunkingStrategyRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileIds"> List of file identifiers. </param>
        <param name="dataSources"> List of Azure assets. </param>
        <param name="chunkingStrategy"> The chunking strategy used to chunk the file(s). If not set, will use the auto strategy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteAgent (string agentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteAgent(string agentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteAgent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAgent (agentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="agentsClient.DeleteAgent (agentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentId"> The ID of the agent to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes an agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteAgentAsync (string agentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteAgentAsync(string agentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteAgentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAgentAsync (agentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="agentsClient.DeleteAgentAsync (agentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="agentId"> The ID of the agent to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes an agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="agentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="agentId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteFile (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteFile(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteFile(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFile (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteFile : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteFile : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="agentsClient.DeleteFile (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete a previously uploaded file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteFileAsync (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteFileAsync(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteFileAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFileAsync (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="agentsClient.DeleteFileAsync (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete a previously uploaded file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteThread (string threadId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteThread(string threadId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteThread(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteThread (threadId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteThread : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteThread : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="agentsClient.DeleteThread (threadId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteThreadAsync (string threadId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteThreadAsync(string threadId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteThreadAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteThreadAsync (threadId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteThreadAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteThreadAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="agentsClient.DeleteThreadAsync (threadId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to delete. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteVectorStore (string vectorStoreId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteVectorStore(string vectorStoreId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStore(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStore (vectorStoreId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStore : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteVectorStore : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.DeleteVectorStore (vectorStoreId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the vector store object matching the specified ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.DeleteVectorStore(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt; DeleteVectorStore (string vectorStoreId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreDeletionStatus&gt; DeleteVectorStore(string vectorStoreId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStore(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStore (vectorStoreId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreDeletionStatus)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStore : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;&#xA;override this.DeleteVectorStore : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;" Usage="agentsClient.DeleteVectorStore (vectorStoreId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes the vector store object matching the specified ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteVectorStoreAsync (string vectorStoreId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteVectorStoreAsync(string vectorStoreId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreAsync (vectorStoreId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteVectorStoreAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.DeleteVectorStoreAsync (vectorStoreId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the vector store object matching the specified ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;&gt; DeleteVectorStoreAsync (string vectorStoreId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreDeletionStatus&gt;&gt; DeleteVectorStoreAsync(string vectorStoreId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreAsync (vectorStoreId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreDeletionStatus))" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;&gt;&#xA;override this.DeleteVectorStoreAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;&gt;" Usage="agentsClient.DeleteVectorStoreAsync (vectorStoreId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreDeletionStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes the vector store object matching the specified ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteVectorStoreFile (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteVectorStoreFile(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFile(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFile (vectorStoreId As String, fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.DeleteVectorStoreFile (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
            To delete the file, use the delete file endpoint.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt; DeleteVectorStoreFile (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileDeletionStatus&gt; DeleteVectorStoreFile(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFile (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileDeletionStatus)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&#xA;override this.DeleteVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;" Usage="agentsClient.DeleteVectorStoreFile (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
            To delete the file, use the delete file endpoint.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteVectorStoreFileAsync (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFileAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFileAsync (vectorStoreId As String, fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.DeleteVectorStoreFileAsync (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
            To delete the file, use the delete file endpoint.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&gt; DeleteVectorStoreFileAsync (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&gt; DeleteVectorStoreFileAsync(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.DeleteVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteVectorStoreFileAsync (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileDeletionStatus))" />
      <MemberSignature Language="F#" Value="abstract member DeleteVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&gt;&#xA;override this.DeleteVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&gt;" Usage="agentsClient.DeleteVectorStoreFileAsync (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileDeletionStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted.
            To delete the file, use the delete file endpoint.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAgent (string assistantId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAgent(string assistantId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgent(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgent (assistantId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAgent : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAgent : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetAgent (assistantId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetAgent(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.Agent&gt; GetAgent (string assistantId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt; GetAgent(string assistantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgent (assistantId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Agent)" />
      <MemberSignature Language="F#" Value="abstract member GetAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;&#xA;override this.GetAgent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;" Usage="agentsClient.GetAgent (assistantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.Agent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAgentAsync (string assistantId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAgentAsync(string assistantId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgentAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentAsync (assistantId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAgentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAgentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetAgentAsync (assistantId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetAgentAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt; GetAgentAsync (string assistantId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt;&gt; GetAgentAsync(string assistantId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentAsync (assistantId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Agent))" />
      <MemberSignature Language="F#" Value="abstract member GetAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;&#xA;override this.GetAgentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;" Usage="agentsClient.GetAgentAsync (assistantId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> Identifier of the agent. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAgents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt; GetAgents (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.Agent&gt;&gt; GetAgents(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgents(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgents (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of Agent))" />
      <MemberSignature Language="F#" Value="abstract member GetAgents : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;&#xA;override this.GetAgents : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;" Usage="agentsClient.GetAgents (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of agents that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAgentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;&gt; GetAgentsAsync (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.Agent&gt;&gt;&gt; GetAgentsAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetAgentsAsync(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAgentsAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of Agent)))" />
      <MemberSignature Language="F#" Value="abstract member GetAgentsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;&gt;&#xA;override this.GetAgentsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;&gt;" Usage="agentsClient.GetAgentsAsync (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.Agent&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of agents that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetFile (string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetFile(string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFile(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetFile : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetFile (fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns information about a specific file. Does not retrieve file content.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetFile(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentFile&gt; GetFile (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt; GetFile(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFile(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentFile)" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&#xA;override this.GetFile : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;" Usage="agentsClient.GetFile (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns information about a specific file. Does not retrieve file content. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetFileAsync (string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetFileAsync(string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileAsync (fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetFileAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetFileAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetFileAsync (fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns information about a specific file. Does not retrieve file content.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetFileAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt; GetFileAsync (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt;&gt; GetFileAsync(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileAsync (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentFile))" />
      <MemberSignature Language="F#" Value="abstract member GetFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;&#xA;override this.GetFileAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;" Usage="agentsClient.GetFileAsync (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns information about a specific file. Does not retrieve file content. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileContent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetFileContent (string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetFileContent(string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileContent(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileContent (fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetFileContent : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetFileContent : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetFileContent (fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves the raw content of a specific file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetFileContent(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileContent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetFileContent (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetFileContent(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileContent(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileContent (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetFileContent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetFileContent : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="agentsClient.GetFileContent (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves the raw content of a specific file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetFileContentAsync (string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetFileContentAsync(string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileContentAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileContentAsync (fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetFileContentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetFileContentAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetFileContentAsync (fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves the raw content of a specific file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetFileContentAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFileContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetFileContentAsync (string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetFileContentAsync(string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFileContentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileContentAsync (fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetFileContentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetFileContentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="agentsClient.GetFileContentAsync (fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileId"> The ID of the file to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves the raw content of a specific file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt; GetFiles (Azure.AI.Projects.AgentFilePurpose? purpose = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Projects.AgentFile&gt;&gt; GetFiles(valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.AgentFilePurpose&gt; purpose, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFiles(System.Nullable{Azure.AI.Projects.AgentFilePurpose},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFiles (Optional purpose As Nullable(Of AgentFilePurpose) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AgentFile))" />
      <MemberSignature Language="F#" Value="abstract member GetFiles : Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;&#xA;override this.GetFiles : Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;" Usage="agentsClient.GetFiles (purpose, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="purpose" Type="System.Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="purpose"> Limits files in the response to those with the specified purpose. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of files that belong to the user's organization. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFilesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;&gt; GetFilesAsync (Azure.AI.Projects.AgentFilePurpose? purpose = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Projects.AgentFile&gt;&gt;&gt; GetFilesAsync(valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.AgentFilePurpose&gt; purpose, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetFilesAsync(System.Nullable{Azure.AI.Projects.AgentFilePurpose},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFilesAsync (Optional purpose As Nullable(Of AgentFilePurpose) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AgentFile)))" />
      <MemberSignature Language="F#" Value="abstract member GetFilesAsync : Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;&gt;&#xA;override this.GetFilesAsync : Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;&gt;" Usage="agentsClient.GetFilesAsync (purpose, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Projects.AgentFile&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="purpose" Type="System.Nullable&lt;Azure.AI.Projects.AgentFilePurpose&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="purpose"> Limits files in the response to those with the specified purpose. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of files that belong to the user's organization. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetMessage (string threadId, string messageId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetMessage(string threadId, string messageId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessage(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessage (threadId As String, messageId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetMessage : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetMessage : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetMessage (threadId, messageId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing message from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetMessage(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt; GetMessage (string threadId, string messageId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt; GetMessage(string threadId, string messageId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessage(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessage (threadId As String, messageId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member GetMessage : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&#xA;override this.GetMessage : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;" Usage="agentsClient.GetMessage (threadId, messageId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing message from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetMessageAsync (string threadId, string messageId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetMessageAsync(string threadId, string messageId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessageAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessageAsync (threadId As String, messageId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetMessageAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetMessageAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetMessageAsync (threadId, messageId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing message from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetMessageAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; GetMessageAsync (string threadId, string messageId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; GetMessageAsync(string threadId, string messageId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessageAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessageAsync (threadId As String, messageId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member GetMessageAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.GetMessageAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.GetMessageAsync (threadId, messageId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing message from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessages">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; GetMessages (string threadId, string runId = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; GetMessages(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessages(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessages (threadId As String, Optional runId As String = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member GetMessages : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.GetMessages : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.GetMessages (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Filter messages by the run ID that generated them. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of messages that exist on a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMessagesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&gt; GetMessagesAsync (string threadId, string runId = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt;&gt; GetMessagesAsync(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMessagesAsync (threadId As String, Optional runId As String = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of ThreadMessage)))" />
      <MemberSignature Language="F#" Value="abstract member GetMessagesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&gt;&#xA;override this.GetMessagesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&gt;" Usage="agentsClient.GetMessagesAsync (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Filter messages by the run ID that generated them. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of messages that exist on a thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRun (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRun(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRun(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRun (threadId As String, runId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRun : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRun : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetRun (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing run from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetRun(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; GetRun (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; GetRun(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRun(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRun (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member GetRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.GetRun : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.GetRun (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing run from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRunAsync (string threadId, string runId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRunAsync(string threadId, string runId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunAsync (threadId As String, runId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRunAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetRunAsync (threadId, runId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets an existing run from an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetRunAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; GetRunAsync (string threadId, string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; GetRunAsync(string threadId, string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunAsync (threadId As String, runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member GetRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.GetRunAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.GetRunAsync (threadId, runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets an existing run from an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt; GetRuns (string threadId, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; GetRuns(string threadId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRuns(System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRuns (threadId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member GetRuns : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.GetRuns : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.GetRuns (threadId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of runs for a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&gt; GetRunsAsync (string threadId, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt;&gt; GetRunsAsync(string threadId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunsAsync(System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunsAsync (threadId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of ThreadRun)))" />
      <MemberSignature Language="F#" Value="abstract member GetRunsAsync : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&gt;&#xA;override this.GetRunsAsync : string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&gt;" Usage="agentsClient.GetRunsAsync (threadId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of runs for a specified thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStep">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRunStep (string threadId, string runId, string stepId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRunStep(string threadId, string runId, string stepId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStep(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStep (threadId As String, runId As String, stepId As String, include As IEnumerable(Of RunAdditionalFieldList), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRunStep : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRunStep : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetRunStep (threadId, runId, stepId, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="stepId" Type="System.String" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="stepId"> Identifier of the run step. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a single run step from a thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetRunStep(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStep">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.RunStep&gt; GetRunStep (string threadId, string runId, string stepId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.RunStep&gt; GetRunStep(string threadId, string runId, string stepId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStep(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStep (threadId As String, runId As String, stepId As String, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RunStep)" />
      <MemberSignature Language="F#" Value="abstract member GetRunStep : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.RunStep&gt;&#xA;override this.GetRunStep : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.RunStep&gt;" Usage="agentsClient.GetRunStep (threadId, runId, stepId, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.RunStep&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="stepId" Type="System.String" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="stepId"> Identifier of the run step. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a single run step from a thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStepAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRunStepAsync (string threadId, string runId, string stepId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRunStepAsync(string threadId, string runId, string stepId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStepAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStepAsync (threadId As String, runId As String, stepId As String, include As IEnumerable(Of RunAdditionalFieldList), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRunStepAsync : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRunStepAsync : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetRunStepAsync (threadId, runId, stepId, include, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="stepId" Type="System.String" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="stepId"> Identifier of the run step. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a single run step from a thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetRunStepAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStepAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.RunStep&gt;&gt; GetRunStepAsync (string threadId, string runId, string stepId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; include = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.RunStep&gt;&gt; GetRunStepAsync(string threadId, string runId, string stepId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Projects.RunAdditionalFieldList&gt; include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStepAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.RunAdditionalFieldList},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStepAsync (threadId As String, runId As String, stepId As String, Optional include As IEnumerable(Of RunAdditionalFieldList) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RunStep))" />
      <MemberSignature Language="F#" Value="abstract member GetRunStepAsync : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.RunStep&gt;&gt;&#xA;override this.GetRunStepAsync : string * string * string * seq&lt;Azure.AI.Projects.RunAdditionalFieldList&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.RunStep&gt;&gt;" Usage="agentsClient.GetRunStepAsync (threadId, runId, stepId, include, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.RunStep&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="stepId" Type="System.String" />
        <Parameter Name="include" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.RunAdditionalFieldList&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="stepId"> Identifier of the run step. </param>
        <param name="include">
            A list of additional fields to include in the response.
            Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a single run step from a thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="stepId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunSteps">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt; GetRunSteps (Azure.AI.Projects.ThreadRun run, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.RunStep&gt;&gt; GetRunSteps(class Azure.AI.Projects.ThreadRun run, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunSteps(Azure.AI.Projects.ThreadRun,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunSteps (run As ThreadRun, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of RunStep))" />
      <MemberSignature Language="F#" Value="abstract member GetRunSteps : Azure.AI.Projects.ThreadRun * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&#xA;override this.GetRunSteps : Azure.AI.Projects.ThreadRun * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;" Usage="agentsClient.GetRunSteps (run, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> instance from which run steps should be listed. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of run steps associated an agent thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunSteps">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt; GetRunSteps (string threadId, string runId, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.RunStep&gt;&gt; GetRunSteps(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunSteps(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunSteps (threadId As String, runId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of RunStep))" />
      <MemberSignature Language="F#" Value="abstract member GetRunSteps : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&#xA;override this.GetRunSteps : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;" Usage="agentsClient.GetRunSteps (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of run steps from a thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStepsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt; GetRunStepsAsync (Azure.AI.Projects.ThreadRun run, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.RunStep&gt;&gt;&gt; GetRunStepsAsync(class Azure.AI.Projects.ThreadRun run, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStepsAsync(Azure.AI.Projects.ThreadRun,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStepsAsync (run As ThreadRun, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of RunStep)))" />
      <MemberSignature Language="F#" Value="abstract member GetRunStepsAsync : Azure.AI.Projects.ThreadRun * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;&#xA;override this.GetRunStepsAsync : Azure.AI.Projects.ThreadRun * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;" Usage="agentsClient.GetRunStepsAsync (run, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> instance from which run steps should be listed. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of run steps associated an agent thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunStepsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt; GetRunStepsAsync (string threadId, string runId, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.RunStep&gt;&gt;&gt; GetRunStepsAsync(string threadId, string runId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetRunStepsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRunStepsAsync (threadId As String, runId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of RunStep)))" />
      <MemberSignature Language="F#" Value="abstract member GetRunStepsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;&#xA;override this.GetRunStepsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;" Usage="agentsClient.GetRunStepsAsync (threadId, runId, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.RunStep&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of run steps from a thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetThread (string threadId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetThread(string threadId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThread(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThread (threadId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetThread : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetThread : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetThread (threadId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetThread(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentThread&gt; GetThread (string threadId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt; GetThread(string threadId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThread(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThread (threadId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentThread)" />
      <MemberSignature Language="F#" Value="abstract member GetThread : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&#xA;override this.GetThread : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;" Usage="agentsClient.GetThread (threadId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetThreadAsync (string threadId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetThreadAsync(string threadId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThreadAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThreadAsync (threadId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetThreadAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetThreadAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetThreadAsync (threadId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetThreadAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt; GetThreadAsync (string threadId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt;&gt; GetThreadAsync(string threadId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThreadAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThreadAsync (threadId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentThread))" />
      <MemberSignature Language="F#" Value="abstract member GetThreadAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;&#xA;override this.GetThreadAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;" Usage="agentsClient.GetThreadAsync (threadId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetThreads">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt; GetThreads (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.AgentThread&gt;&gt; GetThreads(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThreads(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThreads (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PageableList(Of AgentThread))" />
      <MemberSignature Language="F#" Value="abstract member GetThreads : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;&#xA;override this.GetThreads : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;" Usage="agentsClient.GetThreads (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of threads that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThreadsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;&gt; GetThreadsAsync (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.PageableList`1&lt;class Azure.AI.Projects.AgentThread&gt;&gt;&gt; GetThreadsAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetThreadsAsync(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetThreadsAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PageableList(Of AgentThread)))" />
      <MemberSignature Language="F#" Value="abstract member GetThreadsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;&gt;&#xA;override this.GetThreadsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;&gt;" Usage="agentsClient.GetThreadsAsync (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.PageableList&lt;Azure.AI.Projects.AgentThread&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a list of threads that were previously created. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStore (string vectorStoreId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStore(string vectorStoreId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStore(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStore (vectorStoreId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStore : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStore : string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStore (vectorStoreId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the vector store object matching the specified ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStore(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStore&gt; GetVectorStore (string vectorStoreId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt; GetVectorStore(string vectorStoreId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStore(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStore (vectorStoreId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStore)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStore : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&#xA;override this.GetVectorStore : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;" Usage="agentsClient.GetVectorStore (vectorStoreId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the vector store object matching the specified ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreAsync (string vectorStoreId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreAsync(string vectorStoreId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreAsync (vectorStoreId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoreAsync (vectorStoreId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the vector store object matching the specified ID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt; GetVectorStoreAsync (string vectorStoreId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt;&gt; GetVectorStoreAsync(string vectorStoreId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreAsync (vectorStoreId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStore))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;&#xA;override this.GetVectorStoreAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;" Usage="agentsClient.GetVectorStoreAsync (vectorStoreId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the vector store object matching the specified ID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFile (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFile(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFile(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFile (vectorStoreId As String, fileId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFile : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStoreFile (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a vector store file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt; GetVectorStoreFile (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFile&gt; GetVectorStoreFile(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFile(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFile (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&#xA;override this.GetVectorStoreFile : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;" Usage="agentsClient.GetVectorStoreFile (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a vector store file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFileAsync (string vectorStoreId, string fileId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFileAsync(string vectorStoreId, string fileId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileAsync (vectorStoreId As String, fileId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFileAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoreFileAsync (vectorStoreId, fileId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a vector store file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt; GetVectorStoreFileAsync (string vectorStoreId, string fileId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFile&gt;&gt; GetVectorStoreFileAsync(string vectorStoreId, string fileId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileAsync (vectorStoreId As String, fileId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;&#xA;override this.GetVectorStoreFileAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;" Usage="agentsClient.GetVectorStoreFileAsync (vectorStoreId, fileId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="fileId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="fileId"> Identifier of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a vector store file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="fileId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFileBatch (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFileBatch(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatch(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatch (vectorStoreId As String, batchId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFileBatch : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStoreFileBatch (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieve a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt; GetVectorStoreFileBatch (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt; GetVectorStoreFileBatch(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatch(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatch (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStoreFileBatch)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&#xA;override this.GetVectorStoreFileBatch : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;" Usage="agentsClient.GetVectorStoreFileBatch (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieve a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFileBatchAsync (string vectorStoreId, string batchId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFileBatchAsync(string vectorStoreId, string batchId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFileBatchAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoreFileBatchAsync (vectorStoreId, batchId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieve a vector store file batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; GetVectorStoreFileBatchAsync (string vectorStoreId, string batchId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStoreFileBatch&gt;&gt; GetVectorStoreFileBatchAsync(string vectorStoreId, string batchId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchAsync (vectorStoreId As String, batchId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStoreFileBatch))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;&#xA;override this.GetVectorStoreFileBatchAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;" Usage="agentsClient.GetVectorStoreFileBatchAsync (vectorStoreId, batchId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStoreFileBatch&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieve a vector store file batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt; GetVectorStoreFileBatchFiles (string vectorStoreId, string batchId, Azure.AI.Projects.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt; GetVectorStoreFileBatchFiles(string vectorStoreId, string batchId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFiles(System.String,System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFiles (vectorStoreId As String, batchId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentPageableListOfVectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFiles : string * string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&#xA;override this.GetVectorStoreFileBatchFiles : string * string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;" Usage="agentsClient.GetVectorStoreFileBatchFiles (vectorStoreId, batchId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files in a batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFileBatchFiles (string vectorStoreId, string batchId, string filter, int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFileBatchFiles(string vectorStoreId, string batchId, string filter, valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFiles(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFiles (vectorStoreId As String, batchId As String, filter As String, limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFiles : string * string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFileBatchFiles : string * string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStoreFileBatchFiles (vectorStoreId, batchId, filter, limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. Allowed values: "in_progress" | "completed" | "failed" | "cancelled". </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector store files in a batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFiles(System.String,System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFilesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt; GetVectorStoreFileBatchFilesAsync (string vectorStoreId, string batchId, Azure.AI.Projects.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt; GetVectorStoreFileBatchFilesAsync(string vectorStoreId, string batchId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFilesAsync(System.String,System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFilesAsync (vectorStoreId As String, batchId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentPageableListOfVectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFilesAsync : string * string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;&#xA;override this.GetVectorStoreFileBatchFilesAsync : string * string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;" Usage="agentsClient.GetVectorStoreFileBatchFilesAsync (vectorStoreId, batchId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files in a batch. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFileBatchFilesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFileBatchFilesAsync (string vectorStoreId, string batchId, string filter, int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFileBatchFilesAsync(string vectorStoreId, string batchId, string filter, valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFilesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFileBatchFilesAsync (vectorStoreId As String, batchId As String, filter As String, limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFileBatchFilesAsync : string * string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFileBatchFilesAsync : string * string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoreFileBatchFilesAsync (vectorStoreId, batchId, filter, limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="batchId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="batchId"> Identifier of the file batch. </param>
        <param name="filter"> Filter by file status. Allowed values: "in_progress" | "completed" | "failed" | "cancelled". </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector store files in a batch.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFileBatchFilesAsync(System.String,System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> or <paramref name="batchId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt; GetVectorStoreFiles (string vectorStoreId, Azure.AI.Projects.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt; GetVectorStoreFiles(string vectorStoreId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFiles(System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFiles (vectorStoreId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentPageableListOfVectorStoreFile)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFiles : string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&#xA;override this.GetVectorStoreFiles : string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;" Usage="agentsClient.GetVectorStoreFiles (vectorStoreId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStoreFiles (string vectorStoreId, string filter, int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStoreFiles(string vectorStoreId, string filter, valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFiles(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFiles (vectorStoreId As String, filter As String, limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFiles : string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStoreFiles : string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStoreFiles (vectorStoreId, filter, limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. Allowed values: "in_progress" | "completed" | "failed" | "cancelled". </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector store files.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFiles(System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFilesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt; GetVectorStoreFilesAsync (string vectorStoreId, Azure.AI.Projects.VectorStoreFileStatusFilter? filter = default, int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt; GetVectorStoreFilesAsync(string vectorStoreId, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.VectorStoreFileStatusFilter&gt; filter, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFilesAsync(System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFilesAsync (vectorStoreId As String, Optional filter As Nullable(Of VectorStoreFileStatusFilter) = Nothing, Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentPageableListOfVectorStoreFile))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFilesAsync : string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;&#xA;override this.GetVectorStoreFilesAsync : string * Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;" Usage="agentsClient.GetVectorStoreFilesAsync (vectorStoreId, filter, limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStoreFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.Nullable&lt;Azure.AI.Projects.VectorStoreFileStatusFilter&gt;" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector store files. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoreFilesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoreFilesAsync (string vectorStoreId, string filter, int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoreFilesAsync(string vectorStoreId, string filter, valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoreFilesAsync (vectorStoreId As String, filter As String, limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoreFilesAsync : string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoreFilesAsync : string * string * Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoreFilesAsync (vectorStoreId, filter, limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="filter"> Filter by file status. Allowed values: "in_progress" | "completed" | "failed" | "cancelled". </param>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector store files.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoreFilesAsync(System.String,System.Nullable{Azure.AI.Projects.VectorStoreFileStatusFilter},System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStores">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt; GetVectorStores (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStore&gt; GetVectorStores(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStores(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStores (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentPageableListOfVectorStore)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStores : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&#xA;override this.GetVectorStores : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;" Usage="agentsClient.GetVectorStores (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector stores. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStores">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetVectorStores (int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetVectorStores(valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStores(System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStores (limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStores : Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetVectorStores : Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.GetVectorStores (limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector stores.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStores(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoresAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&gt; GetVectorStoresAsync (int? limit = default, Azure.AI.Projects.ListSortOrder? order = default, string after = default, string before = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&gt; GetVectorStoresAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;valuetype Azure.AI.Projects.ListSortOrder&gt; order, string after, string before, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoresAsync(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoresAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional order As Nullable(Of ListSortOrder) = Nothing, Optional after As String = Nothing, Optional before As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentPageableListOfVectorStore))" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoresAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&gt;&#xA;override this.GetVectorStoresAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Projects.ListSortOrder&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&gt;" Usage="agentsClient.GetVectorStoresAsync (limit, order, after, before, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentPageableListOfVectorStore&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.Nullable&lt;Azure.AI.Projects.ListSortOrder&gt;" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns a list of vector stores. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVectorStoresAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetVectorStoresAsync (int? limit, string order, string after, string before, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetVectorStoresAsync(valuetype System.Nullable`1&lt;int32&gt; limit, string order, string after, string before, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.GetVectorStoresAsync(System.Nullable{System.Int32},System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVectorStoresAsync (limit As Nullable(Of Integer), order As String, after As String, before As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetVectorStoresAsync : Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetVectorStoresAsync : Nullable&lt;int&gt; * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.GetVectorStoresAsync (limit, order, after, before, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="order" Type="System.String" />
        <Parameter Name="after" Type="System.String" />
        <Parameter Name="before" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. </param>
        <param name="order"> Sort order by the created_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: "asc" | "desc". </param>
        <param name="after"> A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. </param>
        <param name="before"> A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of vector stores.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.GetVectorStoresAsync(System.Nullable{System.Int32},System.Nullable{Azure.AI.Projects.ListSortOrder},System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ModifyVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ModifyVectorStore (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ModifyVectorStore(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.ModifyVectorStore(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ModifyVectorStore (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ModifyVectorStore : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ModifyVectorStore : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.ModifyVectorStore (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] The ID of the vector store to modify.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.ModifyVectorStore(System.String,System.String,Azure.AI.Projects.VectorStoreExpirationPolicy,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ModifyVectorStore">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.VectorStore&gt; ModifyVectorStore (string vectorStoreId, string name = default, Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt; ModifyVectorStore(string vectorStoreId, string name, class Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.ModifyVectorStore(System.String,System.String,Azure.AI.Projects.VectorStoreExpirationPolicy,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ModifyVectorStore (vectorStoreId As String, Optional name As String = Nothing, Optional expiresAfter As VectorStoreExpirationPolicy = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VectorStore)" />
      <MemberSignature Language="F#" Value="abstract member ModifyVectorStore : string * string * Azure.AI.Projects.VectorStoreExpirationPolicy * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&#xA;override this.ModifyVectorStore : string * string * Azure.AI.Projects.VectorStoreExpirationPolicy * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;" Usage="agentsClient.ModifyVectorStore (vectorStoreId, name, expiresAfter, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expiresAfter" Type="Azure.AI.Projects.VectorStoreExpirationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="name"> The name of the vector store. </param>
        <param name="expiresAfter"> Details on when this vector store expires. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> The ID of the vector store to modify. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="ModifyVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ModifyVectorStoreAsync (string vectorStoreId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ModifyVectorStoreAsync(string vectorStoreId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.ModifyVectorStoreAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ModifyVectorStoreAsync (vectorStoreId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ModifyVectorStoreAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ModifyVectorStoreAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.ModifyVectorStoreAsync (vectorStoreId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] The ID of the vector store to modify.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.ModifyVectorStoreAsync(System.String,System.String,Azure.AI.Projects.VectorStoreExpirationPolicy,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ModifyVectorStoreAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt; ModifyVectorStoreAsync (string vectorStoreId, string name = default, Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.VectorStore&gt;&gt; ModifyVectorStoreAsync(string vectorStoreId, string name, class Azure.AI.Projects.VectorStoreExpirationPolicy expiresAfter, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.ModifyVectorStoreAsync(System.String,System.String,Azure.AI.Projects.VectorStoreExpirationPolicy,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ModifyVectorStoreAsync (vectorStoreId As String, Optional name As String = Nothing, Optional expiresAfter As VectorStoreExpirationPolicy = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VectorStore))" />
      <MemberSignature Language="F#" Value="abstract member ModifyVectorStoreAsync : string * string * Azure.AI.Projects.VectorStoreExpirationPolicy * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;&#xA;override this.ModifyVectorStoreAsync : string * string * Azure.AI.Projects.VectorStoreExpirationPolicy * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;" Usage="agentsClient.ModifyVectorStoreAsync (vectorStoreId, name, expiresAfter, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.VectorStore&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vectorStoreId" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="expiresAfter" Type="Azure.AI.Projects.VectorStoreExpirationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vectorStoreId"> Identifier of the vector store. </param>
        <param name="name"> The name of the vector store. </param>
        <param name="expiresAfter"> Details on when this vector store expires. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> The ID of the vector store to modify. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vectorStoreId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="vectorStoreId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Projects.AgentsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Projects.AgentsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; SubmitToolOutputsToRun (Azure.AI.Projects.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; SubmitToolOutputsToRun(class Azure.AI.Projects.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRun(Azure.AI.Projects.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRun (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRun : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.SubmitToolOutputsToRun : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.SubmitToolOutputsToRun (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> The list of tool call outputs to provide as part of an output submission to an agent thread run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tool calls as requested by a run with a status of 'requires_action' with required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response SubmitToolOutputsToRun (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response SubmitToolOutputsToRun(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRun(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRun (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.SubmitToolOutputsToRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.SubmitToolOutputsToRun (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> Serialized json contents. </param>
        <param name="context"> Options that can be used to control the request. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; SubmitToolOutputsToRun (string threadId, string runId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, bool? stream = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; SubmitToolOutputsToRun(string threadId, string runId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRun(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRun (threadId As String, runId As String, toolOutputs As IEnumerable(Of ToolOutput), Optional stream As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRun : string * string * seq&lt;Azure.AI.Projects.ToolOutput&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.SubmitToolOutputsToRun : string * string * seq&lt;Azure.AI.Projects.ToolOutput&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.SubmitToolOutputsToRun (threadId, runId, toolOutputs, stream, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="stream"> If true, returns a stream of events that happen during the Run as server-sent events, terminating when the run enters a terminal state. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="toolOutputs" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync (Azure.AI.Projects.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync(class Azure.AI.Projects.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRunAsync(Azure.AI.Projects.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRunAsync (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRunAsync : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.SubmitToolOutputsToRunAsync : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.SubmitToolOutputsToRunAsync (run, toolOutputs, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> The list of tool call outputs to provide as part of an output submission to an agent thread run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tool calls as requested by a run with a status of 'requires_action' with required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" />  is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SubmitToolOutputsToRunAsync (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SubmitToolOutputsToRunAsync(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRunAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRunAsync (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SubmitToolOutputsToRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.SubmitToolOutputsToRunAsync (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> Serialized json contents. </param>
        <param name="context"> Options that can be used to control the request. </param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync (string threadId, string runId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, bool? stream = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; SubmitToolOutputsToRunAsync(string threadId, string runId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Nullable`1&lt;bool&gt; stream, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToRunAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToRunAsync (threadId As String, runId As String, toolOutputs As IEnumerable(Of ToolOutput), Optional stream As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToRunAsync : string * string * seq&lt;Azure.AI.Projects.ToolOutput&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.SubmitToolOutputsToRunAsync : string * string * seq&lt;Azure.AI.Projects.ToolOutput&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.SubmitToolOutputsToRunAsync (threadId, runId, toolOutputs, stream, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="stream" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="stream"> If true, returns a stream of events that happen during the Run as server-sent events, terminating when the run enters a terminal state. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Submits outputs from tools as requested by tool calls in a run. Runs that need submitted tool outputs will have a status of 'requires_action' with a required_action.type of 'submit_tool_outputs'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="toolOutputs" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToStream">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt; SubmitToolOutputsToStream (Azure.AI.Projects.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default, Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.CollectionResult`1&lt;class Azure.AI.Projects.StreamingUpdate&gt; SubmitToolOutputsToStream(class Azure.AI.Projects.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken, class Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToStream(Azure.AI.Projects.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Threading.CancellationToken,Azure.AI.Projects.AutoFunctionCallOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToStream (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing, Optional autoFunctionCallOptions As AutoFunctionCallOptions = Nothing) As CollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToStream : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;&#xA;override this.SubmitToolOutputsToStream : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;" Usage="agentsClient.SubmitToolOutputsToStream (run, toolOutputs, cancellationToken, autoFunctionCallOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.CollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="autoFunctionCallOptions" Type="Azure.AI.Projects.AutoFunctionCallOptions" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <param name="autoFunctionCallOptions">If specified, function calls defined in tools will be called automatically.</param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" /> or <paramref name="toolOutputs" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitToolOutputsToStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt; SubmitToolOutputsToStreamAsync (Azure.AI.Projects.ThreadRun run, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt; toolOutputs, System.Threading.CancellationToken cancellationToken = default, Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ClientModel.AsyncCollectionResult`1&lt;class Azure.AI.Projects.StreamingUpdate&gt; SubmitToolOutputsToStreamAsync(class Azure.AI.Projects.ThreadRun run, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolOutput&gt; toolOutputs, valuetype System.Threading.CancellationToken cancellationToken, class Azure.AI.Projects.AutoFunctionCallOptions autoFunctionCallOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.SubmitToolOutputsToStreamAsync(Azure.AI.Projects.ThreadRun,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolOutput},System.Threading.CancellationToken,Azure.AI.Projects.AutoFunctionCallOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitToolOutputsToStreamAsync (run As ThreadRun, toolOutputs As IEnumerable(Of ToolOutput), Optional cancellationToken As CancellationToken = Nothing, Optional autoFunctionCallOptions As AutoFunctionCallOptions = Nothing) As AsyncCollectionResult(Of StreamingUpdate)" />
      <MemberSignature Language="F#" Value="abstract member SubmitToolOutputsToStreamAsync : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;&#xA;override this.SubmitToolOutputsToStreamAsync : Azure.AI.Projects.ThreadRun * seq&lt;Azure.AI.Projects.ToolOutput&gt; * System.Threading.CancellationToken * Azure.AI.Projects.AutoFunctionCallOptions -&gt; System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;" Usage="agentsClient.SubmitToolOutputsToStreamAsync (run, toolOutputs, cancellationToken, autoFunctionCallOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ClientModel.AsyncCollectionResult&lt;Azure.AI.Projects.StreamingUpdate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="Azure.AI.Projects.ThreadRun" />
        <Parameter Name="toolOutputs" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolOutput&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="autoFunctionCallOptions" Type="Azure.AI.Projects.AutoFunctionCallOptions" />
      </Parameters>
      <Docs>
        <param name="run"> The <see cref="T:Azure.AI.Projects.ThreadRun" /> that the tool outputs should be submitted to. </param>
        <param name="toolOutputs"> A list of tools for which the outputs are being submitted. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <param name="autoFunctionCallOptions">If specified, function calls defined in tools will be called automatically.</param>
        <summary> Submits outputs from tools as requested by tool calls in a stream. Stream updates that need submitted tool outputs will have a status of 'RunStatus.RequiresAction'. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="run" /> or <paramref name="toolOutputs" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateAgent (string assistantId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateAgent(string assistantId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateAgent(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgent (assistantId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateAgent : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.UpdateAgent (assistantId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateAgent(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgent">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.Agent&gt; UpdateAgent (string assistantId, string model = default, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; tools = default, Azure.AI.Projects.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt; UpdateAgent(string assistantId, string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; tools, class Azure.AI.Projects.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateAgent(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgent (assistantId As String, Optional model As String = Nothing, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Agent)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgent : string * string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;&#xA;override this.UpdateAgent : string * string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Agent&gt;" Usage="agentsClient.UpdateAgent (assistantId, model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.Agent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The modified name for the agent to use. </param>
        <param name="description"> The modified description for the agent to use. </param>
        <param name="instructions"> The modified system instructions for the new agent to use. </param>
        <param name="tools"> The modified collection of tools to enable for the agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example,
             the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAgentAsync (string assistantId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAgentAsync(string assistantId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateAgentAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgentAsync (assistantId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgentAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAgentAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.UpdateAgentAsync (assistantId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing agent.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateAgentAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAgentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt; UpdateAgentAsync (string assistantId, string model = default, string name = default, string description = default, string instructions = default, System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt; tools = default, Azure.AI.Projects.ToolResources toolResources = default, float? temperature = default, float? topP = default, BinaryData responseFormat = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.Agent&gt;&gt; UpdateAgentAsync(string assistantId, string model, string name, string description, string instructions, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Projects.ToolDefinition&gt; tools, class Azure.AI.Projects.ToolResources toolResources, valuetype System.Nullable`1&lt;float32&gt; temperature, valuetype System.Nullable`1&lt;float32&gt; topP, class System.BinaryData responseFormat, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateAgentAsync(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Projects.ToolDefinition},Azure.AI.Projects.ToolResources,System.Nullable{System.Single},System.Nullable{System.Single},System.BinaryData,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAgentAsync (assistantId As String, Optional model As String = Nothing, Optional name As String = Nothing, Optional description As String = Nothing, Optional instructions As String = Nothing, Optional tools As IEnumerable(Of ToolDefinition) = Nothing, Optional toolResources As ToolResources = Nothing, Optional temperature As Nullable(Of Single) = Nothing, Optional topP As Nullable(Of Single) = Nothing, Optional responseFormat As BinaryData = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Agent))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAgentAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;&#xA;override this.UpdateAgentAsync : string * string * string * string * string * seq&lt;Azure.AI.Projects.ToolDefinition&gt; * Azure.AI.Projects.ToolResources * Nullable&lt;single&gt; * Nullable&lt;single&gt; * BinaryData * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;" Usage="agentsClient.UpdateAgentAsync (assistantId, model, name, description, instructions, tools, toolResources, temperature, topP, responseFormat, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Agent&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assistantId" Type="System.String" />
        <Parameter Name="model" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="instructions" Type="System.String" />
        <Parameter Name="tools" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Projects.ToolDefinition&gt;" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="temperature" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="topP" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="responseFormat" Type="System.BinaryData" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="assistantId"> The ID of the agent to modify. </param>
        <param name="model"> The ID of the model to use. </param>
        <param name="name"> The modified name for the agent to use. </param>
        <param name="description"> The modified description for the agent to use. </param>
        <param name="instructions"> The modified system instructions for the new agent to use. </param>
        <param name="tools"> The modified collection of tools to enable for the agent. </param>
        <param name="toolResources">
             A set of resources that are used by the agent's tools. The resources are specific to the type of tool. For example,
             the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
             </param>
        <param name="temperature">
             What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
             while lower values like 0.2 will make it more focused and deterministic.
             </param>
        <param name="topP">
             An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
             So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            
             We generally recommend altering this or temperature but not both.
             </param>
        <param name="responseFormat"> The response format of the tool calls used by this agent. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing agent. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assistantId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assistantId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateMessage (string threadId, string messageId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateMessage(string threadId, string messageId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateMessage(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessage (threadId As String, messageId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessage : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateMessage : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.UpdateMessage (threadId, messageId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing message on an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateMessage(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="messageId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessage">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt; UpdateMessage (string threadId, string messageId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt; UpdateMessage(string threadId, string messageId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateMessage(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessage (threadId As String, messageId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadMessage)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessage : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&#xA;override this.UpdateMessage : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;" Usage="agentsClient.UpdateMessage (threadId, messageId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing message on an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateMessageAsync (string threadId, string messageId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateMessageAsync(string threadId, string messageId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateMessageAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessageAsync (threadId As String, messageId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessageAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateMessageAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.UpdateMessageAsync (threadId, messageId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing message on an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateMessageAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="messageId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt; UpdateMessageAsync (string threadId, string messageId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadMessage&gt;&gt; UpdateMessageAsync(string threadId, string messageId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateMessageAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMessageAsync (threadId As String, messageId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadMessage))" />
      <MemberSignature Language="F#" Value="abstract member UpdateMessageAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;&#xA;override this.UpdateMessageAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;" Usage="agentsClient.UpdateMessageAsync (threadId, messageId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadMessage&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="messageId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="messageId"> Identifier of the message. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing message on an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="messageId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateRun (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateRun(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateRun(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRun (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateRun : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.UpdateRun (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateRun(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt; UpdateRun (string threadId, string runId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt; UpdateRun(string threadId, string runId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateRun(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRun (threadId As String, runId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ThreadRun)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRun : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&#xA;override this.UpdateRun : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;" Usage="agentsClient.UpdateRun (threadId, runId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateRunAsync (string threadId, string runId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateRunAsync(string threadId, string runId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateRunAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRunAsync (threadId As String, runId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateRunAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.UpdateRunAsync (threadId, runId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateRunAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" />, <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt; UpdateRunAsync (string threadId, string runId, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.ThreadRun&gt;&gt; UpdateRunAsync(string threadId, string runId, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateRunAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateRunAsync (threadId As String, runId As String, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ThreadRun))" />
      <MemberSignature Language="F#" Value="abstract member UpdateRunAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;&#xA;override this.UpdateRunAsync : string * string * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;" Usage="agentsClient.UpdateRunAsync (threadId, runId, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.ThreadRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> Identifier of the thread. </param>
        <param name="runId"> Identifier of the run. </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="runId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> or <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateThread (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateThread(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateThread(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateThread (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateThread : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateThread : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.UpdateThread (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateThread(System.String,Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateThread">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentThread&gt; UpdateThread (string threadId, Azure.AI.Projects.ToolResources toolResources = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt; UpdateThread(string threadId, class Azure.AI.Projects.ToolResources toolResources, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateThread(System.String,Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateThread (threadId As String, Optional toolResources As ToolResources = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentThread)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThread : string * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&#xA;override this.UpdateThread : string * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;" Usage="agentsClient.UpdateThread (threadId, toolResources, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to modify. </param>
        <param name="toolResources">
            A set of resources that are made available to the agent's tools in this thread. The resources are specific to the
            type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs
            </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateThreadAsync (string threadId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateThreadAsync(string threadId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateThreadAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateThreadAsync (threadId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateThreadAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.UpdateThreadAsync (threadId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to modify. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Modifies an existing thread.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UpdateThreadAsync(System.String,Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateThreadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt; UpdateThreadAsync (string threadId, Azure.AI.Projects.ToolResources toolResources = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; metadata = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentThread&gt;&gt; UpdateThreadAsync(string threadId, class Azure.AI.Projects.ToolResources toolResources, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UpdateThreadAsync(System.String,Azure.AI.Projects.ToolResources,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateThreadAsync (threadId As String, Optional toolResources As ToolResources = Nothing, Optional metadata As IReadOnlyDictionary(Of String, String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentThread))" />
      <MemberSignature Language="F#" Value="abstract member UpdateThreadAsync : string * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;&#xA;override this.UpdateThreadAsync : string * Azure.AI.Projects.ToolResources * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;" Usage="agentsClient.UpdateThreadAsync (threadId, toolResources, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentThread&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="threadId" Type="System.String" />
        <Parameter Name="toolResources" Type="Azure.AI.Projects.ToolResources" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="threadId"> The ID of the thread to modify. </param>
        <param name="toolResources">
            A set of resources that are made available to the agent's tools in this thread. The resources are specific to the
            type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs
            </param>
        <param name="metadata"> A set of up to 16 key/value pairs that can be attached to an object, used for storing additional information about that object in a structured format. Keys may be up to 64 characters in length and values may be up to 512 characters in length. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Modifies an existing thread. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="threadId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="threadId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UploadFile (Azure.Core.RequestContent content, string contentType, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UploadFile(class Azure.Core.RequestContent content, string contentType, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFile(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFile (content As RequestContent, contentType As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UploadFile : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UploadFile : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="agentsClient.UploadFile (content, contentType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> The name of the file to upload. Allowed values: "multipart/form-data". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Uploads a file for use by other operations.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UploadFile(Azure.AI.Projects.UploadFileRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentFile&gt; UploadFile (string filePath, Azure.AI.Projects.AgentFilePurpose purpose, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt; UploadFile(string filePath, valuetype Azure.AI.Projects.AgentFilePurpose purpose, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFile(System.String,Azure.AI.Projects.AgentFilePurpose,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFile (filePath As String, purpose As AgentFilePurpose, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentFile)" />
      <MemberSignature Language="F#" Value="abstract member UploadFile : string * Azure.AI.Projects.AgentFilePurpose * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&#xA;override this.UploadFile : string * Azure.AI.Projects.AgentFilePurpose * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;" Usage="agentsClient.UploadFile (filePath, purpose, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="purpose" Type="Azure.AI.Projects.AgentFilePurpose" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filePath"> The local file path. </param>
        <param name="purpose"> The intended purpose of the uploaded file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Uploads a file from a local file path accessible to <see cref="T:System.IO.File" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentFile&gt; UploadFile (System.IO.Stream data, Azure.AI.Projects.AgentFilePurpose purpose, string filename, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt; UploadFile(class System.IO.Stream data, valuetype Azure.AI.Projects.AgentFilePurpose purpose, string filename, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFile(System.IO.Stream,Azure.AI.Projects.AgentFilePurpose,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFile (data As Stream, purpose As AgentFilePurpose, filename As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentFile)" />
      <MemberSignature Language="F#" Value="abstract member UploadFile : System.IO.Stream * Azure.AI.Projects.AgentFilePurpose * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&#xA;override this.UploadFile : System.IO.Stream * Azure.AI.Projects.AgentFilePurpose * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;" Usage="agentsClient.UploadFile (data, purpose, filename, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="purpose" Type="Azure.AI.Projects.AgentFilePurpose" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="data"> The file data, in bytes. </param>
        <param name="purpose"> The intended purpose of the uploaded file. Use `assistants` for Agents and Message files, `vision` for Agents image file inputs, `batch` for Batch API, and `fine-tune` for Fine-tuning. </param>
        <param name="filename"> The name of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Uploads a file for use by other operations. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UploadFileAsync (Azure.Core.RequestContent content, string contentType, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UploadFileAsync(class Azure.Core.RequestContent content, string contentType, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFileAsync(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFileAsync (content As RequestContent, contentType As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UploadFileAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UploadFileAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="agentsClient.UploadFileAsync (content, contentType, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="contentType"> The name of the file to upload. Allowed values: "multipart/form-data". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Uploads a file for use by other operations.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.AgentsClient.UploadFileAsync(Azure.AI.Projects.UploadFileRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt; UploadFileAsync (string filePath, Azure.AI.Projects.AgentFilePurpose purpose, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt;&gt; UploadFileAsync(string filePath, valuetype Azure.AI.Projects.AgentFilePurpose purpose, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFileAsync(System.String,Azure.AI.Projects.AgentFilePurpose,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFileAsync (filePath As String, purpose As AgentFilePurpose, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentFile))" />
      <MemberSignature Language="F#" Value="abstract member UploadFileAsync : string * Azure.AI.Projects.AgentFilePurpose * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;&#xA;override this.UploadFileAsync : string * Azure.AI.Projects.AgentFilePurpose * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;" Usage="agentsClient.UploadFileAsync (filePath, purpose, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="purpose" Type="Azure.AI.Projects.AgentFilePurpose" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filePath"> The local file path. </param>
        <param name="purpose"> The intended purpose of the uploaded file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Uploads a file from a local file path accessible to <see cref="T:System.IO.File" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt; UploadFileAsync (System.IO.Stream data, Azure.AI.Projects.AgentFilePurpose purpose, string filename, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentFile&gt;&gt; UploadFileAsync(class System.IO.Stream data, valuetype Azure.AI.Projects.AgentFilePurpose purpose, string filename, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.AgentsClient.UploadFileAsync(System.IO.Stream,Azure.AI.Projects.AgentFilePurpose,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadFileAsync (data As Stream, purpose As AgentFilePurpose, filename As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentFile))" />
      <MemberSignature Language="F#" Value="abstract member UploadFileAsync : System.IO.Stream * Azure.AI.Projects.AgentFilePurpose * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;&#xA;override this.UploadFileAsync : System.IO.Stream * Azure.AI.Projects.AgentFilePurpose * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;" Usage="agentsClient.UploadFileAsync (data, purpose, filename, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentFile&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="purpose" Type="Azure.AI.Projects.AgentFilePurpose" />
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="data"> The file data, in bytes. </param>
        <param name="purpose"> The intended purpose of the uploaded file. Use `assistants` for Agents and Message files, `vision` for Agents image file inputs, `batch` for Batch API, and `fine-tune` for Fine-tuning. </param>
        <param name="filename"> The name of the file. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Uploads a file for use by other operations. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
