<Type Name="Evaluations" FullName="Azure.AI.Projects.Evaluations">
  <TypeSignature Language="C#" Value="public class Evaluations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Evaluations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Projects.Evaluations" />
  <TypeSignature Language="VB.NET" Value="Public Class Evaluations" />
  <TypeSignature Language="F#" Value="type Evaluations = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Projects</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Evaluations sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Evaluations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of Evaluations for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.Evaluation&gt; Create (Azure.AI.Projects.Evaluation evaluation, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.Evaluation&gt; Create(class Azure.AI.Projects.Evaluation evaluation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.Create(Azure.AI.Projects.Evaluation,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (evaluation As Evaluation, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Evaluation)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.AI.Projects.Evaluation * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&#xA;override this.Create : Azure.AI.Projects.Evaluation * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;" Usage="evaluations.Create (evaluation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluation" Type="Azure.AI.Projects.Evaluation" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="evaluation"> Evaluation to be run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates an evaluation run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evaluation" /> is null. </exception>
        <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key2735"] = new EvaluatorConfiguration("gujwtvhptykq")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7400"] = "ijkjfvoswni"
        },
    }
})
{
    DisplayName = "ymjxkodggqrhjnmusta",
    Description = "cuviaxytqckkybxwc",
    Tags =
    {
        ["key30"] = "nqrdpedyhkjzgrbtqhxbmkdmlpdf"
    },
    Properties =
    {
        ["key9192"] = "e"
    },
};
Response<Evaluation> response = client.Create(evaluation);
]]></code>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
Response<Evaluation> response = client.Create(evaluation);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Create (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Create(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.Create(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="evaluations.Create (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates an evaluation run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.Create(Azure.AI.Projects.Evaluation,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "ymjxkodggqrhjnmusta",
    description = "cuviaxytqckkybxwc",
    tags = new
    {
        key30 = "nqrdpedyhkjzgrbtqhxbmkdmlpdf",
    },
    properties = new
    {
        key9192 = "e",
    },
    evaluators = new
    {
        key2735 = new
        {
            id = "gujwtvhptykq",
            initParams = new object(),
            dataMapping = new
            {
                key7400 = "ijkjfvoswni",
            },
        },
    },
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    evaluators = new object(),
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentEvaluation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt; CreateAgentEvaluation (Azure.AI.Projects.AgentEvaluationRequest evaluation, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.AgentEvaluation&gt; CreateAgentEvaluation(class Azure.AI.Projects.AgentEvaluationRequest evaluation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluation(Azure.AI.Projects.AgentEvaluationRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentEvaluation (evaluation As AgentEvaluationRequest, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AgentEvaluation)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentEvaluation : Azure.AI.Projects.AgentEvaluationRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;&#xA;override this.CreateAgentEvaluation : Azure.AI.Projects.AgentEvaluationRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;" Usage="evaluations.CreateAgentEvaluation (evaluation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluation" Type="Azure.AI.Projects.AgentEvaluationRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="evaluation"> Agent evaluation to be run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates an agent evaluation run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evaluation" /> is null. </exception>
        <example>
This sample shows how to call CreateAgentEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

AgentEvaluationRequest evaluation = new AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, EvaluatorConfiguration>
{
    ["key2653"] = new EvaluatorConfiguration("gujwtvhptykq")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7400"] = "ijkjfvoswni"
        },
    }
}, "dvcnrcwar")
{
    ThreadId = "cxjjsyhkeezgnaqqyerrdrbbth",
    SamplingConfiguration = new AgentEvaluationSamplingConfiguration("tj", 7F, 8F),
    RedactionConfiguration = new AgentEvaluationRedactionConfiguration
    {
        RedactScoreProperties = true,
    },
};
Response<AgentEvaluation> response = client.CreateAgentEvaluation(evaluation);
]]></code>
This sample shows how to call CreateAgentEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

AgentEvaluationRequest evaluation = new AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, EvaluatorConfiguration>(), "dvcnrcwar");
Response<AgentEvaluation> response = client.CreateAgentEvaluation(evaluation);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentEvaluation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateAgentEvaluation (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateAgentEvaluation(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluation(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentEvaluation (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentEvaluation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateAgentEvaluation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="evaluations.CreateAgentEvaluation (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates an agent evaluation run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluation(Azure.AI.Projects.AgentEvaluationRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAgentEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    runId = "ecfcffqsrdhpecocrufffiqz",
    threadId = "cxjjsyhkeezgnaqqyerrdrbbth",
    evaluators = new
    {
        key2653 = new
        {
            id = "gujwtvhptykq",
            initParams = new object(),
            dataMapping = new
            {
                key7400 = "ijkjfvoswni",
            },
        },
    },
    samplingConfiguration = new
    {
        name = "tj",
        samplingPercent = 7F,
        maxRequestRate = 8F,
    },
    redactionConfiguration = new
    {
        redactScoreProperties = true,
    },
    appInsightsConnectionString = "dvcnrcwar",
});
Response response = client.CreateAgentEvaluation(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call CreateAgentEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    runId = "ecfcffqsrdhpecocrufffiqz",
    evaluators = new object(),
    appInsightsConnectionString = "dvcnrcwar",
});
Response response = client.CreateAgentEvaluation(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentEvaluationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;&gt; CreateAgentEvaluationAsync (Azure.AI.Projects.AgentEvaluationRequest evaluation, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.AgentEvaluation&gt;&gt; CreateAgentEvaluationAsync(class Azure.AI.Projects.AgentEvaluationRequest evaluation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluationAsync(Azure.AI.Projects.AgentEvaluationRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentEvaluationAsync (evaluation As AgentEvaluationRequest, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AgentEvaluation))" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentEvaluationAsync : Azure.AI.Projects.AgentEvaluationRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;&gt;&#xA;override this.CreateAgentEvaluationAsync : Azure.AI.Projects.AgentEvaluationRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;&gt;" Usage="evaluations.CreateAgentEvaluationAsync (evaluation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.AgentEvaluation&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluation" Type="Azure.AI.Projects.AgentEvaluationRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="evaluation"> Agent evaluation to be run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates an agent evaluation run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evaluation" /> is null. </exception>
        <example>
This sample shows how to call CreateAgentEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

AgentEvaluationRequest evaluation = new AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, EvaluatorConfiguration>
{
    ["key2653"] = new EvaluatorConfiguration("gujwtvhptykq")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7400"] = "ijkjfvoswni"
        },
    }
}, "dvcnrcwar")
{
    ThreadId = "cxjjsyhkeezgnaqqyerrdrbbth",
    SamplingConfiguration = new AgentEvaluationSamplingConfiguration("tj", 7F, 8F),
    RedactionConfiguration = new AgentEvaluationRedactionConfiguration
    {
        RedactScoreProperties = true,
    },
};
Response<AgentEvaluation> response = await client.CreateAgentEvaluationAsync(evaluation);
]]></code>
This sample shows how to call CreateAgentEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

AgentEvaluationRequest evaluation = new AgentEvaluationRequest("ecfcffqsrdhpecocrufffiqz", new Dictionary<string, EvaluatorConfiguration>(), "dvcnrcwar");
Response<AgentEvaluation> response = await client.CreateAgentEvaluationAsync(evaluation);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAgentEvaluationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAgentEvaluationAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAgentEvaluationAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluationAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAgentEvaluationAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAgentEvaluationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAgentEvaluationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="evaluations.CreateAgentEvaluationAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates an agent evaluation run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.CreateAgentEvaluationAsync(Azure.AI.Projects.AgentEvaluationRequest,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAgentEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    runId = "ecfcffqsrdhpecocrufffiqz",
    threadId = "cxjjsyhkeezgnaqqyerrdrbbth",
    evaluators = new
    {
        key2653 = new
        {
            id = "gujwtvhptykq",
            initParams = new object(),
            dataMapping = new
            {
                key7400 = "ijkjfvoswni",
            },
        },
    },
    samplingConfiguration = new
    {
        name = "tj",
        samplingPercent = 7F,
        maxRequestRate = 8F,
    },
    redactionConfiguration = new
    {
        redactScoreProperties = true,
    },
    appInsightsConnectionString = "dvcnrcwar",
});
Response response = await client.CreateAgentEvaluationAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call CreateAgentEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    runId = "ecfcffqsrdhpecocrufffiqz",
    evaluators = new object(),
    appInsightsConnectionString = "dvcnrcwar",
});
Response response = await client.CreateAgentEvaluationAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt; CreateAsync (Azure.AI.Projects.Evaluation evaluation, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.Evaluation&gt;&gt; CreateAsync(class Azure.AI.Projects.Evaluation evaluation, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAsync(Azure.AI.Projects.Evaluation,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (evaluation As Evaluation, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Evaluation))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.AI.Projects.Evaluation * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;&#xA;override this.CreateAsync : Azure.AI.Projects.Evaluation * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;" Usage="evaluations.CreateAsync (evaluation, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluation" Type="Azure.AI.Projects.Evaluation" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="evaluation"> Evaluation to be run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates an evaluation run. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="evaluation" /> is null. </exception>
        <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>
{
    ["key2735"] = new EvaluatorConfiguration("gujwtvhptykq")
    {
        InitParams = { },
        DataMapping =
        {
            ["key7400"] = "ijkjfvoswni"
        },
    }
})
{
    DisplayName = "ymjxkodggqrhjnmusta",
    Description = "cuviaxytqckkybxwc",
    Tags =
    {
        ["key30"] = "nqrdpedyhkjzgrbtqhxbmkdmlpdf"
    },
    Properties =
    {
        ["key9192"] = "e"
    },
};
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Evaluation evaluation = new Evaluation(null, new Dictionary<string, EvaluatorConfiguration>());
Response<Evaluation> response = await client.CreateAsync(evaluation);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.CreateAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="evaluations.CreateAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates an evaluation run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.CreateAsync(Azure.AI.Projects.Evaluation,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    displayName = "ymjxkodggqrhjnmusta",
    description = "cuviaxytqckkybxwc",
    tags = new
    {
        key30 = "nqrdpedyhkjzgrbtqhxbmkdmlpdf",
    },
    properties = new
    {
        key9192 = "e",
    },
    evaluators = new
    {
        key2735 = new
        {
            id = "gujwtvhptykq",
            initParams = new object(),
            dataMapping = new
            {
                key7400 = "ijkjfvoswni",
            },
        },
    },
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

using RequestContent content = RequestContent.Create(new
{
    evaluators = new object(),
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEvaluation (string name, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEvaluation(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluation(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluation (name As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluation : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEvaluation : string * Azure.RequestContext -&gt; Azure.Response" Usage="evaluations.GetEvaluation (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> Identifier of the evaluation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get an evaluation run by name.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.GetEvaluation(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEvaluation and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Response response = client.GetEvaluation("so", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Projects.Evaluation&gt; GetEvaluation (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Projects.Evaluation&gt; GetEvaluation(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluation(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluation (name As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Evaluation)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluation : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&#xA;override this.GetEvaluation : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;" Usage="evaluations.GetEvaluation (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> Identifier of the evaluation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get an evaluation run by name. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEvaluation.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Response<Evaluation> response = client.GetEvaluation("so");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEvaluationAsync (string name, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEvaluationAsync(string name, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluationAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluationAsync (name As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluationAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEvaluationAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="evaluations.GetEvaluationAsync (name, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="name"> Identifier of the evaluation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get an evaluation run by name.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.GetEvaluationAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEvaluationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Response response = await client.GetEvaluationAsync("so", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt; GetEvaluationAsync (string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Projects.Evaluation&gt;&gt; GetEvaluationAsync(string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluationAsync (name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Evaluation))" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;&#xA;override this.GetEvaluationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;" Usage="evaluations.GetEvaluationAsync (name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Projects.Evaluation&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> Identifier of the evaluation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get an evaluation run by name. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEvaluationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

Response<Evaluation> response = await client.GetEvaluationAsync("so");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetEvaluations (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetEvaluations(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluations(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluations (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluations : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetEvaluations : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="evaluations.GetEvaluations context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List evaluation runs
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.GetEvaluations(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEvaluations and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

foreach (BinaryData item in client.GetEvaluations(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.AI.Projects.Evaluation&gt; GetEvaluations (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.AI.Projects.Evaluation&gt; GetEvaluations(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluations(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluations (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of Evaluation)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Projects.Evaluation&gt;&#xA;override this.GetEvaluations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.AI.Projects.Evaluation&gt;" Usage="evaluations.GetEvaluations cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.AI.Projects.Evaluation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List evaluation runs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEvaluations.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

foreach (Evaluation item in client.GetEvaluations())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetEvaluationsAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetEvaluationsAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluationsAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluationsAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluationsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetEvaluationsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="evaluations.GetEvaluationsAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List evaluation runs
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Projects.Evaluations.GetEvaluationsAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEvaluationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

await foreach (BinaryData item in client.GetEvaluationsAsync(null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("data").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("evaluators").GetProperty("<key>").GetProperty("id").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEvaluationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.AI.Projects.Evaluation&gt; GetEvaluationsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.AI.Projects.Evaluation&gt; GetEvaluationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Projects.Evaluations.GetEvaluationsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvaluationsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of Evaluation)" />
      <MemberSignature Language="F#" Value="abstract member GetEvaluationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Projects.Evaluation&gt;&#xA;override this.GetEvaluationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.AI.Projects.Evaluation&gt;" Usage="evaluations.GetEvaluationsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.AI.Projects.Evaluation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List evaluation runs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEvaluationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Evaluations client = new AIProjectClient(endpoint, credential).GetEvaluationsClient(apiVersion: "2025-05-15-preview");

await foreach (Evaluation item in client.GetEvaluationsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Projects.Evaluations.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Projects.Evaluations.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Projects</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
