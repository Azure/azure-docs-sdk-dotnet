<Type Name="NfsAccessRule" FullName="Azure.ResourceManager.StorageCache.Models.NfsAccessRule">
  <TypeSignature Language="C#" Value="public class NfsAccessRule : System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NfsAccessRule extends System.Object implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.StorageCache.Models.NfsAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public Class NfsAccessRule&#xA;Implements IJsonModel(Of NfsAccessRule), IPersistableModel(Of NfsAccessRule)" />
  <TypeSignature Language="F#" Value="type NfsAccessRule = class&#xA;    interface IJsonModel&lt;NfsAccessRule&gt;&#xA;    interface IPersistableModel&lt;NfsAccessRule&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> Rule to place restrictions on portions of the cache namespace being presented to clients. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NfsAccessRule (Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope scope, Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope scope, valuetype Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.#ctor(Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope,Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scope As NfsAccessRuleScope, access As NfsAccessRuleAccess)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.StorageCache.Models.NfsAccessRule : Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope * Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess -&gt; Azure.ResourceManager.StorageCache.Models.NfsAccessRule" Usage="new Azure.ResourceManager.StorageCache.Models.NfsAccessRule (scope, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scope" Type="Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope" />
        <Parameter Name="access" Type="Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess" />
      </Parameters>
      <Docs>
        <param name="scope"> Scope for this rule. The scope and filter determine which clients match the rule. </param>
        <param name="access"> Access allowed by this rule. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.StorageCache.Models.NfsAccessRule" />. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Access">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess Access { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess Access" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Access" />
      <MemberSignature Language="VB.NET" Value="Public Property Access As NfsAccessRuleAccess" />
      <MemberSignature Language="F#" Value="member this.Access : Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Access" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.StorageCache.Models.NfsAccessRuleAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Access allowed by this rule. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSubmountAccess">
      <MemberSignature Language="C#" Value="public bool? AllowSubmountAccess { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; AllowSubmountAccess" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AllowSubmountAccess" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowSubmountAccess As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AllowSubmountAccess : Nullable&lt;bool&gt; with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AllowSubmountAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSuid">
      <MemberSignature Language="C#" Value="public bool? AllowSuid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; AllowSuid" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AllowSuid" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowSuid As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AllowSuid : Nullable&lt;bool&gt; with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AllowSuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Allow SUID semantics. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousGID">
      <MemberSignature Language="C#" Value="public string AnonymousGID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AnonymousGID" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AnonymousGID" />
      <MemberSignature Language="VB.NET" Value="Public Property AnonymousGID As String" />
      <MemberSignature Language="F#" Value="member this.AnonymousGID : string with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AnonymousGID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousUID">
      <MemberSignature Language="C#" Value="public string AnonymousUID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AnonymousUID" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AnonymousUID" />
      <MemberSignature Language="VB.NET" Value="Public Property AnonymousUID As String" />
      <MemberSignature Language="F#" Value="member this.AnonymousUID : string with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.AnonymousUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRootSquash">
      <MemberSignature Language="C#" Value="public bool? EnableRootSquash { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; EnableRootSquash" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.EnableRootSquash" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRootSquash As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.EnableRootSquash : Nullable&lt;bool&gt; with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.EnableRootSquash" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Map root accesses to anonymousUID and anonymousGID. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope Scope" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As NfsAccessRuleScope" />
      <MemberSignature Language="F#" Value="member this.Scope : Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope with get, set" Usage="Azure.ResourceManager.StorageCache.Models.NfsAccessRule.Scope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.StorageCache.Models.NfsAccessRuleScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Scope for this rule. The scope and filter determine which clients match the rule. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.StorageCache.Models.NfsAccessRule IJsonModel&lt;NfsAccessRule&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.StorageCache.Models.NfsAccessRule System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#StorageCache#Models#NfsAccessRule&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As NfsAccessRule Implements IJsonModel(Of NfsAccessRule).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.StorageCache.Models.NfsAccessRule&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.StorageCache.Models.NfsAccessRule" Usage="nfsAccessRule.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.StorageCache.Models.NfsAccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;NfsAccessRule&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#StorageCache#Models#NfsAccessRule&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of NfsAccessRule).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="nfsAccessRule.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.StorageCache.Models.NfsAccessRule IPersistableModel&lt;NfsAccessRule&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.StorageCache.Models.NfsAccessRule System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#StorageCache#Models#NfsAccessRule&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As NfsAccessRule Implements IPersistableModel(Of NfsAccessRule).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.StorageCache.Models.NfsAccessRule&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.StorageCache.Models.NfsAccessRule" Usage="nfsAccessRule.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.StorageCache.Models.NfsAccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;NfsAccessRule&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#StorageCache#Models#NfsAccessRule&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of NfsAccessRule).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="nfsAccessRule.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param></summary>
        <returns>The format that the model uses when communicating with the serivce.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;NfsAccessRule&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.StorageCache.Models.NfsAccessRule.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#StorageCache#Models#NfsAccessRule&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of NfsAccessRule).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="nfsAccessRule.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.StorageCache.Models.NfsAccessRule&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.StorageCache</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
