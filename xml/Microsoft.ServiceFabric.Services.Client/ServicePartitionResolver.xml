<Type Name="ServicePartitionResolver" FullName="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver">
  <TypeSignature Language="C#" Value="public class ServicePartitionResolver : Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServicePartitionResolver extends System.Object implements class Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class ServicePartitionResolver&#xA;Implements IServicePartitionResolver" />
  <TypeSignature Language="F#" Value="type ServicePartitionResolver = class&#xA;    interface IServicePartitionResolver" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
            Implements the Service partition resolver class that uses the <see cref="T:System.Fabric.FabricClient">FabricClient's </see><see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" /> method for service resolution
            and implements a back-off/retry mechanism on errors from that method.
            </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate createFabricClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate createFabricClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (createFabricClient As CreateFabricClientDelegate)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver createFabricClient" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="createFabricClient" Type="Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate" />
      </Parameters>
      <Docs>
        <param name="createFabricClient">Delegate to create fabric client.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            The constructor invokes the given delegate to create an instance of <see cref="T:System.Fabric.FabricClient">FabricClient</see>
            that is used for connecting to a Service Fabric cluster and perform service resolution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (params string[] connectionEndpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] connectionEndpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray connectionEndpoints As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : string[] -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver connectionEndpoints" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionEndpoints" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            The constructor uses given connectionEndpoints to create an instance of <see cref="T:System.Fabric.FabricClient">FabricClient</see>
            that is used for connecting to a Service Fabric cluster and perform service resolution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate createFabricClient, Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate recreateFabricClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate createFabricClient, class Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate recreateFabricClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (createFabricClient As CreateFabricClientDelegate, recreateFabricClient As CreateFabricClientDelegate)" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate * Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver (createFabricClient, recreateFabricClient)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="createFabricClient" Type="Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate" />
        <Parameter Name="recreateFabricClient" Type="Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate" />
      </Parameters>
      <Docs>
        <param name="createFabricClient">Delegate to create the fabric client.</param>
        <param name="recreateFabricClient">Delegate to re-create the fabric client.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            </summary>
        <remarks>The first delegate is used to create <see cref="T:System.Fabric.FabricClient">FabricClient.</see>.
            During partition resolution if FabricClient object gets disposed and second delegate is provided,
            it uses the second delegate to create the FabricClient again. The second delegate provides a way to specify
            an alternate way to get or create FabricClient if FabricClient created with first delegate get disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (System.Fabric.FabricClientSettings settings, params string[] connectionEndpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Fabric.FabricClientSettings settings, string[] connectionEndpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As FabricClientSettings, ParamArray connectionEndpoints As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : System.Fabric.FabricClientSettings * string[] -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver (settings, connectionEndpoints)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Fabric.FabricClientSettings" />
        <Parameter Name="connectionEndpoints" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="settings">Fabric client Settings.</param>
        <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            The constructor uses given settings and connectionEndpoints to create an instance of <see cref="T:System.Fabric.FabricClient">FabricClient</see>
            that is used for connecting to a Service Fabric cluster and perform service resolution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (System.Fabric.SecurityCredentials credential, params string[] connectionEndpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Fabric.SecurityCredentials credential, string[] connectionEndpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As SecurityCredentials, ParamArray connectionEndpoints As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : System.Fabric.SecurityCredentials * string[] -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver (credential, connectionEndpoints)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="System.Fabric.SecurityCredentials" />
        <Parameter Name="connectionEndpoints" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credential">Security credentials for the fabric client.</param>
        <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            The constructor uses the given security credentials and the connectionEndpoints to create an instance of <see cref="T:System.Fabric.FabricClient">FabricClient</see>
            that is used for connecting to a Service Fabric cluster and perform service resolution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServicePartitionResolver (System.Fabric.SecurityCredentials credential, System.Fabric.FabricClientSettings settings, params string[] connectionEndpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Fabric.SecurityCredentials credential, class System.Fabric.FabricClientSettings settings, string[] connectionEndpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As SecurityCredentials, settings As FabricClientSettings, ParamArray connectionEndpoints As String())" />
      <MemberSignature Language="F#" Value="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver : System.Fabric.SecurityCredentials * System.Fabric.FabricClientSettings * string[] -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="new Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver (credential, settings, connectionEndpoints)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="System.Fabric.SecurityCredentials" />
        <Parameter Name="settings" Type="System.Fabric.FabricClientSettings" />
        <Parameter Name="connectionEndpoints" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credential">Security credentials for the fabric client.</param>
        <param name="settings">Fabric client Settings.</param>
        <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> class.
            The constructor uses the given security credentials, settings and the connectionEndpoints to create an instance of <see cref="T:System.Fabric.FabricClient">FabricClient</see>
            that is used for connecting to a Service Fabric cluster and perform service resolution.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaxRetryBackoffInterval">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultMaxRetryBackoffInterval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultMaxRetryBackoffInterval" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultMaxRetryBackoffInterval As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultMaxRetryBackoffInterval : TimeSpan" Usage="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default maximum back-off time used by ServicePartitionResolver's ResolveAsync method before retrying, when it is
            invoked without explicitly specifying the maxRetryBackoffInterval argument. The default value is 5 seconds.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultResolveTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultResolveTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultResolveTimeout" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultResolveTimeout As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultResolveTimeout : TimeSpan" Usage="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default resolve timeout per try used by the ResolveAsync method of <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /> when it is
            invoked without explicitly specifying the resolveTimeoutPerTry argument. The default value is 30 seconds.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefault">
      <MemberSignature Language="C#" Value="public static Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver GetDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver GetDefault() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDefault () As ServicePartitionResolver" />
      <MemberSignature Language="F#" Value="static member GetDefault : unit -&gt; Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" Usage="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the default ServicePartitionResolver.
            <remarks><para>
            The default service partition resolver instance uses the local <see href="https://docs.microsoft.com/en-us/dotnet/api/system.fabric.fabricclient#System_Fabric_FabricClient__ctor">fabric client</see>.
            If you are using the ServicePartitionResolver to resolve services that are running on a remote cluster, the recommended practice is to create a ServicePartitionResolver using the appropriate endpoints or FabricClient and then update
            the default ServicePartitionResolver.
            </para></remarks></summary>
        <returns>Default <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt; ResolveAsync (System.Fabric.ResolvedServicePartition previousRsp, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ResolvedServicePartition&gt; ResolveAsync(class System.Fabric.ResolvedServicePartition previousRsp, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ResolveAsync : System.Fabric.ResolvedServicePartition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;" Usage="servicePartitionResolver.ResolveAsync (previousRsp, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousRsp" Type="System.Fabric.ResolvedServicePartition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="previousRsp">The resolved service partition that the client got from the earlier invocation of the ResolveAsync() method.</param>
        <param name="cancellationToken">
          <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
        </param>
        <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method with back-off/retry on retry-able errors. This takes in
            the resolved service partition that was got via an earlier invocation of the ResolveAsync() method.
            This method overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        <remarks>
          <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricServiceNotFoundException">
          <para>
            This method can throw a FabricServiceNotFoundExcepion if the service which was resolved previously is no longer present in the cluster.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt; ResolveAsync (Uri serviceUri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey partitionKey, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ResolvedServicePartition&gt; ResolveAsync(class System.Uri serviceUri, class Microsoft.ServiceFabric.Services.Client.ServicePartitionKey partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.ResolveAsync : Uri * Microsoft.ServiceFabric.Services.Client.ServicePartitionKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;" Usage="servicePartitionResolver.ResolveAsync (serviceUri, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUri" Type="System.Uri" />
        <Parameter Name="partitionKey" Type="Microsoft.ServiceFabric.Services.Client.ServicePartitionKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceUri">Name of the service instance to resolve.</param>
        <param name="partitionKey">
          <para>
            <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">Key</see> that determines the target partition of the service instance. The <see cref="T:System.Fabric.ServicePartitionKind">partitioning scheme</see>
            specified in the key should match the partitioning scheme used to create the service instance.
            </para>
        </param>
        <param name="cancellationToken">
          <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
        </param>
        <summary>
          <para>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method. This uses the default settings for
            <see cref="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout">timeout</see> and <see cref="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval">back-off retry</see> intervals.
            </para>
        </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        <remarks>
          <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricServiceNotFoundException">
          <para>
            This method can throw a FabricServiceNotFoundExcepion if there is no service instance in the cluster matching the specified serviceUri.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            This method can throw a FabricException if the scheme specified in the ServicePartitionKey doesn't match the scheme used to create the service instance.
            See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/">Errors and Exceptions</see> for handling common FabricClient failures.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt; ResolveAsync (System.Fabric.ResolvedServicePartition previousRsp, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ResolvedServicePartition&gt; ResolveAsync(class System.Fabric.ResolvedServicePartition previousRsp, valuetype System.TimeSpan resolveTimeoutPerTry, valuetype System.TimeSpan maxRetryBackoffInterval, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ResolveAsync : System.Fabric.ResolvedServicePartition * TimeSpan * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;&#xA;override this.ResolveAsync : System.Fabric.ResolvedServicePartition * TimeSpan * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;" Usage="servicePartitionResolver.ResolveAsync (previousRsp, resolveTimeoutPerTry, maxRetryBackoffInterval, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousRsp" Type="System.Fabric.ResolvedServicePartition" />
        <Parameter Name="resolveTimeoutPerTry" Type="System.TimeSpan" />
        <Parameter Name="maxRetryBackoffInterval" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="previousRsp">The resolved service partition that the client got from the earlier invocation of the ResolveAsync() method.</param>
        <param name="resolveTimeoutPerTry">The timeout passed to FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method </param>
        <param name="maxRetryBackoffInterval">
          <para>
            The max interval to back-off before retrying when FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method fails with a retry-able exception.
            The actual back off interval is a random time interval which is less than or equal to the specified maxRetryBackoffInterval.
            </para>
        </param>
        <param name="cancellationToken">
          <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
        </param>
        <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method with back-off/retry on retry-able errors. This takes in
            the resolved service partition that was got via an earlier invocation of the ResolveAsync() method.
            This method overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        <remarks>
          <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricServiceNotFoundException">
          <para>
            This method can throw a FabricServiceNotFoundExcepion if the service which was resolved previously is no longer present in the cluster.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt; ResolveAsync (Uri serviceUri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey partitionKey, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ResolvedServicePartition&gt; ResolveAsync(class System.Uri serviceUri, class Microsoft.ServiceFabric.Services.Client.ServicePartitionKey partitionKey, valuetype System.TimeSpan resolveTimeoutPerTry, valuetype System.TimeSpan maxRetryBackoffInterval, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ResolveAsync : Uri * Microsoft.ServiceFabric.Services.Client.ServicePartitionKey * TimeSpan * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;&#xA;override this.ResolveAsync : Uri * Microsoft.ServiceFabric.Services.Client.ServicePartitionKey * TimeSpan * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;" Usage="servicePartitionResolver.ResolveAsync (serviceUri, partitionKey, resolveTimeoutPerTry, maxRetryBackoffInterval, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ResolvedServicePartition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceUri" Type="System.Uri" />
        <Parameter Name="partitionKey" Type="Microsoft.ServiceFabric.Services.Client.ServicePartitionKey" />
        <Parameter Name="resolveTimeoutPerTry" Type="System.TimeSpan" />
        <Parameter Name="maxRetryBackoffInterval" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceUri">Name of the service instance to resolve.</param>
        <param name="partitionKey">
          <para>
            <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">Key</see> that determines the target partition of the service instance. The <see cref="T:System.Fabric.ServicePartitionKind">partitioning scheme</see>
            specified in the key should match the partitioning scheme used to create the service instance.
            </para>
        </param>
        <param name="resolveTimeoutPerTry">The timeout passed to FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method.</param>
        <param name="maxRetryBackoffInterval">
          <para>
            The max interval to back-off before retrying when FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method fails with a retry-able exception.
            The actual back off interval is a random time interval which is less than or equal to the specified maxRetryBackoffInterval.
            </para>
        </param>
        <param name="cancellationToken">
          <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
        </param>
        <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" /> method with the given timeout and back-off/retry on retry-able errors.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        <remarks>
          <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricServiceNotFoundException">
          <para>
            This method can throw a FabricServiceNotFoundExcepion if there is no service instance in the cluster matching the specified serviceUri.
            </para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            This can throw a FabricException if the scheme specified in the ServicePartitionKey doesn't match the scheme used to create the service instance.
            See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/">Errors and Exceptions</see> for more information.
            </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetDefault">
      <MemberSignature Language="C#" Value="public static void SetDefault (Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver defaultServiceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDefault(class Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver defaultServiceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetDefault (defaultServiceResolver As ServicePartitionResolver)" />
      <MemberSignature Language="F#" Value="static member SetDefault : Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver -&gt; unit" Usage="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault defaultServiceResolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultServiceResolver" Type="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" />
      </Parameters>
      <Docs>
        <param name="defaultServiceResolver">The new default value</param>
        <summary>
            Updates the default ServicePartitionResolver.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>