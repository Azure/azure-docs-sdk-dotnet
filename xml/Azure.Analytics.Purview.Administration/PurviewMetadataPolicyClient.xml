<Type Name="PurviewMetadataPolicyClient" FullName="Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient">
  <TypeSignature Language="C#" Value="public class PurviewMetadataPolicyClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewMetadataPolicyClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewMetadataPolicyClient" />
  <TypeSignature Language="F#" Value="type PurviewMetadataPolicyClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewMetadataPolicy service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewMetadataPolicyClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewMetadataPolicyClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewMetadataPolicyClient (Uri endpoint, string collectionName, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string collectionName, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, collectionName As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient : Uri * string * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient" Usage="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient (endpoint, collectionName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        <param name="collectionName"> The String to use. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of PurviewMetadataPolicyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="collectionName" /> or <paramref name="credential" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewMetadataPolicyClient (Uri endpoint, string collectionName, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string collectionName, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, collectionName As String, credential As TokenCredential, options As PurviewMetadataClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient : Uri * string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions -&gt; Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient" Usage="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient (endpoint, collectionName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        <param name="collectionName"> The String to use. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of PurviewMetadataPolicyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="collectionName" />, or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetMetadataPolicies (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetMetadataPolicies(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicies(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicies (Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetMetadataPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPolicies context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List or Get metadata policies. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              values: [
                {
                  name: string,
                  id: string,
                  version: number,
                  properties: {
                    description: string,
                    decisionRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        effect: "Deny" | "Permit",
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    attributeRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        id: string,
                        name: string,
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    collection: {
                      type: string,
                      referenceName: string
                    },
                    parentCollectionName: string
                  }
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetMetadataPolicies and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            foreach (var data in client.GetMetadataPolicies())
            {
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetMetadataPoliciesAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetMetadataPoliciesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPoliciesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPoliciesAsync (Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetMetadataPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPoliciesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List or Get metadata policies. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              values: [
                {
                  name: string,
                  id: string,
                  version: number,
                  properties: {
                    description: string,
                    decisionRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        effect: "Deny" | "Permit",
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    attributeRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        id: string,
                        name: string,
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    collection: {
                      type: string,
                      referenceName: string
                    },
                    parentCollectionName: string
                  }
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetMetadataPoliciesAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            await foreach (var data in client.GetMetadataPoliciesAsync())
            {
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetMetadataPolicy (string policyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetMetadataPolicy(string policyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicy (policyId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetMetadataPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="purviewMetadataPolicyClient.GetMetadataPolicy (policyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a metadata policy. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="policyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetMetadataPolicy with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            Response response = client.GetMetadataPolicy("<policyId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetMetadataPolicyAsync (string policyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetMetadataPolicyAsync(string policyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicyAsync (policyId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetMetadataPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPolicyAsync (policyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a metadata policy. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="policyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetMetadataPolicyAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            Response response = await client.GetMetadataPolicyAsync("<policyId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetadataPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateMetadataPolicy (string policyId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateMetadataPolicy(string policyId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.UpdateMetadataPolicy(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetadataPolicy (policyId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetadataPolicy : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateMetadataPolicy : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewMetadataPolicyClient.UpdateMetadataPolicy (policyId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="policyId"> Unique policy id. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates a metadata policy. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code>
            
            Response Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="policyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call UpdateMetadataPolicy with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            var data = new {};
            
            Response response = client.UpdateMetadataPolicy("<policyId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call UpdateMetadataPolicy with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            var data = new {
                name = "<name>",
                id = "<id>",
                version = 1234,
                properties = new {
                    description = "<description>",
                    decisionRules = new[] {
                        new {
                            effect = "Deny",
                            dnfCondition = new[] {
                                new[] {
                                    new {
                                        attributeName = "<attributeName>",
                                        attributeValueIncludes = "<attributeValueIncludes>",
                                        attributeValueIncludedIn = new[] {
                                            "<String>"
                                        },
                                        attributeValueExcludes = "<attributeValueExcludes>",
                                        attributeValueExcludedIn = new[] {
                                            "<String>"
                                        },
                                    }
                                }
                            },
                        }
                    },
                    attributeRules = new[] {
                        new {
                            id = "<id>",
                            name = "<name>",
                            dnfCondition = new[] {
                                new[] {
                                    new {
                                        attributeName = "<attributeName>",
                                        attributeValueIncludes = "<attributeValueIncludes>",
                                        attributeValueIncludedIn = new[] {
                                            "<String>"
                                        },
                                        attributeValueExcludes = "<attributeValueExcludes>",
                                        attributeValueExcludedIn = new[] {
                                            "<String>"
                                        },
                                    }
                                }
                            },
                        }
                    },
                    collection = new {
                        referenceName = "<referenceName>",
                    },
                    parentCollectionName = "<parentCollectionName>",
                },
            };
            
            Response response = client.UpdateMetadataPolicy("<policyId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetadataPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateMetadataPolicyAsync (string policyId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateMetadataPolicyAsync(string policyId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.UpdateMetadataPolicyAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetadataPolicyAsync (policyId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetadataPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateMetadataPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewMetadataPolicyClient.UpdateMetadataPolicyAsync (policyId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="policyId"> Unique policy id. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates a metadata policy. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code>
            
            Response Body:
            
            Schema for <c>MetadataPolicy</c>:
            <code>{
              name: string, # Optional. The name of policy
              id: string, # Optional. The id of policy
              version: number, # Optional. The version of policy
              properties: {
                description: string, # Optional. The description of policy
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    effect: "Deny" | "Permit", # Optional. The effect for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The DecisionRules of policy
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule", # Optional. The kind of rule
                    id: string, # Optional. The id for rule
                    name: string, # Optional. The name for rule
                    dnfCondition: [AttributeMatcher[]], # Optional. The dnf Condition for a rule
                  }
                ], # Optional. The AttributeRules of policy
                collection: {
                  type: string, # Optional. The type of reference
                  referenceName: string, # Optional. The name of reference
                }, # Optional. The collection reference for a policy
                parentCollectionName: string, # Optional. The parent collection of the policy
              }, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="policyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call UpdateMetadataPolicyAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            var data = new {};
            
            Response response = await client.UpdateMetadataPolicyAsync("<policyId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call UpdateMetadataPolicyAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewMetadataPolicyClient(endpoint, "<collectionName>", credential);
            
            var data = new {
                name = "<name>",
                id = "<id>",
                version = 1234,
                properties = new {
                    description = "<description>",
                    decisionRules = new[] {
                        new {
                            effect = "Deny",
                            dnfCondition = new[] {
                                new[] {
                                    new {
                                        attributeName = "<attributeName>",
                                        attributeValueIncludes = "<attributeValueIncludes>",
                                        attributeValueIncludedIn = new[] {
                                            "<String>"
                                        },
                                        attributeValueExcludes = "<attributeValueExcludes>",
                                        attributeValueExcludedIn = new[] {
                                            "<String>"
                                        },
                                    }
                                }
                            },
                        }
                    },
                    attributeRules = new[] {
                        new {
                            id = "<id>",
                            name = "<name>",
                            dnfCondition = new[] {
                                new[] {
                                    new {
                                        attributeName = "<attributeName>",
                                        attributeValueIncludes = "<attributeValueIncludes>",
                                        attributeValueIncludedIn = new[] {
                                            "<String>"
                                        },
                                        attributeValueExcludes = "<attributeValueExcludes>",
                                        attributeValueExcludedIn = new[] {
                                            "<String>"
                                        },
                                    }
                                }
                            },
                        }
                    },
                    collection = new {
                        referenceName = "<referenceName>",
                    },
                    parentCollectionName = "<parentCollectionName>",
                },
            };
            
            Response response = await client.UpdateMetadataPolicyAsync("<policyId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("effect").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("decisionRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueIncludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludes").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("attributeRules")[0].GetProperty("dnfCondition")[0][0].GetProperty("attributeValueExcludedIn")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("collection").GetProperty("referenceName").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("parentCollectionName").ToString());
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
