<Type Name="PurviewMetadataPolicyClient" FullName="Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient">
  <TypeSignature Language="C#" Value="public class PurviewMetadataPolicyClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewMetadataPolicyClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewMetadataPolicyClient" />
  <TypeSignature Language="F#" Value="type PurviewMetadataPolicyClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewMetadataPolicy service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewMetadataPolicyClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewMetadataPolicyClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PurviewMetadataPolicyClient (Uri endpoint, string collectionName, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string collectionName, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, collectionName As String, credential As TokenCredential, Optional options As PurviewMetadataClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient : Uri * string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions -&gt; Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient" Usage="new Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient (endpoint, collectionName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Administration.PurviewMetadataClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The endpoint of your Purview account. Example: https://{accountName}.purview.azure.com. </param>
        <param name="collectionName"> The String to use. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of PurviewMetadataPolicyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" />, <paramref name="collectionName" />, or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetMetadataPolicies (Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetMetadataPolicies(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicies(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicies (options As RequestOptions) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicies : Azure.RequestOptions -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetMetadataPolicies : Azure.RequestOptions -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPolicies options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> List or Get metadata policies. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              values: [
                {
                  name: string,
                  id: string,
                  version: number,
                  properties: {
                    description: string,
                    decisionRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        effect: "Deny" | "Permit",
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    attributeRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        id: string,
                        name: string,
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    collection: {
                      type: string,
                      referenceName: string
                    },
                    parentCollectionName: string
                  }
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetMetadataPoliciesAsync (Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetMetadataPoliciesAsync(class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPoliciesAsync(Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPoliciesAsync (options As RequestOptions) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPoliciesAsync : Azure.RequestOptions -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetMetadataPoliciesAsync : Azure.RequestOptions -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPoliciesAsync options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="options"> The request options. </param>
        <summary> List or Get metadata policies. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              values: [
                {
                  name: string,
                  id: string,
                  version: number,
                  properties: {
                    description: string,
                    decisionRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        effect: "Deny" | "Permit",
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    attributeRules: [
                      {
                        kind: "decisionrule" | "attributerule",
                        id: string,
                        name: string,
                        dnfCondition: [AttributeMatcher[]]
                      }
                    ],
                    collection: {
                      type: string,
                      referenceName: string
                    },
                    parentCollectionName: string
                  }
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetMetadataPolicy (string policyId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetMetadataPolicy(string policyId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicy(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicy (policyId As String, options As RequestOptions) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicy : string * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.GetMetadataPolicy : string * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewMetadataPolicyClient.GetMetadataPolicy (policyId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        <param name="options"> The request options. </param>
        <summary> Gets a metadata policy. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetMetadataPolicyAsync (string policyId, Azure.RequestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetMetadataPolicyAsync(string policyId, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.GetMetadataPolicyAsync(System.String,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataPolicyAsync (policyId As String, options As RequestOptions) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataPolicyAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetMetadataPolicyAsync : string * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewMetadataPolicyClient.GetMetadataPolicyAsync (policyId, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="policyId"> Id of an existing policy that needs to be fetched. </param>
        <param name="options"> The request options. </param>
        <summary> Gets a metadata policy. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetadataPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateMetadataPolicy (string policyId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateMetadataPolicy(string policyId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.UpdateMetadataPolicy(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetadataPolicy (policyId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetadataPolicy : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response&#xA;override this.UpdateMetadataPolicy : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; Azure.Response" Usage="purviewMetadataPolicyClient.UpdateMetadataPolicy (policyId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="policyId"> Unique policy id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Updates a metadata policy. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMetadataPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateMetadataPolicyAsync (string policyId, Azure.Core.RequestContent content, Azure.RequestOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateMetadataPolicyAsync(string policyId, class Azure.Core.RequestContent content, class Azure.RequestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Administration.PurviewMetadataPolicyClient.UpdateMetadataPolicyAsync(System.String,Azure.Core.RequestContent,Azure.RequestOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateMetadataPolicyAsync (policyId As String, content As RequestContent, Optional options As RequestOptions = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateMetadataPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateMetadataPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewMetadataPolicyClient.UpdateMetadataPolicyAsync (policyId, content, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Administration</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="options" Type="Azure.RequestOptions" />
      </Parameters>
      <Docs>
        <param name="policyId"> Unique policy id. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="options"> The request options. </param>
        <summary> Updates a metadata policy. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              name: string,
              id: string,
              version: number,
              properties: {
                description: string,
                decisionRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    effect: "Deny" | "Permit",
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                attributeRules: [
                  {
                    kind: "decisionrule" | "attributerule",
                    id: string,
                    name: string,
                    dnfCondition: [AttributeMatcher[]]
                  }
                ],
                collection: {
                  type: string,
                  referenceName: string
                },
                parentCollectionName: string
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                message: string,
                target: string,
                details: [ErrorModelAutoGenerated]
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policyId" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
