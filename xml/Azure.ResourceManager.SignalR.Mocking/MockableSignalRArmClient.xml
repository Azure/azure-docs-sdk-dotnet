<Type Name="MockableSignalRArmClient" FullName="Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient">
  <TypeSignature Language="C#" Value="public class MockableSignalRArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableSignalRArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableSignalRArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableSignalRArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableSignalRArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignalRCustomCertificateResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.SignalR.SignalRCustomCertificateResource GetSignalRCustomCertificateResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.SignalR.SignalRCustomCertificateResource GetSignalRCustomCertificateResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.GetSignalRCustomCertificateResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignalRCustomCertificateResource (id As ResourceIdentifier) As SignalRCustomCertificateResource" />
      <MemberSignature Language="F#" Value="abstract member GetSignalRCustomCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRCustomCertificateResource&#xA;override this.GetSignalRCustomCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRCustomCertificateResource" Usage="mockableSignalRArmClient.GetSignalRCustomCertificateResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.SignalRCustomCertificateResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomCertificateResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.SignalR.SignalRCustomCertificateResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomCertificateResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomCertificateResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignalRCustomDomainResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.SignalR.SignalRCustomDomainResource GetSignalRCustomDomainResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.SignalR.SignalRCustomDomainResource GetSignalRCustomDomainResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.GetSignalRCustomDomainResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignalRCustomDomainResource (id As ResourceIdentifier) As SignalRCustomDomainResource" />
      <MemberSignature Language="F#" Value="abstract member GetSignalRCustomDomainResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRCustomDomainResource&#xA;override this.GetSignalRCustomDomainResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRCustomDomainResource" Usage="mockableSignalRArmClient.GetSignalRCustomDomainResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.SignalRCustomDomainResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomDomainResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.SignalR.SignalRCustomDomainResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomDomainResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.SignalR.SignalRCustomDomainResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignalRPrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource GetSignalRPrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource GetSignalRPrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.GetSignalRPrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignalRPrivateEndpointConnectionResource (id As ResourceIdentifier) As SignalRPrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetSignalRPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource&#xA;override this.GetSignalRPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource" Usage="mockableSignalRArmClient.GetSignalRPrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.SignalR.SignalRPrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignalRResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.SignalR.SignalRResource GetSignalRResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.SignalR.SignalRResource GetSignalRResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.GetSignalRResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignalRResource (id As ResourceIdentifier) As SignalRResource" />
      <MemberSignature Language="F#" Value="abstract member GetSignalRResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRResource&#xA;override this.GetSignalRResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRResource" Usage="mockableSignalRArmClient.GetSignalRResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.SignalRResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.SignalR.SignalRResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.SignalR.SignalRResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.SignalR.SignalRResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.SignalR.SignalRResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSignalRSharedPrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource GetSignalRSharedPrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource GetSignalRSharedPrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Mocking.MockableSignalRArmClient.GetSignalRSharedPrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignalRSharedPrivateLinkResource (id As ResourceIdentifier) As SignalRSharedPrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetSignalRSharedPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource&#xA;override this.GetSignalRSharedPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource" Usage="mockableSignalRArmClient.GetSignalRSharedPrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.SignalR.SignalRSharedPrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
