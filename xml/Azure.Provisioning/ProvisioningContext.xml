<Type Name="ProvisioningContext" FullName="Azure.Provisioning.ProvisioningContext">
  <TypeSignature Language="C#" Value="public class ProvisioningContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProvisioningContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Provisioning.ProvisioningContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ProvisioningContext" />
  <TypeSignature Language="F#" Value="type ProvisioningContext = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Provisioning</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            ProvisioningContext collects common values, settings, and functionality
            that are used for composing, building, and deploying resources with
            Azure.Provisioning libraries.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProvisioningContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Provisioning.ProvisioningContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InfrastructureResolvers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.InfrastructureResolver&gt; InfrastructureResolvers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Azure.Provisioning.Primitives.InfrastructureResolver&gt; InfrastructureResolvers" />
      <MemberSignature Language="DocId" Value="P:Azure.Provisioning.ProvisioningContext.InfrastructureResolvers" />
      <MemberSignature Language="VB.NET" Value="Public Property InfrastructureResolvers As IList(Of InfrastructureResolver)" />
      <MemberSignature Language="F#" Value="member this.InfrastructureResolvers : System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.InfrastructureResolver&gt; with get, set" Usage="Azure.Provisioning.ProvisioningContext.InfrastructureResolvers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.InfrastructureResolver&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the collection of <see cref="T:Azure.Provisioning.Primitives.InfrastructureResolver" />s to
            apply to any <see cref="T:Azure.Provisioning.Infrastructure" /> being composed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyResolvers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.PropertyResolver&gt; PropertyResolvers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Azure.Provisioning.Primitives.PropertyResolver&gt; PropertyResolvers" />
      <MemberSignature Language="DocId" Value="P:Azure.Provisioning.ProvisioningContext.PropertyResolvers" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyResolvers As IList(Of PropertyResolver)" />
      <MemberSignature Language="F#" Value="member this.PropertyResolvers : System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.PropertyResolver&gt; with get, set" Usage="Azure.Provisioning.ProvisioningContext.PropertyResolvers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Provisioning.Primitives.PropertyResolver&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the collection of <see cref="T:Azure.Provisioning.Primitives.PropertyResolver" />s to apply
            to all resources being composed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public Random Random { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Random Random" />
      <MemberSignature Language="DocId" Value="P:Azure.Provisioning.ProvisioningContext.Random" />
      <MemberSignature Language="VB.NET" Value="Public Property Random As Random" />
      <MemberSignature Language="F#" Value="member this.Random : Random with get, set" Usage="Azure.Provisioning.ProvisioningContext.Random" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Random</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a random generator.  It defaults to a new
            <see cref="P:Azure.Provisioning.ProvisioningContext.Random" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            This can be helpful to set with a known seed if you want reproducible
            randomness for testing or debugging.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
