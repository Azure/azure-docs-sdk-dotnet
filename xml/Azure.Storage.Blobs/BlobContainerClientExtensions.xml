<Type Name="BlobContainerClientExtensions" FullName="Azure.Storage.Blobs.BlobContainerClientExtensions">
  <TypeSignature Language="C#" Value="public static class BlobContainerClientExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit BlobContainerClientExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.BlobContainerClientExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module BlobContainerClientExtensions" />
  <TypeSignature Language="F#" Value="type BlobContainerClientExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
    <AssemblyVersion>12.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Data movement extension methods for the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DownloadToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt; DownloadToDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, Azure.WaitUntil waitUntil, string localDirectoryPath, Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.TransferOperation&gt; DownloadToDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, valuetype Azure.WaitUntil waitUntil, string localDirectoryPath, class Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.DownloadToDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,Azure.WaitUntil,System.String,Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DownloadToDirectoryAsync (client As BlobContainerClient, waitUntil As WaitUntil, localDirectoryPath As String, options As BlobContainerClientTransferOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TransferOperation)" />
      <MemberSignature Language="F#" Value="static member DownloadToDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * Azure.WaitUntil * string * Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.DownloadToDirectoryAsync (client, waitUntil, localDirectoryPath, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="waitUntil">Indicates whether this invocation should wait until the transfer is complete to return or return immediately.</param>
        <param name="localDirectoryPath">The full path to the local directory where files will be dowloaded.</param>
        <param name="options">Options which control the container download.</param>
        <param name="cancellationToken">
            Cancels starting the operation or if <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />,
            cancels waiting for the operation. Cancelling this token does not cancel the operation itself.
            </param>
        <summary>
            Downloads the contents of a blob container.
            </summary>
        <returns>
            A <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance which contains information about the transfer and its status.
            </returns>
        <remarks>
            This is an async long-running operation which means the operation may not be complete when this methods returns. If <paramref name="waitUntil" />
            is set to <see cref="F:Azure.WaitUntil.Started" />, the method will return as soon as a transfer is started and <see cref="M:Azure.Storage.DataMovement.TransferOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            can be used to wait for the transfer to complete. If <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />, the method will wait
            for the entire transfer to complete.
            In either case, the caller must check the status of the transfer using the returned <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance to determine if the transfer
            completed successfully or not. This method will not throw an exception if the transfer fails, but the <see cref="P:Azure.Storage.DataMovement.TransferOperation.Status" /> will indicate a failure.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt; DownloadToDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, Azure.WaitUntil waitUntil, string localDirectoryPath, string blobDirectoryPrefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.TransferOperation&gt; DownloadToDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, valuetype Azure.WaitUntil waitUntil, string localDirectoryPath, string blobDirectoryPrefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.DownloadToDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,Azure.WaitUntil,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DownloadToDirectoryAsync (client As BlobContainerClient, waitUntil As WaitUntil, localDirectoryPath As String, Optional blobDirectoryPrefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TransferOperation)" />
      <MemberSignature Language="F#" Value="static member DownloadToDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * Azure.WaitUntil * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.DownloadToDirectoryAsync (client, waitUntil, localDirectoryPath, blobDirectoryPrefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="blobDirectoryPrefix" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="waitUntil">Indicates whether this invocation should wait until the transfer is complete to return or return immediately.</param>
        <param name="localDirectoryPath">The full path to the local directory where files will be dowloaded.</param>
        <param name="blobDirectoryPrefix">Optionally restricts the downloaded content to blobs with the specified directory prefix.</param>
        <param name="cancellationToken">
            Cancels starting the operation or if <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />,
            cancels waiting for the operation. Cancelling this token does not cancel the operation itself.
            </param>
        <summary>
            Downloads the contents of a blob container.
            </summary>
        <returns>
            A <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance which contains information about the transfer and its status.
            </returns>
        <remarks>
            This is an async long-running operation which means the operation may not be complete when this methods returns. If <paramref name="waitUntil" />
            is set to <see cref="F:Azure.WaitUntil.Started" />, the method will return as soon as a transfer is started and <see cref="M:Azure.Storage.DataMovement.TransferOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            can be used to wait for the transfer to complete. If <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />, the method will wait
            for the entire transfer to complete.
            In either case, the caller must check the status of the transfer using the returned <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance to determine if the transfer
            completed successfully or not. This method will not throw an exception if the transfer fails, but the <see cref="P:Azure.Storage.DataMovement.TransferOperation.Status" /> will indicate a failure.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDownloadToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt; StartDownloadToDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.DataTransfer&gt; StartDownloadToDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, class Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.StartDownloadToDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,System.String,Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartDownloadToDirectoryAsync (client As BlobContainerClient, localDirectoryPath As String, options As BlobContainerClientTransferOptions) As Task(Of DataTransfer)" />
      <MemberSignature Language="F#" Value="static member StartDownloadToDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * string * Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.StartDownloadToDirectoryAsync (client, localDirectoryPath, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="localDirectoryPath">The full path to the local directory where files will be dowloaded.</param>
        <param name="options">Options which control the container download.</param>
        <summary>
            Downloads the contents of a blob container.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDownloadToDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt; StartDownloadToDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, string blobDirectoryPrefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.DataTransfer&gt; StartDownloadToDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, string blobDirectoryPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.StartDownloadToDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartDownloadToDirectoryAsync (client As BlobContainerClient, localDirectoryPath As String, Optional blobDirectoryPrefix As String = Nothing) As Task(Of DataTransfer)" />
      <MemberSignature Language="F#" Value="static member StartDownloadToDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * string * string -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.StartDownloadToDirectoryAsync (client, localDirectoryPath, blobDirectoryPrefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="blobDirectoryPrefix" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="localDirectoryPath">The full path to the local directory where files will be dowloaded.</param>
        <param name="blobDirectoryPrefix">Optionally restricts the downloaded content to blobs with the specified directory prefix.</param>
        <summary>
            Downloads the contents of a blob container.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartUploadDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt; StartUploadDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.DataTransfer&gt; StartUploadDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, class Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.StartUploadDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,System.String,Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartUploadDirectoryAsync (client As BlobContainerClient, localDirectoryPath As String, options As BlobContainerClientTransferOptions) As Task(Of DataTransfer)" />
      <MemberSignature Language="F#" Value="static member StartUploadDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * string * Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.StartUploadDirectoryAsync (client, localDirectoryPath, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="localDirectoryPath">The full path to the local directory to be uploaded.</param>
        <param name="options">Options which control the directory upload.</param>
        <summary>
            Uploads the entire contents of local directory to the blob container.
            </summary>
        <returns>A <see cref="T:Azure.Storage.DataMovement.DataTransfer" /> instance which can be used track progress and wait for completion with <see cref="M:Azure.Storage.DataMovement.DataTransfer.WaitForCompletionAsync(System.Threading.CancellationToken)" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartUploadDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt; StartUploadDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, string blobDirectoryPrefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.DataTransfer&gt; StartUploadDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, string localDirectoryPath, string blobDirectoryPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.StartUploadDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function StartUploadDirectoryAsync (client As BlobContainerClient, localDirectoryPath As String, Optional blobDirectoryPrefix As String = Nothing) As Task(Of DataTransfer)" />
      <MemberSignature Language="F#" Value="static member StartUploadDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * string * string -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.StartUploadDirectoryAsync (client, localDirectoryPath, blobDirectoryPrefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.DataTransfer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="blobDirectoryPrefix" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="localDirectoryPath">The full path to the local directory to be uploaded.</param>
        <param name="blobDirectoryPrefix">Optionally specifies the directory prefix to be prepended to all uploaded files.</param>
        <summary>
            Uploads the entire contents of local directory to the blob container.
            </summary>
        <returns>A <see cref="T:Azure.Storage.DataMovement.DataTransfer" /> instance which can be used track progress and wait for completion with <see cref="M:Azure.Storage.DataMovement.DataTransfer.WaitForCompletionAsync(System.Threading.CancellationToken)" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt; UploadDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, Azure.WaitUntil waitUntil, string localDirectoryPath, Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.TransferOperation&gt; UploadDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, valuetype Azure.WaitUntil waitUntil, string localDirectoryPath, class Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.UploadDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,Azure.WaitUntil,System.String,Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UploadDirectoryAsync (client As BlobContainerClient, waitUntil As WaitUntil, localDirectoryPath As String, options As BlobContainerClientTransferOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TransferOperation)" />
      <MemberSignature Language="F#" Value="static member UploadDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * Azure.WaitUntil * string * Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.UploadDirectoryAsync (client, waitUntil, localDirectoryPath, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="options" Type="Azure.Storage.DataMovement.Blobs.BlobContainerClientTransferOptions" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="waitUntil">Indicates whether this invocation should wait until the transfer is complete to return or return immediately.</param>
        <param name="localDirectoryPath">The full path to the local directory to be uploaded.</param>
        <param name="options">Options which control the directory upload.</param>
        <param name="cancellationToken">
            Cancels starting the operation or if <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />,
            cancels waiting for the operation. Cancelling this token does not cancel the operation itself.
            </param>
        <summary>
            Uploads the entire contents of local directory to the blob container.
            </summary>
        <returns>
            A <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance which contains information about the transfer and its status.
            </returns>
        <remarks>
            This is an async long-running operation which means the operation may not be complete when this methods returns. If <paramref name="waitUntil" />
            is set to <see cref="F:Azure.WaitUntil.Started" />, the method will return as soon as a transfer is started and <see cref="M:Azure.Storage.DataMovement.TransferOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            can be used to wait for the transfer to complete. If <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />, the method will wait
            for the entire transfer to complete.
            In either case, the caller must check the status of the transfer using the returned <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance to determine if the transfer
            completed successfully or not. This method will not throw an exception if the transfer fails, but the <see cref="P:Azure.Storage.DataMovement.TransferOperation.Status" /> will indicate a failure.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadDirectoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt; UploadDirectoryAsync (this Azure.Storage.Blobs.BlobContainerClient client, Azure.WaitUntil waitUntil, string localDirectoryPath, string blobDirectoryPrefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Storage.DataMovement.TransferOperation&gt; UploadDirectoryAsync(class Azure.Storage.Blobs.BlobContainerClient client, valuetype Azure.WaitUntil waitUntil, string localDirectoryPath, string blobDirectoryPrefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClientExtensions.UploadDirectoryAsync(Azure.Storage.Blobs.BlobContainerClient,Azure.WaitUntil,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UploadDirectoryAsync (client As BlobContainerClient, waitUntil As WaitUntil, localDirectoryPath As String, Optional blobDirectoryPrefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TransferOperation)" />
      <MemberSignature Language="F#" Value="static member UploadDirectoryAsync : Azure.Storage.Blobs.BlobContainerClient * Azure.WaitUntil * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;" Usage="Azure.Storage.Blobs.BlobContainerClientExtensions.UploadDirectoryAsync (client, waitUntil, localDirectoryPath, blobDirectoryPrefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement.Blobs</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Storage.DataMovement.TransferOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.Storage.Blobs.BlobContainerClient" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="localDirectoryPath" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="blobDirectoryPrefix" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="client">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> used for service operations.</param>
        <param name="waitUntil">Indicates whether this invocation should wait until the transfer is complete to return or return immediately.</param>
        <param name="localDirectoryPath">The full path to the local directory to be uploaded.</param>
        <param name="blobDirectoryPrefix">Optionally specifies the directory prefix to be prepended to all uploaded files.</param>
        <param name="cancellationToken">
            Cancels starting the operation or if <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />,
            cancels waiting for the operation. Cancelling this token does not cancel the operation itself.
            </param>
        <summary>
            Uploads the entire contents of local directory to the blob container.
            </summary>
        <returns>
            A <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance which contains information about the transfer and its status.
            </returns>
        <remarks>
            This is an async long-running operation which means the operation may not be complete when this methods returns. If <paramref name="waitUntil" />
            is set to <see cref="F:Azure.WaitUntil.Started" />, the method will return as soon as a transfer is started and <see cref="M:Azure.Storage.DataMovement.TransferOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />
            can be used to wait for the transfer to complete. If <paramref name="waitUntil" /> is set to <see cref="F:Azure.WaitUntil.Completed" />, the method will wait
            for the entire transfer to complete.
            In either case, the caller must check the status of the transfer using the returned <see cref="T:Azure.Storage.DataMovement.TransferOperation" /> instance to determine if the transfer
            completed successfully or not. This method will not throw an exception if the transfer fails, but the <see cref="P:Azure.Storage.DataMovement.TransferOperation.Status" /> will indicate a failure.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
