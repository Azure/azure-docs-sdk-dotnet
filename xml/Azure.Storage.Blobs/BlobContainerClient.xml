<Type Name="BlobContainerClient" FullName="Azure.Storage.Blobs.BlobContainerClient">
  <TypeSignature Language="C#" Value="public class BlobContainerClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobContainerClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Blobs.BlobContainerClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobContainerClient" />
  <TypeSignature Language="F#" Value="type BlobContainerClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Blobs</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
    <AssemblyVersion>12.1.0.0</AssemblyVersion>
    <AssemblyVersion>12.2.0.0</AssemblyVersion>
    <AssemblyVersion>12.3.0.0</AssemblyVersion>
    <AssemblyVersion>12.4.0.0</AssemblyVersion>
    <AssemblyVersion>12.4.1.0</AssemblyVersion>
    <AssemblyVersion>12.4.2.0</AssemblyVersion>
    <AssemblyVersion>12.4.3.0</AssemblyVersion>
    <AssemblyVersion>12.4.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> allows you to manipulate Azure
            Storage containers and their blobs.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobContainerClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (string connectionString, string blobContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string blobContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, blobContainerName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : string * string -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (connectionString, blobContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="blobContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="blobContainerName">
             The name of the blob container in the storage account to reference.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (Uri blobContainerUri, Azure.Storage.Blobs.BlobClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobContainerUri, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.Uri,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobContainerUri As Uri, Optional options As BlobClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : Uri * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (blobContainerUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobContainerUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobContainerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the blob container that includes the
            name of the account and the name of the container.
            This is likely to be similar to "https://{account_name}.blob.core.windows.net/{container_name}".
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (string connectionString, string blobContainerName, Azure.Storage.Blobs.BlobClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string blobContainerName, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.String,System.String,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, blobContainerName As String, options As BlobClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : string * string * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (connectionString, blobContainerName, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="blobContainerName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">
             A connection string includes the authentication information
             required for your application to access data in an Azure Storage
             account at runtime.
            
             For more information, <see href="https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string" />.
             </param>
        <param name="blobContainerName">
             The name of the container in the storage account to reference.
             </param>
        <param name="options">
             Optional client options that define the transport pipeline
             policies for authentication, retries, etc., that are applied to
             every request.
             </param>
        <summary>
             Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
             class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (Uri blobContainerUri, Azure.Core.TokenCredential credential, Azure.Storage.Blobs.BlobClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobContainerUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobContainerUri As Uri, credential As TokenCredential, Optional options As BlobClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (blobContainerUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobContainerUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobContainerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the blob container that includes the
            name of the account and the name of the container.
            This is likely to be similar to "https://{account_name}.blob.core.windows.net/{container_name}".
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobContainerClient (Uri blobContainerUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Blobs.BlobClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri blobContainerUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Blobs.BlobClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Blobs.BlobClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobContainerUri As Uri, credential As StorageSharedKeyCredential, Optional options As BlobClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Blobs.BlobContainerClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Blobs.BlobClientOptions -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="new Azure.Storage.Blobs.BlobContainerClient (blobContainerUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobContainerUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
      </Parameters>
      <Docs>
        <param name="blobContainerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the blob container that includes the
            name of the account and the name of the container.
            This is likely to be similar to "https://{account_name}.blob.core.windows.net/{container_name}".
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccountName">
      <MemberSignature Language="C#" Value="public virtual string AccountName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccountName" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.BlobContainerClient.AccountName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AccountName As String" />
      <MemberSignature Language="F#" Value="member this.AccountName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.AccountName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Storage account name corresponding to the container client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; Create (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; Create(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Create(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (publicAccessType As PublicAccessType, metadata As IDictionary(Of String, String), cancellationToken As CancellationToken) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.Create : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.Create (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Create(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created blob container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; Create (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; Create(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Create(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (Optional publicAccessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional metadata As IDictionary(Of String, String) = Nothing, Optional encryptionScopeOptions As BlobContainerEncryptionScopeOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.Create : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.Create (publicAccessType, metadata, encryptionScopeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="encryptionScopeOptions" Type="Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="encryptionScopeOptions">
             Optional encryption scope options to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Create(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
             operation creates a new container
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created blob container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateAsync (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateAsync(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (publicAccessType As PublicAccessType, metadata As IDictionary(Of String, String), cancellationToken As CancellationToken) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.CreateAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.CreateAsync (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateAsync (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateAsync(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (Optional publicAccessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional metadata As IDictionary(Of String, String) = Nothing, Optional encryptionScopeOptions As BlobContainerEncryptionScopeOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.CreateAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.CreateAsync (publicAccessType, metadata, encryptionScopeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="encryptionScopeOptions" Type="Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="encryptionScopeOptions">
             Optional encryption scope options to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
             operation creates a new container under the specified account. If the container with the same name
             already exists, the operation fails.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateClient">
      <MemberSignature Language="C#" Value="protected static Azure.Storage.Blobs.BlobContainerClient CreateClient (Uri containerUri, Azure.Storage.Blobs.BlobClientOptions options, Azure.Core.Pipeline.HttpPipeline pipeline);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class Azure.Storage.Blobs.BlobContainerClient CreateClient(class System.Uri containerUri, class Azure.Storage.Blobs.BlobClientOptions options, class Azure.Core.Pipeline.HttpPipeline pipeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateClient(System.Uri,Azure.Storage.Blobs.BlobClientOptions,Azure.Core.Pipeline.HttpPipeline)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateClient (containerUri As Uri, options As BlobClientOptions, pipeline As HttpPipeline) As BlobContainerClient" />
      <MemberSignature Language="F#" Value="static member CreateClient : Uri * Azure.Storage.Blobs.BlobClientOptions * Azure.Core.Pipeline.HttpPipeline -&gt; Azure.Storage.Blobs.BlobContainerClient" Usage="Azure.Storage.Blobs.BlobContainerClient.CreateClient (containerUri, options, pipeline)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.BlobContainerClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Blobs.BlobClientOptions" />
        <Parameter Name="pipeline" Type="Azure.Core.Pipeline.HttpPipeline" />
      </Parameters>
      <Docs>
        <param name="containerUri">
            A <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> referencing the block blob that includes the
            name of the account, the name of the container, and the name of
            the blob.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <param name="pipeline">
            The transport pipeline used to send every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />
            class.
            </summary>
        <returns>
            New instance of the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> class.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; CreateIfNotExists (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; CreateIfNotExists(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExists (publicAccessType As PublicAccessType, metadata As IDictionary(Of String, String), cancellationToken As CancellationToken) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExists : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.CreateIfNotExists : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.CreateIfNotExists (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, it is not changed.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             If the container does not already exist, a <see cref="T:Azure.Response`1" />
             describing the newly created container. If the container already exists, <c>null</c>.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; CreateIfNotExists (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; CreateIfNotExists(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExists (Optional publicAccessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional metadata As IDictionary(Of String, String) = Nothing, Optional encryptionScopeOptions As BlobContainerEncryptionScopeOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExists : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.CreateIfNotExists : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.CreateIfNotExists (publicAccessType, metadata, encryptionScopeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="encryptionScopeOptions" Type="Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="encryptionScopeOptions">
             Optional encryption scope options to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
             operation creates a new container under the specified account. If the container with the same name
             already exists, it is not changed.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             If the container does not already exist, a <see cref="T:Azure.Response`1" />
             describing the newly created container. If the container already exists, <c>null</c>.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateIfNotExistsAsync (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateIfNotExistsAsync(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExistsAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExistsAsync (publicAccessType As PublicAccessType, metadata As IDictionary(Of String, String), cancellationToken As CancellationToken) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExistsAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.CreateIfNotExistsAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.CreateIfNotExistsAsync (publicAccessType, metadata, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> operation creates a new container
             under the specified account. If the container with the same name
             already exists, it is not changed.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateIfNotExistsAsync (Azure.Storage.Blobs.Models.PublicAccessType publicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; CreateIfNotExistsAsync(valuetype Azure.Storage.Blobs.Models.PublicAccessType publicAccessType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions encryptionScopeOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExistsAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExistsAsync (Optional publicAccessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional metadata As IDictionary(Of String, String) = Nothing, Optional encryptionScopeOptions As BlobContainerEncryptionScopeOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExistsAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.CreateIfNotExistsAsync : Azure.Storage.Blobs.Models.PublicAccessType * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.CreateIfNotExistsAsync (publicAccessType, metadata, encryptionScopeOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publicAccessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="encryptionScopeOptions" Type="Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="publicAccessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="metadata">
             Optional custom metadata to set for this container.
             </param>
        <param name="encryptionScopeOptions">
             Optional encryption scope options to set for this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExistsAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
             operation creates a new container under the specified account. If the container with the same name
             already exists, it is not changed.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/create-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the newly
             created container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Delete(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Delete : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobContainerClient.Delete (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Delete(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion. The container and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobContainerClient.DeleteAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion. The container and any blobs contained
             within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteBlob (string blobName, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteBlob(string blobName, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlob(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlob (blobName As String, Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlob : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteBlob : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobContainerClient.DeleteBlob (blobName, snapshotsOption, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="snapshotsOption">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlob(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.IncludeSnapshots" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteBlobAsync (string blobName, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteBlobAsync(string blobName, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobAsync(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobAsync (blobName As String, Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobAsync : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteBlobAsync : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobContainerClient.DeleteBlobAsync (blobName, snapshotsOption, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="snapshotsOption">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobAsync(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion. The blob is later deleted during
             garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.IncludeSnapshots" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteBlobIfExists (string blobName, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteBlobIfExists(string blobName, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobIfExists(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobIfExists (blobName As String, Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobIfExists : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteBlobIfExists : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="blobContainerClient.DeleteBlobIfExists (blobName, snapshotsOption, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="snapshotsOption">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobIfExists(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion, if the blob or snapshot exists. The blob
             is later deleted during garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.IncludeSnapshots" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBlobIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteBlobIfExistsAsync (string blobName, Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteBlobIfExistsAsync(string blobName, valuetype Azure.Storage.Blobs.Models.DeleteSnapshotsOption snapshotsOption, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobIfExistsAsync(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteBlobIfExistsAsync (blobName As String, Optional snapshotsOption As DeleteSnapshotsOption = Azure.Storage.Blobs.Models.DeleteSnapshotsOption.None, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteBlobIfExistsAsync : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteBlobIfExistsAsync : string * Azure.Storage.Blobs.Models.DeleteSnapshotsOption * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="blobContainerClient.DeleteBlobIfExistsAsync (blobName, snapshotsOption, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="snapshotsOption" Type="Azure.Storage.Blobs.Models.DeleteSnapshotsOption" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to delete.</param>
        <param name="snapshotsOption">
             Specifies options for deleting blob snapshots.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add conditions on
             deleting this blob.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteBlobIfExistsAsync(System.String,Azure.Storage.Blobs.Models.DeleteSnapshotsOption,Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             blob or snapshot for deletion, if the blob or snapshot exists. The blob
             is later deleted during garbage collection.
            
             Note that in order to delete a blob, you must delete all of its
             snapshots. You can delete both at the same time using
             <see cref="F:Azure.Storage.Blobs.Models.DeleteSnapshotsOption.IncludeSnapshots" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteIfExists (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteIfExists(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteIfExists(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteIfExists (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteIfExists : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.DeleteIfExists : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="blobContainerClient.DeleteIfExists (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteIfExists(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion if it exists. The container and any blobs
             contained within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> Returns true if container exists and was
             deleted, return false otherwise.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteIfExistsAsync (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteIfExistsAsync(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.DeleteIfExistsAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteIfExistsAsync (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member DeleteIfExistsAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.DeleteIfExistsAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="blobContainerClient.DeleteIfExistsAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.DeleteIfExistsAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified
             container for deletion if it exists. The container and any blobs
             contained within it are later deleted during garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/delete-container" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> Returns true if container exists and was
             deleted, return false otherwise.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.Exists(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="blobContainerClient.Exists cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
        <summary>
            The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.Exists(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> to see if the associated container
            exists on the storage account in the storage service.
            </summary>
        <returns>
            Returns true if the container exists.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the container if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.ExistsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="blobContainerClient.ExistsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notifications that the operation should be cancelled.
            </param>
        <summary>
            The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.ExistsAsync(System.Threading.CancellationToken)" /> operation can be called on a
            <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> to see if the associated container
            exists on the storage account in the storage service.
            </summary>
        <returns>
            Returns true if the container exists.
            </returns>
        <remarks>
            A <see cref="T:Azure.RequestFailedException" /> will be thrown if
            a failure occurs. If you want to create the container if
            it doesn't exist, use
            <see cref="M:Azure.Storage.Blobs.BlobContainerClient.CreateIfNotExists(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobContainerEncryptionScopeOptions,System.Threading.CancellationToken)" />
            instead.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt; GetAccessPolicy (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt; GetAccessPolicy(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicy(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessPolicy (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerAccessPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicy : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&#xA;override this.GetAccessPolicy : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;" Usage="blobContainerClient.GetAccessPolicy (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on getting the blob container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicy(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this container. The permissions indicate whether
             container data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the container's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&gt; GetAccessPolicyAsync (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&gt; GetAccessPolicyAsync(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicyAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessPolicyAsync (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerAccessPolicy))" />
      <MemberSignature Language="F#" Value="abstract member GetAccessPolicyAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&gt;&#xA;override this.GetAccessPolicyAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&gt;" Usage="blobContainerClient.GetAccessPolicyAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerAccessPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on getting the blob container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetAccessPolicyAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation gets the
             permissions for this container. The permissions indicate whether
             container data may be accessed publicly.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing
             the container's access policy.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Blobs.BlobClient GetBlobClient (string blobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Blobs.BlobClient GetBlobClient(string blobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobClient (blobName As String) As BlobClient" />
      <MemberSignature Language="F#" Value="abstract member GetBlobClient : string -&gt; Azure.Storage.Blobs.BlobClient&#xA;override this.GetBlobClient : string -&gt; Azure.Storage.Blobs.BlobClient" Usage="blobContainerClient.GetBlobClient blobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Blobs.BlobClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob.</param>
        <summary>
            Create a new <see cref="T:Azure.Storage.Blobs.BlobClient" /> object by appending
            <paramref name="blobName" /> to the end of <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" />.  The
            new <see cref="T:Azure.Storage.Blobs.BlobClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Blobs.BlobContainerClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Blobs.BlobClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobs (Azure.Storage.Blobs.Models.BlobTraits traits = Azure.Storage.Blobs.Models.BlobTraits.None, Azure.Storage.Blobs.Models.BlobStates states = Azure.Storage.Blobs.Models.BlobStates.None, string prefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobs(valuetype Azure.Storage.Blobs.Models.BlobTraits traits, valuetype Azure.Storage.Blobs.Models.BlobStates states, string prefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobs(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobs (Optional traits As BlobTraits = Azure.Storage.Blobs.Models.BlobTraits.None, Optional states As BlobStates = Azure.Storage.Blobs.Models.BlobStates.None, Optional prefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BlobItem)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobs : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&#xA;override this.GetBlobs : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;" Usage="blobContainerClient.GetBlobs (traits, states, prefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="Azure.Storage.Blobs.Models.BlobTraits" />
        <Parameter Name="states" Type="Azure.Storage.Blobs.Models.BlobStates" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="traits">
             Specifies trait options for shaping the blobs.
             </param>
        <param name="states">
             Specifies state options for filtering the blobs.
             </param>
        <param name="prefix">
             Specifies a string that filters the results to return only blobs
             whose name begins with the specified <paramref name="prefix" />.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobs(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.Threading.CancellationToken)" /> operation returns an async sequence
             of blobs in this container.  Enumerating the blobs may make
             multiple requests to the service while fetching all the values.
             Blobs are ordered lexicographically by name.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.Pageable`1" /> of <see cref="T:Azure.Storage.Blobs.Models.BlobItem" />
             describing the blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobsAsync (Azure.Storage.Blobs.Models.BlobTraits traits = Azure.Storage.Blobs.Models.BlobTraits.None, Azure.Storage.Blobs.Models.BlobStates states = Azure.Storage.Blobs.Models.BlobStates.None, string prefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Storage.Blobs.Models.BlobItem&gt; GetBlobsAsync(valuetype Azure.Storage.Blobs.Models.BlobTraits traits, valuetype Azure.Storage.Blobs.Models.BlobStates states, string prefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsAsync(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobsAsync (Optional traits As BlobTraits = Azure.Storage.Blobs.Models.BlobTraits.None, Optional states As BlobStates = Azure.Storage.Blobs.Models.BlobStates.None, Optional prefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BlobItem)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsAsync : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;&#xA;override this.GetBlobsAsync : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;" Usage="blobContainerClient.GetBlobsAsync (traits, states, prefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="Azure.Storage.Blobs.Models.BlobTraits" />
        <Parameter Name="states" Type="Azure.Storage.Blobs.Models.BlobStates" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="traits">
             Specifies trait options for shaping the blobs.
             </param>
        <param name="states">
             Specifies state options for filtering the blobs.
             </param>
        <param name="prefix">
             Specifies a string that filters the results to return only blobs
             whose name begins with the specified <paramref name="prefix" />.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsAsync(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.Threading.CancellationToken)" /> operation returns an async
             sequence of blobs in this container.  Enumerating the blobs may
             make multiple requests to the service while fetching all the
             values.  Blobs are ordered lexicographically by name.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsByHierarchy">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchy (Azure.Storage.Blobs.Models.BlobTraits traits = Azure.Storage.Blobs.Models.BlobTraits.None, Azure.Storage.Blobs.Models.BlobStates states = Azure.Storage.Blobs.Models.BlobStates.None, string delimiter = default, string prefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchy(valuetype Azure.Storage.Blobs.Models.BlobTraits traits, valuetype Azure.Storage.Blobs.Models.BlobStates states, string delimiter, string prefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchy(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobsByHierarchy (Optional traits As BlobTraits = Azure.Storage.Blobs.Models.BlobTraits.None, Optional states As BlobStates = Azure.Storage.Blobs.Models.BlobStates.None, Optional delimiter As String = Nothing, Optional prefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BlobHierarchyItem)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsByHierarchy : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&#xA;override this.GetBlobsByHierarchy : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;" Usage="blobContainerClient.GetBlobsByHierarchy (traits, states, delimiter, prefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="Azure.Storage.Blobs.Models.BlobTraits" />
        <Parameter Name="states" Type="Azure.Storage.Blobs.Models.BlobStates" />
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="traits">
             Specifies trait options for shaping the blobs.
             </param>
        <param name="states">
             Specifies state options for filtering the blobs.
             </param>
        <param name="delimiter">
             A <paramref name="delimiter" /> that can be used to traverse a
             virtual hierarchy of blobs as though it were a file system.  The
             delimiter may be a single character or a string.
             <see cref="P:Azure.Storage.Blobs.Models.BlobHierarchyItem.Prefix" /> will be returned
             in place of all blobs whose names begin with the same substring up
             to the appearance of the delimiter character.  The value of a
             prefix is substring+delimiter, where substring is the common
             substring that begins one or more blob  names, and delimiter is the
             value of <paramref name="delimiter" />. You can use the value of
             prefix to make a subsequent call to list the blobs that begin with
             this prefix, by specifying the value of the prefix for the
             <paramref name="prefix" />.
            
             Note that each BlobPrefix element returned counts toward the
             maximum result, just as each Blob element does.
             </param>
        <param name="prefix">
             Specifies a string that filters the results to return only blobs
             whose name begins with the specified <paramref name="prefix" />.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchy(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.String,System.Threading.CancellationToken)" /> operation returns
             an async collection of blobs in this container.  Enumerating the
             blobs may make multiple requests to the service while fetching all
             the values.  Blobs are ordered lexicographically by name.   A
             <paramref name="delimiter" /> can be used to traverse a virtual
             hierarchy of blobs as though it were a file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.Pageable`1" /> of <see cref="T:Azure.Storage.Blobs.Models.BlobHierarchyItem" />
             describing the blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBlobsByHierarchyAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchyAsync (Azure.Storage.Blobs.Models.BlobTraits traits = Azure.Storage.Blobs.Models.BlobTraits.None, Azure.Storage.Blobs.Models.BlobStates states = Azure.Storage.Blobs.Models.BlobStates.None, string delimiter = default, string prefix = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Storage.Blobs.Models.BlobHierarchyItem&gt; GetBlobsByHierarchyAsync(valuetype Azure.Storage.Blobs.Models.BlobTraits traits, valuetype Azure.Storage.Blobs.Models.BlobStates states, string delimiter, string prefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchyAsync(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBlobsByHierarchyAsync (Optional traits As BlobTraits = Azure.Storage.Blobs.Models.BlobTraits.None, Optional states As BlobStates = Azure.Storage.Blobs.Models.BlobStates.None, Optional delimiter As String = Nothing, Optional prefix As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BlobHierarchyItem)" />
      <MemberSignature Language="F#" Value="abstract member GetBlobsByHierarchyAsync : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;&#xA;override this.GetBlobsByHierarchyAsync : Azure.Storage.Blobs.Models.BlobTraits * Azure.Storage.Blobs.Models.BlobStates * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;" Usage="blobContainerClient.GetBlobsByHierarchyAsync (traits, states, delimiter, prefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Storage.Blobs.Models.BlobHierarchyItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="Azure.Storage.Blobs.Models.BlobTraits" />
        <Parameter Name="states" Type="Azure.Storage.Blobs.Models.BlobStates" />
        <Parameter Name="delimiter" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="traits">
             Specifies trait options for shaping the blobs.
             </param>
        <param name="states">
             Specifies state options for filtering the blobs.
             </param>
        <param name="delimiter">
             A <paramref name="delimiter" /> that can be used to traverse a
             virtual hierarchy of blobs as though it were a file system.  The
             delimiter may be a single character or a string.
             <see cref="P:Azure.Storage.Blobs.Models.BlobHierarchyItem.Prefix" /> will be returned
             in place of all blobs whose names begin with the same substring up
             to the appearance of the delimiter character.  The value of a
             prefix is substring+delimiter, where substring is the common
             substring that begins one or more blob  names, and delimiter is the
             value of <paramref name="delimiter" />. You can use the value of
             prefix to make a subsequent call to list the blobs that begin with
             this prefix, by specifying the value of the prefix for the
             <paramref name="prefix" />.
            
             Note that each BlobPrefix element returned counts toward the
             maximum result, just as each Blob element does.
             </param>
        <param name="prefix">
             Specifies a string that filters the results to return only blobs
             whose name begins with the specified <paramref name="prefix" />.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobsByHierarchyAsync(Azure.Storage.Blobs.Models.BlobTraits,Azure.Storage.Blobs.Models.BlobStates,System.String,System.String,System.Threading.CancellationToken)" /> operation returns
             an async collection of blobs in this container.  Enumerating the
             blobs may make multiple requests to the service while fetching all
             the values.  Blobs are ordered lexicographically by name.   A
             <paramref name="delimiter" /> can be used to traverse a virtual
             hierarchy of blobs as though it were a file system.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/list-blobs" />.
             </summary>
        <returns>
             An <see cref="T:Azure.AsyncPageable`1" /> describing the
             blobs in the container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt; GetProperties (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerProperties&gt; GetProperties(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetProperties(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProperties (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&#xA;override this.GetProperties : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;" Usage="blobContainerClient.GetProperties (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on getting the blob container's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetProperties(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             container. The data returned does not include the container's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             container and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&gt; GetPropertiesAsync (Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&gt; GetPropertiesAsync(class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.GetPropertiesAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPropertiesAsync (Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerProperties))" />
      <MemberSignature Language="F#" Value="abstract member GetPropertiesAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&gt;&#xA;override this.GetPropertiesAsync : Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&gt;" Usage="blobContainerClient.GetPropertiesAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on getting the blob container's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetPropertiesAsync(Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata and system properties for the specified
             container. The data returned does not include the container's
             list of blobs.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             container and its properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogsBlobContainerName">
      <MemberSignature Language="C#" Value="public static readonly string LogsBlobContainerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string LogsBlobContainerName" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.BlobContainerClient.LogsBlobContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LogsBlobContainerName As String " />
      <MemberSignature Language="F#" Value=" staticval mutable LogsBlobContainerName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.LogsBlobContainerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Azure Storage name used to identify a storage account's logs container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.BlobContainerClient.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Azure.Storage.Blobs.BlobContainerClient.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the container.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootBlobContainerName">
      <MemberSignature Language="C#" Value="public static readonly string RootBlobContainerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string RootBlobContainerName" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.BlobContainerClient.RootBlobContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RootBlobContainerName As String " />
      <MemberSignature Language="F#" Value=" staticval mutable RootBlobContainerName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.RootBlobContainerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Azure Storage name used to identify a storage account's root container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; SetAccessPolicy (Azure.Storage.Blobs.Models.PublicAccessType accessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; permissions = default, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; SetAccessPolicy(valuetype Azure.Storage.Blobs.Models.PublicAccessType accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; permissions, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicy(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.BlobSignedIdentifier},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetAccessPolicy (Optional accessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional permissions As IEnumerable(Of BlobSignedIdentifier) = Nothing, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicy : Azure.Storage.Blobs.Models.PublicAccessType * seq&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.SetAccessPolicy : Azure.Storage.Blobs.Models.PublicAccessType * seq&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.SetAccessPolicy (accessType, permissions, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over container permissions.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on setting this blob container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicy(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.BlobSignedIdentifier},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified container. The permissions indicate
             whether blob container data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; SetAccessPolicyAsync (Azure.Storage.Blobs.Models.PublicAccessType accessType = Azure.Storage.Blobs.Models.PublicAccessType.None, System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; permissions = default, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; SetAccessPolicyAsync(valuetype Azure.Storage.Blobs.Models.PublicAccessType accessType, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; permissions, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicyAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.BlobSignedIdentifier},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetAccessPolicyAsync (Optional accessType As PublicAccessType = Azure.Storage.Blobs.Models.PublicAccessType.None, Optional permissions As IEnumerable(Of BlobSignedIdentifier) = Nothing, Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member SetAccessPolicyAsync : Azure.Storage.Blobs.Models.PublicAccessType * seq&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.SetAccessPolicyAsync : Azure.Storage.Blobs.Models.PublicAccessType * seq&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.SetAccessPolicyAsync (accessType, permissions, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessType" Type="Azure.Storage.Blobs.Models.PublicAccessType" />
        <Parameter Name="permissions" Type="System.Collections.Generic.IEnumerable&lt;Azure.Storage.Blobs.Models.BlobSignedIdentifier&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessType">
             Optionally specifies whether data in the container may be accessed
             publicly and the level of access. <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.BlobContainer" />
             specifies full public read access for container and blob data.
             Clients can enumerate blobs within the container via anonymous
             request, but cannot enumerate containers within the storage
             account.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.Blob" /> specifies public
             read access for blobs.  Blob data within this container can be
             read via anonymous request, but container data is not available.
             Clients cannot enumerate blobs within the container via anonymous
             request.  <see cref="F:Azure.Storage.Blobs.Models.PublicAccessType.None" /> specifies that the
             container data is private to the account owner.
             </param>
        <param name="permissions">
             Stored access policies that you can use to provide fine grained
             control over container permissions.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on setting this blob container's access policy.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetAccessPolicyAsync(Azure.Storage.Blobs.Models.PublicAccessType,System.Collections.Generic.IEnumerable{Azure.Storage.Blobs.Models.BlobSignedIdentifier},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             permissions for the specified container. The permissions indicate
             whether blob container data may be accessed publicly.
            
             For more information, see <see href=" https://docs.microsoft.com/rest/api/storageservices/set-container-acl" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             updated container.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt; SetMetadata (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt; SetMetadata(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetMetadata (metadata As IDictionary(Of String, String), Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainerInfo)" />
      <MemberSignature Language="F#" Value="abstract member SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&#xA;override this.SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;" Usage="blobContainerClient.SetMetadata (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this container.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified container.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; SetMetadataAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Blobs.Models.BlobRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt; SetMetadataAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Blobs.Models.BlobRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetMetadataAsync (metadata As IDictionary(Of String, String), Optional conditions As BlobRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainerInfo))" />
      <MemberSignature Language="F#" Value="abstract member SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;&#xA;override this.SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Blobs.Models.BlobRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;" Usage="blobContainerClient.SetMetadataAsync (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContainerInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Blobs.Models.BlobRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this container.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Blobs.Models.BlobRequestConditions" /> to add
             conditions on the deletion of this container.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Blobs.Models.BlobRequestConditions,System.Threading.CancellationToken)" /> operation sets one or more
             user-defined name-value pairs for the specified container.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-container-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> if successful.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBlob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt; UploadBlob (string blobName, System.IO.Stream content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt; UploadBlob(string blobName, class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlob(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlob (blobName As String, content As Stream, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContentInfo)" />
      <MemberSignature Language="F#" Value="abstract member UploadBlob : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&#xA;override this.UploadBlob : string * System.IO.Stream * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;" Usage="blobContainerClient.UploadBlob (blobName, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to upload.</param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlobAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> operation creates a new block
             blob.
            
             For partial block blob updates and other advanced features, please
             see <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />.  To create or modify page or
             append blobs, please see <see cref="T:Azure.Storage.Blobs.Specialized.PageBlobClient" /> or
             <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown
             if the blob already exists.  To overwrite an existing block blob,
             get a <see cref="T:Azure.Storage.Blobs.BlobClient" /> by calling <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobClient(System.String)" />,
             and then call <see cref="M:Azure.Storage.Blobs.BlobClient.UploadAsync(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             with the override parameter set to true.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBlobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadBlobAsync (string blobName, System.IO.Stream content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt; UploadBlobAsync(string blobName, class System.IO.Stream content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlobAsync(System.String,System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadBlobAsync (blobName As String, content As Stream, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContentInfo))" />
      <MemberSignature Language="F#" Value="abstract member UploadBlobAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;&#xA;override this.UploadBlobAsync : string * System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;" Usage="blobContainerClient.UploadBlobAsync (blobName, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Blobs.Models.BlobContentInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="blobName" Type="System.String" />
        <Parameter Name="content" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="blobName">The name of the blob to upload.</param>
        <param name="content">
             A <see cref="T:System.IO.Stream" /> containing the content to upload.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Blobs.BlobContainerClient.UploadBlob(System.String,System.IO.Stream,System.Threading.CancellationToken)" /> operation creates a new block
             blob.
            
             For partial block blob updates and other advanced features, please
             see <see cref="T:Azure.Storage.Blobs.Specialized.BlockBlobClient" />.  To create or modify page or
             append blobs, please see <see cref="T:Azure.Storage.Blobs.Specialized.PageBlobClient" /> or
             <see cref="T:Azure.Storage.Blobs.Specialized.AppendBlobClient" />.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/put-blob" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             state of the updated block blob.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown
             if the blob already exists.  To overwrite an existing block blob,
             get a <see cref="T:Azure.Storage.Blobs.BlobClient" /> by calling <see cref="M:Azure.Storage.Blobs.BlobContainerClient.GetBlobClient(System.String)" />,
             and then call <see cref="M:Azure.Storage.Blobs.BlobClient.Upload(System.IO.Stream,System.Boolean,System.Threading.CancellationToken)" />
             with the override parameter set to true.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public virtual Uri Uri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Uri" />
      <MemberSignature Language="DocId" Value="P:Azure.Storage.Blobs.BlobContainerClient.Uri" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Uri As Uri" />
      <MemberSignature Language="F#" Value="member this.Uri : Uri" Usage="Azure.Storage.Blobs.BlobContainerClient.Uri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the container's primary <see cref="P:Azure.Storage.Blobs.BlobContainerClient.Uri" /> endpoint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WebBlobContainerName">
      <MemberSignature Language="C#" Value="public static readonly string WebBlobContainerName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string WebBlobContainerName" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.Blobs.BlobContainerClient.WebBlobContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WebBlobContainerName As String " />
      <MemberSignature Language="F#" Value=" staticval mutable WebBlobContainerName : string" Usage="Azure.Storage.Blobs.BlobContainerClient.WebBlobContainerName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Blobs</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.0.0</AssemblyVersion>
        <AssemblyVersion>12.4.1.0</AssemblyVersion>
        <AssemblyVersion>12.4.2.0</AssemblyVersion>
        <AssemblyVersion>12.4.3.0</AssemblyVersion>
        <AssemblyVersion>12.4.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Azure Storage name used to identify a storage account's web content container.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
