<Type Name="SearchStructuredAddressOptions" FullName="Azure.Maps.Search.Models.SearchStructuredAddressOptions">
  <TypeSignature Language="C#" Value="public class SearchStructuredAddressOptions : Azure.Maps.Search.SearchBaseOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchStructuredAddressOptions extends Azure.Maps.Search.SearchBaseOptions" />
  <TypeSignature Language="DocId" Value="T:Azure.Maps.Search.Models.SearchStructuredAddressOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchStructuredAddressOptions&#xA;Inherits SearchBaseOptions" />
  <TypeSignature Language="F#" Value="type SearchStructuredAddressOptions = class&#xA;    inherit SearchBaseOptions" />
  <AssemblyInfo>
    <AssemblyName>Azure.Maps.Search</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Maps.Search.SearchBaseOptions</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Options. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchStructuredAddressOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.Models.SearchStructuredAddressOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityType">
      <MemberSignature Language="C#" Value="public Azure.Maps.Search.Models.GeographicEntity? EntityType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.Maps.Search.Models.GeographicEntity&gt; EntityType" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.Models.SearchStructuredAddressOptions.EntityType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityType As Nullable(Of GeographicEntity)" />
      <MemberSignature Language="F#" Value="member this.EntityType : Nullable&lt;Azure.Maps.Search.Models.GeographicEntity&gt; with get, set" Usage="Azure.Maps.Search.Models.SearchStructuredAddressOptions.EntityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.Maps.Search.Models.GeographicEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Specifies the level of filtering performed on geographies. Narrows the search for specified geography entity types, e.g. return only municipality. The resulting response will contain the geography ID as well as the entity type matched. If you provide more than one entity as a comma separated list, endpoint will return the 'smallest entity available'. Returned Geometry ID can be used to get the geometry of that geography via [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. The following parameters are ignored when entityType is set:
            
             * heading
             * number
             * returnRoadUse
             * returnSpeedLimit
             * roadUse
             * returnMatchType
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedPostalCodesFor">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.SearchIndex&gt; ExtendedPostalCodesFor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.Maps.Search.Models.SearchIndex&gt; ExtendedPostalCodesFor" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.Models.SearchStructuredAddressOptions.ExtendedPostalCodesFor" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedPostalCodesFor As IEnumerable(Of SearchIndex)" />
      <MemberSignature Language="F#" Value="member this.ExtendedPostalCodesFor : seq&lt;Azure.Maps.Search.Models.SearchIndex&gt; with get, set" Usage="Azure.Maps.Search.Models.SearchStructuredAddressOptions.ExtendedPostalCodesFor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.SearchIndex&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Indexes for which extended postal codes should be included in the results.
            
             Available indexes are:
            
              **Addr** = Address ranges
            
              **Geo** = Geographies
            
              **PAD** = Point Addresses
            
              **POI** = Points of Interest
            
              **Str** = Streets
            
              **XStr** = Cross Streets (intersections)
            
             Value should be a comma separated list of index types (in any order) or **None** for no indexes.
            
             By default extended postal codes are included for all indexes except Geo. Extended postal code lists for geographies can be quite long so they have to be explicitly requested when needed.
            
             Usage examples:
            
              extendedPostalCodesFor=POI
            
              extendedPostalCodesFor=PAD,Addr,POI
            
              extendedPostalCodesFor=None
            
             Extended postal code is returned as an **extendedPostalCode** property of an address. Availability is region-dependent.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
