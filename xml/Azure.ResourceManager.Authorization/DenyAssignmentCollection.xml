<Type Name="DenyAssignmentCollection" FullName="Azure.ResourceManager.Authorization.DenyAssignmentCollection">
  <TypeSignature Language="C#" Value="public class DenyAssignmentCollection : Azure.ResourceManager.ArmCollection, System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DenyAssignmentCollection extends Azure.ResourceManager.ArmCollection implements class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Authorization.DenyAssignmentCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class DenyAssignmentCollection&#xA;Inherits ArmCollection&#xA;Implements IAsyncEnumerable(Of DenyAssignmentResource), IEnumerable(Of DenyAssignmentResource)" />
  <TypeSignature Language="F#" Value="type DenyAssignmentCollection = class&#xA;    inherit ArmCollection&#xA;    interface seq&lt;DenyAssignmentResource&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;DenyAssignmentResource&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            To get a <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentCollection" /> instance call the GetDenyAssignments method from an instance of <see cref="T:Azure.ResourceManager.ArmResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DenyAssignmentCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.Exists(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="denyAssignmentCollection.Exists (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
            Operation Id: DenyAssignments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.ExistsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="denyAssignmentCollection.ExistsAsync (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
            Operation Id: DenyAssignments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; Get (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; Get(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DenyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="denyAssignmentCollection.Get (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
            Operation Id: DenyAssignments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetAll (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetAll(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.GetAll(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DenyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.GetAll : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="denyAssignmentCollection.GetAll (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets deny assignments for a resource.
            Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForResource
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForResourceGroup
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_List
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForScope
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetAllAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; GetAllAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.GetAllAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DenyAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.GetAllAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="denyAssignmentCollection.GetAllAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets deny assignments for a resource.
            Request Path: /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForResource
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForResourceGroup
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_List
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments
            Operation Id: DenyAssignments_ListForScope
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Authorization.DenyAssignmentResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetAsync (string denyAssignmentId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt; GetAsync(string denyAssignmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (denyAssignmentId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DenyAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;" Usage="denyAssignmentCollection.GetAsync (denyAssignmentId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="denyAssignmentId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="denyAssignmentId"> The ID of the deny assignment to get. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified deny assignment.
            Request Path: /{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}
            Operation Id: DenyAssignments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="denyAssignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="denyAssignmentId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; IAsyncEnumerable&lt;DenyAssignmentResource&gt;.GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.System#Collections#Generic#IAsyncEnumerable&lt;Azure#ResourceManager#Authorization#DenyAssignmentResource&gt;#GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator (cancellationToken As CancellationToken) As IAsyncEnumerator(Of DenyAssignmentResource) Implements IAsyncEnumerable(Of DenyAssignmentResource).GetAsyncEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="denyAssignmentCollection.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
        <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
        <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; IEnumerable&lt;DenyAssignmentResource&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Azure.ResourceManager.Authorization.DenyAssignmentResource&gt; System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.System#Collections#Generic#IEnumerable&lt;Azure#ResourceManager#Authorization#DenyAssignmentResource&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of DenyAssignmentResource) Implements IEnumerable(Of DenyAssignmentResource).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;" Usage="denyAssignmentCollection.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.Authorization.DenyAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Authorization.DenyAssignmentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="denyAssignmentCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Authorization</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
