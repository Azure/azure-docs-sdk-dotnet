<Type Name="NamespaceManager" FullName="Microsoft.ServiceBus.NamespaceManager">
  <TypeSignature Language="C#" Value="public sealed class NamespaceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit NamespaceManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceBus.NamespaceManager" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceBus</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an anchor class used in managing entities, such as queues, topics, subscriptions, and rules, in your 
            service namespace. You must provide service namespace address and access credentials in order to manage your service namespace.</summary>
    <remarks>To be added.</remarks>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
    <example>
      <code>
             NamespaceManagerSettings nsSettings = new NamespaceManagerSettings(); // with credentials and operation timeout
             NamespaceManager manager = new NamespaceManager(new Uri("baseUri"), nsSettings);
            </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;string&gt; addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; addresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="addresses">The full addresses of the service namespace.</param>
        <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given addresses.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;Uri&gt; addresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; addresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
      </Parameters>
      <Docs>
        <param name="addresses">The full URI addresses of the service namespace.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base addresses.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">The full address of the service namespace.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace address.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">The full URI address of the service namespace.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base address. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;string&gt; addresses, Microsoft.ServiceBus.NamespaceManagerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; addresses, class Microsoft.ServiceBus.NamespaceManagerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.NamespaceManagerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="settings" Type="Microsoft.ServiceBus.NamespaceManagerSettings" />
      </Parameters>
      <Docs>
        <param name="addresses">The full addresses of the service namespace.</param>
        <param name="settings">A 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> and 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given addresses and settings.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace address, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base addresses, i.e. it is not a must that the credentials you specify be to the base adresses itself.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;string&gt; addresses, Microsoft.ServiceBus.TokenProvider tokenProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; addresses, class Microsoft.ServiceBus.TokenProvider tokenProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.ServiceBus.TokenProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="tokenProvider" Type="Microsoft.ServiceBus.TokenProvider" />
      </Parameters>
      <Docs>
        <param name="addresses">The full addresses of the service namespace.</param>
        <param name="tokenProvider">The security token provider.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given addresses and token provider.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace addresses, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base addresses.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;Uri&gt; addresses, Microsoft.ServiceBus.NamespaceManagerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; addresses, class Microsoft.ServiceBus.NamespaceManagerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.NamespaceManagerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="settings" Type="Microsoft.ServiceBus.NamespaceManagerSettings" />
      </Parameters>
      <Docs>
        <param name="addresses">The full URI addresses of the service namespace.</param>
        <param name="settings">A 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> and 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base addresses and settings.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace addresses, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base addresses, i.e. it is not a must that the credentials you specify be to the base adresses itself.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (System.Collections.Generic.IEnumerable&lt;Uri&gt; addresses, Microsoft.ServiceBus.TokenProvider tokenProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; addresses, class Microsoft.ServiceBus.TokenProvider tokenProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Collections.Generic.IEnumerable{System.Uri},Microsoft.ServiceBus.TokenProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="addresses" Type="System.Collections.Generic.IEnumerable&lt;System.Uri&gt;" />
        <Parameter Name="tokenProvider" Type="Microsoft.ServiceBus.TokenProvider" />
      </Parameters>
      <Docs>
        <param name="addresses">The full URI addresses of the service namespace.</param>
        <param name="tokenProvider">The security token provider.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base addresses and token provider.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace addresses, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base addresses, i.e. it is not a must that the credentials you specify be to the base adresses itself.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (string address, Microsoft.ServiceBus.NamespaceManagerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address, class Microsoft.ServiceBus.NamespaceManagerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="settings" Type="Microsoft.ServiceBus.NamespaceManagerSettings" />
      </Parameters>
      <Docs>
        <param name="address">The full address of the service namespace.</param>
        <param name="settings">A 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> and 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace base address and 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace address, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base address, i.e. it is not a must that the credentials you specify be to the base adress itself.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> or <paramref name="settings" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (string address, Microsoft.ServiceBus.TokenProvider tokenProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address, class Microsoft.ServiceBus.TokenProvider tokenProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.TokenProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="tokenProvider" Type="Microsoft.ServiceBus.TokenProvider" />
      </Parameters>
      <Docs>
        <param name="address">The full address of the service namespace.</param>
        <param name="tokenProvider">The security token provider.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace base address and token provider.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace address, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base address.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> or <paramref name="tokenProvider" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (Uri address, Microsoft.ServiceBus.NamespaceManagerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri address, class Microsoft.ServiceBus.NamespaceManagerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="settings" Type="Microsoft.ServiceBus.NamespaceManagerSettings" />
      </Parameters>
      <Docs>
        <param name="address">The full URI address of the service namespace.</param>
        <param name="settings">A 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> and 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base address and 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace address, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base address, i.e. it is not a must that the credentials you specify be to the base adress itself.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> or <paramref name="settings" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NamespaceManager (Uri address, Microsoft.ServiceBus.TokenProvider tokenProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri address, class Microsoft.ServiceBus.TokenProvider tokenProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="tokenProvider" Type="Microsoft.ServiceBus.TokenProvider" />
      </Parameters>
      <Docs>
        <param name="address">The full URI address of the service namespace.</param>
        <param name="tokenProvider">The security token provider object.</param>
        <summary>Initializes a new instance of the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base address and 
            <see cref="T:Microsoft.ServiceBus.TokenProvider" /> object.</summary>
        <remarks>Even though it is not allowed to include paths in the namespace address, you can specify a credential that authorizes you to perform actions only on
                      some sublevels off of the base address, i.e. it is not a must that the credentials you specify be to the base adress itself.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> or <paramref name="tokenProvider" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public Uri Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Address" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceBus.NamespaceManager.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the service namespace base address.</summary>
        <value>A <see cref="T:System.Uri" /> that represents the service namespace base address.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Microsoft.ServiceBus.NamespaceManager Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ServiceBus.NamespaceManager Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.Create" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.NamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</summary>
        <returns>A new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroup">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroup (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroup(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">The <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</param>
        <summary>Creates an Event Hubs consumer group using the specified 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroup">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroup (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroup(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group.</param>
        <summary>Creates an Event Hubs consumer group using default values, with 
            the specified Event Hubs path and a name for the consumer group.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupAsync (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupAsync(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">The <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</param>
        <summary>Asynchronous version of 
            <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupAsync (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupAsync(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroup(System.String,System.String)" />.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupIfNotExists">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroupIfNotExists (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroupIfNotExists(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" /> object.</param>
        <summary>Creates a consumer group if it does not already exist, using the specified 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" /> as metadata. If the group already exists, then return the stored 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</summary>
        <returns>Returns the newly-created 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />. If the consumer group already exists, returns the existing 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupIfNotExists">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroupIfNotExists (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription CreateConsumerGroupIfNotExists(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">Path to the Event Hub.</param>
        <param name="name">The name of the consumer group to create.</param>
        <summary>Creates a consumer group if it does not already exist, using the specified Event Hubs path and group name. If the group already exists, then return the stored 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</summary>
        <returns>Returns the newly-created 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />. If the consumer group already exists, returns the existing 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupIfNotExistsAsync (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupIfNotExistsAsync(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">The consumer group description.</param>
        <summary>Asynchronous version of 
            <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConsumerGroupIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupIfNotExistsAsync (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; CreateConsumerGroupIfNotExistsAsync(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExistsAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group.</param>
        <summary>Asynchronous version of 
            <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateConsumerGroupIfNotExists(System.String,System.String)" />.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHub">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHub (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHub(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">The <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</param>
        <summary>Creates a new Event Hub using the specified <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</summary>
        <returns>Returns the <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHub">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHub (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHub(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHub(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Creates a new Event Hub using default values, for the given input path.</summary>
        <returns>Returns the <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubAsync (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubAsync(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">An 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object that describes the Event Hub to create.</param>
        <summary>Asynchronously creates an event hub.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Asynchronously creates an event hub.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubIfNotExists">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHubIfNotExists (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHubIfNotExists(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">An 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object that describes the Event Hub to create.</param>
        <summary>Creates an Event Hub if it does not exist.</summary>
        <returns>Returns an<see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubIfNotExists">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHubIfNotExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription CreateEventHubIfNotExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Creates an Event Hub if it does not exist.</summary>
        <returns>Returns an <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubIfNotExistsAsync (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubIfNotExistsAsync(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">The event hub description.</param>
        <summary>Asynchronously creates an Event Hub if it does not exist.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEventHubIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubIfNotExistsAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; CreateEventHubIfNotExistsAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateEventHubIfNotExistsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the event hub.</param>
        <summary>Asynchronously creates an Event Hub if it does not exist.</summary>
        <returns>The task that completes the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromConnectionString">
      <MemberSignature Language="C#" Value="public static Microsoft.ServiceBus.NamespaceManager CreateFromConnectionString (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ServiceBus.NamespaceManager CreateFromConnectionString(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.NamespaceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection sting used.</param>
        <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> using a specified connection string.</summary>
        <returns>A new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.QueueDescription CreateQueue (Microsoft.ServiceBus.Messaging.QueueDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.QueueDescription CreateQueue(class Microsoft.ServiceBus.Messaging.QueueDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.QueueDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.QueueDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> object describing the attributes with which the new queue will be created.</param>
        <summary>Creates a new queue in the service namespace with the specified queue description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.QueueDescription CreateQueue (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.QueueDescription CreateQueue(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.QueueDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Creates a new queue in the service namespace with the given path.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than 290 characters.</exception>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue or a topic with the 
            same name and path exists under the same service namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has 
            been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">The server is overloaded with logical operations. You can consider any of the following 
            actions:Wait and retry calling this function.Remove entities before retry (for example, receive messages before sending any more).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; CreateQueueAsync (Microsoft.ServiceBus.Messaging.QueueDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; CreateQueueAsync(class Microsoft.ServiceBus.Messaging.QueueDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.QueueDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> object describing the attributes with which the new queue will be created.</param>
        <summary>Asynchronously creates a new queue in the service namespace with the specified queue description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; CreateQueueAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; CreateQueueAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateQueueAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Asynchronously creates a new queue in the service namespace with the given path.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRelay">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.RelayDescription CreateRelay (Microsoft.ServiceBus.Messaging.RelayDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.RelayDescription CreateRelay(class Microsoft.ServiceBus.Messaging.RelayDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.RelayDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.RelayDescription" />
      </Parameters>
      <Docs>
        <param name="description"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRelay">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.RelayDescription CreateRelay (string path, Microsoft.ServiceBus.RelayType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.RelayDescription CreateRelay(string path, valuetype Microsoft.ServiceBus.RelayType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateRelay(System.String,Microsoft.ServiceBus.RelayType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.RelayDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.ServiceBus.RelayType" />
      </Parameters>
      <Docs>
        <param name="path"></param>
        <param name="type"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRelayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt; CreateRelayAsync (Microsoft.ServiceBus.Messaging.RelayDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt; CreateRelayAsync(class Microsoft.ServiceBus.Messaging.RelayDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.RelayDescription" />
      </Parameters>
      <Docs>
        <param name="description">The description object describing the attributes with which the new relay will be created.</param>
        <summary>Asynchronously creates a new relay in the service namespace with the specified queue description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.RelayDescription" /> object for the newly created relay.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRelayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt; CreateRelayAsync (string path, Microsoft.ServiceBus.RelayType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt; CreateRelayAsync(string path, valuetype Microsoft.ServiceBus.RelayType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateRelayAsync(System.String,Microsoft.ServiceBus.RelayType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="type" Type="Microsoft.ServiceBus.RelayType" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <param name="type">The relay type.</param>
        <summary>Asynchronously creates a new relay in the service namespace with the given path and type.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.RelayDescription" /> object for the newly created relay.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (Microsoft.ServiceBus.Messaging.SubscriptionDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <summary>Creates a new subscription in the service namespace with the specified subscription description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> Be default, A "pass-through" filter is created for this subscription, which means 
            it will allow all message to go to this subscription. The name of the filter is 
            <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (Microsoft.ServiceBus.Messaging.SubscriptionDescription description, Microsoft.ServiceBus.Messaging.Filter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description, class Microsoft.ServiceBus.Messaging.Filter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
        <Parameter Name="filter" Type="Microsoft.ServiceBus.Messaging.Filter" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
        <summary>Creates a new subscription in the service namespace with the specified subscription description and filter expression.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> A default rule will be created using data from <paramref name="filter" />
            and named as <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (Microsoft.ServiceBus.Messaging.SubscriptionDescription description, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description, class Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
        <Parameter Name="ruleDescription" Type="Microsoft.ServiceBus.Messaging.RuleDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <param name="ruleDescription">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
        <summary>Creates a new subscription in the service namespace with the specified subscription description and rule description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> A default rule will be created using data from <paramref name="ruleDescription" />.
            If <see cref="P:Microsoft.ServiceBus.Messaging.RuleDescription.Name" /> is null or white space, then the name of the rule
            created will be <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Creates a new subscription in the service namespace with the specified topic path and subscription name.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> Be default, A "pass-through" filter is created for this subscription, which means 
            it will allow all message to go to this subscription. The name of the filter is 
            <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (string topicPath, string name, Microsoft.ServiceBus.Messaging.Filter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(string topicPath, string name, class Microsoft.ServiceBus.Messaging.Filter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="filter" Type="Microsoft.ServiceBus.Messaging.Filter" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
        <summary>Creates a new subscription in the service namespace with the specified topic path, subscription name, and filter expression.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> A default rule will be created using data from <paramref name="filter" />
            and named as <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription (string topicPath, string name, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription CreateSubscription(string topicPath, string name, class Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ruleDescription" Type="Microsoft.ServiceBus.Messaging.RuleDescription" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <param name="ruleDescription">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
        <summary>Creates a new subscription in the service namespace with the specified topic path, subscription name, and rule description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
        <remarks> A default rule will be created using data from <paramref name="ruleDescription" />.
            If <see cref="P:Microsoft.ServiceBus.Messaging.RuleDescription.Name" /> is null or white space, then the name of the rule
            created will be <see cref="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (Microsoft.ServiceBus.Messaging.SubscriptionDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <summary>Asynchronously creates a new subscription in the service namespace with the specified subscription description.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (Microsoft.ServiceBus.Messaging.SubscriptionDescription description, Microsoft.ServiceBus.Messaging.Filter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description, class Microsoft.ServiceBus.Messaging.Filter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
        <Parameter Name="filter" Type="Microsoft.ServiceBus.Messaging.Filter" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
        <summary>Asynchronously creates a new subscription in the service 
            namespace with the specified subscription description and filter expression.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (Microsoft.ServiceBus.Messaging.SubscriptionDescription description, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description, class Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
        <Parameter Name="ruleDescription" Type="Microsoft.ServiceBus.Messaging.RuleDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
        <param name="ruleDescription">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
        <summary>Asynchronously creates a new subscription in the service 
            namespace with the specified subscription description and rule description.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Asynchronously creates a new subscription in the service namespace with the specified topic path and subscription name.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (string topicPath, string name, Microsoft.ServiceBus.Messaging.Filter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(string topicPath, string name, class Microsoft.ServiceBus.Messaging.Filter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="filter" Type="Microsoft.ServiceBus.Messaging.Filter" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
        <summary>Asynchronously creates a new subscription in the service namespace 
            with the specified topic path, subscription name, and filter expression.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync (string topicPath, string name, Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; CreateSubscriptionAsync(string topicPath, string name, class Microsoft.ServiceBus.Messaging.RuleDescription ruleDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscriptionAsync(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ruleDescription" Type="Microsoft.ServiceBus.Messaging.RuleDescription" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <param name="ruleDescription">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
        <summary>Asynchronously creates a new subscription in the service namespace 
            with the specified topic path, subscription name, and rule description.</summary>
        <returns>The asynchronously created subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTopic">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.TopicDescription CreateTopic (Microsoft.ServiceBus.Messaging.TopicDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.TopicDescription CreateTopic(class Microsoft.ServiceBus.Messaging.TopicDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.TopicDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.TopicDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> object describing the attributes with which the new topic will be created.</param>
        <summary>Creates a new topic inside the service namespace with the specified topic description.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the newly created topic.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTopic">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.TopicDescription CreateTopic (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.TopicDescription CreateTopic(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.TopicDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Creates a new topic inside the service namespace with the given service namespace path.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the newly created topic.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is null or empty, or <paramref name="path" /> begins or ends with “/”.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="path" /> is greater than 
            <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue or a topic with the 
            same name and path exists under the same service namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has 
            been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; CreateTopicAsync (Microsoft.ServiceBus.Messaging.TopicDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; CreateTopicAsync(class Microsoft.ServiceBus.Messaging.TopicDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.TopicDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> object describing the attributes with which the new topic will be created.</param>
        <summary>Asynchronously creates a new topic inside the service namespace with the specified topic description.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; CreateTopicAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; CreateTopicAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.CreateTopicAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Asynchronously creates a new topic inside the service namespace with the given service namespace path.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteConsumerGroup">
      <MemberSignature Language="C#" Value="public void DeleteConsumerGroup (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteConsumerGroup(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroup(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group to delete.</param>
        <summary>Deletes a consumer group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteConsumerGroupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteConsumerGroupAsync (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteConsumerGroupAsync(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteConsumerGroupAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group to delete.</param>
        <summary>Asynchronously deletes a consumer group.</summary>
        <returns>The task that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteEventHub">
      <MemberSignature Language="C#" Value="public void DeleteEventHub (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteEventHub(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteEventHub(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Deletes an Event Hub.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteEventHubAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteEventHubAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteEventHubAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteEventHubAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Asynchronously deletes an Event Hub.</summary>
        <returns>The task that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueue">
      <MemberSignature Language="C#" Value="public void DeleteQueue (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteQueue(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Deletes the queue described by the path relative to the service namespace base address.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than 
            <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Queue does not exist under this path.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteQueueAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteQueueAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteQueueAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Asynchronously deletes the queue described by the path relative to the service namespace base address.</summary>
        <returns>The asynchronous delete queue operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRelay">
      <MemberSignature Language="C#" Value="public void DeleteRelay (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelay(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteRelay(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"></param>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRelayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteRelayAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteRelayAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteRelayAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the relay relative to the service namespace base address.</param>
        <summary>Asynchronously deletes the relay described by the path relative to the service namespace base address.</summary>
        <returns>The asynchronous delete relay operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSubscription">
      <MemberSignature Language="C#" Value="public void DeleteSubscription (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteSubscription(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription to delete.</param>
        <summary>Deletes the subscription with the specified topic path and subscription name.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteSubscriptionAsync (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteSubscriptionAsync(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscriptionAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="name">The name of the subscription to delete.</param>
        <summary>Asynchronously deletes the subscription with the specified topic path and subscription name.</summary>
        <returns>The asynchronous delete subscription operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteTopic">
      <MemberSignature Language="C#" Value="public void DeleteTopic (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTopic(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Deletes the topic described by path relative to the service namespace base address.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is null or empty, or <paramref name="path" /> starts or ends with "/".</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteTopicAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteTopicAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.DeleteTopicAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Asynchronously deletes the topic described by path relative to the service namespace base address.</summary>
        <returns>The asynchronous deleted topic operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHubExists">
      <MemberSignature Language="C#" Value="public bool EventHubExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EventHubExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.EventHubExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Indicates whether or not an Event Hub exists.</summary>
        <returns>Returns true if the Event Hub exists; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHubExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; EventHubExistsAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; EventHubExistsAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.EventHubExistsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the event hub.</param>
        <summary>Asynchronously determines whether the event hub exists from the service namespace. </summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerGroup">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription GetConsumerGroup (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription GetConsumerGroup(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroup(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group.</param>
        <summary>Gets an Event Hubs consumer group.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerGroupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; GetConsumerGroupAsync (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; GetConsumerGroupAsync(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The name of the consumer group.</param>
        <summary>Asynchronously gets a consumer group.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerGroups">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; GetConsumerGroups (string eventHubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; GetConsumerGroups(string eventHubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroups(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <summary>Gets a collection representing a set of consumer groups.</summary>
        <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object representing the set of consumer groups.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConsumerGroupsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;&gt; GetConsumerGroupsAsync (string eventHubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;&gt; GetConsumerGroupsAsync(string eventHubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetConsumerGroupsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <summary>Asynchronously gets a set of consumer groups.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHub">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription GetEventHub (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription GetEventHub(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHub(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Gets information about an Event Hub.</summary>
        <returns>Returns an <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object that contains the Event Hub description.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; GetEventHubAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; GetEventHubAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to the Event Hub.</param>
        <summary>Asynchronously gets information about an Event Hub.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubPartition">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.PartitionDescription GetEventHubPartition (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.PartitionDescription GetEventHubPartition(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.PartitionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The ID of the Event Hub partition.</param>
        <summary>Returns information about the specified Event Hub partition. This method assumes that you want partition information for the partition 
            specified by the <paramref name="name" /> parameter that belongs to the default consumer group pointed to by <paramref name="eventHubPath" />.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.PartitionDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubPartition">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.PartitionDescription GetEventHubPartition (string eventHubPath, string consumerGroupName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.PartitionDescription GetEventHubPartition(string eventHubPath, string consumerGroupName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.PartitionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath"></param>
        <param name="consumerGroupName"></param>
        <param name="name"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.PartitionDescription&gt; GetEventHubPartitionAsync (string eventHubPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.PartitionDescription&gt; GetEventHubPartitionAsync(string eventHubPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.PartitionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="name">The ID of the Event Hub partition.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.PartitionDescription&gt; GetEventHubPartitionAsync (string eventHubPath, string consumerGroupName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.PartitionDescription&gt; GetEventHubPartitionAsync(string eventHubPath, string consumerGroupName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartitionAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.PartitionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHubPath" Type="System.String" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventHubPath">The path to the Event Hub.</param>
        <param name="consumerGroupName">The name of the Event Hubs consumer group.</param>
        <param name="name">The ID of the Event Hubs partition.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubPartition(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubs">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; GetEventHubs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; GetEventHubs() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection representing a set of Event Hubs.</summary>
        <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object representing the set of Event Hubs.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventHubsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;&gt; GetEventHubsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt;&gt; GetEventHubsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetEventHubsAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously gets a list of Event Hubs.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.QueueDescription GetQueue (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.QueueDescription GetQueue(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.QueueDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Retrieves a queue from the service namespace.</summary>
        <returns>A 
            <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> handle to the queue, or a 
            <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the queue does not exist in the service namespace.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The queue does not exist in the service namespace.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueueAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueueAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueueAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Asynchronously retrieves a queue from the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueues() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an enumerable collection of all queues in the service namespace.</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all queues in the service namespace or returns an empty collection if no queue exists. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueues (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; GetQueues(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueues(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">A string used to filter the queues to be retrieved.</param>
        <summary>Retrieves an enumerable collection of all queues in the service namespace with the specified filter. You can filter by 
            a combination of entity name (including starts with), entity length (Gt or Lt), created, updated, and accessed time (Gt or Lt).</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all queues in the service namespace or returns an empty collection if no queue exists.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       Path | ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = namespaceManager.GetQueues("messageCount Gt 0");
            var queuesStartsWith = namespaceManager.GetQueues($"startswith(path, 'queue') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetQueuesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt; GetQueuesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt; GetQueuesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously retrieves an enumerable collection of all queues in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueuesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt; GetQueuesAsync (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt; GetQueuesAsync(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetQueuesAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">The string used to filter the queues to be retrieved.</param>
        <summary>Asynchronously retrieves an enumerable collection of all queues in the service namespace with specified filter.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       Path | ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
        <example>
          <code>
            var queuesWithMessages = await namespaceManager.GetQueuesAsync("messageCount Gt 0");
            var queuesStartsWith = await namespaceManager.GetQueuesAsync($"startswith(path, 'queue') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetRelay">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.RelayDescription GetRelay (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.RelayDescription GetRelay(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRelay(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.RelayDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt; GetRelayAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt; GetRelayAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRelayAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The relay path.</param>
        <summary>Asynchronously retrieves an enumerable collection of all relays in the service namespace with specified path.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelays">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt; GetRelays ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt; GetRelays() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRelays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelaysAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;&gt; GetRelaysAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt;&gt; GetRelaysAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRelaysAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.ServiceBus.NamespaceManager/&lt;GetRelaysAsync&gt;d__40))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously retrieves an enumerable collection of all relays in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevokedPublishers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt; GetRevokedPublishers (string entityPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt; GetRevokedPublishers(string entityPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Path to the Event Hub. See <see cref="P:Microsoft.ServiceBus.Messaging.EventHubDescription.Path" />.</param>
        <summary>Returns all revoked publishers in an Event Hub.</summary>
        <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection containing the revoked publishers.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRevokedPublishersAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt;&gt; GetRevokedPublishersAsync (string entityPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt;&gt; GetRevokedPublishersAsync(string entityPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishersAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Path to the Event Hub. See <see cref="P:Microsoft.ServiceBus.Messaging.EventHubDescription.Path" />.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetRevokedPublishers(System.String)" />.</summary>
        <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1" /> containing the revoked publishers.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRules">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt; GetRules (string topicPath, string subscriptionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RuleDescription&gt; GetRules(string topicPath, string subscriptionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="subscriptionName">The name of the subscription.</param>
        <summary>Retrieves an enumerable collection of all rules in the service namespace.</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all rules in the service namespace or returns an empty collection if no rule exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRules">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt; GetRules (string topicPath, string subscriptionName, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RuleDescription&gt; GetRules(string topicPath, string subscriptionName, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="subscriptionName">The name of the subscription.</param>
        <param name="filter">The string used to filter the rules to be retrieved.</param>
        <summary>Retrieves an enumerable collection of all rules in the 
            service namespace with specified topic path, subscription name and filter.</summary>
        <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of 
            all rules in the service namespace or returns an empty collection if no rule exists.</returns>
        <remarks>
            Filter expression format:   {Propery} {Logical Operator} {Value} {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       ModifiedAt | AccessedAt | CreatedAt
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            </remarks>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = namespaceManager.GetRules(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetRulesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt; GetRulesAsync (string topicPath, string subscriptionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt; GetRulesAsync(string topicPath, string subscriptionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="subscriptionName">The name of the subscription.</param>
        <summary>Asynchronously retrieves an enumerable collection of all rules in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRulesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt; GetRulesAsync (string topicPath, string subscriptionName, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt; GetRulesAsync(string topicPath, string subscriptionName, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetRulesAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.RuleDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="subscriptionName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The topic path relative to the service namespace base address.</param>
        <param name="subscriptionName">The name of the subscription.</param>
        <param name="filter">The string used to filter the rules to be retrieved.</param>
        <summary>Asynchronously retrieves an enumerable collection of all rules in 
            the service namespace with specified topic path, subscription name and filter.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>
            Filter expression format:   {Propery} {Logical Operator} {Value} {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       ModifiedAt | AccessedAt | CreatedAt
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            </remarks>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
        <example>
          <code>
            var fiveMinutesAgo = DateTime.UtcNow.AddMinutes(-5).ToString("M/dd/yyyy hh:mm:ss");
            var rulesInTheLast5Minutes = await namespaceManager.GetRulesAsync(topicName, subscriptionName, $"createdAt gt '{fiveMinutesAgo}'");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription GetSubscription (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription GetSubscription(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Retrieves the topic from the service namespace.</summary>
        <returns>A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> handle to the subscription, or a 
            <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the subscription does not exist in the service namespace.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The subscription does 
            not exist in the service namespace.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptionAsync (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptionAsync(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Asynchronously retrieves the topic from the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptions (string topicPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptions(string topicPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <summary>Retrieves an enumerable collection of all subscriptions in the service namespace.</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all subscriptions in the service namespace or returns an empty collection if no subscription exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptions">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptions (string topicPath, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; GetSubscriptions(string topicPath, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="filter">The string used to filter the subscriptions to be retrieved.</param>
        <summary>Retrieves an enumerable collection of all subscriptions in the service namespace with specified topic path and filter.</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all subscriptions in the service namespace or returns an empty collection if no subscription exists.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = namespaceManager.GetSubscriptions("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = namespaceManager.GetSubscriptions("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt; GetSubscriptionsAsync (string topicPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt; GetSubscriptionsAsync(string topicPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <summary>Asynchronously retrieves an enumerable collection of all subscriptions in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubscriptionsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt; GetSubscriptionsAsync (string topicPath, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt; GetSubscriptionsAsync(string topicPath, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptionsAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="filter">The string used to filter the subscriptions to be retrieved.</param>
        <summary>Asynchronously retrieves an enumerable collection of all subscriptions in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
        <example>
          <code>
            var subscriptionsWithMessages = await namespaceManager.GetSubscriptionsAsync("topicName", "messageCount Gt 0");
            var subscriptionsStartsWith = await namespaceManager.GetSubscriptionsAsync("topicName", $"startswith(path, 'subscription') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetTopic">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.TopicDescription GetTopic (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.TopicDescription GetTopic(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.TopicDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Retrieves the topic from the service namespace.</summary>
        <returns>A 
            <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> reference to the topic, or a 
            <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the topic does not exist in the service namespace.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is empty or null.</exception>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The topic does not exist in the service namespace.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopicAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopicAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopicAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Asynchronously retrieves the topic from the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopics">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a collection of topics in a service namespace.</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of topics under the current namespace, or returns an empty collection if no topic exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:System.UnauthorizedAccessException">The 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your 
            <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider" /> credentials to perform this operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTopics">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopics (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; GetTopics(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopics(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">The string used to filter the topics to be retrieved.</param>
        <summary>Retrieves a collection of topics in a service namespace with the specified filter. You can filter by a 
            combination of entity name (including starts with), entity length (Gt or Lt), created, updated, and accessed time (Gt or Lt).</summary>
        <returns>An 
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of topics under the current namespace, or returns an empty collection if no topic exists.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       Path | ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = namespaceManager.GetTopics("messageCount Gt 0");
            var topicsStartsWith = namespaceManager.GetTopics($"startswith(path, 'topic') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetTopicsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt; GetTopicsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt; GetTopicsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously retrieves a collection of topics in a service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt; GetTopicsAsync (string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt; GetTopicsAsync(string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetTopicsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filter">The string used to filter the topics to be retrieved.</param>
        <summary>Asynchronously retrieves a collection of topics in a service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>
            Filter expression formats:  {Propery} {Logical Operator} {Value} AND {Filter expression}
                                        {Function} {Logical Operator} {Value} AND {Filter expression}
            -----------------------------------------------------------------------------------------
            Available properties:       Path | ModifiedAt | AccessedAt | CreatedAt | MessageCount
            Logical operators:          Eq | Ne | Gt | Ge | Lt | Le  
            Value:                      A value of the corresponding property type
            Functions:                  startswith({Propery}, {Value})
            </remarks>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
        <example>
          <code>
            var topicsWithMessages = await namespaceManager.GetTopicsAsync("messageCount Gt 0");
            var topicsStartsWith = await namespaceManager.GetTopicsAsync($"startswith(path, 'topic') eq true");
            </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetVersionInfo">
      <MemberSignature Language="C#" Value="public string GetVersionInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetVersionInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetVersionInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves a string of the format "YYYY-MM" that indicates the 
            maximum supported protocol version that the server or service can handle.</summary>
        <returns>A string that indicates the maximum supported protocol version that the server or service can handle.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVersionInfoAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetVersionInfoAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetVersionInfoAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.GetVersionInfoAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously retrieves a string of the format "YYYY-MM" that indicates 
            the maximum supported protocol version that the server or service can handle.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolVersion">
      <MemberSignature Language="C#" Value="public const string ProtocolVersion;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ProtocolVersion" />
      <MemberSignature Language="DocId" Value="F:Microsoft.ServiceBus.NamespaceManager.ProtocolVersion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the string of the format "YYYY-MM" that indicates the client protocol version.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueExists">
      <MemberSignature Language="C#" Value="public bool QueueExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool QueueExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Determines whether a queue exists in the service namespace.</summary>
        <returns>true if a queue exists in the service namespace; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; QueueExistsAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; QueueExistsAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.QueueExistsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the queue relative to the service namespace base address.</param>
        <summary>Asynchronously determines whether a queue exists in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelayExists">
      <MemberSignature Language="C#" Value="public bool RelayExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelayExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RelayExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelayExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; RelayExistsAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; RelayExistsAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RelayExistsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.ServiceBus.NamespaceManager/&lt;RelayExistsAsync&gt;d__42))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the relay relative to the service namespace base address.</param>
        <summary>Asynchronously determines whether a relay exists in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.QueueDescription RenameQueue (string path, string newPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.QueueDescription RenameQueue(string path, string newPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.QueueDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to an existing queue.</param>
        <param name="newPath">The new path to the renamed queue.</param>
        <summary>Renames a queue inside a namespace.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="path" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the length of <paramref name="path" /> is more than 290 characters.</exception>
        <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You can increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the source queue 
            with the specified path does not exist.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown when the target queue with 
            the same path exists within the same namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Thrown when the client does not have credentials to perform the operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown when an internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="RenameQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; RenameQueueAsync (string path, string newPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; RenameQueueAsync(string path, string newPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RenameQueueAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to an existing queue.</param>
        <param name="newPath">The new path to the renamed queue.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.RenameQueue(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="path" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the length of <paramref name="path" /> is more than 290 characters.</exception>
        <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You can increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the source queue 
            with the specified path does not exist.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown when the target queue with 
            the same path exists within the same namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Thrown when the client does not have credentials to perform the operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown when an internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="RenameTopic">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.TopicDescription RenameTopic (string path, string newPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.TopicDescription RenameTopic(string path, string newPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.TopicDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to an existing topic.</param>
        <param name="newPath">The new path to the renamed topic.</param>
        <summary>Renames a topic inside a namespace.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="path" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the length of <paramref name="path" /> is more than 290 characters.</exception>
        <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You can increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the source topic 
            with the specified path does not exist.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown when the target topic with 
            the same path exists within the same namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Thrown when the client does not have credentials to perform the operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown when an internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="RenameTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; RenameTopicAsync (string path, string newPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; RenameTopicAsync(string path, string newPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RenameTopicAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="newPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to an existing topic.</param>
        <param name="newPath">The new path to the renamed topic.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.RenameTopic(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Thrown when <paramref name="path" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the length of <paramref name="path" /> is more than 290 characters.</exception>
        <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the 
            <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You can increase the value of the 
            <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the source topic 
            with the specified path does not exist.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown when the target topic with 
            the same path exists within the same namespace.</exception>
        <exception cref="T:System.UnauthorizedAccessException">Thrown when the client does not have credentials to perform the operation.</exception>
        <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown when an internal error or unexpected exception occurs.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestorePublisher">
      <MemberSignature Language="C#" Value="public void RestorePublisher (string entityPath, string publisher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestorePublisher(string entityPath, string publisher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
        <Parameter Name="publisher" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Event Hub path under which the publisher was revoked and must be restored. See 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</param>
        <param name="publisher">The revoked publisher.</param>
        <summary>Removes the publisher from the Event Hubs revocation list.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestorePublisherAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RestorePublisherAsync (string entityPath, string publisher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RestorePublisherAsync(string entityPath, string publisher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RestorePublisherAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
        <Parameter Name="publisher" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Event Hub path under which the publisher was revoked and must be restored. See 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</param>
        <param name="publisher">The revoked publisher.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.RestorePublisher(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevokePublisher">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.RevokedPublisherDescription RevokePublisher (string entityPath, string publisher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.RevokedPublisherDescription RevokePublisher(string entityPath, string publisher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.RevokedPublisherDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
        <Parameter Name="publisher" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Event Hub path under which the publisher must be revoked. See 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</param>
        <param name="publisher">The publisher to revoke.</param>
        <summary>Adds the publisher to the Event Hubs revocation list.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.RevokedPublisherDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevokePublisherAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt; RevokePublisherAsync (string entityPath, string publisher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt; RevokePublisherAsync(string entityPath, string publisher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.RevokePublisherAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RevokedPublisherDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityPath" Type="System.String" />
        <Parameter Name="publisher" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entityPath">Event Hub path under which the publisher must be revoked. See 
            <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</param>
        <param name="publisher">The publisher to revoke.</param>
        <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.RevokePublisher(System.String,System.String)" />.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.NamespaceManagerSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ServiceBus.NamespaceManagerSettings Settings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceBus.NamespaceManager.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.NamespaceManagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the service namespace client settings.</summary>
        <value>A <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object that represents the service namespace client settings.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscriptionExists">
      <MemberSignature Language="C#" Value="public bool SubscriptionExists (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SubscriptionExists(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Determines whether a subscription exists in the service namespace.</summary>
        <returns>true if a subscription exists in the service namespace; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscriptionExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; SubscriptionExistsAsync (string topicPath, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; SubscriptionExistsAsync(string topicPath, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExistsAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicPath" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
        <param name="name">The name of the subscription.</param>
        <summary>Asynchronously determines whether a subscription exists in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopicExists">
      <MemberSignature Language="C#" Value="public bool TopicExists (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TopicExists(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Determines whether a topic exists in the service namespace.</summary>
        <returns>true if a topic exists in the service namespace; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopicExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TopicExistsAsync (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; TopicExistsAsync(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.TopicExistsAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the topic relative to the service namespace base address.</param>
        <summary>Asynchronously determines whether a topic exists in the service namespace.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateConsumerGroup">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.ConsumerGroupDescription UpdateConsumerGroup (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription UpdateConsumerGroup(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroup(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.ConsumerGroupDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" /> object containing the updated information.</param>
        <summary>Updates an Event Hubs consumer group.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateConsumerGroupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; UpdateConsumerGroupAsync (Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt; UpdateConsumerGroupAsync(class Microsoft.ServiceBus.Messaging.ConsumerGroupDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateConsumerGroupAsync(Microsoft.ServiceBus.Messaging.ConsumerGroupDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.ConsumerGroupDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.ConsumerGroupDescription" />
      </Parameters>
      <Docs>
        <param name="description">The consumer group description.</param>
        <summary>Asynchronously updates the consumer group.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEventHub">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.EventHubDescription UpdateEventHub (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.EventHubDescription UpdateEventHub(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateEventHub(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.EventHubDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">An <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" /> object containing the updated information.</param>
        <summary>Updates an Event Hub.</summary>
        <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.EventHubDescription" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateEventHubAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt; UpdateEventHubAsync (Microsoft.ServiceBus.Messaging.EventHubDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.EventHubDescription&gt; UpdateEventHubAsync(class Microsoft.ServiceBus.Messaging.EventHubDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateEventHubAsync(Microsoft.ServiceBus.Messaging.EventHubDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.EventHubDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.EventHubDescription" />
      </Parameters>
      <Docs>
        <param name="description">The event hub description.</param>
        <summary>Asynchronously updates the event hub.</summary>
        <returns>The task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueue">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.QueueDescription UpdateQueue (Microsoft.ServiceBus.Messaging.QueueDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.QueueDescription UpdateQueue(class Microsoft.ServiceBus.Messaging.QueueDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.QueueDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.QueueDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> object describing the queue to be updated.</param>
        <summary>Enables you to update the queue.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the updated queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt; UpdateQueueAsync (Microsoft.ServiceBus.Messaging.QueueDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.QueueDescription&gt; UpdateQueueAsync(class Microsoft.ServiceBus.Messaging.QueueDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateQueueAsync(Microsoft.ServiceBus.Messaging.QueueDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.QueueDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.QueueDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> object describing the queue to be updated.</param>
        <summary>Asynchronously enables you to update the queue.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRelay">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.RelayDescription UpdateRelay (Microsoft.ServiceBus.Messaging.RelayDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.RelayDescription UpdateRelay(class Microsoft.ServiceBus.Messaging.RelayDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateRelay(Microsoft.ServiceBus.Messaging.RelayDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.RelayDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.RelayDescription" />
      </Parameters>
      <Docs>
        <param name="description"></param>
        <summary />
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRelayAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt; UpdateRelayAsync (Microsoft.ServiceBus.Messaging.RelayDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.RelayDescription&gt; UpdateRelayAsync(class Microsoft.ServiceBus.Messaging.RelayDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateRelayAsync(Microsoft.ServiceBus.Messaging.RelayDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.RelayDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.RelayDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.RelayDescription" /> object describing the relay to be updated.</param>
        <summary>Asynchronously enables you to update the relay.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSubscription">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.SubscriptionDescription UpdateSubscription (Microsoft.ServiceBus.Messaging.SubscriptionDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.SubscriptionDescription UpdateSubscription(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.SubscriptionDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the subscription to be updated.</param>
        <summary>Enables you to update the subscription.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the updated subscription.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateSubscriptionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; UpdateSubscriptionAsync (Microsoft.ServiceBus.Messaging.SubscriptionDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt; UpdateSubscriptionAsync(class Microsoft.ServiceBus.Messaging.SubscriptionDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateSubscriptionAsync(Microsoft.ServiceBus.Messaging.SubscriptionDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.SubscriptionDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.SubscriptionDescription" />
      </Parameters>
      <Docs>
        <param name="description">A 
            <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the subscription to be updated.</param>
        <summary>Asynchronously enables you to update the subscription.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTopic">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceBus.Messaging.TopicDescription UpdateTopic (Microsoft.ServiceBus.Messaging.TopicDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ServiceBus.Messaging.TopicDescription UpdateTopic(class Microsoft.ServiceBus.Messaging.TopicDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceBus.Messaging.TopicDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.TopicDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> object describing the topic to be updated.</param>
        <summary>Enables you to update the topic.</summary>
        <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the updated topic.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTopicAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt; UpdateTopicAsync (Microsoft.ServiceBus.Messaging.TopicDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceBus.Messaging.TopicDescription&gt; UpdateTopicAsync(class Microsoft.ServiceBus.Messaging.TopicDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceBus.NamespaceManager.UpdateTopicAsync(Microsoft.ServiceBus.Messaging.TopicDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceBus</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceBus.Messaging.TopicDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="Microsoft.ServiceBus.Messaging.TopicDescription" />
      </Parameters>
      <Docs>
        <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> object describing the topic to be updated.</param>
        <summary>Asynchronously enables you to update the topic.</summary>
        <returns>The asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>