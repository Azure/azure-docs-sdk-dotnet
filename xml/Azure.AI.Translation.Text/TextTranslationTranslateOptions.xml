<Type Name="TextTranslationTranslateOptions" FullName="Azure.AI.Translation.Text.TextTranslationTranslateOptions">
  <TypeSignature Language="C#" Value="public class TextTranslationTranslateOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextTranslationTranslateOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Translation.Text.TextTranslationTranslateOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class TextTranslationTranslateOptions" />
  <TypeSignature Language="F#" Value="type TextTranslationTranslateOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Client options for TextTranslationClient.Translate </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationTranslateOptions (System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, System.Collections.Generic.IEnumerable&lt;string&gt; content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationTranslateOptions.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetLanguages As IEnumerable(Of String), content As IEnumerable(Of String))" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationTranslateOptions : seq&lt;string&gt; * seq&lt;string&gt; -&gt; Azure.AI.Translation.Text.TextTranslationTranslateOptions" Usage="new Azure.AI.Translation.Text.TextTranslationTranslateOptions (targetLanguages, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="targetLanguages">
            Specifies the language of the output text. The target language must be one of the supported languages included
            in the translation scope. For example, use to=de to translate to German.
            It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
            For example, use to=de&amp;to=it to translate to German and Italian.
            </param>
        <param name="content"> Array of the text to be translated.</param>
        <summary> Initializes new instance of TextTranslationTranslateOptions. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationTranslateOptions (string targetLanguage, string content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string targetLanguage, string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationTranslateOptions.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetLanguage As String, content As String)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationTranslateOptions : string * string -&gt; Azure.AI.Translation.Text.TextTranslationTranslateOptions" Usage="new Azure.AI.Translation.Text.TextTranslationTranslateOptions (targetLanguage, content)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetLanguage" Type="System.String" />
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetLanguage">
            Specifies the language of the output text. The target language must be one of the supported languages included
            in the translation scope. For example, use to=de to translate to German.
            </param>
        <param name="content">Text to be translated.</param>
        <summary> Initializes new instance of TextTranslationTranslateOptions. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationTranslateOptions (System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, string sourceLanguage = default, Azure.AI.Translation.Text.TextType? textType = default, string category = default, Azure.AI.Translation.Text.ProfanityAction? profanityAction = default, Azure.AI.Translation.Text.ProfanityMarker? profanityMarker = default, bool? includeAlignment = default, bool? includeSentenceLength = default, string suggestedFrom = default, string fromScript = default, string toScript = default, bool? allowFallback = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, string sourceLanguage, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.TextType&gt; textType, string category, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityAction&gt; profanityAction, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityMarker&gt; profanityMarker, valuetype System.Nullable`1&lt;bool&gt; includeAlignment, valuetype System.Nullable`1&lt;bool&gt; includeSentenceLength, string suggestedFrom, string fromScript, string toScript, valuetype System.Nullable`1&lt;bool&gt; allowFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationTranslateOptions.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.Nullable{Azure.AI.Translation.Text.TextType},System.String,System.Nullable{Azure.AI.Translation.Text.ProfanityAction},System.Nullable{Azure.AI.Translation.Text.ProfanityMarker},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetLanguages As IEnumerable(Of String), content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional sourceLanguage As String = Nothing, Optional textType As Nullable(Of TextType) = Nothing, Optional category As String = Nothing, Optional profanityAction As Nullable(Of ProfanityAction) = Nothing, Optional profanityMarker As Nullable(Of ProfanityMarker) = Nothing, Optional includeAlignment As Nullable(Of Boolean) = Nothing, Optional includeSentenceLength As Nullable(Of Boolean) = Nothing, Optional suggestedFrom As String = Nothing, Optional fromScript As String = Nothing, Optional toScript As String = Nothing, Optional allowFallback As Nullable(Of Boolean) = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationTranslateOptions : seq&lt;string&gt; * seq&lt;string&gt; * Guid * string * Nullable&lt;Azure.AI.Translation.Text.TextType&gt; * string * Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; * Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;bool&gt; -&gt; Azure.AI.Translation.Text.TextTranslationTranslateOptions" Usage="new Azure.AI.Translation.Text.TextTranslationTranslateOptions (targetLanguages, content, clientTraceId, sourceLanguage, textType, category, profanityAction, profanityMarker, includeAlignment, includeSentenceLength, suggestedFrom, fromScript, toScript, allowFallback)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="textType" Type="System.Nullable&lt;Azure.AI.Translation.Text.TextType&gt;" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="profanityAction" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt;" />
        <Parameter Name="profanityMarker" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt;" />
        <Parameter Name="includeAlignment" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeSentenceLength" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="suggestedFrom" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="allowFallback" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="targetLanguages">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="content"> Array of the text to be translated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="textType">
             Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
             complete element. Possible values are: plain (default) or html.
             </param>
        <param name="category">
             A string specifying the category (domain) of the translation. This parameter is used to get translations
             from a customized system built with Custom Translator. Add the Category ID from your Custom Translator
             project details to this parameter to use your deployed customized system. Default value is: general.
             </param>
        <param name="profanityAction">
             Specifies how profanities should be treated in translations.
             Possible values are: NoAction (default), Marked or Deleted.
             </param>
        <param name="profanityMarker">
             Specifies how profanities should be marked in translations.
             Possible values are: Asterisk (default) or Tag.
             </param>
        <param name="includeAlignment">
             Specifies whether to include alignment projection from source text to translated text.
             Possible values are: true or false (default).
             </param>
        <param name="includeSentenceLength">
             Specifies whether to include sentence boundaries for the input text and the translated text.
             Possible values are: true or false (default).
             </param>
        <param name="suggestedFrom">
             Specifies a fallback language if the language of the input text can't be identified.
             Language autodetection is applied when the from parameter is omitted. If detection fails,
             the suggestedFrom language will be assumed.
             </param>
        <param name="fromScript"> Specifies the script of the input text. </param>
        <param name="toScript"> Specifies the script of the translated text. </param>
        <param name="allowFallback">
             Specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             Possible values are: true (default) or false.
            
             allowFallback=false specifies that the translation should only use systems trained for the category specified
             by the request. If a translation for language X to language Y requires chaining through a pivot language E,
             then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
             If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
             specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             </param>
        <summary> Initializes new instance of TextTranslationTranslateOptions. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFallback">
      <MemberSignature Language="C#" Value="public bool? AllowFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; AllowFallback" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.AllowFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowFallback As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AllowFallback : Nullable&lt;bool&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.AllowFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             Possible values are: true (default) or false.
            
             AllowFallback=false specifies that the translation should only use systems trained for the category specified
             by the request. If a translation for language X to language Y requires chaining through a pivot language E,
             then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
             If no system is found with the specific category, the request will return a 400 status code. AllowFallback=true
             specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As String" />
      <MemberSignature Language="F#" Value="member this.Category : string with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A string specifying the category (domain) of the translation. This parameter is used to get translations
            from a customized system built with Custom Translator. Add the Category ID from your Custom Translator
            project details to this parameter to use your deployed customized system. Default value is: general.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientTraceId">
      <MemberSignature Language="C#" Value="public Guid ClientTraceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ClientTraceId" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.ClientTraceId" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientTraceId As Guid" />
      <MemberSignature Language="F#" Value="member this.ClientTraceId : Guid with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.ClientTraceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A client-generated GUID to uniquely identify the request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Content { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Content" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.Content" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Content As IEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="member this.Content : seq&lt;string&gt;" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Array of the text to be translated.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromScript">
      <MemberSignature Language="C#" Value="public string FromScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FromScript" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.FromScript" />
      <MemberSignature Language="VB.NET" Value="Public Property FromScript As String" />
      <MemberSignature Language="F#" Value="member this.FromScript : string with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.FromScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the script of the input text.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeAlignment">
      <MemberSignature Language="C#" Value="public bool? IncludeAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IncludeAlignment" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.IncludeAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeAlignment As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IncludeAlignment : Nullable&lt;bool&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.IncludeAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies whether to include alignment projection from source text to translated text.
            Possible values are: true or false (default).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeSentenceLength">
      <MemberSignature Language="C#" Value="public bool? IncludeSentenceLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IncludeSentenceLength" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.IncludeSentenceLength" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeSentenceLength As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IncludeSentenceLength : Nullable&lt;bool&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.IncludeSentenceLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies whether to include sentence boundaries for the input text and the translated text.
            Possible values are: true or false (default).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfanityAction">
      <MemberSignature Language="C#" Value="public Azure.AI.Translation.Text.ProfanityAction? ProfanityAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityAction&gt; ProfanityAction" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.ProfanityAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ProfanityAction As Nullable(Of ProfanityAction)" />
      <MemberSignature Language="F#" Value="member this.ProfanityAction : Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.ProfanityAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies how profanities should be treated in translations.
            Possible values are: NoAction (default), Marked or Deleted.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfanityMarker">
      <MemberSignature Language="C#" Value="public Azure.AI.Translation.Text.ProfanityMarker? ProfanityMarker { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityMarker&gt; ProfanityMarker" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.ProfanityMarker" />
      <MemberSignature Language="VB.NET" Value="Public Property ProfanityMarker As Nullable(Of ProfanityMarker)" />
      <MemberSignature Language="F#" Value="member this.ProfanityMarker : Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.ProfanityMarker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies how profanities should be marked in translations.
            Possible values are: Asterisk (default) or Tag.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceLanguage">
      <MemberSignature Language="C#" Value="public string SourceLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceLanguage" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.SourceLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceLanguage As String" />
      <MemberSignature Language="F#" Value="member this.SourceLanguage : string with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.SourceLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuggestedFrom">
      <MemberSignature Language="C#" Value="public string SuggestedFrom { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SuggestedFrom" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.SuggestedFrom" />
      <MemberSignature Language="VB.NET" Value="Public Property SuggestedFrom As String" />
      <MemberSignature Language="F#" Value="member this.SuggestedFrom : string with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.SuggestedFrom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies a fallback language if the language of the input text can't be identified.
            Language autodetection is applied when the from parameter is omitted. If detection fails,
            the SuggestedFrom language will be assumed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetLanguages">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; TargetLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; TargetLanguages" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.TargetLanguages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetLanguages As IEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="member this.TargetLanguages : seq&lt;string&gt;" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.TargetLanguages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the language of the output text. The target language must be one of the supported languages included
            in the translation scope. For example, use to=de to translate to German.
            It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
            For example, use to=de and to=it to translate to German and Italian.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextType">
      <MemberSignature Language="C#" Value="public Azure.AI.Translation.Text.TextType? TextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.TextType&gt; TextType" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.TextType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextType As Nullable(Of TextType)" />
      <MemberSignature Language="F#" Value="member this.TextType : Nullable&lt;Azure.AI.Translation.Text.TextType&gt; with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.TextType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Azure.AI.Translation.Text.TextType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
            complete element. Possible values are: plain (default) or html.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToScript">
      <MemberSignature Language="C#" Value="public string ToScript { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToScript" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationTranslateOptions.ToScript" />
      <MemberSignature Language="VB.NET" Value="Public Property ToScript As String" />
      <MemberSignature Language="F#" Value="member this.ToScript : string with get, set" Usage="Azure.AI.Translation.Text.TextTranslationTranslateOptions.ToScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies the script of the translated text.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
