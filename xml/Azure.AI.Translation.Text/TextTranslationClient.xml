<Type Name="TextTranslationClient" FullName="Azure.AI.Translation.Text.TextTranslationClient">
  <TypeSignature Language="C#" Value="public class TextTranslationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextTranslationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Translation.Text.TextTranslationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TextTranslationClient" />
  <TypeSignature Language="F#" Value="type TextTranslationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Translator service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextTranslationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of TextTranslationClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Uri endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Uri -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient endpoint" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Text Translation endpoints (protocol and hostname, for example:
                https://api.cognitive.microsofttranslator.com).
            </param>
        <summary> Initializes a new instance of TextTranslationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.Core.TokenCredential credential, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.Core.TokenCredential,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.Core.TokenCredential * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Cognitive Services Token</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Uri endpoint, Azure.AI.Translation.Text.TextTranslationClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(System.Uri,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, options As TextTranslationClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Uri * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (endpoint, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Text Translation endpoints (protocol and hostname, for example:
                https://api.cognitive.microsofttranslator.com).
            </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of TextTranslationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.AzureKeyCredential credential, string region = &quot;global&quot;, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential, string region, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.AzureKeyCredential,System.String,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential, Optional region As String = &quot;global&quot;, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.AzureKeyCredential * string * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, region, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="region" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Azure Key Credential</param>
        <param name="region">Azure Resource Region</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.AzureKeyCredential credential, Uri endpoint, string region = &quot;global&quot;, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential, class System.Uri endpoint, string region, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.AzureKeyCredential,System.Uri,System.String,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential, endpoint As Uri, Optional region As String = &quot;global&quot;, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.AzureKeyCredential * Uri * string * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, endpoint, region, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="region" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Azure Key Credential</param>
        <param name="endpoint">Service Endpoint</param>
        <param name="region">Azure Resource Region</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.Core.TokenCredential credential, Uri endpoint, string tokenScope = &quot;https://cognitiveservices.azure.com/.default&quot;, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, class System.Uri endpoint, string tokenScope, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.Core.TokenCredential,System.Uri,System.String,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, endpoint As Uri, Optional tokenScope As String = &quot;https://cognitiveservices.azure.com/.default&quot;, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.Core.TokenCredential * Uri * string * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, endpoint, tokenScope, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="tokenScope" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Cognitive Services Token</param>
        <param name="endpoint">Service Endpoint</param>
        <param name="tokenScope">Token Scopes</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.Core.TokenCredential credential, string resourceId, string region = &quot;global&quot;, string tokenScope = &quot;https://cognitiveservices.azure.com/.default&quot;, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, string resourceId, string region, string tokenScope, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.Core.TokenCredential,System.String,System.String,System.String,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, resourceId As String, Optional region As String = &quot;global&quot;, Optional tokenScope As String = &quot;https://cognitiveservices.azure.com/.default&quot;, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.Core.TokenCredential * string * string * string * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, resourceId, region, tokenScope, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="resourceId" Type="System.String" />
        <Parameter Name="region" Type="System.String" />
        <Parameter Name="tokenScope" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Cognitive Services Token</param>
        <param name="resourceId">The value is the Resource ID for your Translator resource instance.</param>
        <param name="region">Azure Resource Region</param>
        <param name="tokenScope">Token Scopes</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextTranslationClient (Azure.Core.TokenCredential credential, Uri endpoint, string resourceId, string region = &quot;global&quot;, string tokenScope = &quot;https://cognitiveservices.azure.com/.default&quot;, Azure.AI.Translation.Text.TextTranslationClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, class System.Uri endpoint, string resourceId, string region, string tokenScope, class Azure.AI.Translation.Text.TextTranslationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.#ctor(Azure.Core.TokenCredential,System.Uri,System.String,System.String,System.String,Azure.AI.Translation.Text.TextTranslationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, endpoint As Uri, resourceId As String, Optional region As String = &quot;global&quot;, Optional tokenScope As String = &quot;https://cognitiveservices.azure.com/.default&quot;, Optional options As TextTranslationClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Translation.Text.TextTranslationClient : Azure.Core.TokenCredential * Uri * string * string * string * Azure.AI.Translation.Text.TextTranslationClientOptions -&gt; Azure.AI.Translation.Text.TextTranslationClient" Usage="new Azure.AI.Translation.Text.TextTranslationClient (credential, endpoint, resourceId, region, tokenScope, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="resourceId" Type="System.String" />
        <Parameter Name="region" Type="System.String" />
        <Parameter Name="tokenScope" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">Cognitive Services Token</param>
        <param name="endpoint">Service Endpoint</param>
        <param name="resourceId">The value is the Resource ID for your Translator resource instance.</param>
        <param name="region">Azure Resource Region</param>
        <param name="tokenScope">Token Scopes</param>
        <param name="options">Translate Client Options</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Translation.Text.TextTranslationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSentenceBoundaries">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt; FindSentenceBoundaries (System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, string language = default, string script = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt; FindSentenceBoundaries(class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, string language, string script, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.FindSentenceBoundaries(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSentenceBoundaries (content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional language As String = Nothing, Optional script As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of BreakSentenceItem))" />
      <MemberSignature Language="F#" Value="abstract member FindSentenceBoundaries : seq&lt;string&gt; * Guid * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&#xA;override this.FindSentenceBoundaries : seq&lt;string&gt; * Guid * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;" Usage="textTranslationClient.FindSentenceBoundaries (content, clientTraceId, language, script, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Array of the text for which values the sentence boundaries will be calculated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="language">
            Language tag identifying the language of the input text.
            If a code isn't specified, automatic language detection will be applied.
            </param>
        <param name="script">
            Script tag identifying the script used by the input text.
            If a script isn't specified, the default script of the language will be assumed.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Break Sentence. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="FindSentenceBoundaries">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt; FindSentenceBoundaries (string text, Guid clientTraceId = default, string language = default, string script = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt; FindSentenceBoundaries(string text, valuetype System.Guid clientTraceId, string language, string script, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.FindSentenceBoundaries(System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSentenceBoundaries (text As String, Optional clientTraceId As Guid = Nothing, Optional language As String = Nothing, Optional script As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of BreakSentenceItem))" />
      <MemberSignature Language="F#" Value="abstract member FindSentenceBoundaries : string * Guid * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&#xA;override this.FindSentenceBoundaries : string * Guid * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;" Usage="textTranslationClient.FindSentenceBoundaries (text, clientTraceId, language, script, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text"> Array of the text for which values the sentence boundaries will be calculated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="language">
            Language tag identifying the language of the input text.
            If a code isn't specified, automatic language detection will be applied.
            </param>
        <param name="script">
            Script tag identifying the script used by the input text.
            If a script isn't specified, the default script of the language will be assumed.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Break Sentence. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="FindSentenceBoundariesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt; FindSentenceBoundariesAsync (System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, string language = default, string script = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt; FindSentenceBoundariesAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, string language, string script, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.FindSentenceBoundariesAsync(System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSentenceBoundariesAsync (content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional language As String = Nothing, Optional script As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of BreakSentenceItem)))" />
      <MemberSignature Language="F#" Value="abstract member FindSentenceBoundariesAsync : seq&lt;string&gt; * Guid * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;&#xA;override this.FindSentenceBoundariesAsync : seq&lt;string&gt; * Guid * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;" Usage="textTranslationClient.FindSentenceBoundariesAsync (content, clientTraceId, language, script, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Array of the text for which values the sentence boundaries will be calculated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="language">
            Language tag identifying the language of the input text.
            If a code isn't specified, automatic language detection will be applied.
            </param>
        <param name="script">
            Script tag identifying the script used by the input text.
            If a script isn't specified, the default script of the language will be assumed.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Break Sentence. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="FindSentenceBoundariesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt; FindSentenceBoundariesAsync (string text, Guid clientTraceId = default, string language = default, string script = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt; FindSentenceBoundariesAsync(string text, valuetype System.Guid clientTraceId, string language, string script, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.FindSentenceBoundariesAsync(System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSentenceBoundariesAsync (text As String, Optional clientTraceId As Guid = Nothing, Optional language As String = Nothing, Optional script As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of BreakSentenceItem)))" />
      <MemberSignature Language="F#" Value="abstract member FindSentenceBoundariesAsync : string * Guid * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;&#xA;override this.FindSentenceBoundariesAsync : string * Guid * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;" Usage="textTranslationClient.FindSentenceBoundariesAsync (text, clientTraceId, language, script, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.BreakSentenceItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text"> Array of the text for which values the sentence boundaries will be calculated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="language">
            Language tag identifying the language of the input text.
            If a code isn't specified, automatic language detection will be applied.
            </param>
        <param name="script">
            Script tag identifying the script used by the input text.
            If a script isn't specified, the default script of the language will be assumed.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Break Sentence. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedLanguages">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSupportedLanguages (string clientTraceId, string scope, string acceptLanguage, Azure.ETag? ifNoneMatch, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSupportedLanguages(string clientTraceId, string scope, string acceptLanguage, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguages(System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedLanguages (clientTraceId As String, scope As String, acceptLanguage As String, ifNoneMatch As Nullable(Of ETag), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedLanguages : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSupportedLanguages : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="textTranslationClient.GetSupportedLanguages (clientTraceId, scope, acceptLanguage, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientTraceId" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="acceptLanguage" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="scope">
            A comma-separated list of names defining the group of languages to return.
            Allowed group names are: `translation`, `transliteration` and `dictionary`.
            If no scope is given, then all groups are returned, which is equivalent to passing
            `scope=translation,transliteration,dictionary`. To decide which set of supported languages
            is appropriate for your scenario, see the description of the [response object](#response-body).
            </param>
        <param name="acceptLanguage">
            The language to use for user interface strings. Some of the fields in the response are names of languages or
            names of regions. Use this parameter to define the language in which these names are returned.
            The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
            to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
            Names are provided in the English language when a target language is not specified or when localization
            is not available.
            </param>
        <param name="ifNoneMatch">
            Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
            If the resource has not been modified, the service will return status code 304 and an empty response body.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the set of languages currently supported by other operations of the Translator.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguages(System.String,System.String,System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSupportedLanguages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = client.GetSupportedLanguages("<clientTraceId>", "<scope>", "<acceptLanguage>", new ETag("<ifNoneMatch>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("code").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedLanguages">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt; GetSupportedLanguages (string clientTraceId = default, string scope = default, string acceptLanguage = default, Azure.ETag? ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt; GetSupportedLanguages(string clientTraceId, string scope, string acceptLanguage, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguages(System.String,System.String,System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedLanguages (Optional clientTraceId As String = Nothing, Optional scope As String = Nothing, Optional acceptLanguage As String = Nothing, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GetSupportedLanguagesResult)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedLanguages : string * string * string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&#xA;override this.GetSupportedLanguages : string * string * string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;" Usage="textTranslationClient.GetSupportedLanguages (clientTraceId, scope, acceptLanguage, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientTraceId" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="acceptLanguage" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="scope">
            A comma-separated list of names defining the group of languages to return.
            Allowed group names are: `translation`, `transliteration` and `dictionary`.
            If no scope is given, then all groups are returned, which is equivalent to passing
            `scope=translation,transliteration,dictionary`. To decide which set of supported languages
            is appropriate for your scenario, see the description of the [response object](#response-body).
            </param>
        <param name="acceptLanguage">
            The language to use for user interface strings. Some of the fields in the response are names of languages or
            names of regions. Use this parameter to define the language in which these names are returned.
            The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
            to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
            Names are provided in the English language when a target language is not specified or when localization
            is not available.
            </param>
        <param name="ifNoneMatch">
            Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
            If the resource has not been modified, the service will return status code 304 and an empty response body.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the set of languages currently supported by other operations of the Translator. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetSupportedLanguages.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages();
]]></code>
This sample shows how to call GetSupportedLanguages with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = client.GetSupportedLanguages(clientTraceId: "<clientTraceId>", scope: "<scope>", acceptLanguage: "<acceptLanguage>", ifNoneMatch: new ETag("<ifNoneMatch>"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedLanguagesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSupportedLanguagesAsync (string clientTraceId, string scope, string acceptLanguage, Azure.ETag? ifNoneMatch, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSupportedLanguagesAsync(string clientTraceId, string scope, string acceptLanguage, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguagesAsync(System.String,System.String,System.String,System.Nullable{Azure.ETag},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedLanguagesAsync (clientTraceId As String, scope As String, acceptLanguage As String, ifNoneMatch As Nullable(Of ETag), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedLanguagesAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSupportedLanguagesAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="textTranslationClient.GetSupportedLanguagesAsync (clientTraceId, scope, acceptLanguage, ifNoneMatch, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientTraceId" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="acceptLanguage" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="scope">
            A comma-separated list of names defining the group of languages to return.
            Allowed group names are: `translation`, `transliteration` and `dictionary`.
            If no scope is given, then all groups are returned, which is equivalent to passing
            `scope=translation,transliteration,dictionary`. To decide which set of supported languages
            is appropriate for your scenario, see the description of the [response object](#response-body).
            </param>
        <param name="acceptLanguage">
            The language to use for user interface strings. Some of the fields in the response are names of languages or
            names of regions. Use this parameter to define the language in which these names are returned.
            The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
            to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
            Names are provided in the English language when a target language is not specified or when localization
            is not available.
            </param>
        <param name="ifNoneMatch">
            Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
            If the resource has not been modified, the service will return status code 304 and an empty response body.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the set of languages currently supported by other operations of the Translator.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguagesAsync(System.String,System.String,System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSupportedLanguagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync(null, null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response response = await client.GetSupportedLanguagesAsync("<clientTraceId>", "<scope>", "<acceptLanguage>", new ETag("<ifNoneMatch>"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("translation").GetProperty("<key>").GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("toScripts")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("transliteration").GetProperty("<key>").GetProperty("scripts")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("nativeName").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("dir").ToString());
Console.WriteLine(result.GetProperty("dictionary").GetProperty("<key>").GetProperty("translations")[0].GetProperty("code").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedLanguagesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&gt; GetSupportedLanguagesAsync (string clientTraceId = default, string scope = default, string acceptLanguage = default, Azure.ETag? ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&gt; GetSupportedLanguagesAsync(string clientTraceId, string scope, string acceptLanguage, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.GetSupportedLanguagesAsync(System.String,System.String,System.String,System.Nullable{Azure.ETag},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedLanguagesAsync (Optional clientTraceId As String = Nothing, Optional scope As String = Nothing, Optional acceptLanguage As String = Nothing, Optional ifNoneMatch As Nullable(Of ETag) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GetSupportedLanguagesResult))" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedLanguagesAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&gt;&#xA;override this.GetSupportedLanguagesAsync : string * string * string * Nullable&lt;Azure.ETag&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&gt;" Usage="textTranslationClient.GetSupportedLanguagesAsync (clientTraceId, scope, acceptLanguage, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Translation.Text.GetSupportedLanguagesResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientTraceId" Type="System.String" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="acceptLanguage" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="scope">
            A comma-separated list of names defining the group of languages to return.
            Allowed group names are: `translation`, `transliteration` and `dictionary`.
            If no scope is given, then all groups are returned, which is equivalent to passing
            `scope=translation,transliteration,dictionary`. To decide which set of supported languages
            is appropriate for your scenario, see the description of the [response object](#response-body).
            </param>
        <param name="acceptLanguage">
            The language to use for user interface strings. Some of the fields in the response are names of languages or
            names of regions. Use this parameter to define the language in which these names are returned.
            The language is specified by providing a well-formed BCP 47 language tag. For instance, use the value `fr`
            to request names in French or use the value `zh-Hant` to request names in Chinese Traditional.
            Names are provided in the English language when a target language is not specified or when localization
            is not available.
            </param>
        <param name="ifNoneMatch">
            Passing the value of the ETag response header in an If-None-Match field will allow the service to optimize the response.
            If the resource has not been modified, the service will return status code 304 and an empty response body.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the set of languages currently supported by other operations of the Translator. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetSupportedLanguagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync();
]]></code>
This sample shows how to call GetSupportedLanguagesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TextTranslationClient client = new TextTranslationClient(endpoint);

Response<GetSupportedLanguagesResult> response = await client.GetSupportedLanguagesAsync(clientTraceId: "<clientTraceId>", scope: "<scope>", acceptLanguage: "<acceptLanguage>", ifNoneMatch: new ETag("<ifNoneMatch>"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryEntries">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt; LookupDictionaryEntries (string from, string to, System.Collections.Generic.IEnumerable&lt;string&gt; words, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt; LookupDictionaryEntries(string from, string to, class System.Collections.Generic.IEnumerable`1&lt;string&gt; words, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryEntries(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryEntries (from As String, to As String, words As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of DictionaryLookupItem))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryEntries : string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&#xA;override this.LookupDictionaryEntries : string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;" Usage="textTranslationClient.LookupDictionaryEntries (from, to, words, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="words" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="words"> Array of the words to lookup in the dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Lookup. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="words" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryEntries">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt; LookupDictionaryEntries (string from, string to, string word, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt; LookupDictionaryEntries(string from, string to, string word, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryEntries(System.String,System.String,System.String,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryEntries (from As String, to As String, word As String, Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of DictionaryLookupItem))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryEntries : string * string * string * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&#xA;override this.LookupDictionaryEntries : string * string * string * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;" Usage="textTranslationClient.LookupDictionaryEntries (from, to, word, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="word" Type="System.String" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="word"> A word to lookup in the dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Lookup. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="word" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryEntriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt; LookupDictionaryEntriesAsync (string from, string to, System.Collections.Generic.IEnumerable&lt;string&gt; words, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt; LookupDictionaryEntriesAsync(string from, string to, class System.Collections.Generic.IEnumerable`1&lt;string&gt; words, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryEntriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryEntriesAsync (from As String, to As String, words As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of DictionaryLookupItem)))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryEntriesAsync : string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;&#xA;override this.LookupDictionaryEntriesAsync : string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;" Usage="textTranslationClient.LookupDictionaryEntriesAsync (from, to, words, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="words" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="words"> Array of the words to lookup in the dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Lookup. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="words" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryEntriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt; LookupDictionaryEntriesAsync (string from, string to, string word, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt; LookupDictionaryEntriesAsync(string from, string to, string word, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryEntriesAsync(System.String,System.String,System.String,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryEntriesAsync (from As String, to As String, word As String, Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of DictionaryLookupItem)))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryEntriesAsync : string * string * string * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;&#xA;override this.LookupDictionaryEntriesAsync : string * string * string * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;" Usage="textTranslationClient.LookupDictionaryEntriesAsync (from, to, word, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryLookupItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="word" Type="System.String" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="word"> A word to lookup in the dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Lookup. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="word" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryExamples">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt; LookupDictionaryExamples (string from, string to, Azure.AI.Translation.Text.InputTextWithTranslation content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt; LookupDictionaryExamples(string from, string to, class Azure.AI.Translation.Text.InputTextWithTranslation content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryExamples(System.String,System.String,Azure.AI.Translation.Text.InputTextWithTranslation,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryExamples (from As String, to As String, content As InputTextWithTranslation, Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of DictionaryExampleItem))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryExamples : string * string * Azure.AI.Translation.Text.InputTextWithTranslation * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&#xA;override this.LookupDictionaryExamples : string * string * Azure.AI.Translation.Text.InputTextWithTranslation * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;" Usage="textTranslationClient.LookupDictionaryExamples (from, to, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="content" Type="Azure.AI.Translation.Text.InputTextWithTranslation" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="content"> Array of the text to be sent to dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Examples. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryExamples">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt; LookupDictionaryExamples (string from, string to, System.Collections.Generic.IEnumerable&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt; LookupDictionaryExamples(string from, string to, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Translation.Text.InputTextWithTranslation&gt; content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryExamples(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Translation.Text.InputTextWithTranslation},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryExamples (from As String, to As String, content As IEnumerable(Of InputTextWithTranslation), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of DictionaryExampleItem))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryExamples : string * string * seq&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&#xA;override this.LookupDictionaryExamples : string * string * seq&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;" Usage="textTranslationClient.LookupDictionaryExamples (from, to, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="content"> Array of the text to be sent to dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Examples. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryExamplesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt; LookupDictionaryExamplesAsync (string from, string to, Azure.AI.Translation.Text.InputTextWithTranslation content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt; LookupDictionaryExamplesAsync(string from, string to, class Azure.AI.Translation.Text.InputTextWithTranslation content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryExamplesAsync(System.String,System.String,Azure.AI.Translation.Text.InputTextWithTranslation,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryExamplesAsync (from As String, to As String, content As InputTextWithTranslation, Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of DictionaryExampleItem)))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryExamplesAsync : string * string * Azure.AI.Translation.Text.InputTextWithTranslation * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;&#xA;override this.LookupDictionaryExamplesAsync : string * string * Azure.AI.Translation.Text.InputTextWithTranslation * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;" Usage="textTranslationClient.LookupDictionaryExamplesAsync (from, to, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="content" Type="Azure.AI.Translation.Text.InputTextWithTranslation" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="content"> Array of the text to be sent to dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Examples. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="LookupDictionaryExamplesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt; LookupDictionaryExamplesAsync (string from, string to, System.Collections.Generic.IEnumerable&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt; LookupDictionaryExamplesAsync(string from, string to, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Translation.Text.InputTextWithTranslation&gt; content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.LookupDictionaryExamplesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.AI.Translation.Text.InputTextWithTranslation},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LookupDictionaryExamplesAsync (from As String, to As String, content As IEnumerable(Of InputTextWithTranslation), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of DictionaryExampleItem)))" />
      <MemberSignature Language="F#" Value="abstract member LookupDictionaryExamplesAsync : string * string * seq&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;&#xA;override this.LookupDictionaryExamplesAsync : string * string * seq&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;" Usage="textTranslationClient.LookupDictionaryExamplesAsync (from, to, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.DictionaryExampleItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="to" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Translation.Text.InputTextWithTranslation&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from">
            Specifies the language of the input text.
            The source language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="to">
            Specifies the language of the output text.
            The target language must be one of the supported languages included in the dictionary scope.
            </param>
        <param name="content"> Array of the text to be sent to dictionary. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Dictionary Examples. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" />, <paramref name="to" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Translation.Text.TextTranslationClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Translation.Text.TextTranslationClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate (Azure.AI.Translation.Text.TextTranslationTranslateOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate(class Azure.AI.Translation.Text.TextTranslationTranslateOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Translate(Azure.AI.Translation.Text.TextTranslationTranslateOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (options As TextTranslationTranslateOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TranslatedTextItem))" />
      <MemberSignature Language="F#" Value="abstract member Translate : Azure.AI.Translation.Text.TextTranslationTranslateOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&#xA;override this.Translate : Azure.AI.Translation.Text.TextTranslationTranslateOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;" Usage="textTranslationClient.Translate (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationTranslateOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The client translation options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate (string targetLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; content, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate(string targetLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, string sourceLanguage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Translate(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (targetLanguage As String, content As IEnumerable(Of String), Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TranslatedTextItem))" />
      <MemberSignature Language="F#" Value="abstract member Translate : string * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&#xA;override this.Translate : string * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;" Usage="textTranslationClient.Translate (targetLanguage, content, sourceLanguage, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguage" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguage">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="content"> Array of the text to be translated. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguage" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate (string targetLanguage, string text, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate(string targetLanguage, string text, string sourceLanguage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Translate(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (targetLanguage As String, text As String, Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TranslatedTextItem))" />
      <MemberSignature Language="F#" Value="abstract member Translate : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&#xA;override this.Translate : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;" Usage="textTranslationClient.Translate (targetLanguage, text, sourceLanguage, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguage" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguage">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="text"> Text to be translated. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguage" /> or <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate (System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, string sourceLanguage = default, Azure.AI.Translation.Text.TextType? textType = default, string category = default, Azure.AI.Translation.Text.ProfanityAction? profanityAction = default, Azure.AI.Translation.Text.ProfanityMarker? profanityMarker = default, bool? includeAlignment = default, bool? includeSentenceLength = default, string suggestedFrom = default, string fromScript = default, string toScript = default, bool? allowFallback = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt; Translate(class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, string sourceLanguage, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.TextType&gt; textType, string category, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityAction&gt; profanityAction, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityMarker&gt; profanityMarker, valuetype System.Nullable`1&lt;bool&gt; includeAlignment, valuetype System.Nullable`1&lt;bool&gt; includeSentenceLength, string suggestedFrom, string fromScript, string toScript, valuetype System.Nullable`1&lt;bool&gt; allowFallback, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Translate(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.Nullable{Azure.AI.Translation.Text.TextType},System.String,System.Nullable{Azure.AI.Translation.Text.ProfanityAction},System.Nullable{Azure.AI.Translation.Text.ProfanityMarker},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Translate (targetLanguages As IEnumerable(Of String), content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional sourceLanguage As String = Nothing, Optional textType As Nullable(Of TextType) = Nothing, Optional category As String = Nothing, Optional profanityAction As Nullable(Of ProfanityAction) = Nothing, Optional profanityMarker As Nullable(Of ProfanityMarker) = Nothing, Optional includeAlignment As Nullable(Of Boolean) = Nothing, Optional includeSentenceLength As Nullable(Of Boolean) = Nothing, Optional suggestedFrom As String = Nothing, Optional fromScript As String = Nothing, Optional toScript As String = Nothing, Optional allowFallback As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TranslatedTextItem))" />
      <MemberSignature Language="F#" Value="abstract member Translate : seq&lt;string&gt; * seq&lt;string&gt; * Guid * string * Nullable&lt;Azure.AI.Translation.Text.TextType&gt; * string * Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; * Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&#xA;override this.Translate : seq&lt;string&gt; * seq&lt;string&gt; * Guid * string * Nullable&lt;Azure.AI.Translation.Text.TextType&gt; * string * Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; * Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;" Usage="textTranslationClient.Translate (targetLanguages, content, clientTraceId, sourceLanguage, textType, category, profanityAction, profanityMarker, includeAlignment, includeSentenceLength, suggestedFrom, fromScript, toScript, allowFallback, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="textType" Type="System.Nullable&lt;Azure.AI.Translation.Text.TextType&gt;" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="profanityAction" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt;" />
        <Parameter Name="profanityMarker" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt;" />
        <Parameter Name="includeAlignment" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeSentenceLength" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="suggestedFrom" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="allowFallback" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguages">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="content"> Array of the text to be translated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="textType">
             Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
             complete element. Possible values are: plain (default) or html.
             </param>
        <param name="category">
             A string specifying the category (domain) of the translation. This parameter is used to get translations
             from a customized system built with Custom Translator. Add the Category ID from your Custom Translator
             project details to this parameter to use your deployed customized system. Default value is: general.
             </param>
        <param name="profanityAction">
             Specifies how profanities should be treated in translations.
             Possible values are: NoAction (default), Marked or Deleted.
             </param>
        <param name="profanityMarker">
             Specifies how profanities should be marked in translations.
             Possible values are: Asterisk (default) or Tag.
             </param>
        <param name="includeAlignment">
             Specifies whether to include alignment projection from source text to translated text.
             Possible values are: true or false (default).
             </param>
        <param name="includeSentenceLength">
             Specifies whether to include sentence boundaries for the input text and the translated text.
             Possible values are: true or false (default).
             </param>
        <param name="suggestedFrom">
             Specifies a fallback language if the language of the input text can't be identified.
             Language autodetection is applied when the from parameter is omitted. If detection fails,
             the suggestedFrom language will be assumed.
             </param>
        <param name="fromScript"> Specifies the script of the input text. </param>
        <param name="toScript"> Specifies the script of the translated text. </param>
        <param name="allowFallback">
             Specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             Possible values are: true (default) or false.
            
             allowFallback=false specifies that the translation should only use systems trained for the category specified
             by the request. If a translation for language X to language Y requires chaining through a pivot language E,
             then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
             If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
             specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguages" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TranslateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync (Azure.AI.Translation.Text.TextTranslationTranslateOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync(class Azure.AI.Translation.Text.TextTranslationTranslateOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(Azure.AI.Translation.Text.TextTranslationTranslateOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateAsync (options As TextTranslationTranslateOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))" />
      <MemberSignature Language="F#" Value="abstract member TranslateAsync : Azure.AI.Translation.Text.TextTranslationTranslateOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;&#xA;override this.TranslateAsync : Azure.AI.Translation.Text.TextTranslationTranslateOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;" Usage="textTranslationClient.TranslateAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationTranslateOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The client translation options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TranslateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync (string targetLanguage, System.Collections.Generic.IEnumerable&lt;string&gt; content, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync(string targetLanguage, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, string sourceLanguage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateAsync (targetLanguage As String, content As IEnumerable(Of String), Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))" />
      <MemberSignature Language="F#" Value="abstract member TranslateAsync : string * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;&#xA;override this.TranslateAsync : string * seq&lt;string&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;" Usage="textTranslationClient.TranslateAsync (targetLanguage, content, sourceLanguage, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguage" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguage">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="content"> Array of the text to be translated. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguage" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TranslateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync (string targetLanguage, string text, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync(string targetLanguage, string text, string sourceLanguage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateAsync (targetLanguage As String, text As String, Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))" />
      <MemberSignature Language="F#" Value="abstract member TranslateAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;&#xA;override this.TranslateAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;" Usage="textTranslationClient.TranslateAsync (targetLanguage, text, sourceLanguage, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguage" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguage">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="text"> Text to be translated. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguage" /> or <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TranslateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync (System.Collections.Generic.IEnumerable&lt;string&gt; targetLanguages, System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, string sourceLanguage = default, Azure.AI.Translation.Text.TextType? textType = default, string category = default, Azure.AI.Translation.Text.ProfanityAction? profanityAction = default, Azure.AI.Translation.Text.ProfanityMarker? profanityMarker = default, bool? includeAlignment = default, bool? includeSentenceLength = default, string suggestedFrom = default, string fromScript = default, string toScript = default, bool? allowFallback = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt; TranslateAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; targetLanguages, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, string sourceLanguage, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.TextType&gt; textType, string category, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityAction&gt; profanityAction, valuetype System.Nullable`1&lt;valuetype Azure.AI.Translation.Text.ProfanityMarker&gt; profanityMarker, valuetype System.Nullable`1&lt;bool&gt; includeAlignment, valuetype System.Nullable`1&lt;bool&gt; includeSentenceLength, string suggestedFrom, string fromScript, string toScript, valuetype System.Nullable`1&lt;bool&gt; allowFallback, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Guid,System.String,System.Nullable{Azure.AI.Translation.Text.TextType},System.String,System.Nullable{Azure.AI.Translation.Text.ProfanityAction},System.Nullable{Azure.AI.Translation.Text.ProfanityMarker},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TranslateAsync (targetLanguages As IEnumerable(Of String), content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional sourceLanguage As String = Nothing, Optional textType As Nullable(Of TextType) = Nothing, Optional category As String = Nothing, Optional profanityAction As Nullable(Of ProfanityAction) = Nothing, Optional profanityMarker As Nullable(Of ProfanityMarker) = Nothing, Optional includeAlignment As Nullable(Of Boolean) = Nothing, Optional includeSentenceLength As Nullable(Of Boolean) = Nothing, Optional suggestedFrom As String = Nothing, Optional fromScript As String = Nothing, Optional toScript As String = Nothing, Optional allowFallback As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))" />
      <MemberSignature Language="F#" Value="abstract member TranslateAsync : seq&lt;string&gt; * seq&lt;string&gt; * Guid * string * Nullable&lt;Azure.AI.Translation.Text.TextType&gt; * string * Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; * Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;&#xA;override this.TranslateAsync : seq&lt;string&gt; * seq&lt;string&gt; * Guid * string * Nullable&lt;Azure.AI.Translation.Text.TextType&gt; * string * Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt; * Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * string * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;" Usage="textTranslationClient.TranslateAsync (targetLanguages, content, clientTraceId, sourceLanguage, textType, category, profanityAction, profanityMarker, includeAlignment, includeSentenceLength, suggestedFrom, fromScript, toScript, allowFallback, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TranslatedTextItem&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetLanguages" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="sourceLanguage" Type="System.String" />
        <Parameter Name="textType" Type="System.Nullable&lt;Azure.AI.Translation.Text.TextType&gt;" />
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="profanityAction" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityAction&gt;" />
        <Parameter Name="profanityMarker" Type="System.Nullable&lt;Azure.AI.Translation.Text.ProfanityMarker&gt;" />
        <Parameter Name="includeAlignment" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeSentenceLength" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="suggestedFrom" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="allowFallback" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetLanguages">
             Specifies the language of the output text. The target language must be one of the supported languages included
             in the translation scope. For example, use to=de to translate to German.
             It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.
             For example, use to=de&amp;to=it to translate to German and Italian.
             </param>
        <param name="content"> Array of the text to be translated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="sourceLanguage">
             Specifies the language of the input text. Find which languages are available to translate from by
             looking up supported languages using the translation scope. If the from parameter isn't specified,
             automatic language detection is applied to determine the source language.
            
             You must use the from parameter rather than autodetection when using the dynamic dictionary feature.
             Note: the dynamic dictionary feature is case-sensitive.
             </param>
        <param name="textType">
             Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,
             complete element. Possible values are: plain (default) or html.
             </param>
        <param name="category">
             A string specifying the category (domain) of the translation. This parameter is used to get translations
             from a customized system built with Custom Translator. Add the Category ID from your Custom Translator
             project details to this parameter to use your deployed customized system. Default value is: general.
             </param>
        <param name="profanityAction">
             Specifies how profanities should be treated in translations.
             Possible values are: NoAction (default), Marked or Deleted.
             </param>
        <param name="profanityMarker">
             Specifies how profanities should be marked in translations.
             Possible values are: Asterisk (default) or Tag.
             </param>
        <param name="includeAlignment">
             Specifies whether to include alignment projection from source text to translated text.
             Possible values are: true or false (default).
             </param>
        <param name="includeSentenceLength">
             Specifies whether to include sentence boundaries for the input text and the translated text.
             Possible values are: true or false (default).
             </param>
        <param name="suggestedFrom">
             Specifies a fallback language if the language of the input text can't be identified.
             Language autodetection is applied when the from parameter is omitted. If detection fails,
             the suggestedFrom language will be assumed.
             </param>
        <param name="fromScript"> Specifies the script of the input text. </param>
        <param name="toScript"> Specifies the script of the translated text. </param>
        <param name="allowFallback">
             Specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             Possible values are: true (default) or false.
            
             allowFallback=false specifies that the translation should only use systems trained for the category specified
             by the request. If a translation for language X to language Y requires chaining through a pivot language E,
             then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.
             If no system is found with the specific category, the request will return a 400 status code. allowFallback=true
             specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
             </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Translate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetLanguages" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Transliterate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate (Azure.AI.Translation.Text.TextTranslationTransliterateOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate(class Azure.AI.Translation.Text.TextTranslationTransliterateOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Transliterate(Azure.AI.Translation.Text.TextTranslationTransliterateOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Transliterate (options As TextTranslationTransliterateOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TransliteratedText))" />
      <MemberSignature Language="F#" Value="abstract member Transliterate : Azure.AI.Translation.Text.TextTranslationTransliterateOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&#xA;override this.Transliterate : Azure.AI.Translation.Text.TextTranslationTransliterateOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;" Usage="textTranslationClient.Transliterate (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationTransliterateOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options">The configuration options for the transliterate call. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Transliterate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Transliterate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate (string language, string fromScript, string toScript, string text, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate(string language, string fromScript, string toScript, string text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Transliterate(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Transliterate (language As String, fromScript As String, toScript As String, text As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TransliteratedText))" />
      <MemberSignature Language="F#" Value="abstract member Transliterate : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&#xA;override this.Transliterate : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;" Usage="textTranslationClient.Transliterate (language, fromScript, toScript, text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="language">
            Specifies the language of the text to convert from one script to another.
            Possible languages are listed in the transliteration scope obtained by querying the service
            for its supported languages.
            </param>
        <param name="fromScript">
            Specifies the script used by the input text. Look up supported languages using the transliteration scope,
            to find input scripts available for the selected language.
            </param>
        <param name="toScript">
            Specifies the output script. Look up supported languages using the transliteration scope, to find output
            scripts available for the selected combination of input language and input script.
            </param>
        <param name="text"> Text to be transliterated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Transliterate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" />, <paramref name="fromScript" />, <paramref name="toScript" /> or <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Transliterate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate (string language, string fromScript, string toScript, System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt; Transliterate(string language, string fromScript, string toScript, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.Transliterate(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Transliterate (language As String, fromScript As String, toScript As String, content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of TransliteratedText))" />
      <MemberSignature Language="F#" Value="abstract member Transliterate : string * string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&#xA;override this.Transliterate : string * string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;" Usage="textTranslationClient.Transliterate (language, fromScript, toScript, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="language">
            Specifies the language of the text to convert from one script to another.
            Possible languages are listed in the transliteration scope obtained by querying the service
            for its supported languages.
            </param>
        <param name="fromScript">
            Specifies the script used by the input text. Look up supported languages using the transliteration scope,
            to find input scripts available for the selected language.
            </param>
        <param name="toScript">
            Specifies the output script. Look up supported languages using the transliteration scope, to find output
            scripts available for the selected combination of input language and input script.
            </param>
        <param name="content"> Array of the text to be transliterated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Transliterate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" />, <paramref name="fromScript" />, <paramref name="toScript" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TransliterateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync (Azure.AI.Translation.Text.TextTranslationTransliterateOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync(class Azure.AI.Translation.Text.TextTranslationTransliterateOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TransliterateAsync(Azure.AI.Translation.Text.TextTranslationTransliterateOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransliterateAsync (options As TextTranslationTransliterateOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TransliteratedText)))" />
      <MemberSignature Language="F#" Value="abstract member TransliterateAsync : Azure.AI.Translation.Text.TextTranslationTransliterateOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;&#xA;override this.TransliterateAsync : Azure.AI.Translation.Text.TextTranslationTransliterateOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;" Usage="textTranslationClient.TransliterateAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.AI.Translation.Text.TextTranslationTransliterateOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options" />
        <param name="cancellationToken" />
        <summary>Transliterate Text. </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransliterateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync (string language, string fromScript, string toScript, string text, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync(string language, string fromScript, string toScript, string text, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TransliterateAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransliterateAsync (language As String, fromScript As String, toScript As String, text As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TransliteratedText)))" />
      <MemberSignature Language="F#" Value="abstract member TransliterateAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;&#xA;override this.TransliterateAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;" Usage="textTranslationClient.TransliterateAsync (language, fromScript, toScript, text, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="language">
            Specifies the language of the text to convert from one script to another.
            Possible languages are listed in the transliteration scope obtained by querying the service
            for its supported languages.
            </param>
        <param name="fromScript">
            Specifies the script used by the input text. Look up supported languages using the transliteration scope,
            to find input scripts available for the selected language.
            </param>
        <param name="toScript">
            Specifies the output script. Look up supported languages using the transliteration scope, to find output
            scripts available for the selected combination of input language and input script.
            </param>
        <param name="text"> Text to be transliterated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Transliterate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" />, <paramref name="fromScript" />, <paramref name="toScript" /> or <paramref name="text" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="TransliterateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync (string language, string fromScript, string toScript, System.Collections.Generic.IEnumerable&lt;string&gt; content, Guid clientTraceId = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt; TransliterateAsync(string language, string fromScript, string toScript, class System.Collections.Generic.IEnumerable`1&lt;string&gt; content, valuetype System.Guid clientTraceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Translation.Text.TextTranslationClient.TransliterateAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransliterateAsync (language As String, fromScript As String, toScript As String, content As IEnumerable(Of String), Optional clientTraceId As Guid = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TransliteratedText)))" />
      <MemberSignature Language="F#" Value="abstract member TransliterateAsync : string * string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;&#xA;override this.TransliterateAsync : string * string * string * seq&lt;string&gt; * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;" Usage="textTranslationClient.TransliterateAsync (language, fromScript, toScript, content, clientTraceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Translation.Text</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Translation.Text.TransliteratedText&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="fromScript" Type="System.String" />
        <Parameter Name="toScript" Type="System.String" />
        <Parameter Name="content" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="clientTraceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="language">
            Specifies the language of the text to convert from one script to another.
            Possible languages are listed in the transliteration scope obtained by querying the service
            for its supported languages.
            </param>
        <param name="fromScript">
            Specifies the script used by the input text. Look up supported languages using the transliteration scope,
            to find input scripts available for the selected language.
            </param>
        <param name="toScript">
            Specifies the output script. Look up supported languages using the transliteration scope, to find output
            scripts available for the selected combination of input language and input script.
            </param>
        <param name="content"> Array of the text to be transliterated. </param>
        <param name="clientTraceId"> A client-generated GUID to uniquely identify the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Transliterate Text. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" />, <paramref name="fromScript" />, <paramref name="toScript" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
