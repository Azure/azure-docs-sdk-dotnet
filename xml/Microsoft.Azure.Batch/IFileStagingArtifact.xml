<Type Name="IFileStagingArtifact" FullName="Microsoft.Azure.Batch.IFileStagingArtifact">
  <TypeSignature Language="C#" Value="public interface IFileStagingArtifact" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFileStagingArtifact" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Batch.IFileStagingArtifact" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.1.0</AssemblyVersion>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Contains information about a file staging process.  File staging is typically performed for
            a <see cref="T:Microsoft.Azure.Batch.CloudTask" /> (see <see cref="P:Microsoft.Azure.Batch.CloudTask.FilesToStage" />).
            </summary>
    <remarks>
      <para>
            IFileStagingArtifact allows an application to customize and to obtain information about the process of uploading
            files to the cloud, for example as part of a task-related operation such as
            <see cref="M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})">JobOperations.AddTaskAsync</see>
            or <see cref="M:Microsoft.Azure.Batch.CloudJob.AddTaskAsync(Microsoft.Azure.Batch.CloudTask,System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior},System.Threading.CancellationToken)">CloudJob.AddTaskAsync</see>.  Applications may use this
            information to, for example, find out about containers that were created in Azure Storage as
            part of the upload process.
            </para>
      <para>
            When <see cref="M:Microsoft.Azure.Batch.JobOperations.AddTaskAsync(System.String,System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.CloudTask},Microsoft.Azure.Batch.BatchClientParallelOptions,System.Collections.Concurrent.ConcurrentBag{System.Collections.Concurrent.ConcurrentDictionary{System.Type,Microsoft.Azure.Batch.IFileStagingArtifact}},System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.BatchClientBehavior})">JobOperations.AddTaskAsync</see>
            is called, the Batch client sends the tasks to the Batch service in collections.  As each collection is
            processed, the Batch client performs file staging for that collection: it examines the tasks to see if
            any of them specify any <see cref="P:Microsoft.Azure.Batch.CloudTask.FilesToStage" />, and if so creates a dictionary entry for
            each type of <see cref="T:Microsoft.Azure.Batch.FileStaging.IFileStagingProvider" /> in the FilesToStage collection. The key of
            the dictionary entry is the <see cref="T:System.Type" /> of the IFileStagingProvider and the value is an instance
            of the corresponding implementation of IFileStagingArtifact.  For example, if FilesToStage includes one or more
            FileToStage objects (from the Microsoft.Azure.Batch.FileStaging library), then the dictionary contains an entry whose key is
            typeof(FileToStage) and whose value is an instance of SequentialFileStagingArtifact.
            </para>
      <para>
            When the Add Task operation completes, or during the Add Task operation if the application is multi-threaded,
            you can examine the dictionary and convert each IFileStagingArtifact to the appropriate type to retrieve
            the type-specific information.  For example, if your Add Task operation specified one or more FileToStage objects,
            you can locate the dictionary entry keyed by typeof(FileToStage), cast the value to SequentialFileStagingArtifact,
            and examine the SequentialFileStagingArtifact.BlobContainerCreated property to
            determine if the upload process created a blob container in Azure Storage and if so the name of that container.
            This example could be useful for cleaning up automatically created containers.
            </para>
      <para>
            (Single-task Add Task operations work similarly, except that in a multi-task Add Task operation, there is
            a dictionary for each collection of tasks, and the dictionaries are collected in a <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />,
            whereas in a single-task Add Task operation there is only a single dictionary.)
            </para>
      <para>
            In a single-task Add Task operation, you can also use the dictionary to customize the file staging process, by pre-populating it with appropriate
            entries.  For example, suppose you wish to control the <see cref="P:Microsoft.Azure.Batch.IFileStagingArtifact.NamingFragment" /> for a group of FileToStage
            objects.  Then you could initialize the dictionary with <c>{ typeof(FileToStage), new SequentialFileStagingArtifact { NamingFragment = "myname" } }</c>
            before passing it to AddTaskAsync.  The FileToStage implementation of IFileStagingProvider would then use your
            SequentialFileStagingArtifact instead of creating its own.  (This feature is not available in multi-task
            Add Task operations.)
            </para>
      <para>
            You may also encounter IFileStagingArtifact if you are developing a custom <see cref="T:Microsoft.Azure.Batch.FileStaging.IFileStagingProvider" />.
            In this case you will typically create a custom implementation of IFileStagingArtifact to report
            implementation-specific information about your file staging process.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="NamingFragment">
      <MemberSignature Language="C#" Value="public string NamingFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamingFragment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Batch.IFileStagingArtifact.NamingFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a name fragment that can be used when constructing default names.
            </summary>
        <value>To be added.</value>
        <remarks>Although a caller may set this property, the <see cref="T:Microsoft.Azure.Batch.FileStaging.IFileStagingProvider" /> implementation
            is not required to respect it.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>