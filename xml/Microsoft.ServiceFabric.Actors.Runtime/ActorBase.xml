<Type Name="ActorBase" FullName="Microsoft.ServiceFabric.Actors.Runtime.ActorBase">
  <TypeSignature Language="C#" Value="public abstract class ActorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ActorBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Actors.Runtime.ActorBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The base class for actors.
            </summary>
    <remarks>
            The base type for actors, that provides the common functionality
            for actors that derive from <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor" />.
            The state is preserved across actor garbage collections and fail-overs.
            The storage and retrieval of the state is provided by the actor state provider. See 
            <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider" /> for more information.
            </remarks>
    <altmember cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor" />
  </Docs>
  <Members>
    <Member MemberName="ActorService">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceFabric.Actors.Runtime.ActorService ActorService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ServiceFabric.Actors.Runtime.ActorService ActorService" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Actors.Runtime.ActorService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the stateful service replica that is hosting the actor.
            </summary>
        <value>
            The <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService" /> that represents the stateful service replica hosting the actor.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public string ApplicationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the application that contains the actor service that is hosting this actor.
            </summary>
        <value>The name of application that contains the actor service that is hosting this actor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent&lt;TEvent&gt;">
      <MemberSignature Language="C#" Value="protected TEvent GetEvent&lt;TEvent&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !!TEvent GetEvent&lt;TEvent&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEvent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEvent" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEvent">Event interface type.</typeparam>
        <summary>
            Gets the event for the specified event interface.
            </summary>
        <returns>Returns Event that represents the specified interface.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReminder">
      <MemberSignature Language="C#" Value="protected Microsoft.ServiceFabric.Actors.Runtime.IActorReminder GetReminder (string reminderName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.ServiceFabric.Actors.Runtime.IActorReminder GetReminder(string reminderName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Actors.Runtime.IActorReminder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reminderName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reminderName">Name of the reminder to get.</param>
        <summary>
            Gets the actor reminder with specified reminder name.
            </summary>
        <returns>
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder" /> that represents an actor reminder.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException">Reminder not found for the actor.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Microsoft.ServiceFabric.Actors.ActorId Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ServiceFabric.Actors.ActorId Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Actors.ActorId</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the identity of this actor with the actor service.
            </summary>
        <value>The <see cref="T:Microsoft.ServiceFabric.Actors.ActorId" /> for the actor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivateAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnActivateAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnActivateAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated
            and before any method call or reminders are dispatched on it.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnActivateAsync operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivateAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnDeactivateAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnDeactivateAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
             Override this method to release any resources. This method is called when actor is deactivated (garbage collected by Actor Runtime).
             Actor operations like state changes should not be called from this method.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnDeactivateAsync operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPostActorMethodAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnPostActorMethodAsync (Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext actorMethodContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnPostActorMethodAsync(valuetype Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext actorMethodContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actorMethodContext" Type="Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext" />
      </Parameters>
      <Docs>
        <param name="actorMethodContext">
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext" /> describing the method that was invoked by actor runtime prior to this method.
            </param>
        <summary>
            This method is invoked by actor runtime an actor method has finished execution. Override this method
            for performing any actions after an actor method has finished execution. 
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> representing post-actor-method operation.
            </returns>
        <remarks>
            This method is invoked by actor runtime prior to:
            <list type="bullet"><item><description>Invoking an actor interface method when a client request comes.</description></item><item><description>Invoking a method on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable" /> interface when a reminder fires.</description></item><item><description>Invoking a timer callback when timer fires.</description></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreActorMethodAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnPreActorMethodAsync (Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext actorMethodContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnPreActorMethodAsync(valuetype Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext actorMethodContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actorMethodContext" Type="Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext" />
      </Parameters>
      <Docs>
        <param name="actorMethodContext">
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext" /> describing the method that will be invoked by actor runtime after this method finishes.
            </param>
        <summary>
            This method is invoked by actor runtime just before invoking an actor method. Override this method
            for performing any actions prior to an actor method is invoked.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> representing pre-actor-method operation.
            </returns>
        <remarks>
            This method is invoked by actor runtime prior to:
            <list type="bullet"><item><description>Invoking an actor interface method when a client request comes.</description></item><item><description>Invoking a method on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable" /> interface when a reminder fires.</description></item><item><description>Invoking a timer callback when timer fires.</description></item></list></remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReminderAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Actors.Runtime.IActorReminder&gt; RegisterReminderAsync (string reminderName, byte[] state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Actors.Runtime.IActorReminder&gt; RegisterReminderAsync(string reminderName, unsigned int8[] state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.ServiceFabric.Actors.Runtime.ActorBase/&lt;RegisterReminderAsync&gt;d__52))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Actors.Runtime.IActorReminder&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reminderName" Type="System.String" />
        <Parameter Name="state" Type="System.Byte[]" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="reminderName">Name of the reminder to register. The name must be unique per actor.</param>
        <param name="state">User state passed to the reminder invocation.</param>
        <param name="dueTime">The amount of time to delay before invoking the reminder for the first time. Specify negative one (-1) milliseconds to disable invocation. Specify zero (0) to invoke the reminder immediately after registration.
            </param>
        <param name="period">
            The time interval between reminder invocations after the first invocation. Specify negative one (-1) milliseconds to disable periodic invocation.
            </param>
        <summary>
            Registers a reminder with the actor.
            </summary>
        <returns>
            A task that represents the asynchronous registration operation. The result of the task provides information about the registered reminder and is used to unregister the reminder using <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)" />.
            </returns>
        <remarks>
          <para>
            The class deriving from <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorBase" /> must implement <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable" /> to consume reminder invocations. Multiple reminders can be registered at any time, uniquely identified by <paramref name="reminderName" />. Existing reminders can also be updated by calling this method again. Reminder invocations are synchronized both with other reminders and other actor method callbacks.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTimer">
      <MemberSignature Language="C#" Value="protected Microsoft.ServiceFabric.Actors.Runtime.IActorTimer RegisterTimer (Func&lt;object,System.Threading.Tasks.Task&gt; asyncCallback, object state, TimeSpan dueTime, TimeSpan period);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.ServiceFabric.Actors.Runtime.IActorTimer RegisterTimer(class System.Func`2&lt;object, class System.Threading.Tasks.Task&gt; asyncCallback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ServiceFabric.Actors.Runtime.IActorTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.Func&lt;System.Object,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="dueTime" Type="System.TimeSpan" />
        <Parameter Name="period" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
            A delegate that specifies a method to be called when the timer fires.
            It has one parameter: the state object passed to RegisterTimer.
            It returns a <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </param>
        <param name="state">An object containing information to be used by the callback method, or null.</param>
        <param name="dueTime">The amount of time to delay before the async callback is first invoked. 
            Specify negative one (-1) milliseconds to prevent the timer from starting. 
            Specify zero (0) to start the timer immediately.
            </param>
        <param name="period">
            The time interval between invocations of the async callback. 
            Specify negative one (-1) milliseconds to disable periodic signaling.</param>
        <summary>
            Registers a Timer for the actor.
            </summary>
        <returns>Returns IActorTimer object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceUri">
      <MemberSignature Language="C#" Value="public Uri ServiceUri { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ServiceUri" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI of the actor service that is hosting this actor.
            </summary>
        <value>The <see cref="T:System.Uri" /> of the actor service that is hosting this actor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterReminderAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task UnregisterReminderAsync (Microsoft.ServiceFabric.Actors.Runtime.IActorReminder reminder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task UnregisterReminderAsync(class Microsoft.ServiceFabric.Actors.Runtime.IActorReminder reminder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.ServiceFabric.Actors.Runtime.ActorBase/&lt;UnregisterReminderAsync&gt;d__50))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reminder" Type="Microsoft.ServiceFabric.Actors.Runtime.IActorReminder" />
      </Parameters>
      <Docs>
        <param name="reminder">The actor reminder to unregister.</param>
        <summary>
            Unregisters a reminder previously registered using <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)" />.
            </summary>
        <returns>
            A task that represents the asynchronous unregistration operation.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
            The specified reminder is not registered.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UnregisterTimer">
      <MemberSignature Language="C#" Value="protected void UnregisterTimer (Microsoft.ServiceFabric.Actors.Runtime.IActorTimer timer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UnregisterTimer(class Microsoft.ServiceFabric.Actors.Runtime.IActorTimer timer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Actors</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timer" Type="Microsoft.ServiceFabric.Actors.Runtime.IActorTimer" />
      </Parameters>
      <Docs>
        <param name="timer">IActorTimer representing timer that needs to be unregistered..</param>
        <summary>
            Unregisters a Timer previously set on this actor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>