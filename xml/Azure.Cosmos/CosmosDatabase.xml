<Type Name="CosmosDatabase" FullName="Azure.Cosmos.CosmosDatabase">
  <TypeSignature Language="C#" Value="public abstract class CosmosDatabase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CosmosDatabase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Cosmos.CosmosDatabase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CosmosDatabase" />
  <TypeSignature Language="F#" Value="type CosmosDatabase = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Cosmos</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Operations for reading or deleting an existing database.
            
             <see cref="T:Azure.Cosmos.CosmosClient" /> for or creating new databases, and reading/querying all databases; use `client.Databases`.
             </summary>
    <remarks>
             Note: all these operations make calls against a fixed budget.
             You should design your system such that these calls scale sub-linearly with your application.
             For instance, do not call `database.ReadAsync()` before every single `item.ReadAsync()` call, to ensure the database exists;
             do this once on application start up.
             </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CosmosDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt; CreateContainerAsync (Azure.Cosmos.ContainerProperties containerProperties, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ContainerResponse&gt; CreateContainerAsync(class Azure.Cosmos.ContainerProperties containerProperties, valuetype System.Nullable`1&lt;int32&gt; throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateContainerAsync(Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateContainerAsync (containerProperties As ContainerProperties, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerAsync : Azure.Cosmos.ContainerProperties * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;" Usage="cosmosDatabase.CreateContainerAsync (containerProperties, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProperties" Type="Azure.Cosmos.ContainerProperties" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerProperties">The <see cref="T:Azure.Cosmos.ContainerProperties" /> object.</param>
        <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which wraps a <see cref="T:Azure.Cosmos.ContainerProperties" /> containing the read resource record.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
             </remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="containerProperties" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.ContainerProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
            
             ContainerResponse response = await this.cosmosDatabase.CreateContainerAsync(containerProperties);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt; CreateContainerAsync (string id, string partitionKeyPath, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ContainerResponse&gt; CreateContainerAsync(string id, string partitionKeyPath, valuetype System.Nullable`1&lt;int32&gt; throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateContainerAsync(System.String,System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateContainerAsync (id As String, partitionKeyPath As String, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerAsync : string * string * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;" Usage="cosmosDatabase.CreateContainerAsync (id, partitionKeyPath, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKeyPath" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id</param>
        <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
        <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which wraps a <see cref="T:Azure.Cosmos.ContainerProperties" /> containing the read resource record.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
             </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.ContainerProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             ContainerResponse response = await this.cosmosDatabase.CreateContainerAsync(Guid.NewGuid().ToString(), "/pk");
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt; CreateContainerIfNotExistsAsync (Azure.Cosmos.ContainerProperties containerProperties, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ContainerResponse&gt; CreateContainerIfNotExistsAsync(class Azure.Cosmos.ContainerProperties containerProperties, valuetype System.Nullable`1&lt;int32&gt; throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateContainerIfNotExistsAsync (containerProperties As ContainerProperties, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : Azure.Cosmos.ContainerProperties * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;" Usage="cosmosDatabase.CreateContainerIfNotExistsAsync (containerProperties, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProperties" Type="Azure.Cosmos.ContainerProperties" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerProperties">The <see cref="T:Azure.Cosmos.ContainerProperties" /> object.</param>
        <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
          <para>Check if a container exists, and if it doesn't, create it.
             Only the container id is used to verify if there is an existing container. Other container properties such as throughput are not validated and can be different then the passed properties.</para>
        </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which wraps a <see cref="T:Azure.Cosmos.ContainerProperties" /> containing the read resource record.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
             </remarks>
        <exception cref="T:System.ArgumentNullException">If either <paramref name="containerProperties" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.ContainerProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <list>
          <listheader>
            <term>StatusCode</term>
            <description>Common success StatusCodes for the CreateDatabaseIfNotExistsAsync operation</description>
          </listheader>
          <item>
            <term>201</term>
            <description>Created - New database is created.</description>
          </item>
          <item>
            <term>200</term>
            <description>Accepted - This means the database already exists.</description>
          </item>
        </list>
        <example>
          <code language="c#"><![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
                 IndexingPolicy = new IndexingPolicy()
                {
                     Automatic = false,
                     IndexingMode = IndexingMode.Lazy,
                };
             };
            
             ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(containerProperties);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt; CreateContainerIfNotExistsAsync (string id, string partitionKeyPath, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ContainerResponse&gt; CreateContainerIfNotExistsAsync(string id, string partitionKeyPath, valuetype System.Nullable`1&lt;int32&gt; throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(System.String,System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateContainerIfNotExistsAsync (id As String, partitionKeyPath As String, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerIfNotExistsAsync : string * string * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;" Usage="cosmosDatabase.CreateContainerIfNotExistsAsync (id, partitionKeyPath, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="partitionKeyPath" Type="System.String" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id</param>
        <param name="partitionKeyPath">The path to the partition key. Example: /location</param>
        <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Request Units per second in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Check if a container exists, and if it doesn't, create it.
             This will make a read operation, and if the container is not found it will do a create operation.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which wraps a <see cref="T:Azure.Cosmos.ContainerProperties" /> containing the read resource record.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
             </remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</description></item><item><term>403</term><description>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.ContainerProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(Guid.NewGuid().ToString(), "/pk");
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="CreateContainerStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateContainerStreamAsync (Azure.Cosmos.ContainerProperties containerProperties, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateContainerStreamAsync(class Azure.Cosmos.ContainerProperties containerProperties, valuetype System.Nullable`1&lt;int32&gt; throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateContainerStreamAsync(Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateContainerStreamAsync (containerProperties As ContainerProperties, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateContainerStreamAsync : Azure.Cosmos.ContainerProperties * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="cosmosDatabase.CreateContainerStreamAsync (containerProperties, throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerProperties" Type="Azure.Cosmos.ContainerProperties" />
        <Parameter Name="throughput" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="containerProperties">The <see cref="T:Azure.Cosmos.ContainerProperties" /> object.</param>
        <param name="throughput">(Optional) The throughput provisioned for a container in measurement of Request Units per second in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> containing the created resource record.</returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
             </remarks>
        <example>
             Creates a container as an asynchronous operation in the Azure Cosmos service and return stream response.
             <code language="c#"><![CDATA[
             ContainerProperties containerProperties = new ContainerProperties()
             {
                 Id = Guid.NewGuid().ToString(),
                 PartitionKeyPath = "/pk",
             };
            
             using(Response response = await this.cosmosDatabase.CreateContainerStreamAsync(containerProperties))
             {
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt; CreateUserAsync (string id, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.UserResponse&gt; CreateUserAsync(string id, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.CreateUserAsync(System.String,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateUserAsync (id As String, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of UserResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreateUserAsync : string * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;" Usage="cosmosDatabase.CreateUserAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos user id</param>
        <param name="requestOptions">(Optional) The options for the user request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a user as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.UserResponse" /> which wraps a <see cref="T:Azure.Cosmos.UserProperties" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new user.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.UserProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             UserResponse response = await this.cosmosDatabase.CreateUserAsync(Guid.NewGuid().ToString());
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DefineContainer">
      <MemberSignature Language="C#" Value="public abstract Azure.Cosmos.Fluent.ContainerBuilder DefineContainer (string name, string partitionKeyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Cosmos.Fluent.ContainerBuilder DefineContainer(string name, string partitionKeyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.DefineContainer(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DefineContainer (name As String, partitionKeyPath As String) As ContainerBuilder" />
      <MemberSignature Language="F#" Value="abstract member DefineContainer : string * string -&gt; Azure.Cosmos.Fluent.ContainerBuilder" Usage="cosmosDatabase.DefineContainer (name, partitionKeyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Cosmos.Fluent.ContainerBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="partitionKeyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Azure Cosmos container name to create.</param>
        <param name="partitionKeyPath">The path to the partition key. Example: /partitionKey</param>
        <summary>
             Creates a containerBuilder.
             </summary>
        <returns>A fluent definition of an Azure Cosmos container.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
             ContainerResponse container = await this.cosmosDatabase.DefineContainer("TestContainer", "/partitionKey")
                 .UniqueKey()
                     .Path("/path1")
                     .Path("/path2")
                     .Attach()
                 .IndexingPolicy()
                     .IndexingMode(IndexingMode.Consistent)
                     .AutomaticIndexing(false)
                     .IncludedPaths()
                         .Path("/includepath1")
                         .Path("/includepath2")
                         .Attach()
                     .ExcludedPaths()
                         .Path("/excludepath1")
                         .Path("/excludepath2")
                         .Attach()
                     .CompositeIndex()
                         .Path("/root/leaf1")
                         .Path("/root/leaf2", CompositePathSortOrder.Descending)
                         .Attach()
                     .CompositeIndex()
                         .Path("/root/leaf3")
                         .Path("/root/leaf4")
                         .Attach()
                     .Attach()
                 .CreateAsync(5000 /* throughput /*); 
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt; DeleteAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.DatabaseResponse&gt; DeleteAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.DeleteAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DatabaseResponse)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt;" Usage="cosmosDatabase.DeleteAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Delete a cosmos database
            Database database = cosmosClient.GetDatabase("myDbId");
            DatabaseResponse response = await database.DeleteAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteStreamAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteStreamAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.DeleteStreamAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteStreamAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteStreamAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="cosmosDatabase.DeleteStreamAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            //Delete a Database resource where
            // - database_id is the ID property of the Database resource you wish to delete.
            Database database = this.cosmosClient.GetDatabase(database_id);
            await database.DeleteStreamAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetContainer">
      <MemberSignature Language="C#" Value="public abstract Azure.Cosmos.CosmosContainer GetContainer (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Cosmos.CosmosContainer GetContainer(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetContainer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetContainer (id As String) As CosmosContainer" />
      <MemberSignature Language="F#" Value="abstract member GetContainer : string -&gt; Azure.Cosmos.CosmosContainer" Usage="cosmosDatabase.GetContainer id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Cosmos.CosmosContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos container id.</param>
        <summary>
            Returns a reference to a container object. 
            </summary>
        <returns>Cosmos container reference</returns>
        <remarks>
            Returns a Container reference. Reference doesn't guarantees existence.
            Please ensure container already exists or is created through a create operation.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            Database db = this.cosmosClient.GetDatabase("myDatabaseId");
            DatabaseResponse response = await db.GetContainer("testcontainer");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetContainerQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetContainerQueryIterator&lt;T&gt; (Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetContainerQueryIterator&lt;T&gt;(class Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetContainerQueryIterator``1(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetContainerQueryIterator(Of T) (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerQueryIterator : Azure.Cosmos.QueryDefinition * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosDatabase.GetContainerQueryIterator (queryDefinition, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryDefinition">The cosmos SQL query definition.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the containers</returns>
        <remarks>To be added.</remarks>
        <example>
            This create the type feed iterator for containers with queryDefinition as input.
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testDatabaseId");
            await foreach(ContainerProperties properties in this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>(queryDefinition))
            {
                Console.WriteLine(properties.Id);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetContainerQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetContainerQueryIterator&lt;T&gt; (string queryText = default, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetContainerQueryIterator&lt;T&gt;(string queryText, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetContainerQueryIterator``1(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetContainerQueryIterator(Of T) (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerQueryIterator : string * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosDatabase.GetContainerQueryIterator (queryText, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryText">The cosmos SQL query text.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the item query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the containers</returns>
        <remarks>To be added.</remarks>
        <example>
            1. This create the type feed iterator for containers with queryText as input,
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            await foreach(ContainerProperties properties in this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>(querytext))
            {
                Console.WriteLine(properties.Id);
            }
            ]]></code></example>
        <example>
            2. This create the type feed iterator for containers without queryText, retrieving all containers.
            <code language="c#"><![CDATA[
            await foreach(ContainerProperties properties in this.cosmosDatabase.GetContainerQueryIterator<ContainerProperties>())
            {
                Console.WriteLine(properties.Id);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetContainerQueryStreamIterator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt; GetContainerQueryStreamIterator (Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.Response&gt; GetContainerQueryStreamIterator(class Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetContainerQueryStreamIterator(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetContainerQueryStreamIterator (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerQueryStreamIterator : Azure.Cosmos.QueryDefinition * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt;" Usage="cosmosDatabase.GetContainerQueryStreamIterator (queryDefinition, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDefinition">The cosmos SQL query definition.</param>
        <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the containers</returns>
        <remarks>To be added.</remarks>
        <example>
            This create the stream feed iterator for containers with queryDefinition as input.
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            await foreach(Response response in this.cosmosDatabase.GetContainerQueryStreamIterator(queryDefinition))
            {
                using (StreamReader sr = new StreamReader(response.Content))
                using (JsonTextReader jtr = new JsonTextReader(sr))
                {
                    JObject result = JObject.Load(jtr);
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetContainerQueryStreamIterator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt; GetContainerQueryStreamIterator (string queryText = default, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.Response&gt; GetContainerQueryStreamIterator(string queryText, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetContainerQueryStreamIterator(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetContainerQueryStreamIterator (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetContainerQueryStreamIterator : string * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt;" Usage="cosmosDatabase.GetContainerQueryStreamIterator (queryText, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryText">The cosmos SQL query text.</param>
        <param name="continuationToken">The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             This method creates a query for containers under an database using a SQL statement. It returns a FeedIterator.
             For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
             </summary>
        <returns>An iterator to go through the containers</returns>
        <remarks>To be added.</remarks>
        <example>
             1. This create the stream feed iterator for containers with queryText as input.
             <code language="c#"><![CDATA[
             string queryText = "SELECT * FROM c where c.id like '%testId%'";
             await foreach (Response response in this.cosmosDatabase.GetContainerQueryStreamIterator(queryText))
             {
            
             }
             ]]></code></example>
        <example>
             2. This create the stream feed iterator for containers without queryText, retrieving all container.
             <code language="c#"><![CDATA[
             await foreach (Response response in this.cosmosDatabase.GetContainerQueryStreamIterator())
             {
            
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public abstract Azure.Cosmos.CosmosUser GetUser (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Cosmos.CosmosUser GetUser(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUser (id As String) As CosmosUser" />
      <MemberSignature Language="F#" Value="abstract member GetUser : string -&gt; Azure.Cosmos.CosmosUser" Usage="cosmosDatabase.GetUser id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Cosmos.CosmosUser</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos user id.</param>
        <summary>
            Returns a reference to a user object.
            </summary>
        <returns>Cosmos user reference</returns>
        <remarks>
            Returns a User reference. Reference doesn't guarantees existence.
            Please ensure user already exists or is created through a create operation.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            Database db = this.cosmosClient.GetDatabase("myDatabaseId");
            User user = await db.GetUser("userId");
            UserResponse response = await user.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetUserQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetUserQueryIterator&lt;T&gt; (Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetUserQueryIterator&lt;T&gt;(class Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetUserQueryIterator``1(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUserQueryIterator(Of T) (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetUserQueryIterator : Azure.Cosmos.QueryDefinition * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosDatabase.GetUserQueryIterator (queryDefinition, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryDefinition">The cosmos SQL query definition.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for users under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the users</returns>
        <remarks>To be added.</remarks>
        <example>
            This create the type feed iterator for users with queryDefinition as input.
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testUserId");
            await foreach(UserProperties properties in this.cosmosDatabase.GetUserQueryIterator<UserProperties>(queryDefinition))
            {
                Console.WriteLine(properties.Id);
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUserQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetUserQueryIterator&lt;T&gt; (string queryText = default, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetUserQueryIterator&lt;T&gt;(string queryText, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.GetUserQueryIterator``1(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUserQueryIterator(Of T) (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetUserQueryIterator : string * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosDatabase.GetUserQueryIterator (queryText, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryText">The cosmos SQL query text.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for users under an database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the users</returns>
        <remarks>To be added.</remarks>
        <example>
            1. This create the type feed iterator for users with queryText as input,
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            await foreach (UserProperties properties in this.cosmosDatabase.GetUserQueryIterator<UserProperties>(queryText))
            {
                
            }
            ]]></code></example>
        <example>
            2. This create the type feed iterator for users without queryText, retrieving all users.
            <code language="c#"><![CDATA[
            await foreach (UserProperties properties in this.cosmosDatabase.GetUserQueryIterator<ContainerProperties>())
            {
            
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Azure.Cosmos.CosmosDatabase.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="Azure.Cosmos.CosmosDatabase.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Id of the Cosmos database
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt; ReadAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.DatabaseResponse&gt; ReadAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.ReadAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DatabaseResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt;" Usage="cosmosDatabase.ReadAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.DatabaseResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.DatabaseResponse" /> which wraps a <see cref="T:Azure.Cosmos.DatabaseProperties" /> containing the read resource record.
            </returns>
        <remarks>
          <para>
            Doing a read of a resource is the most efficient way to get a resource from the Database. If you know the resource's ID, do a read instead of a query by ID.
            </para>
        </remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            Database database = this.cosmosClient.GetDatabase(database_id);
            DatabaseResponse response = await database.ReadAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Response&gt; ReadStreamAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReadStreamAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.ReadStreamAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadStreamAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReadStreamAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="cosmosDatabase.ReadStreamAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the container request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Azure.Cosmos.DatabaseProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Response" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            //Reads a Database resource where
            // - database_id is the ID property of the Database resource you wish to read.
            Database database = this.cosmosClient.GetDatabase(database_id);
            Response response = await database.ReadContainerStreamAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt; ReadThroughputAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; ReadThroughputAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.ReadThroughputAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadThroughputAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Nullable(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ReadThroughputAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;int&gt;&gt;" Usage="cosmosDatabase.ReadThroughputAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets database throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>Provisioned throughput in request units per second</returns>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Null value indicates a database with no throughput provisioned.
            
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /><seealso href="https://docs.microsoft.com/azure/cosmos-db/set-throughput#set-throughput-on-a-database" /></para>
        </remarks>
        <example>
            The following example shows how to get database throughput.
            <code language="c#"><![CDATA[
            int? throughput = await database.ReadThroughputAsync();
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt; ReadThroughputAsync (Azure.Cosmos.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ThroughputResponse&gt; ReadThroughputAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.ReadThroughputAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadThroughputAsync (requestOptions As RequestOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ThroughputResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadThroughputAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt;" Usage="cosmosDatabase.ReadThroughputAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">The options for the throughput request.<see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Gets database throughput in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>The throughput response.</returns>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <para>
            Null value indicates a database with no throughput provisioned.
            
            <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /><seealso href="https://docs.microsoft.com/azure/cosmos-db/set-throughput#set-throughput-on-a-database" /></para>
        </remarks>
        <example>
            The following example shows how to get the throughput
            <code language="c#"><![CDATA[
             RequestOptions requestOptions = new RequestOptions();
            ThroughputProperties throughputProperties = await database.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {throughputProperties?.Throughput}");
            ]]></code></example>
        <example>
            The following example shows how to get throughput, MinThroughput and is replace in progress
            <code language="c#"><![CDATA[
            RequestOptions requestOptions = new RequestOptions();
            ThroughputResponse response = await database.ReadThroughputAsync(requestOptions);
            Console.WriteLine($"Throughput: {response.Value?.Throughput}");
            Console.WriteLine($"MinThroughput: {response.MinThroughput}");
            Console.WriteLine($"IsReplacePending: {response.IsReplacePending}");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceThroughputAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync (int throughput, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.ThroughputResponse&gt; ReplaceThroughputAsync(int32 throughput, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.ReplaceThroughputAsync(System.Int32,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceThroughputAsync (throughput As Integer, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ThroughputResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceThroughputAsync : int * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt;" Usage="cosmosDatabase.ReplaceThroughputAsync (throughput, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.ThroughputResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="throughput" Type="System.Int32" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="throughput">The cosmos database throughput expressed in Request Units per second.</param>
        <param name="requestOptions">(Optional) The options for the throughput request.<see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Sets throughput provisioned for a database in measurement of request units per second in the Azure Cosmos service.
            </summary>
        <returns>The throughput response.</returns>
        <returns>
            The provisioned throughput for this database.
            </returns>
        <remarks>
          <seealso href="https://docs.microsoft.com/azure/cosmos-db/request-units" /> for details on provision throughput.
            </remarks>
        <example>
            The following example shows how to get the throughput.
            <code language="c#"><![CDATA[
            ThroughputResponse throughput = await this.cosmosDatabase.ReplaceThroughputAsync(10000);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpsertUserAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt; UpsertUserAsync (string id, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.UserResponse&gt; UpsertUserAsync(string id, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosDatabase.UpsertUserAsync(System.String,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UpsertUserAsync (id As String, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of UserResponse)" />
      <MemberSignature Language="F#" Value="abstract member UpsertUserAsync : string * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;" Usage="cosmosDatabase.UpsertUserAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos user id.</param>
        <param name="requestOptions">(Optional) The options for the user request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Upserts a user as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.UserResponse" /> which wraps a <see cref="T:Azure.Cosmos.UserProperties" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new user.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             UserResponse response = await this.cosmosDatabase.UpsertUserAsync(Guid.NewGuid().ToString());
             ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
