<Type Name="CosmosUser" FullName="Azure.Cosmos.CosmosUser">
  <TypeSignature Language="C#" Value="public abstract class CosmosUser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CosmosUser extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Cosmos.CosmosUser" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CosmosUser" />
  <TypeSignature Language="F#" Value="type CosmosUser = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Cosmos</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operations for reading, replacing, or deleting a specific existing user by id and query a user's permissions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CosmosUser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePermissionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt; CreatePermissionAsync (Azure.Cosmos.PermissionProperties permissionProperties, int? tokenExpiryInSeconds = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.PermissionResponse&gt; CreatePermissionAsync(class Azure.Cosmos.PermissionProperties permissionProperties, valuetype System.Nullable`1&lt;int32&gt; tokenExpiryInSeconds, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.CreatePermissionAsync(Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreatePermissionAsync (permissionProperties As PermissionProperties, Optional tokenExpiryInSeconds As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of PermissionResponse)" />
      <MemberSignature Language="F#" Value="abstract member CreatePermissionAsync : Azure.Cosmos.PermissionProperties * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt;" Usage="cosmosUser.CreatePermissionAsync (permissionProperties, tokenExpiryInSeconds, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionProperties" Type="Azure.Cosmos.PermissionProperties" />
        <Parameter Name="tokenExpiryInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="permissionProperties">The <see cref="T:Azure.Cosmos.PermissionProperties" /> object.</param>
        <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
        <param name="requestOptions">(Optional) The options for the permission request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a permission as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.PermissionResponse" /> which wraps a <see cref="T:Azure.Cosmos.PermissionProperties" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new permission.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Azure.Cosmos.PermissionProperties" /> with an id matching the id you supplied already existed.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             PermissionProperties permissionProperties = new PermissionProperties("permissionId", PermissionMode.All, database.GetContainer("containerId"), new PartitionKey("tenantId"))";
             
             PermissionResponse response = await this.cosmosDatabase.GetUser("userId").CreatePermissionAsync(permissionProperties, tokenExpiryInSeconds: 9000);
             ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt; DeleteAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.UserResponse&gt; DeleteAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.DeleteAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function DeleteAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of UserResponse)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;" Usage="cosmosUser.DeleteAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the user request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Azure.Cosmos.UserProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.UserResponse" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource or parent resource you tried to delete did not exist.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            CosmosUser user = this.database.GetUser("userId");
            UserResponse response = await user.DeleteUserAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetPermission">
      <MemberSignature Language="C#" Value="public abstract Azure.Cosmos.CosmosPermission GetPermission (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Cosmos.CosmosPermission GetPermission(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.GetPermission(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPermission (id As String) As CosmosPermission" />
      <MemberSignature Language="F#" Value="abstract member GetPermission : string -&gt; Azure.Cosmos.CosmosPermission" Usage="cosmosUser.GetPermission id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Cosmos.CosmosPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The cosmos permission id.</param>
        <summary>
            Returns a reference to a permission object. 
            </summary>
        <returns>Cosmos permission reference</returns>
        <remarks>
            Returns a Permission reference. Reference doesn't guarantees existence.
            Please ensure permssion already exists or is created through a create operation.
            </remarks>
        <example>
          <code language="c#"><![CDATA[
            User user = this.cosmosClient.GetDatabase("myDatabaseId").GetUser("userId");
            PermissionResponse response = await user.GetPermssion("permissionId");
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetPermissionQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetPermissionQueryIterator&lt;T&gt; (Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetPermissionQueryIterator&lt;T&gt;(class Azure.Cosmos.QueryDefinition queryDefinition, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.GetPermissionQueryIterator``1(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPermissionQueryIterator(Of T) (queryDefinition As QueryDefinition, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetPermissionQueryIterator : Azure.Cosmos.QueryDefinition * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosUser.GetPermissionQueryIterator (queryDefinition, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryDefinition" Type="Azure.Cosmos.QueryDefinition" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryDefinition">The cosmos SQL query definition.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for permissions under a database using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the permissions</returns>
        <remarks>
            Reading permissions will generate a new ResourceTokens. Prior ResourceTokens will still be valid.
            </remarks>
        <example>
            This create the type feed iterator for permissions with queryDefinition as input.
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like @testId";
            QueryDefinition queryDefinition = new QueryDefinition(queryText);
            queryDefinition.WithParameter("@testId", "testPermissionId");
            FeedIterator<PermissionProperties> resultSet = this.user.GetPermissionQueryIterator<PermissionProperties>(queryDefinition);
            await foreach (PermissionProperties permissions in resultSet)
            {
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPermissionQueryIterator&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract Azure.AsyncPageable&lt;T&gt; GetPermissionQueryIterator&lt;T&gt; (string queryText = default, string continuationToken = default, Azure.Cosmos.QueryRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;!!T&gt; GetPermissionQueryIterator&lt;T&gt;(string queryText, string continuationToken, class Azure.Cosmos.QueryRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.GetPermissionQueryIterator``1(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPermissionQueryIterator(Of T) (Optional queryText As String = Nothing, Optional continuationToken As String = Nothing, Optional requestOptions As QueryRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetPermissionQueryIterator : string * string * Azure.Cosmos.QueryRequestOptions * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;'T&gt;" Usage="cosmosUser.GetPermissionQueryIterator (queryText, continuationToken, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryText" Type="System.String" />
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.QueryRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryText">The cosmos SQL query text.</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <param name="requestOptions">(Optional) The options for the user query request <see cref="T:Azure.Cosmos.QueryRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            This method creates a query for permission under a user using a SQL statement. It returns a FeedIterator.
            For more information on preparing SQL statements with parameterized values, please see <see cref="T:Azure.Cosmos.QueryDefinition" /> overload.
            </summary>
        <returns>An iterator to go through the permission</returns>
        <remarks>To be added.</remarks>
        <example>
            1. This create the type feed iterator for permission with queryText as input,
            <code language="c#"><![CDATA[
            string queryText = "SELECT * FROM c where c.id like '%testId%'";
            FeedIterator<PermissionProperties> resultSet = this.users.GetPermissionQueryIterator<PermissionProperties>(queryText);
            await foreach (PermissionProperties permissions in resultSet)
            {
            }
            ]]></code></example>
        <example>
            2. This create the type feed iterator for permissions without queryText, retrieving all permissions.
            <code language="c#"><![CDATA[
            FeedIterator<PermissionProperties> resultSet = this.user.GetPermissionQueryIterator<PermissionProperties>();
            await foreach (PermissionProperties permissions in resultSet)
            {
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public abstract string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Azure.Cosmos.CosmosUser.Id" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="Azure.Cosmos.CosmosUser.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Id of the Cosmos user
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt; ReadAsync (Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.UserResponse&gt; ReadAsync(class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.ReadAsync(Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadAsync (Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of UserResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;" Usage="cosmosUser.ReadAsync (requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestOptions">(Optional) The options for the user request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Azure.Cosmos.UserProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.UserResponse" /> which wraps a <see cref="T:Azure.Cosmos.UserProperties" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            CosmosUser user = this.database.GetUser("userId");
            UserProperties userProperties = await user.ReadUserAsync();
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt; ReplaceAsync (Azure.Cosmos.UserProperties userProperties, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.UserResponse&gt; ReplaceAsync(class Azure.Cosmos.UserProperties userProperties, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.ReplaceAsync(Azure.Cosmos.UserProperties,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReplaceAsync (userProperties As UserProperties, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of UserResponse)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceAsync : Azure.Cosmos.UserProperties * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;" Usage="cosmosUser.ReplaceAsync (userProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.UserResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userProperties" Type="Azure.Cosmos.UserProperties" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userProperties">The <see cref="T:Azure.Cosmos.UserProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the user request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replace a <see cref="T:Azure.Cosmos.UserProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.UserResponse" /> which wraps a <see cref="T:Azure.Cosmos.UserProperties" /> containing the replace resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource or parent resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
            UserProperties userProperties = userReadResponse;
            userProperties.Id = "newuser";
            UserResponse response = await user.ReplaceUserAsync(userProperties);
            UserProperties replacedProperties = response;
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="UpsertPermissionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt; UpsertPermissionAsync (Azure.Cosmos.PermissionProperties permissionProperties, int? tokenExpiryInSeconds = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Cosmos.PermissionResponse&gt; UpsertPermissionAsync(class Azure.Cosmos.PermissionProperties permissionProperties, valuetype System.Nullable`1&lt;int32&gt; tokenExpiryInSeconds, class Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Cosmos.CosmosUser.UpsertPermissionAsync(Azure.Cosmos.PermissionProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function UpsertPermissionAsync (permissionProperties As PermissionProperties, Optional tokenExpiryInSeconds As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of PermissionResponse)" />
      <MemberSignature Language="F#" Value="abstract member UpsertPermissionAsync : Azure.Cosmos.PermissionProperties * Nullable&lt;int&gt; * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt;" Usage="cosmosUser.UpsertPermissionAsync (permissionProperties, tokenExpiryInSeconds, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Cosmos</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Cosmos.PermissionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissionProperties" Type="Azure.Cosmos.PermissionProperties" />
        <Parameter Name="tokenExpiryInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="requestOptions" Type="Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="permissionProperties">The <see cref="T:Azure.Cosmos.PermissionProperties" /> object.</param>
        <param name="tokenExpiryInSeconds">(Optional) The expiry time for resource token in seconds. This value can range from 10 seconds, to 24 hours (or 86,400 seconds). The default value for this is 1 hour (or 3,600 seconds). This does not change the default value for future tokens.</param>
        <param name="requestOptions">(Optional) The options for the permission request <see cref="T:Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Upsert a permission as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Azure.Cosmos.PermissionResponse" /> which wraps a <see cref="T:Azure.Cosmos.PermissionProperties" /> containing the read resource record.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a permission are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new permission.</description></item></list></exception>
        <example>
          <code language="c#"><![CDATA[
             PermissionProperties permissionProperties = new PermissionProperties("permissionId", PermissionMode.All, database.GetContainer("containerId"), new PartitionKey("tenantId"))";
             
             PermissionResponse response = await this.cosmosDatabase.GetUser("userId").UpsertPermissionAsync(permissionProperties, tokenExpiryInSeconds: 9000);
             ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>
