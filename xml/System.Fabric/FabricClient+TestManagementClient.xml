<Type Name="FabricClient+TestManagementClient" FullName="System.Fabric.FabricClient+TestManagementClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.TestManagementClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/TestManagementClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.TestManagementClient" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides methods for issuing and controlling test commands.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CancelTestCommandAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CancelTestCommandAsync (Guid operationId, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CancelTestCommandAsync(valuetype System.Guid operationId, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="operationId">Indicates the operationId of the test command to cancel.</param>
        <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
        <summary>
            Cancels a test command.
            </summary>
        <returns>A Task.</returns>
        <remarks>
          <para>
            If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
            been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
            Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
            test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  
            It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            </para>
          <para>
            Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTestCommandAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CancelTestCommandAsync (Guid operationId, bool force, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CancelTestCommandAsync(valuetype System.Guid operationId, bool force, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">Indicates the operationId of the test command to cancel.</param>
        <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Cancels a test command.
            </summary>
        <returns>A Task.</returns>
        <remarks>
          <para>
            If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
            been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
            Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
            test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  
            It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
            </para>
          <para>
            Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTestCommandAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CancelTestCommandAsync (Guid operationId, bool force, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CancelTestCommandAsync(valuetype System.Guid operationId, bool force, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId">Indicates the operationId of the test command to cancel.</param>
        <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
        <param name="timeout">The timeout to use for the API call.</param>
        <summary>
            Cancels a test command.
            </summary>
        <returns>A Task.</returns>
        <remarks>
          <para>
            If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
            been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
            Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
            test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  
            It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
            </para>
          <para>
            Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTestCommandAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CancelTestCommandAsync (Guid operationId, bool force, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CancelTestCommandAsync(valuetype System.Guid operationId, bool force, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">Indicates the operationId of the test command to cancel.</param>
        <param name="force">Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.</param>
        <param name="timeout">The timeout to use for the API call.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Cancels a test command.
            </summary>
        <returns>A Task.</returns>
        <remarks>
          <para>
            If force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has
            been called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.
            Clarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the
            test command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  
            It will not restore the target partition's data, if the command progressed far enough to cause data loss.
            
            
            
            </para>
          <para>
            Important note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanTestStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CleanTestStateAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CleanTestStateAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Cleans up all the test state in the cluster.
            </summary>
        <returns>Task</returns>
        <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations; like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
      </Docs>
    </Member>
    <Member MemberName="CleanTestStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CleanTestStateAsync (TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CleanTestStateAsync(valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <param name="token">Cancellation token</param>
        <summary>
            Cleans up all the test state in the cluster.
            </summary>
        <returns>Task</returns>
        <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted .
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChaosReportAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync (System.Fabric.Chaos.DataStructures.ChaosReportFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync(class System.Fabric.Chaos.DataStructures.ChaosReportFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Fabric.Chaos.DataStructures.ChaosReportFilter" />
      </Parameters>
      <Docs>
        <param name="filter">Filter for the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" />s to be included in the report.</param>
        <summary>
            Retrieves the report of Chaos runs.
            </summary>
        <returns>Report of Chaos runs.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.Fabric.FabricException">These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChaosReportAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync (string continuationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync(string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="continuationToken">Continuation token for the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" />s in the 
            <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport" />.</param>
        <summary>
            Retrieves the report of Chaos runs.
            </summary>
        <returns>Report of Chaos runs.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChaosReportAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync (System.Fabric.Chaos.DataStructures.ChaosReportFilter filter, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync(class System.Fabric.Chaos.DataStructures.ChaosReportFilter filter, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Fabric.Chaos.DataStructures.ChaosReportFilter" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter">Filter for the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" />s
            to be included in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport" />.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <param name="cancellationToken">Cancellation token.</param>
        <summary>
            Retrieves the report of Chaos runs.
            </summary>
        <returns>Report of Chaos runs.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChaosReportAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync (string continuationToken, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Chaos.DataStructures.ChaosReport&gt; GetChaosReportAsync(string continuationToken, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Chaos.DataStructures.ChaosReport&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationToken" Type="System.String" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationToken">Continuation token for the list of <see cref="T:System.Fabric.Chaos.DataStructures.ChaosEvent" />s in the <see cref="T:System.Fabric.Chaos.DataStructures.ChaosReport" />.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <param name="cancellationToken">Cancellation token.</param>
        <summary>
            Retrieves the report of Chaos runs.
            </summary>
        <returns>Report of Chaos runs.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">These are Service Fabric exceptions and the following error codes should be inspected.
            FabricErrorCode.NotReady - if this API is called before starting Chaos.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeTransitionProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.NodeTransitionProgress&gt; GetNodeTransitionProgressAsync (Guid operationId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.NodeTransitionProgress&gt; GetNodeTransitionProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.NodeTransitionProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was started using StartNodeTransitionAsync().</param>
        <param name="timeout">Timeout.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a command started using StartNodeTransitionAsync().
            </summary>
        <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionDataLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync (Guid operationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync(valuetype System.Guid operationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
        <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
        <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionDataLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync (Guid operationId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync(valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
        <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionDataLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync (Guid operationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
        <param name="timeout">Timeout.</param>
        <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
        <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionDataLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync (Guid operationId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionDataLossProgress&gt; GetPartitionDataLossProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionDataLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
        <param name="timeout">Timeout.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
        <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionDataLossProgress.State == Faulted, examine PartitionDataLossProgress.Result.Exception to determine why.
            PartitionDataLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionQuorumLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync (Guid operationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync(valuetype System.Guid operationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
        <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
        <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionQuorumLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync (Guid operationId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync(valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
        <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionQuorumLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync (Guid operationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
        <param name="timeout">Timeout.</param>
        <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
        <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionQuorumLossProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync (Guid operationId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionQuorumLossProgress&gt; GetPartitionQuorumLossProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionQuorumLossProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
        <param name="timeout">Timeout.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
        <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>
            If the returned PartitionQuorumLossProgress.State == Faulted, examine PartitionQuorumLossProgress.Result.Exception to determine why.
            PartitionQuorumLossProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
                - FabricInvalidForStatelessServicesException - this operation is not valid for stateless services.
                - FabricOnlyValidForStatefulPersistentServicesException - this operation is not valid for stateful in-memory services.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionRestartProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync (Guid operationId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync(valuetype System.Guid operationId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
        <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
        <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionRestartProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync (Guid operationId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync(valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
        <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionRestartProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync (Guid operationId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
        <param name="timeout">Timeout.</param>
        <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
        <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionRestartProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync (Guid operationId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.PartitionRestartProgress&gt; GetPartitionRestartProgressAsync(valuetype System.Guid operationId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.PartitionRestartProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
        <param name="timeout">Timeout.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
        <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        <remarks>
          <para>The FaultAnalysisService must be enabled to use this API.</para>
          <para>If the returned PartitionRestartProgress.State == Faulted, examine PartitionRestartProgress.Result.Exception to determine why.
            PartitionRestartProgress.Result.Exception values:
              - ArgumentException - the input was invalid.
              - FabricException, with an ErrorCode property of:
                - PartitionNotFound - the specified partition was not found, or is not a partition that belongs to the specified service.       
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationTimeout">A timeout for the API call.</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationTimeout">A timeout for the API call.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (System.Fabric.Query.TestCommandStateFilter stateFilter, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.Fabric.Query.TestCommandStateFilter stateFilter, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateFilter" Type="System.Fabric.Query.TestCommandStateFilter" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
        <param name="operationTimeout">A timeout for the API call.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (System.Fabric.Query.TestCommandTypeFilter typeFilter, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.Fabric.Query.TestCommandTypeFilter typeFilter, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeFilter" Type="System.Fabric.Query.TestCommandTypeFilter" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
        <param name="operationTimeout">A timeout for the API call.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCommandStatusListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync (System.Fabric.Query.TestCommandStateFilter stateFilter, System.Fabric.Query.TestCommandTypeFilter typeFilter, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.TestCommandStatusList&gt; GetTestCommandStatusListAsync(valuetype System.Fabric.Query.TestCommandStateFilter stateFilter, valuetype System.Fabric.Query.TestCommandTypeFilter typeFilter, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.TestCommandStatusList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateFilter" Type="System.Fabric.Query.TestCommandStateFilter" />
        <Parameter Name="typeFilter" Type="System.Fabric.Query.TestCommandTypeFilter" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
        <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
        <param name="operationTimeout">A timeout for the API call.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            Gets the status of test commands.
            </summary>
        <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="operationTimeout">The overall timeout for the operation</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeDataLossResult&gt; InvokeDataLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeDataLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="operationTimeout">The overall timeout for the operation</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult" /></returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.                 
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="cancellationToken">The cancellation token for the operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult" /></returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="operationTimeout">Overall timeout for the entire operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult" /></returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumlossMode, TimeSpan quorumlossDuration, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.InvokeQuorumLossResult&gt; InvokeQuorumLossAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumlossMode, valuetype System.TimeSpan quorumlossDuration, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.InvokeQuorumLossResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumlossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumlossDuration" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="operationTimeout">Overall timeout for the entire operation.</param>
        <param name="cancellationToken">The cancellation token for the operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult" /></returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartPartitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync (System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartPartitionResult&gt; RestartPartitionAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartPartitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Important note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  
            If this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
      </Docs>
    </Member>
    <Member MemberName="StartChaosAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartChaosAsync (System.Fabric.Chaos.DataStructures.ChaosParameters chaosParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartChaosAsync(class System.Fabric.Chaos.DataStructures.ChaosParameters chaosParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chaosParameters" Type="System.Fabric.Chaos.DataStructures.ChaosParameters" />
      </Parameters>
      <Docs>
        <param name="chaosParameters">
          <see cref="T:System.Fabric.Chaos.DataStructures.ChaosParameters" /> contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent fautls, etc. </param>
        <summary>
            This API will start Chaos with the supplied parameter values.
            </summary>
        <returns>A task.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricChaosAlreadyRunningException">This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartChaosAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartChaosAsync (System.Fabric.Chaos.DataStructures.ChaosParameters chaosParameters, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartChaosAsync(class System.Fabric.Chaos.DataStructures.ChaosParameters chaosParameters, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chaosParameters" Type="System.Fabric.Chaos.DataStructures.ChaosParameters" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="chaosParameters"> Contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent faults, etc.</param>
        <param name="operationTimeout"> The overall timeout for the operation.</param>
        <param name="cancellationToken"> Cancellation token.</param>
        <summary>
            This API will start Chaos with the supplied parameter values.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricChaosAlreadyRunningException">This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeTransitionAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartNodeTransitionAsync (System.Fabric.Description.NodeTransitionDescription description, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNodeTransitionAsync(class System.Fabric.Description.NodeTransitionDescription description, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Fabric.Description.NodeTransitionDescription" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="description">An object which describes what type of node transition to perform.  The transition can be to start or stop a node.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellationToken</param>
        <summary>
            Starts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in an object of type NodeStartDescription into 
            the description parameter.  To stop a node, pass in an object of type NodeStopDescription.  After this API returns, call GetNodeTransitionProgressAsync()
            to get progress on the operation.
            </summary>
        <returns>A task</returns>
        <remarks>The FaultAnalysisService must be enabled to use this API.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.        
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.      
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionDataLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionDataLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API.</param>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />.
            PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            Note:  Once this API has been called, it cannot be reversed. Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures.
            FabricErrorCode.PartitionNotFound - If the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionDataLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionDataLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
          <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.  
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionDataLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionDataLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="operationTimeout">The overall timeout for the operation</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
          <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.  
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionDataLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionDataLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.DataLossMode dataLossMode, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionDataLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.DataLossMode dataLossMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="dataLossMode" Type="System.Fabric.DataLossMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector" /> to specify which partition data loss needs to be induced for.</param>
        <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode" /> i.e. the options for inducing data loss.</param>
        <param name="operationTimeout">The overall timeout for the operation</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode" />
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
          <para>
            Note:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.
            It will not restore data if the command has progressed far enough to cause data loss.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionQuorumLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionQuorumLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionQuorumLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionQuorumLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="cancellationToken">The cancellation token for the operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionQuorumLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionQuorumLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumLossMode, valuetype System.TimeSpan quorumLossDuration, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumLossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumLossDuration" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="operationTimeout">Overall timeout for the entire operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionQuorumLossAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionQuorumLossAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.QuorumLossMode quorumlossMode, TimeSpan quorumlossDuration, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionQuorumLossAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.QuorumLossMode quorumlossMode, valuetype System.TimeSpan quorumlossDuration, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="quorumlossMode" Type="System.Fabric.QuorumLossMode" />
        <Parameter Name="quorumlossDuration" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector" /></param>
        <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
        <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
        <param name="operationTimeout">Overall timeout for the entire operation.</param>
        <param name="cancellationToken">The cancellation token for the operation.</param>
        <summary>Induces quorum loss for a given stateful service partition. </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            FullQuorumLoss - All replicas for the target partition will be downed.
            PartialQuorumLoss - A quorum of replicas for the target partition will be downed..
            </para>
          <para>
            quorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.
            </para>
          <para>
            This API should only be called with a stateful service as the target.
            </para>
          <para>
            Calling this API with a system service as the target is not advised.
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.OperationCanceledException">Async operation is canceled.</exception>
        <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a stateful Persisted Service.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionRestartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionRestartAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionRestartAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the 
            <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API may be called on both stateful and stateless services.  
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object 
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        <exception cref="T:System.ArgumentException">The input was invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionRestartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionRestartAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionRestartAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API may be called on both stateful and stateless services.  
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object 
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
        <exception cref="T:System.ArgumentException">The input was invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionRestartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionRestartAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionRestartAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.TimeSpan operationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API may be called on both stateful and stateless services.  
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object 
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
        <exception cref="T:System.ArgumentException">The input was invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartPartitionRestartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartPartitionRestartAsync (Guid operationId, System.Fabric.PartitionSelector partitionSelector, System.Fabric.RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartPartitionRestartAsync(valuetype System.Guid operationId, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Fabric.RestartPartitionMode restartPartitionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.Guid" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="restartPartitionMode" Type="System.Fabric.RestartPartitionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
        <param name="partitionSelector">
          <see cref="T:System.Fabric.PartitionSelector" /> that specifies the partition which needs to be restarted.</param>
        <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode" /> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
        <param name="operationTimeout">The overall timeout for the operation.</param>
        <param name="cancellationToken">Cancellation token</param>
        <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode" />.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </para>
          <para>
            This API may be called on both stateful and stateless services.  
            If the call is on a stateless service, RestartPartitionMode must be RestartPartitionMode.AllReplicasOrInstances.  Other modes will result in ArgumentException inside the returned Result object 
            when GetPartitionRestartProgressAsync() is called.  See GetPartitionRestartProgressAsync().
            </para>
          <para>
            The FaultAnalysisService must be enabled to use this API.             
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode" /> set to OnlyActiveSecondaries.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
        <exception cref="T:System.ArgumentException">The input was invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopChaosAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopChaosAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopChaosAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            This API will stop Chaos.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopChaosAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopChaosAsync (TimeSpan operationTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopChaosAsync(valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationTimeout"> The overall timeout for the operation.</param>
        <param name="cancellationToken"> Cancellation token</param>
        <summary>
            This API will stop Chaos.
            </summary>
        <returns>A task.</returns>
        <remarks>
          <para>
            The FaultAnalysisService must be enabled to use this API.
            </para>
        </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateApplicationAsync (Uri applicationName, TimeSpan maximumStabilizationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateApplicationAsync(class System.Uri applicationName, valuetype System.TimeSpan maximumStabilizationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="applicationName">Name of the application whose services need to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
        <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateApplicationAsync (Uri applicationName, TimeSpan maximumStabilizationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateApplicationAsync(class System.Uri applicationName, valuetype System.TimeSpan maximumStabilizationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">Name of the application whose services need to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateApplicationAsync (Uri applicationName, TimeSpan maximumStabilizationTimeout, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateApplicationAsync(class System.Uri applicationName, valuetype System.TimeSpan maximumStabilizationTimeout, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">Name of the application whose services need to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
        <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateServiceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateServiceAsync (Uri serviceName, TimeSpan maximumStabilizationTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateServiceAsync(class System.Uri serviceName, valuetype System.TimeSpan maximumStabilizationTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="serviceName">Name of the service that needs to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
        <summary>
            This API will validate the availability and health of the specified service.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateServiceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateServiceAsync (Uri serviceName, TimeSpan maximumStabilizationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateServiceAsync(class System.Uri serviceName, valuetype System.TimeSpan maximumStabilizationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceName">Name of the service that needs to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will validate the availability and health of the specified service.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateServiceAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ValidateServiceAsync (Uri serviceName, TimeSpan maximumStabilizationTimeout, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ValidateServiceAsync(class System.Uri serviceName, valuetype System.TimeSpan maximumStabilizationTimeout, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="maximumStabilizationTimeout" Type="System.TimeSpan" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceName">Name of the service that needs to be validated.</param>
        <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
        <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will validate the availability and health of the specified service.
            </summary>
        <returns>Task</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
      </Docs>
    </Member>
  </Members>
</Type>