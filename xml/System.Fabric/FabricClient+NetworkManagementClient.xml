<Type Name="FabricClient+NetworkManagementClient" FullName="System.Fabric.FabricClient+NetworkManagementClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.NetworkManagementClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/NetworkManagementClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.NetworkManagementClient" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FabricClient.NetworkManagementClient" />
  <TypeSignature Language="F#" Value="type FabricClient.NetworkManagementClient = class" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides the functionality to manage Service Fabric container networks.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateNetworkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateNetworkAsync (string networkName, System.Fabric.Description.NetworkDescription networkDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CreateNetworkAsync(string networkName, class System.Fabric.Description.NetworkDescription networkDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.CreateNetworkAsync(System.String,System.Fabric.Description.NetworkDescription)" />
      <MemberSignature Language="F#" Value="member this.CreateNetworkAsync : string * System.Fabric.Description.NetworkDescription -&gt; System.Threading.Tasks.Task" Usage="networkManagementClient.CreateNetworkAsync (networkName, networkDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="networkName" Type="System.String" />
        <Parameter Name="networkDescription" Type="System.Fabric.Description.NetworkDescription" />
      </Parameters>
      <Docs>
        <param name="networkName">
          <para>The name of the container network.</para>
        </param>
        <param name="networkDescription">
          <para>The description of the container network.</para>
        </param>
        <summary>
          <para>Creates the specific Service Fabric container network.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNetworkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateNetworkAsync (string networkName, System.Fabric.Description.NetworkDescription networkDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CreateNetworkAsync(string networkName, class System.Fabric.Description.NetworkDescription networkDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.CreateNetworkAsync(System.String,System.Fabric.Description.NetworkDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.CreateNetworkAsync : string * System.Fabric.Description.NetworkDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkManagementClient.CreateNetworkAsync (networkName, networkDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="networkName" Type="System.String" />
        <Parameter Name="networkDescription" Type="System.Fabric.Description.NetworkDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="networkName">
          <para>The name of the container network.</para>
        </param>
        <param name="networkDescription">
          <para>The description of the container network.</para>
          <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
          </param>
        </param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Creates the specific Service Fabric container network.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNetworkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteNetworkAsync (System.Fabric.Description.DeleteNetworkDescription deleteNetworkDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteNetworkAsync(class System.Fabric.Description.DeleteNetworkDescription deleteNetworkDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.DeleteNetworkAsync(System.Fabric.Description.DeleteNetworkDescription)" />
      <MemberSignature Language="F#" Value="member this.DeleteNetworkAsync : System.Fabric.Description.DeleteNetworkDescription -&gt; System.Threading.Tasks.Task" Usage="networkManagementClient.DeleteNetworkAsync deleteNetworkDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteNetworkDescription" Type="System.Fabric.Description.DeleteNetworkDescription" />
      </Parameters>
      <Docs>
        <param name="deleteNetworkDescription">
          <para>The description of the container network to be deleted.</para>
        </param>
        <summary>
          <para>Deletes the specific Service Fabric container network.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNetworkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteNetworkAsync (System.Fabric.Description.DeleteNetworkDescription deleteNetworkDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteNetworkAsync(class System.Fabric.Description.DeleteNetworkDescription deleteNetworkDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.DeleteNetworkAsync(System.Fabric.Description.DeleteNetworkDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.DeleteNetworkAsync : System.Fabric.Description.DeleteNetworkDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkManagementClient.DeleteNetworkAsync (deleteNetworkDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteNetworkDescription" Type="System.Fabric.Description.DeleteNetworkDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="deleteNetworkDescription">
          <para>The description of the container network to be deleted.</para>
          <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
          </param>
        </param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Deletes the specific Service Fabric container network.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt; GetApplicationNetworkListAsync (System.Fabric.Description.ApplicationNetworkQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.ApplicationNetworkList&gt; GetApplicationNetworkListAsync(class System.Fabric.Description.ApplicationNetworkQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationNetworkListAsync (queryDescription As ApplicationNetworkQueryDescription) As Task(Of ApplicationNetworkList)" />
      <MemberSignature Language="F#" Value="member this.GetApplicationNetworkListAsync : System.Fabric.Description.ApplicationNetworkQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt;" Usage="networkManagementClient.GetApplicationNetworkListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ApplicationNetworkQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks an application is a member of. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt; GetApplicationNetworkListAsync (System.Fabric.Description.ApplicationNetworkQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.ApplicationNetworkList&gt; GetApplicationNetworkListAsync(class System.Fabric.Description.ApplicationNetworkQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetApplicationNetworkListAsync(System.Fabric.Description.ApplicationNetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetApplicationNetworkListAsync : System.Fabric.Description.ApplicationNetworkQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt;" Usage="networkManagementClient.GetApplicationNetworkListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.ApplicationNetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ApplicationNetworkQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks an application is a member of. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedNetworkCodePackageListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt; GetDeployedNetworkCodePackageListAsync (System.Fabric.Description.DeployedNetworkCodePackageQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.DeployedNetworkCodePackageList&gt; GetDeployedNetworkCodePackageListAsync(class System.Fabric.Description.DeployedNetworkCodePackageQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeployedNetworkCodePackageListAsync (queryDescription As DeployedNetworkCodePackageQueryDescription) As Task(Of DeployedNetworkCodePackageList)" />
      <MemberSignature Language="F#" Value="member this.GetDeployedNetworkCodePackageListAsync : System.Fabric.Description.DeployedNetworkCodePackageQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt;" Usage="networkManagementClient.GetDeployedNetworkCodePackageListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedNetworkCodePackageQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all code packages deployed in a container network on a node. If the code packages do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedNetworkCodePackageListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt; GetDeployedNetworkCodePackageListAsync (System.Fabric.Description.DeployedNetworkCodePackageQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.DeployedNetworkCodePackageList&gt; GetDeployedNetworkCodePackageListAsync(class System.Fabric.Description.DeployedNetworkCodePackageQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkCodePackageListAsync(System.Fabric.Description.DeployedNetworkCodePackageQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetDeployedNetworkCodePackageListAsync : System.Fabric.Description.DeployedNetworkCodePackageQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt;" Usage="networkManagementClient.GetDeployedNetworkCodePackageListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkCodePackageList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedNetworkCodePackageQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all code packages deployed in a container network on a node. If the code packages do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt; GetDeployedNetworkListAsync (System.Fabric.Description.DeployedNetworkQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.DeployedNetworkList&gt; GetDeployedNetworkListAsync(class System.Fabric.Description.DeployedNetworkQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeployedNetworkListAsync (queryDescription As DeployedNetworkQueryDescription) As Task(Of DeployedNetworkList)" />
      <MemberSignature Language="F#" Value="member this.GetDeployedNetworkListAsync : System.Fabric.Description.DeployedNetworkQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt;" Usage="networkManagementClient.GetDeployedNetworkListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedNetworkQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks deployed on a node. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt; GetDeployedNetworkListAsync (System.Fabric.Description.DeployedNetworkQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.DeployedNetworkList&gt; GetDeployedNetworkListAsync(class System.Fabric.Description.DeployedNetworkQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetDeployedNetworkListAsync(System.Fabric.Description.DeployedNetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetDeployedNetworkListAsync : System.Fabric.Description.DeployedNetworkQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt;" Usage="networkManagementClient.GetDeployedNetworkListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.DeployedNetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedNetworkQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks deployed on a node. If the networks do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkApplicationListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt; GetNetworkApplicationListAsync (System.Fabric.Description.NetworkApplicationQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkApplicationList&gt; GetNetworkApplicationListAsync(class System.Fabric.Description.NetworkApplicationQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNetworkApplicationListAsync (queryDescription As NetworkApplicationQueryDescription) As Task(Of NetworkApplicationList)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkApplicationListAsync : System.Fabric.Description.NetworkApplicationQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt;" Usage="networkManagementClient.GetNetworkApplicationListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkApplicationQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all applications in the container network. If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkApplicationListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt; GetNetworkApplicationListAsync (System.Fabric.Description.NetworkApplicationQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkApplicationList&gt; GetNetworkApplicationListAsync(class System.Fabric.Description.NetworkApplicationQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkApplicationListAsync(System.Fabric.Description.NetworkApplicationQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkApplicationListAsync : System.Fabric.Description.NetworkApplicationQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt;" Usage="networkManagementClient.GetNetworkApplicationListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkApplicationList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkApplicationQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all applications in the container network. If the applications do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt; GetNetworkListAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkList&gt; GetNetworkListAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNetworkListAsync () As Task(Of NetworkList)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkListAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;" Usage="networkManagementClient.GetNetworkListAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt; GetNetworkListAsync (System.Fabric.Description.NetworkQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkList&gt; GetNetworkListAsync(class System.Fabric.Description.NetworkQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync(System.Fabric.Description.NetworkQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNetworkListAsync (queryDescription As NetworkQueryDescription) As Task(Of NetworkList)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkListAsync : System.Fabric.Description.NetworkQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;" Usage="networkManagementClient.GetNetworkListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt; GetNetworkListAsync (System.Fabric.Description.NetworkQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkList&gt; GetNetworkListAsync(class System.Fabric.Description.NetworkQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkListAsync(System.Fabric.Description.NetworkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkListAsync : System.Fabric.Description.NetworkQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;" Usage="networkManagementClient.GetNetworkListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all container networks in the cluster. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkNodeListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt; GetNetworkNodeListAsync (System.Fabric.Description.NetworkNodeQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkNodeList&gt; GetNetworkNodeListAsync(class System.Fabric.Description.NetworkNodeQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNetworkNodeListAsync (queryDescription As NetworkNodeQueryDescription) As Task(Of NetworkNodeList)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkNodeListAsync : System.Fabric.Description.NetworkNodeQueryDescription -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt;" Usage="networkManagementClient.GetNetworkNodeListAsync queryDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkNodeQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <summary>
          <para>
            Gets the details for all nodes in the container network. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkNodeListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt; GetNetworkNodeListAsync (System.Fabric.Description.NetworkNodeQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Query.NetworkNodeList&gt; GetNetworkNodeListAsync(class System.Fabric.Description.NetworkNodeQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.NetworkManagementClient.GetNetworkNodeListAsync(System.Fabric.Description.NetworkNodeQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetNetworkNodeListAsync : System.Fabric.Description.NetworkNodeQueryDescription * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt;" Usage="networkManagementClient.GetNetworkNodeListAsync (queryDescription, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Query.NetworkNodeList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NetworkNodeQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
          <para>
            Gets the details for all nodes in the container network. If the nodes do not fit in a page, one page of results is returned as well as a continuation token which can be used to get the next page.
            </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>