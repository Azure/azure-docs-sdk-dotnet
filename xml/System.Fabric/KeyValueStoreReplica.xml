<Type Name="KeyValueStoreReplica" FullName="System.Fabric.KeyValueStoreReplica">
  <TypeSignature Language="C#" Value="public class KeyValueStoreReplica : System.Fabric.IStatefulServiceReplica" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyValueStoreReplica extends System.Object implements class System.Fabric.IStatefulServiceReplica" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.KeyValueStoreReplica" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Fabric.IStatefulServiceReplica</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>Provides a transactional, replicated, associative data storage component to service writers - ready for integration into any Service Fabric service.</para>
            This is used by legacy Service Fabric services. All new services should use the <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">Reliable Collections</see>.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storeName">
          <para>The name of the key/value store.</para>
        </param>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name.</para>
        </summary>
        <remarks>
          <para>The store name should conform to valid filename characters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName, System.Fabric.LocalStoreSettings localStoreSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, class System.Fabric.LocalStoreSettings localStoreSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="localStoreSettings" Type="System.Fabric.LocalStoreSettings" />
      </Parameters>
      <Docs>
        <param name="storeName">
          <para>The name of the key/value store.</para>
        </param>
        <param name="localStoreSettings">
          <para>The optional settings for the local store.</para>
        </param>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name and local store settings.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName, System.Fabric.ReplicatorSettings replicatorSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, class System.Fabric.ReplicatorSettings replicatorSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="replicatorSettings" Type="System.Fabric.ReplicatorSettings" />
      </Parameters>
      <Docs>
        <param name="storeName">
          <para>The name of the key/value store.</para>
        </param>
        <param name="replicatorSettings">
          <para>The option settings for the key/value store replicator.</para>
        </param>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name and store replicator settings.</para>
        </summary>
        <remarks>
          <para>The store name should conform to valid filename characters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName, System.Fabric.LocalStoreSettings localStoreSettings, System.Fabric.ReplicatorSettings replicatorSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, class System.Fabric.LocalStoreSettings localStoreSettings, class System.Fabric.ReplicatorSettings replicatorSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="localStoreSettings" Type="System.Fabric.LocalStoreSettings" />
        <Parameter Name="replicatorSettings" Type="System.Fabric.ReplicatorSettings" />
      </Parameters>
      <Docs>
        <param name="storeName">
          <para>The name of the key/value store.</para>
        </param>
        <param name="localStoreSettings">
          <para>The optional settings for the local store.</para>
        </param>
        <param name="replicatorSettings">
          <para>The option settings for the key/value store replicator.</para>
        </param>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name, local store settings, and replicator settings.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName, System.Fabric.LocalStoreSettings localStoreSettings, System.Fabric.ReplicatorSettings replicatorSettings, System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode notificationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, class System.Fabric.LocalStoreSettings localStoreSettings, class System.Fabric.ReplicatorSettings replicatorSettings, valuetype System.Fabric.KeyValueStoreReplica/SecondaryNotificationMode notificationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="localStoreSettings" Type="System.Fabric.LocalStoreSettings" />
        <Parameter Name="replicatorSettings" Type="System.Fabric.ReplicatorSettings" />
        <Parameter Name="notificationMode" Type="System.Fabric.KeyValueStoreReplica+SecondaryNotificationMode" />
      </Parameters>
      <Docs>
        <param name="storeName">
          <para>The name of the key/value store.</para>
        </param>
        <param name="localStoreSettings">
          <para>The optional settings for the local store.</para>
        </param>
        <param name="replicatorSettings">
          <para>The option settings for the key/value store replicator.</para>
        </param>
        <param name="notificationMode">
          <para>The secondary notification mode to enable <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" /> 
            and <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" /> 
            callbacks on this replica.</para>
        </param>
        <summary>
          <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class with the specified key/value store name, local store settings, and replicator settings. Secondary replica notifications are enabled via the notification mode.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyValueStoreReplica (string storeName, System.Fabric.LocalStoreSettings localStoreSettings, System.Fabric.ReplicatorSettings replicatorSettings, System.Fabric.KeyValueStoreReplicaSettings kvsSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storeName, class System.Fabric.LocalStoreSettings localStoreSettings, class System.Fabric.ReplicatorSettings replicatorSettings, class System.Fabric.KeyValueStoreReplicaSettings kvsSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storeName" Type="System.String" />
        <Parameter Name="localStoreSettings" Type="System.Fabric.LocalStoreSettings" />
        <Parameter Name="replicatorSettings" Type="System.Fabric.ReplicatorSettings" />
        <Parameter Name="kvsSettings" Type="System.Fabric.KeyValueStoreReplicaSettings" />
      </Parameters>
      <Docs>
        <param name="storeName">The name of the key/value store.</param>
        <param name="localStoreSettings">The optional settings for the local store.</param>
        <param name="replicatorSettings">The optional settings for the key/value store replicator.</param>
        <param name="kvsSettings">The optional settings for the key/value store replica.</param>
        <summary>
            Initializes a new instance of the KeyValueStoreReplica class with the specified key/value store name, local store settings, replicator settings, and replica settings.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Aborts this instance of the <see cref="T:System.Fabric.KeyValueStoreReplica" /> class.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Fabric.TransactionBase transactionBase, string key, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be added (as a string). Limited to 800 characters in length.</para>
        </param>
        <param name="value">
          <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
        </param>
        <summary>
          <para>Adds a value indexed by the specified key to the key/value store.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Backup">
      <MemberSignature Language="C#" Value="public void Backup (string backupDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Backup(string backupDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Backup(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use BackupAsync instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
          <para>The full path of the backup destination directory.</para>
        </param>
        <summary>
          <para>DEPRECATED. Performs a full backup of the replica's local store to the specified destination directory. </para>
        </summary>
        <remarks>
          <para>
            This method is obsolete. Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" /> instead.</para>
          <para>
            Incremental backups are not supported after creating a full backup using this method. 
            Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" /> to create
            a full backup if subsequent incremental backups are to be created.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task BackupAsync (string backupDirectory, System.Fabric.StoreBackupOption backupOption, Func&lt;System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task&lt;bool&gt;&gt; postBackupAsyncFunc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task BackupAsync(string backupDirectory, valuetype System.Fabric.StoreBackupOption backupOption, class System.Func`2&lt;class System.Fabric.StoreBackupInfo, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; postBackupAsyncFunc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
        <Parameter Name="backupOption" Type="System.Fabric.StoreBackupOption" />
        <Parameter Name="postBackupAsyncFunc" Type="System.Func&lt;System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />, then this parameter should be <b>null</b>.
            Otherwise, this parameter cannot be <b>null</b>, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" />.
            </param>
        <param name="backupOption">
          <para>The options for the backup.</para>
        </param>
        <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Service Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <b>null</b> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
        <summary>
          <para>Asynchronously creates a backup of the key/value store.</para>
        </summary>
        <returns>A task that represents the asynchronous backup operation.</returns>
        <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" /> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <b>backupDirectory</b> is <b>null</b> when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <b>backupDirectory</b> is empty or contains just whitespaces when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" /> or
            <b>backupDirectory</b> is not <b>null</b> when <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />.
            </exception>
        <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.Incremental" /> and the backup directory already contains files or sub-directories.        
            </exception>
        <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
      </Docs>
    </Member>
    <Member MemberName="BackupAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task BackupAsync (string backupDirectory, System.Fabric.StoreBackupOption backupOption, Func&lt;System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task&lt;bool&gt;&gt; postBackupAsyncFunc, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task BackupAsync(string backupDirectory, valuetype System.Fabric.StoreBackupOption backupOption, class System.Func`2&lt;class System.Fabric.StoreBackupInfo, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; postBackupAsyncFunc, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
        <Parameter Name="backupOption" Type="System.Fabric.StoreBackupOption" />
        <Parameter Name="postBackupAsyncFunc" Type="System.Func&lt;System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />, then this parameter should be <b>null</b>.
            Otherwise, this parameter cannot be <b>null</b>, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException" />.
            </param>
        <param name="backupOption">
          <para>The options for the backup.</para>
        </param>
        <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Service Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <b>null</b> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
        <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        <summary>
            Asynchronously creates a backup of the key/value store.
            </summary>
        <returns>A task that represents the asynchronous backup operation.</returns>
        <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" /> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <b>backupDirectory</b> is <b>null</b> when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />.
            </exception>
        <exception cref="T:System.ArgumentException">
          <b>backupDirectory</b> is empty or contains just whitespaces when <b>backupOption</b> is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" /> or
            <b>backupDirectory</b> is not <b>null</b> when <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly" />.
            </exception>
        <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.Incremental" /> and the backup directory already contains files or sub-directories.        
            </exception>
        <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
        <example>
            Below is an example of a simple implementation of <b>postBackupAsyncFunc</b><code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                return await CopyBackupToAzureBlobStorage(info);
            }
            </code></example>
      </Docs>
    </Member>
    <Member MemberName="ChangeRoleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; ChangeRoleAsync (System.Fabric.ReplicaRole newRole, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ChangeRoleAsync(valuetype System.Fabric.ReplicaRole newRole, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.KeyValueStoreReplica/&lt;ChangeRoleAsync&gt;d__51))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRole" Type="System.Fabric.ReplicaRole" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRole">
          <para>The target replica role.</para>
        </param>
        <param name="cancellationToken">
          <para>Currently unused. Reserved for future use.</para>
        </param>
        <summary>
          <para>Changes the replica role of the replica and its replicator.</para>
        </summary>
        <returns>
          <para>A task whose result is the address of this replica.</para>
        </returns>
        <remarks>
          <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, 
            which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" /> instead.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CloseAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.KeyValueStoreReplica/&lt;CloseAsync&gt;d__52))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <para>Currently unused. Reserved for future use.</para>
        </param>
        <summary>
          <para>Closes the replica and its replicator in preparation for going offline from a replica set.</para>
        </summary>
        <returns>
          <para>A task that represents the asynchronous operation.</para>
        </returns>
        <remarks>
          <para>The replica has not necessarily been removed permanently from the replica set and may be re-opened at a later time. The most common causes for closing a replica is graceful shutdown in preparation for upgrade or load balancing. This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)" /> instead.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to look up (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Determines whether a value is contained in the key/value store.</para>
        </summary>
        <returns>
          <para>
            <languageKeyword>true</languageKeyword> if the value is contained in the key/value store; <languageKeyword>false</languageKeyword>, otherwise.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTransaction">
      <MemberSignature Language="C#" Value="public System.Fabric.Transaction CreateTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.Transaction CreateTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.CreateTransaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Transaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Creates a unique <see cref="T:System.Fabric.Transaction" /> instance, which is used to commit or rollback groups of key/value store operations.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.Transaction" /> object representing a transaction.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTransaction">
      <MemberSignature Language="C#" Value="public System.Fabric.Transaction CreateTransaction (System.Fabric.KeyValueStoreTransactionSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.Transaction CreateTransaction(class System.Fabric.KeyValueStoreTransactionSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="System.Fabric.KeyValueStoreTransactionSettings" />
      </Parameters>
      <Docs>
        <param name="settings">
          <para>The transaction settings.</para>
        </param>
        <summary>
          <para>Creates a unique <see cref="T:System.Fabric.Transaction" /> instance, which is used to commit or rollback groups of key/value store operations.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.Transaction" /> object representing a transaction.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataLossReported">
      <MemberSignature Language="C#" Value="public event EventHandler DataLossReported;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DataLossReported" />
      <MemberSignature Language="DocId" Value="E:System.Fabric.KeyValueStoreReplica.DataLossReported" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Handler for data loss events.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt; Enumerate (System.Fabric.TransactionBase transactionBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItem&gt; Enumerate(class System.Fabric.TransactionBase transactionBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <summary>
          <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</para>
        </returns>
        <remarks>
          <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt; Enumerate (System.Fabric.TransactionBase transactionBase, string keyPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItem&gt; Enumerate(class System.Fabric.TransactionBase transactionBase, string keyPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="keyPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="keyPrefix">
          <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store, where the value keys match the specified key prefix.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</para>
        </returns>
        <remarks>
          <para>
            Equivalent to calling <see cref="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)" /> with <b>strictPrefix</b> set to <languageKeyword>true</languageKeyword>.
            </para>
          <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt; Enumerate (System.Fabric.TransactionBase transactionBase, string keyPrefix, bool strictPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItem&gt; Enumerate(class System.Fabric.TransactionBase transactionBase, string keyPrefix, bool strictPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="keyPrefix" Type="System.String" />
        <Parameter Name="strictPrefix" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="keyPrefix">The key, or index, prefix to match (as a string). Limited to 800 characters in length.</param>
        <param name="strictPrefix">When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</param>
        <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem" /> values in the key/value store.
            </summary>
        <returns>A <see cref="T:System.Fabric.KeyValueStoreItem" /> enumerator.</returns>
        <remarks>
          <para>
            The items are enumerated in lexicographically increasing order by key.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetadata">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata (System.Fabric.TransactionBase transactionBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata(class System.Fabric.TransactionBase transactionBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <summary>
          <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetadata">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata (System.Fabric.TransactionBase transactionBase, string keyPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata(class System.Fabric.TransactionBase transactionBase, string keyPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="keyPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="keyPrefix">
          <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store, where the value keys match the specified key prefix.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</para>
        </returns>
        <remarks>
            Equivalent to calling <see cref="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)" /> with <b>strictPrefix</b> set to <languageKeyword>true</languageKeyword>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetadata">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata (System.Fabric.TransactionBase transactionBase, string keyPrefix, bool strictPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreItemMetadata&gt; EnumerateMetadata(class System.Fabric.TransactionBase transactionBase, string keyPrefix, bool strictPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreItemMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="keyPrefix" Type="System.String" />
        <Parameter Name="strictPrefix" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="keyPrefix">The key, or index, prefix to match (as a string). Limited to 800 characters in length.</param>
        <param name="strictPrefix">When true, only keys prefixed by the value specified for <b>keyPrefix</b> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <b>keyPrefix</b> and continues until there are no more keys. The default is <b>true</b>.</param>
        <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> values in the key/value store.
            </summary>
        <returns>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> enumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreItem Get (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.KeyValueStoreItem Get(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Gets the stored value, as a <see cref="T:System.Fabric.KeyValueStoreItem" /> object, associated with the specified key.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItem" /> object representing the stored value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentEpoch">
      <MemberSignature Language="C#" Value="public System.Fabric.Epoch GetCurrentEpoch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Fabric.Epoch GetCurrentEpoch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.GetCurrentEpoch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Epoch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Gets the current epoch for the key/value store.</para>
        </summary>
        <returns>
          <para>The current epoch for the key/value store.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreItemMetadata GetMetadata (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.KeyValueStoreItemMetadata GetMetadata(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreItemMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Gets the metadata, as a <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object, for the value associated with the specified key.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object representing the metadata associated with the specified value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public byte[] GetValue (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetValue(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Gets the stored value as a byte array, associated with the specified key.</para>
        </summary>
        <returns>
          <para>A byte array representing the stored value.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreSequenceNumberCheck">
      <MemberSignature Language="C#" Value="public const long IgnoreSequenceNumberCheck = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 IgnoreSequenceNumberCheck = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <para>Indicates that sequence number checking should not occur.</para>
        </summary>
        <remarks>
          <para>
             Can be used in APIs accepting a check sequence number parameter to indicate that sequence number checking
             should not occur:
             <list type="bullet"><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" /></description></item></list>
            
             This is equivalent to calling API overloads that do not have a check sequence number parameter:
             <list type="bullet"><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])" /></description></item><item><description><see cref="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)" /></description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Fabric.StatefulServiceInitializationParameters initializationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.Fabric.StatefulServiceInitializationParameters initializationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializationParameters" Type="System.Fabric.StatefulServiceInitializationParameters" />
      </Parameters>
      <Docs>
        <param name="initializationParameters">
          <para>The initialization information for the replica.</para>
        </param>
        <summary>
          <para>Initializes the replica in preparation for opening.</para>
        </summary>
        <remarks>
          <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />,
            which is the recommended pattern. In this case, the application replica should override
            <see cref="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)" /> instead.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyValueStoreReplicaSettings">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreReplicaSettings KeyValueStoreReplicaSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.KeyValueStoreReplicaSettings KeyValueStoreReplicaSettings" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreReplicaSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the option settings for the <see cref="T:System.Fabric.KeyValueStoreReplica" />.</para>
        </summary>
        <value>
          <para>The <see cref="T:System.Fabric.KeyValueStoreReplica" /> option settings.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalStoreSettings">
      <MemberSignature Language="C#" Value="public System.Fabric.LocalStoreSettings LocalStoreSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.LocalStoreSettings LocalStoreSettings" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.KeyValueStoreReplica.LocalStoreSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.LocalStoreSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the option settings for the local key/value store.</para>
        </summary>
        <value>
          <para>The local store option settings.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationMode">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode NotificationMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Fabric.KeyValueStoreReplica/SecondaryNotificationMode NotificationMode" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.KeyValueStoreReplica.NotificationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreReplica+SecondaryNotificationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the secondary notification mode specified during construction of this replica.</para>
        </summary>
        <value>
          <para>The current secondary notification mode</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAbort">
      <MemberSignature Language="C#" Value="protected virtual void OnAbort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAbort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnAbort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Called to shut down this instance.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeRoleAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;string&gt; OnChangeRoleAsync (System.Fabric.ReplicaRole newRole, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; OnChangeRoleAsync(valuetype System.Fabric.ReplicaRole newRole, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRole" Type="System.Fabric.ReplicaRole" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRole">
          <para>The target role.</para>
        </param>
        <param name="cancellationToken">
          <para>Currently unused. Reserved for future use.</para>
        </param>
        <summary>
          <para>Indicates that this replica is changing roles.</para>
        </summary>
        <returns>
          <para>A task whose result is the resolvable address of this replica.</para>
        </returns>
        <remarks>
          <para>The application replica should override this method if deriving from <see cref="T:System.Fabric.KeyValueStoreReplica" />, which is the recommended pattern. The application replica should return a <see cref="T:System.Threading.Tasks.Task" /> whose result is the address of this replica. This replica address is stored by the system as is and can be retrieved (unmodified) using <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />. The application must take care to complete the role change in a timely manner since reconfiguration of the replica set will be blocked behind the completion of all outstanding change role calls.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCloseAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnCloseAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnCloseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <para>A <see cref="T:System.Threading.CancellationToken" /> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
        </param>
        <summary>
          <para>Called when this service replica is being shut down and needs to close.</para>
        </summary>
        <returns>
          <para>The asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCopyComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnCopyComplete (System.Fabric.KeyValueStoreEnumerator enumerator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCopyComplete(class System.Fabric.KeyValueStoreEnumerator enumerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumerator" Type="System.Fabric.KeyValueStoreEnumerator" />
      </Parameters>
      <Docs>
        <param name="enumerator">
          <para>The enumerator used to read data on the secondary.</para>
        </param>
        <summary>
          <para>Called by the system on secondary replicas when they have finished building from the primary and are ready to start applying replication operations.</para>
          <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica" /> object was constructed with a valid <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode" /> parameter.</para>
        </summary>
        <remarks>
          <para>The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object can be used to read data on the secondary within the context of this method before any replication operations are applied. The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object is no longer valid after this method returns and cannot be used outside the context of this method. The application must take care to complete this callback in a timely manner since replication operations are being queued on the secondary replica and will not start getting applied until this method returns. The <see cref="T:System.Fabric.KeyValueStoreEnumerator" /> object is backed by a single underlying local transaction and is not thread-safe.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataLossAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;bool&gt; OnDataLossAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; OnDataLossAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token used to check for cancellation of the operation.</param>
        <summary>
            Signals that the replica set may have experienced data loss. The application can either override this method to process the event asynchronously 
            or use the <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported" /> event to process synchronously. Both represent the same event.
            </summary>
        <returns>True to indicate that data was modified during recovery and the replica set needs to be resynchronized. Otherwise, false to indicate that data has not been modified.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDatalossReported">
      <MemberSignature Language="C#" Value="protected virtual void OnDatalossReported (EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDatalossReported(class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="args">
          <para>Currently contains no data. Reserved for future use.</para>
        </param>
        <summary>
          <para>Signals that the replica set may have experienced data loss. The application can either override this method or listen for the
            <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported" /> Event. Both represent the same event</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialize (System.Fabric.StatefulServiceInitializationParameters initializationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialize(class System.Fabric.StatefulServiceInitializationParameters initializationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializationParameters" Type="System.Fabric.StatefulServiceInitializationParameters" />
      </Parameters>
      <Docs>
        <param name="initializationParameters">
          <para>The initialization parameters for the service replica, represented as a <see cref="T:System.Fabric.StatefulServiceInitializationParameters" /> object.</para>
        </param>
        <summary>
          <para>Initializes a newly created service replica.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpenAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task OnOpenAsync (System.Fabric.ReplicaOpenMode openMode, System.Fabric.IStatefulServicePartition partition, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnOpenAsync(valuetype System.Fabric.ReplicaOpenMode openMode, class System.Fabric.IStatefulServicePartition partition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openMode" Type="System.Fabric.ReplicaOpenMode" />
        <Parameter Name="partition" Type="System.Fabric.IStatefulServicePartition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openMode">
          <para>A <see cref="T:System.Fabric.ReplicaOpenMode" /> object specifying for this replica whether it is new or recovered.</para>
        </param>
        <param name="partition">
          <para>A <see cref="T:System.Fabric.IStatefulServicePartition" /> object representing the stateful service partition information for this replica. </para>
        </param>
        <param name="cancellationToken">
          <para>A <see cref="T:System.Threading.CancellationToken" /> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
        </param>
        <summary>
          <para>Called on an initialized service replica to open it so that additional actions can be taken.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> object representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReplicationOperation">
      <MemberSignature Language="C#" Value="protected virtual void OnReplicationOperation (System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreNotification&gt; enumerator);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnReplicationOperation(class System.Collections.Generic.IEnumerator`1&lt;class System.Fabric.KeyValueStoreNotification&gt; enumerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumerator" Type="System.Collections.Generic.IEnumerator&lt;System.Fabric.KeyValueStoreNotification&gt;" />
      </Parameters>
      <Docs>
        <param name="enumerator">
          <para>The enumerator used to read the data in this replication operation.</para>
        </param>
        <summary>
          <para>Called by the system on secondary replicas for incoming replication operations. Each <see cref="T:System.Fabric.KeyValueStoreNotification" /> object contains all the data for a single atomic replication operation.</para>
        </summary>
        <remarks>
          <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica" /> object was constructed with a valid <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode" />.</para>
          <para>If the <see cref="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck" /> mode was specified, then the incoming replication operation is not applied locally on the secondary replica and acknowledged to the primary until the method returns. This implies that the application must take care to return from this method in a timely manner to avoiding blocking the replication stream. Since the acknowledgment is not sent to the primary until this method returns, it cannot be assumed that the observed replication operation has already been (or is guaranteed to be in the future) applied by a quorum of replicas in the replica set.</para>
          <para>If the <see cref="F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked" /> mode was specified, then the observed replication operation is guaranteed to have already been applied by a quorum of replicas in the replica set. Furthermore, the observed replication operation may have already been applied locally by this secondary and acknowledged to the primary at the time the method is invoked by the system. The method callback will not block the replication stream in this mode, but it will still block the replication operation notification stream. That is, there will only be one outstanding OnReplicationOperation method callback at any given time.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.IReplicator&gt; OpenAsync (System.Fabric.ReplicaOpenMode openMode, System.Fabric.IStatefulServicePartition partition, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.IReplicator&gt; OpenAsync(valuetype System.Fabric.ReplicaOpenMode openMode, class System.Fabric.IStatefulServicePartition partition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.KeyValueStoreReplica/&lt;OpenAsync&gt;d__50))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.IReplicator&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openMode" Type="System.Fabric.ReplicaOpenMode" />
        <Parameter Name="partition" Type="System.Fabric.IStatefulServicePartition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openMode">
          <para>Specifies the context under which this replica is being opened.</para>
        </param>
        <param name="partition">
          <para>Contains information describing the replica set to which this replica belongs.</para>
        </param>
        <param name="cancellationToken">
          <para>Currently unused. Reserved for future use.</para>
        </param>
        <summary>
          <para>Opens the replica and its replicator in preparation for coming online in a replica set.</para>
        </summary>
        <returns>
          <para>A Task to indicate completion of the open <see cref="T:System.Threading.Tasks.Task`1" />.</para>
        </returns>
        <remarks>
          <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica" />, 
            which is the recommended pattern. In this case, the application replica should override OnOpenAsync instead.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
        </param>
        <summary>
          <para>Removes the value indexed by the specified key.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Fabric.TransactionBase transactionBase, string key, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Fabric.TransactionBase transactionBase, string key, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
        </param>
        <param name="checkSequenceNumber">
          <para>The expected sequence number of the key to be removed.</para>
        </param>
        <summary>
          <para>Removes the value indexed by the specified key.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplicatorSettings">
      <MemberSignature Language="C#" Value="public System.Fabric.ReplicatorSettings ReplicatorSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.ReplicatorSettings ReplicatorSettings" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.KeyValueStoreReplica.ReplicatorSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.ReplicatorSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the option settings for the key/value store replicator.</para>
        </summary>
        <value>
          <para>The store replicator option settings.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (string backupDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(string backupDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Restore(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use RestoreAsync instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
          <para>The full path to a directory containing a backup.</para>
        </param>
        <summary>
          <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" />.</para>
        </summary>
        <remarks>
          <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
          <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RestoreAsync (string backupDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RestoreAsync(string backupDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
        <summary>
          <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" />.</para>
        </summary>
        <returns>A task that represents the asynchronous restore operation.</returns>
        <remarks>
          <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
          <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
          <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <b>backupDirectory</b> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <b>backupDirectory</b> does not exist.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RestoreAsync (string backupDirectory, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RestoreAsync(string backupDirectory, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
        <param name="cancellationToken">
          <para>The cancellation token</para>
        </param>
        <summary>
          <para>Restores this replica's local store database from a backup that was previously created by calling <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})" />.</para>
        </summary>
        <returns>A task that represents the asynchronous restore operation.</returns>
        <remarks>
          <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
          <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
          <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <b>backupDirectory</b> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <b>backupDirectory</b> does not exist.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RestoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RestoreAsync (string backupDirectory, System.Fabric.RestoreSettings settings, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RestoreAsync(string backupDirectory, class System.Fabric.RestoreSettings settings, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backupDirectory" Type="System.String" />
        <Parameter Name="settings" Type="System.Fabric.RestoreSettings" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
        <param name="settings">
            Settings to modify restore behavior.
            </param>
        <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        <summary>
            Asynchronously restores the key/value store replica.
            </summary>
        <returns>A task that represents the asynchronous restore operation.</returns>
        <remarks>
          <para>It is recommended to not perform any write operations to the key/value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in <b>backupDirectory</b>. </para>
          <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)" /> if needed.</para>
          <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <b>backupDirectory</b> is <b>null</b>.
            </exception>
        <exception cref="T:System.ArgumentException">
          <b>backupDirectory</b> is empty or contains just whitespaces.
            </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <b>backupDirectory</b> does not exist.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="StoreName">
      <MemberSignature Language="C#" Value="public string StoreName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StoreName" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.KeyValueStoreReplica.StoreName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets or sets the name of the key/value store.</para>
        </summary>
        <value>
          <para>The name of the key/value store.</para>
        </value>
        <remarks>
          <para>The store name should conform to valid filename characters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public bool TryAdd (System.Fabric.TransactionBase transactionBase, string key, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryAdd(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be added (as a string). Limited to 800 characters in length.</param>
        <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
        <summary>
            Attempts to add a value indexed by the specified key to the key/value store.
            </summary>
        <returns>True if the specified key was not already found and added. False if the specified key already exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreItem TryGet (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.KeyValueStoreItem TryGet(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
        <summary>
            Attempts to get the stored value, as a <see cref="T:System.Fabric.KeyValueStoreItem" /> object, associated with the specified key.
            </summary>
        <returns>A <see cref="T:System.Fabric.KeyValueStoreItem" /> object representing the stored value or null if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMetadata">
      <MemberSignature Language="C#" Value="public System.Fabric.KeyValueStoreItemMetadata TryGetMetadata (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Fabric.KeyValueStoreItemMetadata TryGetMetadata(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.KeyValueStoreItemMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
        <summary>
            Attempts to get the metadata as a <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object, for the value associated with the specified key.
            </summary>
        <returns>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata" /> object representing the metadata associated with the specified value or null if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public byte[] TryGetValue (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] TryGetValue(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.</param>
        <summary>
            Attempts to get the stored value as a byte array, associated with the specified key.
            </summary>
        <returns>A byte array representing the stored value or null if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove">
      <MemberSignature Language="C#" Value="public bool TryRemove (System.Fabric.TransactionBase transactionBase, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRemove(class System.Fabric.TransactionBase transactionBase, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</param>
        <summary>
            Attempts to remove the value indexed by the specified key.
            </summary>
        <returns>True if the specified key was found and removed. False if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove">
      <MemberSignature Language="C#" Value="public bool TryRemove (System.Fabric.TransactionBase transactionBase, string key, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryRemove(class System.Fabric.TransactionBase transactionBase, string key, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</param>
        <param name="checkSequenceNumber">The expected sequence number of the key to be removed.</param>
        <summary>
            Attempts to remove the value indexed by the specified key.
            </summary>
        <returns>True if the specified key was found and removed. False if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate">
      <MemberSignature Language="C#" Value="public bool TryUpdate (System.Fabric.TransactionBase transactionBase, string key, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUpdate(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.</param>
        <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
        <summary>
            Attempts to update the value indexed by the specified key.
            </summary>
        <returns>True if the specified key was found and updated. False if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate">
      <MemberSignature Language="C#" Value="public bool TryUpdate (System.Fabric.TransactionBase transactionBase, string key, byte[] value, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUpdate(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transactionBase">The transaction instance.</param>
        <param name="key">The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.</param>
        <param name="value">The value (as a byte array) to be stored, limited to 2GB in length.</param>
        <param name="checkSequenceNumber">The expected sequence number of the key to be updated.</param>
        <summary>
            Attempts to update the value indexed by the specified key.
            </summary>
        <returns>True if the specified key was found and updated. False if the specified key does not exist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update (System.Fabric.TransactionBase transactionBase, string key, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
        </param>
        <param name="value">
          <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
        </param>
        <summary>
          <para>Updates the stored value associated with the specified key.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update (System.Fabric.TransactionBase transactionBase, string key, byte[] value, long checkSequenceNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update(class System.Fabric.TransactionBase transactionBase, string key, unsigned int8[] value, int64 checkSequenceNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionBase" Type="System.Fabric.TransactionBase" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
        <Parameter Name="checkSequenceNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="transactionBase">
          <para>The transaction instance.</para>
        </param>
        <param name="key">
          <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
        </param>
        <param name="value">
          <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
        </param>
        <param name="checkSequenceNumber">
          <para>The expected sequence number of the key to be updated.</para>
        </param>
        <summary>
          <para>Updates the value indexed by the specified key.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateReplicatorSettings">
      <MemberSignature Language="C#" Value="public void UpdateReplicatorSettings (System.Fabric.ReplicatorSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateReplicatorSettings(class System.Fabric.ReplicatorSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settings" Type="System.Fabric.ReplicatorSettings" />
      </Parameters>
      <Docs>
        <param name="settings">
          <para>The settings used to update the key/value store replicator.</para>
        </param>
        <summary>
          <para>Updates the key/value store replicator with the settings in the specified <see cref="T:System.Fabric.ReplicatorSettings" /> object.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>