<Type Name="MemoryOwner" FullName="System.Fabric.MemoryOwner">
  <TypeSignature Language="C#" Value="public class MemoryOwner : IDisposable, System.Buffers.IMemoryOwner&lt;byte&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MemoryOwner extends System.Object implements class System.Buffers.IMemoryOwner`1&lt;unsigned int8&gt;, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.MemoryOwner" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryOwner&#xA;Implements IDisposable, IMemoryOwner(Of Byte)" />
  <TypeSignature Language="F#" Value="type MemoryOwner = class&#xA;    interface IMemoryOwner&lt;byte&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Buffers.IMemoryOwner&lt;System.Byte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
        <see cref="T:System.Buffers.IMemoryOwner`1" /> wrapper which indicates the number of bytes in <see cref="P:System.Buffers.IMemoryOwner`1.Memory" />
            which contain valid data. When performing reads, consumers of this class should consider <see cref="F:System.Fabric.MemoryOwner.ValidLength" />) 
            as the length of <see cref="P:System.Fabric.MemoryOwner.Memory" /> rather than using <see cref="P:System.Memory`1.Length" /> directly.
            </para>
    </summary>
    <remarks>
      <para>
            This class is used in place of <see cref="T:System.Buffers.IMemoryOwner`1" /> directly, as <see cref="M:System.Buffers.MemoryPool`1.Rent(System.Int32)" /> may
            return a <see cref="T:System.Buffers.IMemoryOwner`1" /> with <see cref="P:System.Buffers.IMemoryOwner`1.Memory" /> with a <see cref="P:System.Memory`1.Length" />
            greater than the size requested.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryOwner (ArraySegment&lt;byte&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ArraySegment`1&lt;unsigned int8&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.MemoryOwner.#ctor(System.ArraySegment{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As ArraySegment(Of Byte))" />
      <MemberSignature Language="F#" Value="new System.Fabric.MemoryOwner : ArraySegment&lt;byte&gt; -&gt; System.Fabric.MemoryOwner" Usage="new System.Fabric.MemoryOwner data" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.ArraySegment&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.ArraySegment`1" /> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory" />.</param>
        <summary>
          <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner" /> class with the specified <see cref="T:System.ArraySegment`1" />.
            <see cref="P:System.ArraySegment`1.Count" /> will be used as the initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength" />.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryOwner (System.Buffers.IMemoryOwner&lt;byte&gt; owner, int validLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IMemoryOwner`1&lt;unsigned int8&gt; owner, int32 validLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.MemoryOwner.#ctor(System.Buffers.IMemoryOwner{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As IMemoryOwner(Of Byte), validLength As Integer)" />
      <MemberSignature Language="F#" Value="new System.Fabric.MemoryOwner : System.Buffers.IMemoryOwner&lt;byte&gt; * int -&gt; System.Fabric.MemoryOwner" Usage="new System.Fabric.MemoryOwner (owner, validLength)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Buffers.IMemoryOwner&lt;System.Byte&gt;" />
        <Parameter Name="validLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="owner">The <see cref="T:System.Buffers.IMemoryOwner`1" /> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory" />. Must not be null.</param>
        <param name="validLength">The initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength" />. Must be &gt;= 0 and &lt;= owner.Memory.Length.</param>
        <summary>
          <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner" /> class with the specified <see cref="T:System.Buffers.IMemoryOwner`1" />
            and valid length.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryOwner (byte[] data, int validLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] data, int32 validLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.MemoryOwner.#ctor(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As Byte(), validLength As Integer)" />
      <MemberSignature Language="F#" Value="new System.Fabric.MemoryOwner : byte[] * int -&gt; System.Fabric.MemoryOwner" Usage="new System.Fabric.MemoryOwner (data, validLength)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="validLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:byte[]" /> to expose via <see cref="P:System.Fabric.MemoryOwner.Memory" />.  Must not be null.</param>
        <param name="validLength">The initial value for <see cref="F:System.Fabric.MemoryOwner.ValidLength" />. Must be &gt;= 0 and &lt;= data.Length.</param>
        <summary>
          <para>
            Initializes a new instance of the <see cref="T:System.Fabric.MemoryOwner" /> class with the specified <see cref="T:byte[]" />
            and valid length.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.MemoryOwner.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryOwner.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose the wrapped <see cref="T:System.Buffers.IMemoryOwner`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.MemoryOwner.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="memoryOwner.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">True if this is being invoked via <see cref="M:System.IDisposable.Dispose" />, false otherwise.</param>
        <summary>
            If <paramref name="disposing" /> is true, dispose the wrapped <see cref="T:System.Buffers.IMemoryOwner`1" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;byte&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;unsigned int8&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.MemoryOwner.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of Byte)" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;byte&gt;" Usage="System.Fabric.MemoryOwner.Memory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Buffers.IMemoryOwner`1.Memory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            See <see cref="P:System.Buffers.IMemoryOwner`1.Memory" />.
            </para>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidLength">
      <MemberSignature Language="C#" Value="public readonly int ValidLength;" />
      <MemberSignature Language="ILAsm" Value=".field public initonly int32 ValidLength" />
      <MemberSignature Language="DocId" Value="F:System.Fabric.MemoryOwner.ValidLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly ValidLength As Integer " />
      <MemberSignature Language="F#" Value="val mutable ValidLength : int" Usage="System.Fabric.MemoryOwner.ValidLength" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
            The number of bytes containing data in <see cref="P:System.Fabric.MemoryOwner.Memory" />. When performing reads,
            consumers of this class should consider <see cref="F:System.Fabric.MemoryOwner.ValidLength" /> as the length of
            <see cref="P:System.Fabric.MemoryOwner.Memory" /> rather than using <see cref="P:System.Memory`1.Length" /> directly.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
