<Type Name="FabricClient+RepairManagementClient" FullName="System.Fabric.FabricClient+RepairManagementClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.RepairManagementClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/RepairManagementClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.RepairManagementClient" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides methods for managing repair tasks.</para>
      <para>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CancelRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; CancelRepairTaskAsync (string repairTaskId, long version, bool requestAbort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; CancelRepairTaskAsync(string repairTaskId, int64 version, bool requestAbort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="requestAbort" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task to be cancelled.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="requestAbort">
          <para>
            <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
        </param>
        <summary>
          <para>Requests the cancellation of the given repair task.</para>
        </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; CancelRepairTaskAsync (string repairTaskId, long version, bool requestAbort, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; CancelRepairTaskAsync(string repairTaskId, int64 version, bool requestAbort, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="requestAbort" Type="System.Boolean" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task to be cancelled.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="requestAbort">
          <para>
            <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Requests the cancellation of the given repair task.</para>
        </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; CreateRepairTaskAsync (System.Fabric.Repair.RepairTask repairTask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; CreateRepairTaskAsync(class System.Fabric.Repair.RepairTask repairTask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTask" Type="System.Fabric.Repair.RepairTask" />
      </Parameters>
      <Docs>
        <param name="repairTask">
          <para> The description of the repair task to be created.</para>
        </param>
        <summary>
          <para>Creates a new repair task.</para>
        </summary>
        <returns>
          <para>The version number of the newly-created repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; CreateRepairTaskAsync (System.Fabric.Repair.RepairTask repairTask, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; CreateRepairTaskAsync(class System.Fabric.Repair.RepairTask repairTask, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTask" Type="System.Fabric.Repair.RepairTask" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTask">
          <para> The description of the repair task to be created.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a<see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para> The optional cancellation token that the operation is observing.It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Creates a new repair task.</para>
        </summary>
        <returns>
          <para>The version number of the newly-created repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteRepairTaskAsync (string repairTaskId, long version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteRepairTaskAsync(string repairTaskId, int64 version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the completed repair task to be deleted.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <summary>
          <para>Deletes the given repair task.</para>
        </summary>
        <returns>
          <para>A task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteRepairTaskAsync (string repairTaskId, long version, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteRepairTaskAsync(string repairTaskId, int64 version, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the completed repair task to be deleted.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Deletes the given repair task.</para>
        </summary>
        <returns>
          <para>A task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceApproveRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ForceApproveRepairTaskAsync (string repairTaskId, long version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ForceApproveRepairTaskAsync(string repairTaskId, int64 version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task to be approved.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <summary>
          <para>Forces the approval of the given repair task.</para>
        </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceApproveRepairTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; ForceApproveRepairTaskAsync (string repairTaskId, long version, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; ForceApproveRepairTaskAsync(string repairTaskId, int64 version, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task to be approved.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Forces the approval of the given repair task.</para>
        </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepairTaskListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Gets a list of all repair tasks.</para>
        </summary>
        <returns>
          <para>The list of all repair tasks.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepairTaskListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Gets a list of all repair tasks.</para>
        </summary>
        <returns>
          <para>The list of all repair tasks.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepairTaskListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync (string taskIdFilter, System.Fabric.Repair.RepairTaskStateFilter stateFilter, string executorFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync(string taskIdFilter, valuetype System.Fabric.Repair.RepairTaskStateFilter stateFilter, string executorFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskIdFilter" Type="System.String" />
        <Parameter Name="stateFilter" Type="System.Fabric.Repair.RepairTaskStateFilter" />
        <Parameter Name="executorFilter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="taskIdFilter">
          <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
        </param>
        <param name="stateFilter">
          <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
        </param>
        <param name="executorFilter">
          <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
        </param>
        <summary>
          <para>Gets a list of repair tasks matching all of the given filters.</para>
        </summary>
        <returns>
          <para>The list of repair tasks matching all of the given filters.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRepairTaskListAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync (string taskIdFilter, System.Fabric.Repair.RepairTaskStateFilter stateFilter, string executorFilter, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Repair.RepairTaskList&gt; GetRepairTaskListAsync(string taskIdFilter, valuetype System.Fabric.Repair.RepairTaskStateFilter stateFilter, string executorFilter, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Repair.RepairTaskList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskIdFilter" Type="System.String" />
        <Parameter Name="stateFilter" Type="System.Fabric.Repair.RepairTaskStateFilter" />
        <Parameter Name="executorFilter" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="taskIdFilter">
          <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
        </param>
        <param name="stateFilter">
          <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
        </param>
        <param name="executorFilter">
          <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Gets a list of repair tasks matching all of the given filters.</para>
        </summary>
        <returns>
          <para>The list of repair tasks matching all of the given filters.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepairExecutionStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; UpdateRepairExecutionStateAsync (System.Fabric.Repair.RepairTask repairTask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; UpdateRepairExecutionStateAsync(class System.Fabric.Repair.RepairTask repairTask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTask" Type="System.Fabric.Repair.RepairTask" />
      </Parameters>
      <Docs>
        <param name="repairTask">The modified repair task.</param>
        <summary>
            Updates a repair task.
            </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepairExecutionStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; UpdateRepairExecutionStateAsync (System.Fabric.Repair.RepairTask repairTask, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; UpdateRepairExecutionStateAsync(class System.Fabric.Repair.RepairTask repairTask, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTask" Type="System.Fabric.Repair.RepairTask" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTask">The modified repair task.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
            Updates a repair task.
            </summary>
        <returns>
          <para>The new version number of the repair task.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepairTaskHealthPolicyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; UpdateRepairTaskHealthPolicyAsync (string repairTaskId, long version, Nullable&lt;bool&gt; performPreparingHealthCheck, Nullable&lt;bool&gt; performRestoringHealthCheck);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; UpdateRepairTaskHealthPolicyAsync(string repairTaskId, int64 version, valuetype System.Nullable`1&lt;bool&gt; performPreparingHealthCheck, valuetype System.Nullable`1&lt;bool&gt; performRestoringHealthCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="performPreparingHealthCheck" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="performRestoringHealthCheck" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task for which the health policy is to be updated.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="performPreparingHealthCheck">
          <para>
            A nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. 
            </para>
        </param>
        <param name="performRestoringHealthCheck">
          <para>
            A nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. 
            </para>
        </param>
        <summary>
          <para>Updates the health policy of the given repair task.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRepairTaskHealthPolicyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; UpdateRepairTaskHealthPolicyAsync (string repairTaskId, long version, Nullable&lt;bool&gt; performPreparingHealthCheck, Nullable&lt;bool&gt; performRestoringHealthCheck, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int64&gt; UpdateRepairTaskHealthPolicyAsync(string repairTaskId, int64 version, valuetype System.Nullable`1&lt;bool&gt; performPreparingHealthCheck, valuetype System.Nullable`1&lt;bool&gt; performRestoringHealthCheck, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repairTaskId" Type="System.String" />
        <Parameter Name="version" Type="System.Int64" />
        <Parameter Name="performPreparingHealthCheck" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="performRestoringHealthCheck" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="repairTaskId">
          <para>The ID of the repair task for which the health policy is to be updated.</para>
        </param>
        <param name="version">
          <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
        </param>
        <param name="performPreparingHealthCheck">
          <para>
            A nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Else, specify the appropriate <c>bool</c> value. 
            </para>
        </param>
        <param name="performRestoringHealthCheck">
          <para>
            A nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.
            Specify <c>null</c> for this parameter if the existing value should not be altered. Else, specify the appropriate <c>bool</c> value. 
            </para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
        </param>
        <summary>
          <para>Updates the health policy of the given repair task.</para>
        </summary>
        <returns>
          <para>A task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>