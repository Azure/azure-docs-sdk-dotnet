<Type Name="FabricRuntime" FullName="System.Fabric.FabricRuntime">
  <TypeSignature Language="C#" Value="public sealed class FabricRuntime : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed FabricRuntime extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricRuntime" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>Allows user created hosts to obtain their <see cref="T:System.Fabric.CodePackageActivationContext" />, well as to register the 
            necessary service factories [ <see cref="T:System.Fabric.IStatelessServiceFactory" />, <see cref="T:System.Fabric.IStatefulServiceFactory" />, or 
            <see cref="T:System.Fabric.ServiceGroupFactory" />] or service types directly.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Fabric.FabricRuntime Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Fabric.FabricRuntime Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.Create" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.FabricRuntime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object.</para>
        </summary>
        <returns>
          <para>A newly created <see cref="T:System.Fabric.FabricRuntime" /> object.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Fabric.FabricRuntime Create (Action fabricExitCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Fabric.FabricRuntime Create(class System.Action fabricExitCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.Create(System.Action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.FabricRuntime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fabricExitCallback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="fabricExitCallback">
          <para>The Action to be executed when the runtime exits or terminates.</para>
        </param>
        <summary>
          <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object with a specified callback function which will be executed if the 
            underlying runtime terminates or exits for any reason.</para>
        </summary>
        <returns>
          <para>A newly created <see cref="T:System.Fabric.FabricRuntime" />object.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Fabric.FabricRuntime&gt; CreateAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Fabric.FabricRuntime&gt; CreateAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.FabricRuntime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object asynchronously with the specified <paramref name="timeout" /> and 
            <paramref name="cancellationToken" />.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Fabric.FabricRuntime&gt; CreateAsync (Action fabricExitCallback, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Fabric.FabricRuntime&gt; CreateAsync(class System.Action fabricExitCallback, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.FabricRuntime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fabricExitCallback" Type="System.Action" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fabricExitCallback">
          <para>The Action to be executed when the runtime exits or terminates.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the 
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Creates the <see cref="T:System.Fabric.FabricRuntime" /> object asynchronously with the specified callback function which will be executed 
            if the underlying runtime terminates or exits for any reason, <paramref name="timeout" />, and <paramref name="cancellationToken" />. </para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Disposes of the <see cref="T:System.Fabric.FabricRuntime" />.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivationContext">
      <MemberSignature Language="C#" Value="public static System.Fabric.CodePackageActivationContext GetActivationContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Fabric.CodePackageActivationContext GetActivationContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.GetActivationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.CodePackageActivationContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime" />’s <see cref="T:System.Fabric.CodePackageActivationContext" />.</para>
        </summary>
        <returns>
          <para>The activation context.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivationContextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Fabric.CodePackageActivationContext&gt; GetActivationContextAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Fabric.CodePackageActivationContext&gt; GetActivationContextAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.CodePackageActivationContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime" />’s <see cref="T:System.Fabric.CodePackageActivationContext" /> asynchronously 
            with the specified <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodeContext">
      <MemberSignature Language="C#" Value="public static System.Fabric.NodeContext GetNodeContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Fabric.NodeContext GetNodeContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.GetNodeContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.NodeContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Gets the Node Context object that contains information about Fabric Node. </para>
        </summary>
        <returns>
          <para>The node context.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodeContextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Fabric.NodeContext&gt; GetNodeContextAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Fabric.NodeContext&gt; GetNodeContextAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.NodeContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to send a notification that 
            the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterServiceGroupFactory">
      <MemberSignature Language="C#" Value="public void RegisterServiceGroupFactory (string serviceGroupTypeName, System.Fabric.ServiceGroupFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterServiceGroupFactory(string serviceGroupTypeName, class System.Fabric.ServiceGroupFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroupTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.ServiceGroupFactory" />
      </Parameters>
      <Docs>
        <param name="serviceGroupTypeName">
          <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in the 
            manifests and/or the CreateServiceGroup command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.ServiceGroupFactory" /> which can create the specified service group type.</para>
        </param>
        <summary>
          <para>Registers the specified <see cref="T:System.Fabric.ServiceGroupFactory" /> for the specified type.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterServiceGroupFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterServiceGroupFactoryAsync (string serviceGroupTypeName, System.Fabric.ServiceGroupFactory factory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterServiceGroupFactoryAsync(string serviceGroupTypeName, class System.Fabric.ServiceGroupFactory factory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroupTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.ServiceGroupFactory" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceGroupTypeName">
          <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in 
            the manifests and/or the CreateServiceGroup command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.ServiceGroupFactory" /> which can create the specified service group type.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to send a notification that the 
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously registers the specified <see cref="T:System.Fabric.ServiceGroupFactory" /> for the specified service group type with the 
            specified <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterServiceType">
      <MemberSignature Language="C#" Value="public void RegisterServiceType (string serviceTypeName, Type serviceTypeImplementation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterServiceType(string serviceTypeName, class System.Type serviceTypeImplementation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="serviceTypeImplementation" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or 
            the CreateService command.</para>
        </param>
        <param name="serviceTypeImplementation">
          <para>The qualified service Type that implements the specified <paramref name="serviceTypeName" />.</para>
        </param>
        <summary>
          <para>Associates the specified <paramref name="serviceTypeName" /> with the actual managed Type that implements it. </para>
        </summary>
        <remarks>
          <para>Note that this mechanism for service type registration does not require a custom <see cref="T:System.Fabric.IStatelessServiceFactory" /> or 
            <see cref="T:System.Fabric.IStatefulServiceFactory" /> to be provided at registration time.  Service Fabric will generate one at runtime and utilize 
            it automatically.  If there is a need for a custom implementation of the factory, you can implement <see cref="T:System.Fabric.IStatelessServiceFactory" /> 
            or <see cref="T:System.Fabric.IStatefulServiceFactory" /> and then provide those via the corresponding factory registration methods 
            (<see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" /> or <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />)</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterServiceTypeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterServiceTypeAsync (string serviceTypeName, Type serviceTypeImplementation, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterServiceTypeAsync(string serviceTypeName, class System.Type serviceTypeImplementation, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="serviceTypeImplementation" Type="System.Type" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
        </param>
        <param name="serviceTypeImplementation">
          <para>The qualified service Type that implements the specified <paramref name="serviceTypeName" />.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that the 
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified <paramref name="timeout" /> 
            and <paramref name="cancellationToken" /></para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterStatefulServiceFactory">
      <MemberSignature Language="C#" Value="public void RegisterStatefulServiceFactory (string serviceTypeName, System.Fabric.IStatefulServiceFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStatefulServiceFactory(string serviceTypeName, class System.Fabric.IStatefulServiceFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.IStatefulServiceFactory" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.IStatefulServiceFactory" /> which can create the specified service type.</para>
        </param>
        <summary>
          <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory" /> for the specified service type.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterStatefulServiceFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterStatefulServiceFactoryAsync (string serviceTypeName, System.Fabric.IStatefulServiceFactory factory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterStatefulServiceFactoryAsync(string serviceTypeName, class System.Fabric.IStatefulServiceFactory factory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.IStatefulServiceFactory" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.IStatefulServiceFactory" /> which can create the specified service type.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory" /> for the specified service type with the specified 
            <paramref name="timeout" /> and <paramref name="cancellationToken" />.</para>
        </summary>
        <returns>
          <para>The representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterStatelessServiceFactory">
      <MemberSignature Language="C#" Value="public void RegisterStatelessServiceFactory (string serviceTypeName, System.Fabric.IStatelessServiceFactory factory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStatelessServiceFactory(string serviceTypeName, class System.Fabric.IStatelessServiceFactory factory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.IStatelessServiceFactory" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or the 
            CreateService command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.IStatelessServiceFactory" /> which can create the specified service type.</para>
        </param>
        <summary>
          <para>Registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory" /> for the specified service type.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterStatelessServiceFactoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RegisterStatelessServiceFactoryAsync (string serviceTypeName, System.Fabric.IStatelessServiceFactory factory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RegisterStatelessServiceFactoryAsync(string serviceTypeName, class System.Fabric.IStatelessServiceFactory factory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypeName" Type="System.String" />
        <Parameter Name="factory" Type="System.Fabric.IStatelessServiceFactory" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceTypeName">
          <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
        </param>
        <param name="factory">
          <para>The <see cref="T:System.Fabric.IStatelessServiceFactory" /> which can create the specified service type.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory" /> for the specified service type, with the 
            specified <paramref name="timeout" /> and <paramref name="cancellationToken" /></para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>