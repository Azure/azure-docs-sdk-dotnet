<Type Name="FabricClient+ApplicationManagementClient" FullName="System.Fabric.FabricClient+ApplicationManagementClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.ApplicationManagementClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/ApplicationManagementClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.ApplicationManagementClient" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides the functionality to manage Service Fabric applications.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyApplicationPackage">
      <MemberSignature Language="C#" Value="public void CopyApplicationPackage (string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyApplicationPackage(string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageStoreConnectionString" Type="System.String" />
        <Parameter Name="applicationPackagePath" Type="System.String" />
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageStoreConnectionString">
          <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync" />. 
            </para>
        </param>
        <param name="applicationPackagePath">
          <para>The full path to the source application package.</para>
        </param>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
        </param>
        <summary>
          <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
        </summary>
        <remarks>
          <para>The timeout of the operation will default to 30 minutes for native image store and there is no timeout capacity for XStore and file share. Can also consider specifying proper timeout value in the overloading function <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)" /></para>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyApplicationPackage">
      <MemberSignature Language="C#" Value="public void CopyApplicationPackage (string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyApplicationPackage(string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageStoreConnectionString" Type="System.String" />
        <Parameter Name="applicationPackagePath" Type="System.String" />
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="imageStoreConnectionString">
          <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync" />. 
            </para>
        </param>
        <param name="applicationPackagePath">
          <para>The full path to the source application package.</para>
        </param>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
        </param>
        <param name="timeout">
          <para>The timeout of copying application package operation</para>
        </param>
        <summary>
          <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyApplicationPackage">
      <MemberSignature Language="C#" Value="public void CopyApplicationPackage (string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore, System.Fabric.IImageStoreProgressHandler progressHandler, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyApplicationPackage(string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore, class System.Fabric.IImageStoreProgressHandler progressHandler, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.Fabric.IImageStoreProgressHandler,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageStoreConnectionString" Type="System.String" />
        <Parameter Name="applicationPackagePath" Type="System.String" />
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
        <Parameter Name="progressHandler" Type="System.Fabric.IImageStoreProgressHandler" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="imageStoreConnectionString">
          <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync" />. 
            </para>
        </param>
        <param name="applicationPackagePath">
          <para>The full path to the source application package.</para>
        </param>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the destination in the Image Store. This path is created relative to the root directory in the image store and used as the destination for the application package copy.</para>
        </param>
        <param name="progressHandler">
          <para>The progress handler to retrieve real time progress information</para>
        </param>
        <param name="timeout">
          <para>The timeout of copying application package operation</para>
        </param>
        <summary>
          <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateApplicationAsync (System.Fabric.Description.ApplicationDescription applicationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CreateApplicationAsync(class System.Fabric.Description.ApplicationDescription applicationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationDescription" Type="System.Fabric.Description.ApplicationDescription" />
      </Parameters>
      <Docs>
        <param name="applicationDescription">
          <para>The description of the application.</para>
        </param>
        <summary>
          <para>Creates and instantiates the specific Service Fabric application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The application capacity parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes" />,
                <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes" /> and
                <see cref="F:System.Fabric.Description.ApplicationDescription.Metrics" /> for correct specification of application capacity parameters.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateApplicationAsync (System.Fabric.Description.ApplicationDescription applicationDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CreateApplicationAsync(class System.Fabric.Description.ApplicationDescription applicationDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationDescription" Type="System.Fabric.Description.ApplicationDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationDescription">
          <para>The description of the application.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Creates and instantiates the specific Service Fabric application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the ImageStore.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the Image Store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an Image Store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The application capacity parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationDescription.MinimumNodes" />,
                <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes" /> and
                <see cref="F:System.Fabric.Description.ApplicationDescription.Metrics" /> for correct specification of application capacity parameters.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteApplicationAsync (System.Fabric.Description.DeleteApplicationDescription deleteApplicationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteApplicationAsync(class System.Fabric.Description.DeleteApplicationDescription deleteApplicationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteApplicationDescription" Type="System.Fabric.Description.DeleteApplicationDescription" />
      </Parameters>
      <Docs>
        <param name="deleteApplicationDescription">
          <para>The description of the application to be deleted.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
          <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteApplicationAsync (Uri applicationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteApplicationAsync(class System.Uri applicationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteApplicationAsync (System.Fabric.Description.DeleteApplicationDescription deleteApplicationDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteApplicationAsync(class System.Fabric.Description.DeleteApplicationDescription deleteApplicationDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteApplicationDescription" Type="System.Fabric.Description.DeleteApplicationDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="deleteApplicationDescription">
          <para>The description of the application to be deleted.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
          <para>A forceful deletion call can convert on-going normal deletion to forceful one.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteApplicationAsync (Uri applicationName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeleteApplicationAsync(class System.Uri applicationName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <param name="timeout">
          <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is being upgraded. </para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeployServicePackageToNode">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeployServicePackageToNode (string applicationTypeName, string applicationTypeVersion, string serviceManifestName, System.Fabric.PackageSharingPolicyList sharingPolicies, string nodeName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DeployServicePackageToNode(string applicationTypeName, string applicationTypeVersion, string serviceManifestName, class System.Fabric.PackageSharingPolicyList sharingPolicies, string nodeName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationTypeName" Type="System.String" />
        <Parameter Name="applicationTypeVersion" Type="System.String" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="sharingPolicies" Type="System.Fabric.PackageSharingPolicyList" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationTypeName">
          <para>ApplicationTypeName associated with service manifest to be downloaded</para>
        </param>
        <param name="applicationTypeVersion">
          <para>Version of ApplicationType </para>
        </param>
        <param name="serviceManifestName">
          <para>Name of service manifest whose packages need to be downloaded</para>
        </param>
        <param name="sharingPolicies">
          <para>Sharing policy representing packages that need to be copied to shared folders</para>
        </param>
        <param name="nodeName">
          <para>Name of the node where packages need to be downloaded.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning T:System.TimeoutException</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled</para>
        </param>
        <summary>
          <para>Downloads packages associated with service manifest to image cache on specified node. </para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManifestAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetApplicationManifestAsync (string applicationTypeName, string applicationTypeVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetApplicationManifestAsync(string applicationTypeName, string applicationTypeVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationTypeName" Type="System.String" />
        <Parameter Name="applicationTypeVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationTypeName">
          <para>The type name as specified in the Application Manifest.</para>
        </param>
        <param name="applicationTypeVersion">
          <para>The type version as specified in the Application Manifest.</para>
        </param>
        <summary>
          <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the raw XML string contents of the Application Manifest.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
          <para>The requested application type and version has not been provisioned.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManifestAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetApplicationManifestAsync (string applicationTypeName, string applicationTypeVersion, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; GetApplicationManifestAsync(string applicationTypeName, string applicationTypeVersion, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationTypeName" Type="System.String" />
        <Parameter Name="applicationTypeVersion" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationTypeName">
          <para>The type name as specified in the Application Manifest.</para>
        </param>
        <param name="applicationTypeVersion">
          <para>The type version as specified in the Application Manifest.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the raw XML string contents of the Application Manifest.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
          <para>The requested application type and version has not been provisioned.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationUpgradeProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ApplicationUpgradeProgress&gt; GetApplicationUpgradeProgressAsync (Uri applicationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ApplicationUpgradeProgress&gt; GetApplicationUpgradeProgressAsync(class System.Uri applicationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ApplicationUpgradeProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <summary>
          <para>Retrieves the upgrade progress of the specified application instance.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationUpgradeProgressAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.ApplicationUpgradeProgress&gt; GetApplicationUpgradeProgressAsync (Uri applicationName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.ApplicationUpgradeProgress&gt; GetApplicationUpgradeProgressAsync(class System.Uri applicationName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.ApplicationUpgradeProgress&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the application instance name.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Retrieves the upgrade progress of the specified application instance.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> whose result is the upgrade progress of the specified application instance.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveNextApplicationUpgradeDomainAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task MoveNextApplicationUpgradeDomainAsync (System.Fabric.ApplicationUpgradeProgress upgradeProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task MoveNextApplicationUpgradeDomainAsync(class System.Fabric.ApplicationUpgradeProgress upgradeProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upgradeProgress" Type="System.Fabric.ApplicationUpgradeProgress" />
      </Parameters>
      <Docs>
        <param name="upgradeProgress">
          <para>–The Upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
        </param>
        <summary>
          <para>Instructs the Service Fabric to upgrade the application instance in the next upgrade domain.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState" /> property should be Pending before calling this method.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveNextApplicationUpgradeDomainAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task MoveNextApplicationUpgradeDomainAsync (System.Fabric.ApplicationUpgradeProgress upgradeProgress, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task MoveNextApplicationUpgradeDomainAsync(class System.Fabric.ApplicationUpgradeProgress upgradeProgress, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upgradeProgress" Type="System.Fabric.ApplicationUpgradeProgress" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="upgradeProgress">
          <para>The upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Instructs the upgrade to continue with the application instance in the next upgrade domain.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState" /> property should be Pending before calling this method.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ProvisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ProvisionApplicationAsync (System.Fabric.Description.ProvisionApplicationTypeDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ProvisionApplicationAsync(class System.Fabric.Description.ProvisionApplicationTypeDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Fabric.Description.ProvisionApplicationTypeDescription" />
      </Parameters>
      <Docs>
        <param name="description">
          <para>Description of the of provision request.</para>
        </param>
        <summary>
          <para>Provision or register an application type with the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This is mandatory before an application instance can be created.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ProvisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ProvisionApplicationAsync (string applicationPackagePathInImageStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ProvisionApplicationAsync(string applicationPackagePathInImageStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)" />.</para>
        </param>
        <summary>
          <para>Provisions or registers a Service Fabric application type with the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This is mandatory before an application instance can be created.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ProvisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ProvisionApplicationAsync (System.Fabric.Description.ProvisionApplicationTypeDescription description, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ProvisionApplicationAsync(class System.Fabric.Description.ProvisionApplicationTypeDescription description, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Fabric.Description.ProvisionApplicationTypeDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="description">
          <para>Description of the of provision request.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Provision or register an application type with the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This is mandatory before an application instance can be created.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ProvisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ProvisionApplicationAsync (string applicationPackagePathInImageStore, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ProvisionApplicationAsync(string applicationPackagePathInImageStore, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)" />.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Provision or register an application type with the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This is mandatory before an application instance can be created.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists" />: The application type has already been provisioned</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveApplicationPackage">
      <MemberSignature Language="C#" Value="public void RemoveApplicationPackage (string imageStoreConnectionString, string applicationPackagePathInImageStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveApplicationPackage(string imageStoreConnectionString, string applicationPackagePathInImageStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageStoreConnectionString" Type="System.String" />
        <Parameter Name="applicationPackagePathInImageStore" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageStoreConnectionString">
          <para>The connection string for the image store, which should match the "ImageStoreConnectionString" setting value found in the cluster manifest of the target cluster. In an on-premise cluster, the value is chosen during initial deployment by the cluster administrator. In an Azure cluster created through the Azure Resource Manager, this value is "fabric:ImageStore". The image store connection string value can be checked by looking at the cluster manifest contents returned by <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync" />. 
            </para>
        </param>
        <param name="applicationPackagePathInImageStore">
          <para>The relative path for the application package in the image store specified during <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String,System.TimeSpan)" />.</para>
        </param>
        <summary>
          <para>Deletes an application package from the Image Store.</para>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the ImageStore.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackApplicationUpgradeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RollbackApplicationUpgradeAsync (Uri applicationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RollbackApplicationUpgradeAsync(class System.Uri applicationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>Name of the application</para>
        </param>
        <summary>
          <para>Starts rolling back the current application upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending upgrade for the specified application to rollback.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RollbackApplicationUpgradeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RollbackApplicationUpgradeAsync (Uri applicationName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task RollbackApplicationUpgradeAsync(class System.Uri applicationName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>Name of the application</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Starts rolling back the current application upgrade</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprovisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnprovisionApplicationAsync (System.Fabric.Description.UnprovisionApplicationTypeDescription description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnprovisionApplicationAsync(class System.Fabric.Description.UnprovisionApplicationTypeDescription description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Fabric.Description.UnprovisionApplicationTypeDescription" />
      </Parameters>
      <Docs>
        <param name="description">
          <para>Describes parameters for the unprovision operation.</para>
        </param>
        <summary>
          <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnprovisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnprovisionApplicationAsync (string applicationTypeName, string applicationTypeVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnprovisionApplicationAsync(string applicationTypeName, string applicationTypeVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationTypeName" Type="System.String" />
        <Parameter Name="applicationTypeVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationTypeName">
          <para>The name of the application type.</para>
        </param>
        <param name="applicationTypeVersion">
          <para>The version of the application type.</para>
        </param>
        <summary>
          <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnprovisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnprovisionApplicationAsync (System.Fabric.Description.UnprovisionApplicationTypeDescription description, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnprovisionApplicationAsync(class System.Fabric.Description.UnprovisionApplicationTypeDescription description, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.Fabric.Description.UnprovisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="description" Type="System.Fabric.Description.UnprovisionApplicationTypeDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="description">
          <para>Describes parameters for the unprovision operation.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnprovisionApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UnprovisionApplicationAsync (string applicationTypeName, string applicationTypeVersion, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UnprovisionApplicationAsync(string applicationTypeName, string applicationTypeVersion, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationTypeName" Type="System.String" />
        <Parameter Name="applicationTypeVersion" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationTypeName">
          <para>The name of the application type.</para>
        </param>
        <param name="applicationTypeVersion">
          <para>The version of the application type.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Unregisters and removes a Service Fabric application type from the cluster.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>
          <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse" />: The application type is being used by one or more applications. </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpdateApplicationAsync (System.Fabric.Description.ApplicationUpdateDescription applicationUpdateDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpdateApplicationAsync(class System.Fabric.Description.ApplicationUpdateDescription applicationUpdateDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationUpdateDescription" Type="System.Fabric.Description.ApplicationUpdateDescription" />
      </Parameters>
      <Docs>
        <param name="applicationUpdateDescription">Application update description.</param>
        <summary>
            Updates a Service Fabric application.
            </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.
                </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.
                </para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress" />: Another application update is already in progress.
                </para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The application update parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes" />,
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes" /> and
                <see cref="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics" /> for correct specification of application capacity parameters.
              </para>
          <para>
                It is possible that parameters in <see cref="T:System.Fabric.Description.ApplicationUpdateDescription" /> are valid, but when combined with existing
                application capacity parameters they produce an invalid combination. For example, setting <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes" /> to
                a value that is higher than the one that was specified in <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes" /> when application was created.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpdateApplicationAsync (System.Fabric.Description.ApplicationUpdateDescription applicationUpdateDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpdateApplicationAsync(class System.Fabric.Description.ApplicationUpdateDescription applicationUpdateDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationUpdateDescription" Type="System.Fabric.Description.ApplicationUpdateDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationUpdateDescription">Application update description.</param>
        <param name="timeout">Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</param>
        <param name="cancellationToken">The CancellationToken that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</param>
        <summary>
            Updates a Service Fabric application.
            </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.
                </para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.
                </para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress" />: Another application update is already in progress.
                </para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
                The application update parameters specified are incorrect. Refer to
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes" />,
                <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes" /> and
                <see cref="F:System.Fabric.Description.ApplicationUpdateDescription.Metrics" /> for correct specification of application capacity parameters.
              </para>
          <para>
                It is possible that parameters in <see cref="T:System.Fabric.Description.ApplicationUpdateDescription" /> are valid, but when combined with existing
                application capacity parameters they produce an invalid combination. For example, setting <see cref="P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes" /> to
                a value that is higher than the one that was specified in <see cref="P:System.Fabric.Description.ApplicationDescription.MaximumNodes" /> when application was created.
              </para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationUpgradeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpdateApplicationUpgradeAsync (System.Fabric.Description.ApplicationUpgradeUpdateDescription updateDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpdateApplicationUpgradeAsync(class System.Fabric.Description.ApplicationUpgradeUpdateDescription updateDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateDescription" Type="System.Fabric.Description.ApplicationUpgradeUpdateDescription" />
      </Parameters>
      <Docs>
        <param name="updateDescription">
          <para>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</para>
        </param>
        <summary>
          <para>Modifies the upgrade parameters of a pending application upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending application upgrade to modify.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationUpgradeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpdateApplicationUpgradeAsync (System.Fabric.Description.ApplicationUpgradeUpdateDescription updateDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpdateApplicationUpgradeAsync(class System.Fabric.Description.ApplicationUpgradeUpdateDescription updateDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateDescription" Type="System.Fabric.Description.ApplicationUpgradeUpdateDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="updateDescription">
          <para>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The token that the operation is observing. It can be used to propagate a notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Modifies the upgrade parameters of a pending application upgrade.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading" />: There is no pending application upgrade to modify.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpgradeApplicationAsync (System.Fabric.Description.ApplicationUpgradeDescription upgradeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpgradeApplicationAsync(class System.Fabric.Description.ApplicationUpgradeDescription upgradeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upgradeDescription" Type="System.Fabric.Description.ApplicationUpgradeDescription" />
      </Parameters>
      <Docs>
        <param name="upgradeDescription">
          <para>The description of the upgrade policy and the application to be upgrade.</para>
        </param>
        <summary>
          <para>Performs upgrade on an application instance.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The upgrade is invalid with respect to the provisioned manifests. </para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError" />: The application type does not exist. </para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is already being upgraded to the requested version.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UpgradeApplicationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task UpgradeApplicationAsync (System.Fabric.Description.ApplicationUpgradeDescription upgradeDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task UpgradeApplicationAsync(class System.Fabric.Description.ApplicationUpgradeDescription upgradeDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upgradeDescription" Type="System.Fabric.Description.ApplicationUpgradeDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="upgradeDescription">
          <para>The description of the upgrade policy and the application to be upgraded.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The token that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
        </param>
        <summary>
          <para>Performs upgrade on an application instance.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Threading.Tasks.Task" /> representing the operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The upgrade is invalid with respect to the provisioned manifests. </para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError" />: The application type does not exist. </para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the image store.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricElementNotFoundException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is already being upgraded to the requested version.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>There was an error accessing a file on the image store.</para>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <para>A required file was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <para>A required directory was not found on the image store.</para>
        </exception>
        <exception cref="T:System.IO.PathTooLongException">
          <para>A path to an image store file/directory was too long.</para>
        </exception>
        <exception cref="T:System.IO.IOException">
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the image store.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>The request timed out but may have already been accepted for processing by the system.</para>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>