<Type Name="IStatefulServiceReplica" FullName="System.Fabric.IStatefulServiceReplica">
  <TypeSignature Language="C#" Value="public interface IStatefulServiceReplica" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStatefulServiceReplica" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.IStatefulServiceReplica" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <para>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </para>
    </summary>
    <remarks>
      <para>
                Stateful service types must implement this interface. The <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.runtime.statefulservice">Reliable Stateful service</see> implements this interface and handles replica lifecycle internally. </para>
      <para>
                The logic of a stateful service type includes behavior that is invoked on primary replicas and behavior that is invoked on secondary replicas.</para>
      <para>
                If the service author wants to make use of the provided <see cref="T:System.Fabric.FabricReplicator" />, then the service must also implement <see cref="T:System.Fabric.IStateProvider" /> to use the implementation of <see cref="T:System.Fabric.IStateReplicator" /> that is provided by <see cref="T:System.Fabric.FabricReplicator" />.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.IStatefulServiceReplica.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Ungracefully terminates the service replica.</para>
        </summary>
        <remarks>
          <para>Network issues resulting in Service Fabric process shutdown and the use of <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)" /> 
            to report a <see cref="F:System.Fabric.FaultType.Permanent" /> fault are examples of ungraceful termination. When this method is invoked, 
            the service replica should immediately release and clean up all references and return.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeRoleAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; ChangeRoleAsync (System.Fabric.ReplicaRole newRole, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ChangeRoleAsync(valuetype System.Fabric.ReplicaRole newRole, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures", Justification="Approved public API.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRole" Type="System.Fabric.ReplicaRole" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newRole">
          <para>The updated <see cref="T:System.Fabric.ReplicaRole" /> that this replica should transition to.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Changes the role of the service replica to one of the <see cref="T:System.Fabric.ReplicaRole" />. </para>
        </summary>
        <returns>
          <para>Returns <see cref="T:System.Threading.Tasks.Task`1" /> of type <see cref="T:System.String" />, the service’s new connection address that is to be associated
            with the replica via Service Fabric Naming.</para>
        </returns>
        <remarks>
          <para>The new role is indicated as a parameter. When the service transitions to the new role, the service has a chance to update its current listening address.
            The listening address is the address where clients connect to it and the one returned via the 
            <see href="https://docs.microsoft.com/dotnet/api/microsoft.servicefabric.services.client.servicepartitionresolver#Microsoft_ServiceFabric_Services_Client_ServicePartitionResolver_ResolveAsync_System_Fabric_ResolvedServicePartition_System_Threading_CancellationToken_">ResolveAsync</see> API. 
            This enables the service when it is a primary replica to only claim some resources such as ports when communication from clients is expected.</para>
          <seealso href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-communication" />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CloseAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Closes the service replica gracefully when it is being shut down.</para>
        </summary>
        <returns>
          <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (System.Fabric.StatefulServiceInitializationParameters initializationParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class System.Fabric.StatefulServiceInitializationParameters initializationParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializationParameters" Type="System.Fabric.StatefulServiceInitializationParameters" />
      </Parameters>
      <Docs>
        <param name="initializationParameters">
          <para>The <see cref="T:System.Fabric.StatefulServiceInitializationParameters" /> for this replica.</para>
        </param>
        <summary>
          <para>Initializes a newly created service replica.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.IReplicator&gt; OpenAsync (System.Fabric.ReplicaOpenMode openMode, System.Fabric.IStatefulServicePartition partition, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.IReplicator&gt; OpenAsync(valuetype System.Fabric.ReplicaOpenMode openMode, class System.Fabric.IStatefulServicePartition partition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.IReplicator&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="openMode" Type="System.Fabric.ReplicaOpenMode" />
        <Parameter Name="partition" Type="System.Fabric.IStatefulServicePartition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="openMode">
          <para>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</para>
        </param>
        <param name="partition">
          <para>The <see cref="T:System.Fabric.IStatefulServicePartition" /> information for this replica.</para>
        </param>
        <param name="cancellationToken">
          <para>The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Opens an initialized service replica so that additional actions can be taken.</para>
        </summary>
        <returns>
          <para>Returns <see cref="T:System.Threading.Tasks.Task`1" />&lt;<see cref="T:System.Fabric.IReplicator" />&gt;, 
            the <see cref="T:System.Fabric.IReplicator" /> that is used by the stateful service. To use the Service Fabric implementation, 
            in <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)" />, 
            the replica should return a <see cref="T:System.Fabric.FabricReplicator" /> that is obtained 
            from  <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)" />.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>