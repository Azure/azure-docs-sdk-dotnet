<Type Name="FabricClient+SecretStoreClient" FullName="System.Fabric.FabricClient+SecretStoreClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.SecretStoreClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/SecretStoreClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.SecretStoreClient" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FabricClient.SecretStoreClient" />
  <TypeSignature Language="F#" Value="type FabricClient.SecretStoreClient = class" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Allows creating Service Fabric Secret Store client
            </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateSecretsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt; CreateSecretsAsync (System.Fabric.SecretStore.SecretDescription[] secrets, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.SecretStore.Secret[]&gt; CreateSecretsAsync(class System.Fabric.SecretStore.SecretDescription[] secrets, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.SecretStoreClient.CreateSecretsAsync(System.Fabric.SecretStore.SecretDescription[],System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSecretsAsync (secrets As SecretDescription(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Secret())" />
      <MemberSignature Language="F#" Value="member this.CreateSecretsAsync : System.Fabric.SecretStore.SecretDescription[] * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;" Usage="secretStoreClient.CreateSecretsAsync (secrets, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secrets" Type="System.Fabric.SecretStore.SecretDescription[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="secrets">List of secrets to create.</param>
        <param name="timeout">Max time to wait for the async operation to complete</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
        <summary>
            Asynchronously create secret resource in Central Secret store.
            </summary>
        <returns>The task representing the asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecretsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt; GetSecretsAsync (System.Fabric.SecretStore.SecretReference[] secretReferences, bool includeValue, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.SecretStore.Secret[]&gt; GetSecretsAsync(class System.Fabric.SecretStore.SecretReference[] secretReferences, bool includeValue, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.SecretStoreClient.GetSecretsAsync(System.Fabric.SecretStore.SecretReference[],System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSecretsAsync (secretReferences As SecretReference(), includeValue As Boolean, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Secret())" />
      <MemberSignature Language="F#" Value="member this.GetSecretsAsync : System.Fabric.SecretStore.SecretReference[] * bool * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;" Usage="secretStoreClient.GetSecretsAsync (secretReferences, includeValue, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secretReferences" Type="System.Fabric.SecretStore.SecretReference[]" />
        <Parameter Name="includeValue" Type="System.Boolean" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="secretReferences">List of secrets to retrieve.</param>
        <param name="includeValue">True to include the secret value in response</param>
        <param name="timeout">Max time to wait for the async operation to complete</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
        <summary>
            Asynchronously get secrets from Central Secret store.
            </summary>
        <returns>The task representing the asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecretVersionsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt; GetSecretVersionsAsync (System.Fabric.SecretStore.SecretReference[] secretReferences, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.SecretStore.SecretReference[]&gt; GetSecretVersionsAsync(class System.Fabric.SecretStore.SecretReference[] secretReferences, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.SecretStoreClient.GetSecretVersionsAsync(System.Fabric.SecretStore.SecretReference[],System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSecretVersionsAsync (secretReferences As SecretReference(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of SecretReference())" />
      <MemberSignature Language="F#" Value="member this.GetSecretVersionsAsync : System.Fabric.SecretStore.SecretReference[] * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt;" Usage="secretStoreClient.GetSecretVersionsAsync (secretReferences, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secretReferences" Type="System.Fabric.SecretStore.SecretReference[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="secretReferences">List of secrets to set.</param>
        <param name="timeout">Max time wait for the async operation to complete</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
        <summary>
            Asynchronously get secret version from Central Secret store.
            </summary>
        <returns>The task representing the asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSecretsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt; RemoveSecretsAsync (System.Fabric.SecretStore.SecretReference[] secretReferences, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.SecretStore.SecretReference[]&gt; RemoveSecretsAsync(class System.Fabric.SecretStore.SecretReference[] secretReferences, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.SecretStoreClient.RemoveSecretsAsync(System.Fabric.SecretStore.SecretReference[],System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSecretsAsync (secretReferences As SecretReference(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of SecretReference())" />
      <MemberSignature Language="F#" Value="member this.RemoveSecretsAsync : System.Fabric.SecretStore.SecretReference[] * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt;" Usage="secretStoreClient.RemoveSecretsAsync (secretReferences, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.SecretReference[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secretReferences" Type="System.Fabric.SecretStore.SecretReference[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="secretReferences">List of secrets to set.</param>
        <param name="timeout">Max time wait for the async operation to complete</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
        <summary>
            Asynchronously remove secrets from Central Secret store.
            </summary>
        <returns>The task representing the asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSecretsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt; SetSecretsAsync (System.Fabric.SecretStore.Secret[] secrets, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.SecretStore.Secret[]&gt; SetSecretsAsync(class System.Fabric.SecretStore.Secret[] secrets, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.SecretStoreClient.SetSecretsAsync(System.Fabric.SecretStore.Secret[],System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetSecretsAsync (secrets As Secret(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Secret())" />
      <MemberSignature Language="F#" Value="member this.SetSecretsAsync : System.Fabric.SecretStore.Secret[] * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;" Usage="secretStoreClient.SetSecretsAsync (secrets, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.SecretStore.Secret[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secrets" Type="System.Fabric.SecretStore.Secret[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="secrets">List of secrets to set.</param>
        <param name="timeout">Max time wait for the async operation to complete</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
        <summary>
            Asynchronously set secrets in Central Secret store.
            </summary>
        <returns>The task representing the asynchronous action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
