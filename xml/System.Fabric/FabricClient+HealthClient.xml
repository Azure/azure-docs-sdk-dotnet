<Type Name="FabricClient+HealthClient" FullName="System.Fabric.FabricClient+HealthClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.HealthClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/HealthClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.HealthClient" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides functionality to perform health related operations,
            like report and query health.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (System.Fabric.Description.ApplicationHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Fabric.Description.ApplicationHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ApplicationHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription" /> instance to describe the query to get application health.</param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application 
            by using the specified query description.</para>
        </summary>
        <returns>
          <para>The health of the specified Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (Uri applicationName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Uri applicationName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application.</para>
        </summary>
        <returns>
          <para>The health of the specified Service Fabric application.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of an application.</para>
          <code language="c#">public static bool GetApplicationHealth(string clusterConnection)
            {
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the application health.
                try
                {
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the application health information.
                Console.WriteLine("Get Application Health:");
                Console.WriteLine("  Application {0}: {1}", applicationHealth.ApplicationName, applicationHealth.AggregatedHealthState);
            
                // List the deployed application health states.
                Console.WriteLine("    Deployed applications:");
                IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                {
                    Console.WriteLine("      Application: " + deployedAppHealthState.ApplicationName);
                    Console.WriteLine("        Aggregated Health State: " + deployedAppHealthState.AggregatedHealthState);
                    Console.WriteLine("        Node Name: " + deployedAppHealthState.NodeName);
                }
            
                // List the deployed services health states.
                Console.WriteLine("    Service Health States:");
                IList&lt;ServiceHealthState&gt; deployedSvcsHealthStateList = applicationHealth.ServiceHealthStates;
                foreach (ServiceHealthState serviceHealthState in deployedSvcsHealthStateList)
                {
                    Console.WriteLine("      Service {0}: {1}", serviceHealthState.ServiceName, serviceHealthState.AggregatedHealthState);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = applicationHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (Uri applicationName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Uri applicationName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="healthPolicy">The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy" /> instance used to evaluate the application.</param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application using the application URI and the health policy.</para>
        </summary>
        <returns>
          <para>The health reports of the specified Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (System.Fabric.Description.ApplicationHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Fabric.Description.ApplicationHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ApplicationHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription" /> instance to describe the query to get application health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application using the specified query input, timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health reports of the specified Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (Uri applicationName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Uri applicationName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application using the specified application URI, timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health reports of the specified Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync (Uri applicationName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ApplicationHealth&gt; GetApplicationHealthAsync(class System.Uri applicationName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the application health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health reports of the specified Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of the cluster.</para>
          <code language="c#">public static bool GetClusterHealth(string clusterConnection)
            {
                ClusterHealth clusterHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the cluster health.
                try
                {
                    clusterHealth = fabricClient.HealthManager.GetClusterHealthAsync().Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the cluster health state.
                Console.WriteLine("Cluster Health:");
                Console.WriteLine("  Aggregated Health State: " + clusterHealth.AggregatedHealthState);
                Console.WriteLine();
            
                // Display the application health states on the cluster.
                Console.WriteLine("  Application Health States:");
                IList&lt;ApplicationHealthState&gt; applicationHealthStateList = clusterHealth.ApplicationHealthStates;
                foreach(ApplicationHealthState applicationHealthState in applicationHealthStateList)
                {
                    Console.WriteLine("    Application {0}: {1}", applicationHealthState.ApplicationName, applicationHealthState.AggregatedHealthState);
                }
            
                // Display Node Health States on the cluster.
                Console.WriteLine("  Node Health States:");
                IList&lt;NodeHealthState&gt; nodeHealthStateList = clusterHealth.NodeHealthStates;
                foreach (NodeHealthState nodeHealthState in nodeHealthStateList)
                {
                    Console.WriteLine("    Node Name: " + nodeHealthState.NodeName);
                    Console.WriteLine("      Aggregated Health State: " + nodeHealthState.AggregatedHealthState);
                }
            
                // Display Health Events.
                Console.WriteLine("  Health Events:");
                IList&lt;HealthEvent&gt; healthEventList = clusterHealth.HealthEvents;
                foreach(HealthEvent healthEvent in healthEventList)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine("  Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = clusterHealth.UnhealthyEvaluations;
                foreach(HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("    Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("      Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("      Description: " + healthEvaluation.Description);
                }
            
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. 
            Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync (System.Fabric.Description.ClusterHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync(class System.Fabric.Description.ClusterHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ClusterHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defines 
            query parameters like health policies, filters etc.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster by using a query description.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync (System.Fabric.Health.ClusterHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync(class System.Fabric.Health.ClusterHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ClusterHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster, evaluating it using the specified policy.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. 
                Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync (System.Fabric.Description.ClusterHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync(class System.Fabric.Description.ClusterHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ClusterHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defined query parameters like health policies, filters etc.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster by using a query description, a timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync (System.Fabric.Health.ClusterHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealth&gt; GetClusterHealthAsync(class System.Fabric.Health.ClusterHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ClusterHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric cluster by using the specified health policy, timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric cluster.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthChunkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
        <returns>The health chunk representing the cluster health.</returns>
        <remarks>The cluster aggregated health state is computed based on all entities in the cluster.
            No children are included in the results, because no filters are specified.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthChunkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync (System.Fabric.Description.ClusterHealthChunkQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync(class System.Fabric.Description.ClusterHealthChunkQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ClusterHealthChunkQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk" />.</param>
        <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
        <returns>The health chunk representing the cluster health.</returns>
        <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthChunkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</param>
        <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
        <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
        <returns>The health chunk representing the cluster health.</returns>
        <remarks>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClusterHealthChunkAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync (System.Fabric.Description.ClusterHealthChunkQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ClusterHealthChunk&gt; GetClusterHealthChunkAsync(class System.Fabric.Description.ClusterHealthChunkQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ClusterHealthChunk&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ClusterHealthChunkQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk" />.</param>
        <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</param>
        <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
        <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
        <returns>The health chunk representing the cluster health.</returns>
        <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (System.Fabric.Description.DeployedApplicationHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Fabric.Description.DeployedApplicationHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedApplicationHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (Uri applicationName, string nodeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Uri applicationName, string nodeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="nodeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="nodeName">
          <para>The node name where the Service Fabric application is deployed.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric application.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a deployed application.</para>
          <code language="c#">public static bool GetDeployedApplicationsHealth(string clusterConnection)
            {
                //DeployedApplicationHealth deployedApplicationHealth;
                //ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Application Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    ApplicationHealth applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed application health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                    {
            DeployedApplicationHealth deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName, 
                deployedAppHealthState.NodeName).Result;
            
            // Display the deployed application health information for each node.
            
            Console.WriteLine("  Application {0}: {1}", deployedApplicationHealth.ApplicationName, deployedApplicationHealth.AggregatedHealthState);
            Console.WriteLine("    Node Name: " + deployedApplicationHealth.NodeName);
            
            // List the deployed application health states.
            Console.WriteLine("    Deployed applications:");
            IList&lt;DeployedServicePackageHealthState&gt; deployedSPHealthStateList = deployedApplicationHealth.DeployedServicePackageHealthStates;
            foreach (DeployedServicePackageHealthState deployedSPHealthState in deployedSPHealthStateList)
            {
                Console.WriteLine("      Application: " + deployedSPHealthState.ApplicationName);
                Console.WriteLine("        Aggregated Health State: " + deployedSPHealthState.AggregatedHealthState);
                Console.WriteLine("        Node Name: " + deployedSPHealthState.NodeName);
                Console.WriteLine("        Service Manifest Name: " + deployedSPHealthState.ServiceManifestName);
            }
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedApplicationHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedApplicationHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (System.Fabric.Description.DeployedApplicationHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Fabric.Description.DeployedApplicationHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedApplicationHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (Uri applicationName, string nodeName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Uri applicationName, string nodeName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="nodeName">
          <para>The node name where the Service Fabric application is deployed.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric application.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (Uri applicationName, string nodeName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Uri applicationName, string nodeName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="nodeName">
          <para>The node name where the Service Fabric application is deployed.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedApplicationHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync (Uri applicationName, string nodeName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedApplicationHealth&gt; GetDeployedApplicationHealthAsync(class System.Uri applicationName, string nodeName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedApplicationHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="nodeName">
          <para>The node name where the Service Fabric application is deployed.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The task representing the asynchronous operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (System.Fabric.Description.DeployedServicePackageHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Fabric.Description.DeployedServicePackageHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedServicePackageHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (System.Fabric.Description.DeployedServicePackageHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Fabric.Description.DeployedServicePackageHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.DeployedServicePackageHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>
                See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName" /> 
                is not a valid Service Fabric Name.</para>
          <para>
                See also <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-errors-and-exceptions" /> for handling common FabricClient failures.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (Uri applicationName, string serviceManifestName, string nodeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Uri applicationName, string serviceManifestName, string nodeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="nodeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="serviceManifestName">
          <para>The name of the service manifest file for this Service Fabric service.</para>
        </param>
        <param name="nodeName">
          <para>The name of the node that the Service Fabric service was deployed to.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a deployed service package.</para>
          <code language="c#">public static bool GetDeployedServicePackageHealth(string clusterConnection)
            {
                DeployedApplicationHealth deployedApplicationHealth;
                DeployedServicePackageHealth deployedServicePackageHealth;
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Service Package Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed service package health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedApplicationHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedApplicationHealthState in deployedApplicationHealthStateList)
                    {
            // Get the deployed application health, which contains the service manifest name and 
            // the names of the nodes where the service has been deployed.
            deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName,
                deployedApplicationHealthState.NodeName).Result;
            
            // Return if empty.
            if (deployedApplicationHealth.DeployedServicePackageHealthStates.Count == 0)
                return false;
            
            // Get the deployed service package health.
            deployedServicePackageHealth = fabricClient.HealthManager.GetDeployedServicePackageHealthAsync(applicationName,
                deployedApplicationHealth.DeployedServicePackageHealthStates[0].ServiceManifestName, 
                deployedApplicationHealthState.NodeName).Result;
            
            // Display the deployed service package health information.
            Console.WriteLine("  Application Name: " + deployedServicePackageHealth.ApplicationName);
            Console.WriteLine("    Node Name: " + deployedServicePackageHealth.NodeName);
            Console.WriteLine("    Aggregated Health State: " + deployedServicePackageHealth.AggregatedHealthState);
            Console.WriteLine("    Service Manifest Name: " + deployedServicePackageHealth.ServiceManifestName);
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedServicePackageHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedServicePackageHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (Uri applicationName, string serviceManifestName, string nodeName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Uri applicationName, string serviceManifestName, string nodeName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="serviceManifestName">
          <para>The name of the service manifest file for this Service Fabric service.</para>
        </param>
        <param name="nodeName">
          <para>The name of the node that the Service Fabric service was deployed to.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (Uri applicationName, string serviceManifestName, string nodeName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Uri applicationName, string serviceManifestName, string nodeName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="serviceManifestName">
          <para>The name of the service manifest file for this Service Fabric service.</para>
        </param>
        <param name="nodeName">
          <para>The name of the node that the Service Fabric service was deployed to.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployedServicePackageHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync (Uri applicationName, string serviceManifestName, string nodeName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.DeployedServicePackageHealth&gt; GetDeployedServicePackageHealthAsync(class System.Uri applicationName, string serviceManifestName, string nodeName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.DeployedServicePackageHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">
          <para>The URI of the Service Fabric application.</para>
        </param>
        <param name="serviceManifestName">
          <para>The name of the service manifest file for this Service Fabric service.</para>
        </param>
        <param name="nodeName">
          <para>The name of the node that the Service Fabric service was deployed to.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a deployed Service Fabric service package.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="applicationName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (System.Fabric.Description.NodeHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(class System.Fabric.Description.NodeHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NodeHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (string nodeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(string nodeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nodeName">
          <para>The Service Fabric node name.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a node.</para>
          <code language="c#">public static bool GetNodeHealth(string clusterConnection)
            {
                NodeHealth nodeHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the node health.
                try
                {
                    nodeHealth = fabricClient.HealthManager.GetNodeHealthAsync("Node1").Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the node health information.
                Console.WriteLine("Node Health:");
                Console.WriteLine("  Node {0}: {1}", nodeHealth.NodeName, nodeHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = nodeHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = nodeHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (string nodeName, System.Fabric.Health.ClusterHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(string nodeName, class System.Fabric.Health.ClusterHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ClusterHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="nodeName">
          <para>The Service Fabric node name.</para>
        </param>
        <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (System.Fabric.Description.NodeHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(class System.Fabric.Description.NodeHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.NodeHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (string nodeName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(string nodeName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">
          <para>The Service Fabric node.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the 
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync (string nodeName, System.Fabric.Health.ClusterHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.NodeHealth&gt; GetNodeHealthAsync(string nodeName, class System.Fabric.Health.ClusterHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.NodeHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ClusterHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">
          <para>The Service Fabric node.</para>
        </param>
        <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric node.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (System.Fabric.Description.PartitionHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(class System.Fabric.Description.PartitionHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.PartitionHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (Guid partitionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(valuetype System.Guid partitionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a partition.</para>
          <code language="c#">public static bool GetPartitionHealth(string clusterConnection)
            {
                PartitionHealth partitionHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the partition health.
                try
                {
                    partitionHealth = fabricClient.HealthManager.GetPartitionHealthAsync(new Guid("a7206315-e53b-4d05-b59c-e210caa28893")).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
                        Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the partition health information.
                Console.WriteLine("Partition Health:");
                Console.WriteLine("  Partition ID: " + partitionHealth.PartitionId);
                Console.WriteLine("    Aggregated Health State: " + partitionHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = partitionHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the replica health states.
                Console.WriteLine("    Replica Health States:");
                IList&lt;ReplicaHealthState&gt; replicaHealthStates = partitionHealth.ReplicaHealthStates;
                foreach (ReplicaHealthState replicaHealthState in replicaHealthStates)
                {
                    Console.WriteLine("      ID: " + replicaHealthState.Id);
                    Console.WriteLine("        Kind: " + replicaHealthState.Kind);
                    Console.WriteLine("        Aggregated Health State: " + replicaHealthState.AggregatedHealthState);
                    Console.WriteLine("        Partition ID: " + replicaHealthState.PartitionId);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = partitionHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (Guid partitionId, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(valuetype System.Guid partitionId, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (System.Fabric.Description.PartitionHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(class System.Fabric.Description.PartitionHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.PartitionHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (Guid partitionId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(valuetype System.Guid partitionId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync (Guid partitionId, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.PartitionHealth&gt; GetPartitionHealthAsync(valuetype System.Guid partitionId, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.PartitionHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric partition.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" />
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (System.Fabric.Description.ReplicaHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(class System.Fabric.Description.ReplicaHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ReplicaHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica specified by the query description.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (Guid partitionId, long replicaId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(valuetype System.Guid partitionId, int64 replicaId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="replicaId">
          <para>The ID of the Service Fabric replica.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a replica.</para>
          <code language="c#">public static bool GetReplicaHealth(string clusterConnection)
            {
                ReplicaHealth replicaHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the replica health.
                try
                {
                    replicaHealth = fabricClient.HealthManager.GetReplicaHealthAsync(
            new Guid("a7206315-e53b-4d05-b59c-e210caa28893"), 130538257146083818).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Replica Health:");
                Console.WriteLine("  ID: " + replicaHealth.Id);
                Console.WriteLine("    Aggregated Health State: " + replicaHealth.AggregatedHealthState);
                Console.WriteLine("    Kind: " + replicaHealth.Kind);
                Console.WriteLine("    Partition ID: " + replicaHealth.PartitionId);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = replicaHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = replicaHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (System.Fabric.Description.ReplicaHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(class System.Fabric.Description.ReplicaHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ReplicaHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (Guid partitionId, long replicaId, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(valuetype System.Guid partitionId, int64 replicaId, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="replicaId">
          <para>The ID of the Service Fabric replica.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (Guid partitionId, long replicaId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(valuetype System.Guid partitionId, int64 replicaId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="replicaId">
          <para>The ID of the Service Fabric replica.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicaHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync (Guid partitionId, long replicaId, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ReplicaHealth&gt; GetReplicaHealthAsync(valuetype System.Guid partitionId, int64 replicaId, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ReplicaHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionId">
          <para>The ID of the Service Fabric partition.</para>
        </param>
        <param name="replicaId">
          <para>The ID of the Service Fabric replica.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric replica.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (System.Fabric.Description.ServiceHealthQueryDescription queryDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Fabric.Description.ServiceHealthQueryDescription queryDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ServiceHealthQueryDescription" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName" /> 
                is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (Uri serviceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Uri serviceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="serviceName">
          <para>The name of the Service Fabric service.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>
          <para>The following example gets the health of a service.</para>
          <code language="c#">public static bool GetServiceHealth(string clusterConnection)
            {
                ServiceHealth serviceHealth;
                Uri serviceName = new Uri("fabric:/myapp/todo/svc1");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the service health.
                try
                {
                    serviceHealth = fabricClient.HealthManager.GetServiceHealthAsync(serviceName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Service Health:");
                Console.WriteLine("  Service {0}: {1}", serviceHealth.ServiceName, serviceHealth.AggregatedHealthState);
            
                // List the health states.
                Console.WriteLine("    Partition Health States:");
                IList&lt;PartitionHealthState&gt; partitionHealthStates = serviceHealth.PartitionHealthStates;
                foreach (PartitionHealthState partitionHealthState in partitionHealthStates)
                {
                    Console.WriteLine("      Aggregated Health State: " + partitionHealthState.AggregatedHealthState);
                    Console.WriteLine("      Partition ID: " + partitionHealthState.PartitionId);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = serviceHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = serviceHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (Uri serviceName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Uri serviceName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
      </Parameters>
      <Docs>
        <param name="serviceName">
          <para>The name of the Service Fabric service.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate service health.</param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the specified time to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (System.Fabric.Description.ServiceHealthQueryDescription queryDescription, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Fabric.Description.ServiceHealthQueryDescription queryDescription, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryDescription" Type="System.Fabric.Description.ServiceHealthQueryDescription" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryDescription">The query description.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (Uri serviceName, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Uri serviceName, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceName">
          <para>The name of the Service Fabric service.</para>
        </param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceHealthAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync (Uri serviceName, System.Fabric.Health.ApplicationHealthPolicy healthPolicy, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Health.ServiceHealth&gt; GetServiceHealthAsync(class System.Uri serviceName, class System.Fabric.Health.ApplicationHealthPolicy healthPolicy, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Health.ServiceHealth&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceName" Type="System.Uri" />
        <Parameter Name="healthPolicy" Type="System.Fabric.Health.ApplicationHealthPolicy" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="serviceName">
          <para>The name of the Service Fabric service.</para>
        </param>
        <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
        <param name="timeout">
          <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
        </param>
        <param name="cancellationToken">
          <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
        </param>
        <summary>
          <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
        </summary>
        <returns>
          <para>The health of a Service Fabric service.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>Caused by one of the following:</para>
          <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut" /> is returned when the operation takes more than the user provided <paramref name="timeout" /> to complete.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" /> is returned when <paramref name="serviceName" /> is not a valid Service Fabric Name.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.CommunicationError" /> is returned when a communication error caused the operation to fail.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricTransientException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy" /> is returned when the service is too busy to process the operation.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportHealth">
      <MemberSignature Language="C#" Value="public void ReportHealth (System.Fabric.Health.HealthReport healthReport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportHealth(class System.Fabric.Health.HealthReport healthReport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="healthReport" Type="System.Fabric.Health.HealthReport" />
      </Parameters>
      <Docs>
        <param name="healthReport">
          <para>The <see cref="T:System.Fabric.Health.HealthReport" /> to submit.</para>
        </param>
        <summary>
          <para>Reports health on a Service Fabric entity.</para>
        </summary>
        <remarks>
          <para>
             When a cluster is secured, the health client needs administrator permission to be able to send the reports.
             Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-connect-to-secure-cluster">connecting to a cluster using the FabricClient APIs</see>.
            </para>
          <para>
             For more information about health reporting, see <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-health-introduction">Service Fabric health monitoring</see>.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportHealth">
      <MemberSignature Language="C#" Value="public void ReportHealth (System.Fabric.Health.HealthReport healthReport, System.Fabric.Health.HealthReportSendOptions sendOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportHealth(class System.Fabric.Health.HealthReport healthReport, class System.Fabric.Health.HealthReportSendOptions sendOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport,System.Fabric.Health.HealthReportSendOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="healthReport" Type="System.Fabric.Health.HealthReport" />
        <Parameter Name="sendOptions" Type="System.Fabric.Health.HealthReportSendOptions" />
      </Parameters>
      <Docs>
        <param name="healthReport">
          <para>The <see cref="T:System.Fabric.Health.HealthReport" /> to submit.</para>
        </param>
        <param name="sendOptions">
          <para>The <see cref="T:System.Fabric.Health.HealthReportSendOptions" /> that controls how the report is sent.</para>
        </param>
        <summary>
          <para>Reports health on a Service Fabric entity and passes send options to control how the report is sent.</para>
        </summary>
        <remarks>
          <para>
             When a cluster is secured, the health client needs administrator permission to be able to send the reports.
             Read more about <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-connect-to-secure-cluster">connecting to a cluster using the FabricClient APIs.</see></para>
          <para>
             For more information about health reporting, see <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-health-introduction">Service Fabric health monitoring</see>.
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
        </exception>
        <exception cref="T:System.Fabric.FabricException">
          <para>Caused by one of the following:</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName" />.</para>
          <para>
            <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList" />.</para>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <para>Caused by one of the following:</para>
          <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>