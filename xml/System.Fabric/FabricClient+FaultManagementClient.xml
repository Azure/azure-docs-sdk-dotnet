<Type Name="FabricClient+FaultManagementClient" FullName="System.Fabric.FabricClient+FaultManagementClient">
  <TypeSignature Language="C#" Value="public sealed class FabricClient.FaultManagementClient" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed beforefieldinit FabricClient/FaultManagementClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.FabricClient.FaultManagementClient" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Provides functionality to introduce faults in a Service Fabric cluster.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
        <returns>A task with move primary result</returns>
        <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
        <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
        <param name="token">The cancellation token</param>
        <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
        <returns>A task with move primary result</returns>
        <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
        <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MovePrimaryAsync&gt;d__58))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="token">The cancellation token</param>
        <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
        <returns>A task with move primary result</returns>
        <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
        <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MovePrimaryAsync&gt;d__65))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MovePrimaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync (string nodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MovePrimaryResult&gt; MovePrimaryAsync(string nodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MovePrimaryAsync&gt;d__64))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MovePrimaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where primary replica to be moved</param>
        <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
        <returns>A task with move primary result</returns>
        <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__68))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__67))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition. </param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__70))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__72))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__69))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__82))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__71))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__74))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__76))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__81))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__73))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__80))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__75))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__78))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__79))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__77))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__84))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MoveSecondaryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync (string currentNodeName, string newNodeName, System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.MoveSecondaryResult&gt; MoveSecondaryAsync(string currentNodeName, string newNodeName, class System.Fabric.PartitionSelector partitionSelector, bool ignoreConstraints, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;MoveSecondaryAsync&gt;d__83))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.MoveSecondaryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentNodeName" Type="System.String" />
        <Parameter Name="newNodeName" Type="System.String" />
        <Parameter Name="partitionSelector" Type="System.Fabric.PartitionSelector" />
        <Parameter Name="ignoreConstraints" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="currentNodeName">node name where selected replica for move is currently present</param>
        <param name="newNodeName">node name where selected replica to be moved</param>
        <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
        <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token</param>
        <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
        <returns>A task with move secondary result</returns>
        <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
        <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
        <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
        <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, bool forceRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__43))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be removed.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM vie.w</param>
        <param name="forceRemove">Will forcefully remove the replica</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, bool forceRemove, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__42))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be removed.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view</param>
        <param name="forceRemove">Will forcefully remove the replica</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, bool forceRemove, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__44))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be removed.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
        <param name="forceRemove">Will forcefully remove the replica.</param>
        <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode" /> is Verify</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode, bool forceRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__46))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be removed </param>
        <param name="replicaId">Replica Id that needs to be removed </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="forceRemove">Will forcefully remove the replica</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in 
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode, bool forceRemove, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__45))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be removed </param>
        <param name="replicaId">Replica Id that needs to be removed </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
        <param name="forceRemove">Will forcefully remove the replica</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode, bool forceRemove, double operationTimeoutSec, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RemoveReplicaResult&gt; RemoveReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode, bool forceRemove, float64 operationTimeoutSec, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RemoveReplicaAsync&gt;d__47))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RemoveReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="forceRemove" Type="System.Boolean" />
        <Parameter Name="operationTimeoutSec" Type="System.Double" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be removed </param>
        <param name="replicaId">Replica Id that needs to be removed </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="forceRemove">Will forcefully remove the replica.</param>
        <param name="operationTimeoutSec">The overall timeout in seconds for the operation, including the timeout to wait for replica to be removed if 
            <see cref="T:System.Fabric.CompletionMode" /> is Verify</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in 
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (Uri applicationName, System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(class System.Uri applicationName, class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__33))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="applicationName">The name of the application to which the code package belongs</param>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which identifies the replica whose host code package needs to be restarted.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector" /> and 
            belongs to the specified application name.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (Uri applicationName, System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(class System.Uri applicationName, class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__32))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">The name of the application to which the code package belong.s</param>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which identifies the replica whose host code package needs to be restarted.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector" /> and 
            belongs to the specified application name.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found.</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (Uri applicationName, System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(class System.Uri applicationName, class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__34))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationName">The name of the application to which the code package belongs</param>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which identifies the replica whose host code package needs to be restarted.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.n</param>
        <param name="operationTimeout">The overall timeout for the operation including the timeout
            to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode" /> is Verify</param>
        <param name="token">Cancellation token.</param>
        <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector" /> and 
            belongs to the specified application name.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__37))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted.</param>
        <param name="applicationName">The name of the application to which the code package belongs.</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__35))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted</param>
        <param name="applicationName">The name of the application to which the code package belongs</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="servicePackageActivationId" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted.</param>
        <param name="applicationName">The name of the application to which the code package belongs.</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
        <param name="servicePackageActivationId">
          <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> of deployed service package which contains the code package. 
            You can get the ServicePackageActivationId of a deployed service package by using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)" /> query. 
            </para>
          <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode" /> specified at the time of creating the service was
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" /> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" />), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode" />.
            </para>
        </param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted.</param>
        <param name="applicationName">The name of the application to which the code package belongs.</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode" /> is Verify</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="servicePackageActivationId" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted</param>
        <param name="applicationName">The name of the application to which the code package belongs</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
        <param name="servicePackageActivationId">
          <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> of deployed service package which contains the code package. 
            You can get the ServicePackageActivationId of a deployed service package by using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)" /> query. 
            </para>
          <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode" /> specified at the time of creating the service was 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" /> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" />), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode" />.
            </para>
        </param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartDeployedCodePackageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync (string nodeName, Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, long codePackageInstanceId, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartDeployedCodePackageResult&gt; RestartDeployedCodePackageAsync(string nodeName, class System.Uri applicationName, string serviceManifestName, string servicePackageActivationId, string codePackageName, int64 codePackageInstanceId, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartDeployedCodePackageAsync&gt;d__40))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartDeployedCodePackageResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="applicationName" Type="System.Uri" />
        <Parameter Name="serviceManifestName" Type="System.String" />
        <Parameter Name="servicePackageActivationId" Type="System.String" />
        <Parameter Name="codePackageName" Type="System.String" />
        <Parameter Name="codePackageInstanceId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node on which the code package is hosted.</param>
        <param name="applicationName">The name of the application to which the code package belongs.</param>
        <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
        <param name="servicePackageActivationId">
          <para>
            The <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> of deployed service package which contains the code package. 
            You can get the ServicePackageActivationId of a deployed service package by using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)" /> query. 
            </para>
          <para>
            If <see cref="T:System.Fabric.Description.ServicePackageActivationMode" /> specified at the time of creating the service was 
            <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" /> (or if it was not specified, in
            which case it defaults to <see cref="F:System.Fabric.Description.ServicePackageActivationMode.SharedProcess" />), then value of 
            <see cref="P:System.Fabric.Query.DeployedServicePackage.ServicePackageActivationId" /> is always an empty string.
            For more details please see <see cref="T:System.Fabric.Description.ServicePackageActivationMode" />.
            </para>
        </param>
        <param name="codePackageName">The name of the code package to be restarted</param>
        <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the code package completes or not.</param>
        <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode" /> is Verify</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
        <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        <remarks>
            The <see cref="T:System.Fabric.CompletionMode" /> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has come back up again.
            </remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
        <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node, and the replica selected.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node, and the replica selected.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to restart.</param>
        <param name="nodeInstance">
          <para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
        </param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName or nodeInstance is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">This parameter is used to choose a specific replica.
            The node where the replica is deployed will be restarted.</param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node, and the replica selected.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to restart.</param>
        <param name="nodeInstance">
          <para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active instance ID.
            If the instances do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
        </param>
        <param name="completionMode">If set to <see cref="F:System.Fabric.CompletionMode.Verify" />, the system will check that the node restarted,
            and the API will not return until it has and NodeStatus is Up.
            If set to <see cref="F:System.Fabric.CompletionMode.DoNotVerify" />, the API returns once the node restart has been initiated.</param>
        <param name="token">The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  If the ErrorCode is NodeNotFound, nodeName is invalid.
            If the ErrorCode is InstanceIdMismatch, the <paramref name="nodeInstance" /> provided does not match the currently running instance.</exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to restart.</param>
        <param name="nodeInstance">
          <para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
        </param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (System.Fabric.ReplicaSelector replicaSelector, bool createFabricDump, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(class System.Fabric.ReplicaSelector replicaSelector, bool createFabricDump, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartNodeAsync&gt;d__19))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="createFabricDump" Type="System.Boolean" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
        <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node, and the replica selected.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.
            If the createFabricDump parameter is set, on restart the process is crashed and
            the crash dump is placed in the Crash Dumps folder which the DCA can be configured to upload.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, bool createFabricDump, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartNodeResult&gt; RestartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, bool createFabricDump, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartNodeAsync&gt;d__15))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="createFabricDump" Type="System.Boolean" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to restart.</param>
        <param name="nodeInstance">
          <para>The node instance ID of the node to restart.
            If not specified, or is set to 0, the value is ignored.
            If the instance is set to -1, the system will internally determine this value.
            If the instance has a positive value, it is compared with the active node ID.
            If the IDs do not match, the process is not restarted and an error occurs.
            A stale message can cause this error.
            </para>
        </param>
        <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
        <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Restarts a cluster node by restarting the Fabric.exe process that hosts the node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>
            This API simulates Service Fabric node failures in the cluster,
            which tests the fail-over recovery paths of your service.
            </remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__49))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in 
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__48))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (System.Fabric.ReplicaSelector replicaSelector, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(class System.Fabric.ReplicaSelector replicaSelector, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__50))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicaSelector" Type="System.Fabric.ReplicaSelector" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector" /> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be restarted if 
            <see cref="T:System.Fabric.CompletionMode" /> is Verify.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in 
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__52))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be restarted </param>
        <param name="replicaId">Replica Id that needs to be restarted </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in 
            <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__51))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be restarted </param>
        <param name="replicaId">Replica Id that needs to be restarted </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="RestartReplicaAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync (string nodeName, Guid partitionId, long replicaId, System.Fabric.CompletionMode completionMode, double operationTimeoutSec, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.RestartReplicaResult&gt; RestartReplicaAsync(string nodeName, valuetype System.Guid partitionId, int64 replicaId, valuetype System.Fabric.CompletionMode completionMode, float64 operationTimeoutSec, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;RestartReplicaAsync&gt;d__53))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.RestartReplicaResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.Guid" />
        <Parameter Name="replicaId" Type="System.Int64" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeoutSec" Type="System.Double" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector" /></param>
        <param name="partitionId">Partition Id where the replica needs to be restarted </param>
        <param name="replicaId">Replica Id that needs to be restarted </param>
        <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode" /> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
        <param name="operationTimeoutSec">The overall timeout in seconds for the operation, including the timeout to wait for replica to be restarted if 
            <see cref="T:System.Fabric.CompletionMode" /> is Verify.</param>
        <param name="token">Cancellation token</param>
        <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector" />.
            </summary>
        <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
        <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
        <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt; StartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StartNodeResult&gt; StartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to start.</param>
        <param name="nodeInstance">The node instance ID of the node, before it was stopped. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.</param>
        <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
        <summary>
            Starts a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt; StartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StartNodeResult&gt; StartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to start.</param>
        <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Starts a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt; StartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StartNodeResult&gt; StartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int32 clusterConnectionPort, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="ipAddressOrFQDN" Type="System.String" />
        <Parameter Name="clusterConnectionPort" Type="System.Int32" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to start.</param>
        <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, 'ClusterConnectionPort" also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, 'ipAddressOrFQDN' also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
        <summary>
            Starts a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt; StartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StartNodeResult&gt; StartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int32 clusterConnectionPort, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="ipAddressOrFQDN" Type="System.String" />
        <Parameter Name="clusterConnectionPort" Type="System.Int32" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to start.</param>
        <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort" /> also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN" /> also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Starts a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt; StartNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StartNodeResult&gt; StartNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, string ipAddressOrFQDN, int32 clusterConnectionPort, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;StartNodeAsync&gt;d__25))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StartNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="ipAddressOrFQDN" Type="System.String" />
        <Parameter Name="clusterConnectionPort" Type="System.Int32" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to start.</param>
        <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort" /> also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN" /> also must be specified.  If neither is specified, the system internally determines these.</param>
        <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellationToken</param>
        <summary>
            Starts a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt; StopNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StopNodeResult&gt; StopNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to stop.</param>
        <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
        <summary>
            Stops a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt; StopNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StopNodeResult&gt; StopNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to stop.</param>
        <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Stops a cluster node.
            </summary>
        <returns>A task with information representing the target node.</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopNodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt; StopNodeAsync (string nodeName, System.Numerics.BigInteger nodeInstance, System.Fabric.CompletionMode completionMode, TimeSpan operationTimeout, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Fabric.Result.StopNodeResult&gt; StopNodeAsync(string nodeName, valuetype System.Numerics.BigInteger nodeInstance, valuetype System.Fabric.CompletionMode completionMode, valuetype System.TimeSpan operationTimeout, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>System.Fabric</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This api is deprecated, use StartNodeTransitionAsync instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Fabric.FabricClient/FaultManagementClient/&lt;StopNodeAsync&gt;d__29))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Fabric.Result.StopNodeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeName" Type="System.String" />
        <Parameter Name="nodeInstance" Type="System.Numerics.BigInteger" />
        <Parameter Name="completionMode" Type="System.Fabric.CompletionMode" />
        <Parameter Name="operationTimeout" Type="System.TimeSpan" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nodeName">The node name of the node to stop.</param>
        <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
        <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
        <param name="operationTimeout">The timeout for this API call.</param>
        <param name="token">The cancellation token that is monitored for any request to cancel the operation.</param>
        <summary>
            Stops a cluster node.
            </summary>
        <returns>A task with information representing the target node</returns>
        <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode" /> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
        <exception cref="T:System.TimeoutException">The operation timed out.</exception>
        <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
      </Docs>
    </Member>
  </Members>
</Type>