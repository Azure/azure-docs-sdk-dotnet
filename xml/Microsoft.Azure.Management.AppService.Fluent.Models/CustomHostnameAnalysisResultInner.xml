<Type Name="CustomHostnameAnalysisResultInner" FullName="Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner">
  <TypeSignature Language="C#" Value="public class CustomHostnameAnalysisResultInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CustomHostnameAnalysisResultInner extends Microsoft.Azure.Management.ResourceManager.Fluent.Resource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
    <AssemblyVersion>1.0.0.60</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Management.ResourceManager.Fluent.Resource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.Rest.Serialization.JsonTransformation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Custom domain analysis.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomHostnameAnalysisResultInner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the
            CustomHostnameAnalysisResultInner class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CustomHostnameAnalysisResultInner (string location = null, string id = null, string name = null, string type = null, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = null, Nullable&lt;bool&gt; isHostnameAlreadyVerified = null, Nullable&lt;Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt; customDomainVerificationTest = null, Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity customDomainVerificationFailureInfo = null, Nullable&lt;bool&gt; hasConflictOnScaleUnit = null, Nullable&lt;bool&gt; hasConflictAcrossSubscription = null, string conflictingAppResourceId = null, System.Collections.Generic.IList&lt;string&gt; cNameRecords = null, System.Collections.Generic.IList&lt;string&gt; txtRecords = null, System.Collections.Generic.IList&lt;string&gt; aRecords = null, System.Collections.Generic.IList&lt;string&gt; alternateCNameRecords = null, System.Collections.Generic.IList&lt;string&gt; alternateTxtRecords = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string location, string id, string name, string type, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Nullable`1&lt;bool&gt; isHostnameAlreadyVerified, valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt; customDomainVerificationTest, class Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity customDomainVerificationFailureInfo, valuetype System.Nullable`1&lt;bool&gt; hasConflictOnScaleUnit, valuetype System.Nullable`1&lt;bool&gt; hasConflictAcrossSubscription, string conflictingAppResourceId, class System.Collections.Generic.IList`1&lt;string&gt; cNameRecords, class System.Collections.Generic.IList`1&lt;string&gt; txtRecords, class System.Collections.Generic.IList`1&lt;string&gt; aRecords, class System.Collections.Generic.IList`1&lt;string&gt; alternateCNameRecords, class System.Collections.Generic.IList`1&lt;string&gt; alternateTxtRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Nullable{Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult},Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="isHostnameAlreadyVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="customDomainVerificationTest" Type="System.Nullable&lt;Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt;" />
        <Parameter Name="customDomainVerificationFailureInfo" Type="Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity" />
        <Parameter Name="hasConflictOnScaleUnit" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="hasConflictAcrossSubscription" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="conflictingAppResourceId" Type="System.String" />
        <Parameter Name="cNameRecords" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="txtRecords" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="aRecords" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="alternateCNameRecords" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="alternateTxtRecords" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="id">To be added.</param>
        <param name="name">To be added.</param>
        <param name="type">To be added.</param>
        <param name="tags">To be added.</param>
        <param name="isHostnameAlreadyVerified">
          <code>true</code> if
            hostname is already verified; otherwise,
            <code>false</code>.</param>
        <param name="customDomainVerificationTest">DNS verification test
            result. Possible values include: 'Passed', 'Failed',
            'Skipped'</param>
        <param name="customDomainVerificationFailureInfo">Raw failure
            information if DNS verification fails.</param>
        <param name="hasConflictOnScaleUnit">
          <code>true</code> if there is
            a conflict on a scale unit; otherwise, <code>false</code>.</param>
        <param name="hasConflictAcrossSubscription">
          <code>true</code> if
            htere is a conflict across subscriptions; otherwise,
            <code>false</code>.</param>
        <param name="conflictingAppResourceId">Name of the conflicting app
            on scale unit if it's within the same subscription.</param>
        <param name="cNameRecords">CName records controller can see for
            this hostname.</param>
        <param name="txtRecords">TXT records controller can see for this
            hostname.</param>
        <param name="aRecords">A records controller can see for this
            hostname.</param>
        <param name="alternateCNameRecords">Alternate CName records
            controller can see for this hostname.</param>
        <param name="alternateTxtRecords">Alternate TXT records controller
            can see for this hostname.</param>
        <summary>
            Initializes a new instance of the
            CustomHostnameAnalysisResultInner class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternateCNameRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; AlternateCNameRecords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; AlternateCNameRecords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.AlternateCNameRecords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.alternateCNameRecords")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets alternate CName records controller can see for this
            hostname.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternateTxtRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; AlternateTxtRecords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; AlternateTxtRecords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.AlternateTxtRecords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.alternateTxtRecords")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets alternate TXT records controller can see for this
            hostname.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ARecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; ARecords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; ARecords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.ARecords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.aRecords")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a records controller can see for this hostname.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CNameRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; CNameRecords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; CNameRecords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.CNameRecords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.cNameRecords")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets cName records controller can see for this hostname.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConflictingAppResourceId">
      <MemberSignature Language="C#" Value="public string ConflictingAppResourceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConflictingAppResourceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.ConflictingAppResourceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.conflictingAppResourceId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets name of the conflicting app on scale unit if it's within the
            same subscription.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomDomainVerificationFailureInfo">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity CustomDomainVerificationFailureInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity CustomDomainVerificationFailureInfo" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.CustomDomainVerificationFailureInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.customDomainVerificationFailureInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AppService.Fluent.Models.ErrorEntity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets raw failure information if DNS verification fails.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomDomainVerificationTest">
      <MemberSignature Language="C#" Value="public Nullable&lt;Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt; CustomDomainVerificationTest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt; CustomDomainVerificationTest" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.CustomDomainVerificationTest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.customDomainVerificationTest")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;Microsoft.Azure.Management.AppService.Fluent.Models.DnsVerificationTestResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets DNS verification test result. Possible values include:
            'Passed', 'Failed', 'Skipped'
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConflictAcrossSubscription">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; HasConflictAcrossSubscription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HasConflictAcrossSubscription" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.HasConflictAcrossSubscription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.hasConflictAcrossSubscription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets &lt;code&gt;true&lt;/code&gt; if htere is a conflict across
            subscriptions; otherwise, &lt;code&gt;false&lt;/code&gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConflictOnScaleUnit">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; HasConflictOnScaleUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HasConflictOnScaleUnit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.HasConflictOnScaleUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.hasConflictOnScaleUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets &lt;code&gt;true&lt;/code&gt; if there is a conflict on a
            scale unit; otherwise, &lt;code&gt;false&lt;/code&gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHostnameAlreadyVerified">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsHostnameAlreadyVerified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsHostnameAlreadyVerified" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.IsHostnameAlreadyVerified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.isHostnameAlreadyVerified")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets &lt;code&gt;true&lt;/code&gt; if hostname is already
            verified; otherwise, &lt;code&gt;false&lt;/code&gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TxtRecords">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; TxtRecords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; TxtRecords" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.AppService.Fluent.Models.CustomHostnameAnalysisResultInner.TxtRecords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.60</AssemblyVersion>
        <AssemblyName>Microsoft.Azure.Management.AppService.Fluent</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="properties.txtRecords")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets TXT records controller can see for this hostname.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>