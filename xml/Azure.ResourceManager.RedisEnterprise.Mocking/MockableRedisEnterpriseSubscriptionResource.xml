<Type Name="MockableRedisEnterpriseSubscriptionResource" FullName="Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableRedisEnterpriseSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableRedisEnterpriseSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableRedisEnterpriseSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableRedisEnterpriseSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableRedisEnterpriseSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisEnterpriseClusters">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt; GetRedisEnterpriseClusters (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt; GetRedisEnterpriseClusters(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseClusters(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRedisEnterpriseClusters (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RedisEnterpriseClusterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRedisEnterpriseClusters : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;&#xA;override this.GetRedisEnterpriseClusters : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;" Usage="mockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseClusters cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all RedisEnterprise clusters in the specified subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Cache/redisEnterprise</description></item><item><term>Operation Id</term><description>RedisEnterprise_List</description></item><item><term>Default Api Version</term><description>2024-02-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisEnterpriseClustersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt; GetRedisEnterpriseClustersAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt; GetRedisEnterpriseClustersAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseClustersAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRedisEnterpriseClustersAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RedisEnterpriseClusterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRedisEnterpriseClustersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;&#xA;override this.GetRedisEnterpriseClustersAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;" Usage="mockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseClustersAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets all RedisEnterprise clusters in the specified subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Cache/redisEnterprise</description></item><item><term>Operation Id</term><description>RedisEnterprise_List</description></item><item><term>Default Api Version</term><description>2024-02-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.RedisEnterprise.RedisEnterpriseClusterResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedisEnterpriseOperationsStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt; GetRedisEnterpriseOperationsStatus (Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt; GetRedisEnterpriseOperationsStatus(valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseOperationsStatus(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRedisEnterpriseOperationsStatus (location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RedisEnterpriseOperationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetRedisEnterpriseOperationsStatus : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&#xA;override this.GetRedisEnterpriseOperationsStatus : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;" Usage="mockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseOperationsStatus (location, operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The name of Azure region. </param>
        <param name="operationId"> The ID of an ongoing async operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the status of operation.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Cache/locations/{location}/operationsStatus/{operationId}</description></item><item><term>Operation Id</term><description>OperationsStatus_Get</description></item><item><term>Default Api Version</term><description>2024-02-01</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRedisEnterpriseOperationsStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&gt; GetRedisEnterpriseOperationsStatusAsync (Azure.Core.AzureLocation location, string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&gt; GetRedisEnterpriseOperationsStatusAsync(valuetype Azure.Core.AzureLocation location, string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RedisEnterprise.Mocking.MockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseOperationsStatusAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRedisEnterpriseOperationsStatusAsync (location As AzureLocation, operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RedisEnterpriseOperationStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetRedisEnterpriseOperationsStatusAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&gt;&#xA;override this.GetRedisEnterpriseOperationsStatusAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&gt;" Usage="mockableRedisEnterpriseSubscriptionResource.GetRedisEnterpriseOperationsStatusAsync (location, operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RedisEnterprise</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RedisEnterprise.Models.RedisEnterpriseOperationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The name of Azure region. </param>
        <param name="operationId"> The ID of an ongoing async operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the status of operation.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.Cache/locations/{location}/operationsStatus/{operationId}</description></item><item><term>Operation Id</term><description>OperationsStatus_Get</description></item><item><term>Default Api Version</term><description>2024-02-01</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
