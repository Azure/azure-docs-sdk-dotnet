<Type Name="ServerBlobAuditingPolicy" FullName="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy">
  <TypeSignature Language="C#" Value="public class ServerBlobAuditingPolicy : Microsoft.Azure.Management.Synapse.Models.ProxyResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServerBlobAuditingPolicy extends Microsoft.Azure.Management.Synapse.Models.ProxyResource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Class ServerBlobAuditingPolicy&#xA;Inherits ProxyResource" />
  <TypeSignature Language="F#" Value="type ServerBlobAuditingPolicy = class&#xA;    inherit ProxyResource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Management.Synapse.Models.ProxyResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Microsoft.Rest.Serialization.JsonTransformation]</AttributeName>
      <AttributeName Language="F#">[&lt;Microsoft.Rest.Serialization.JsonTransformation&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            A server blob auditing policy.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerBlobAuditingPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the ServerBlobAuditingPolicy class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerBlobAuditingPolicy (Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState state, string id = default, string name = default, string type = default, string storageEndpoint = default, string storageAccountAccessKey = default, int? retentionDays = default, System.Collections.Generic.IList&lt;string&gt; auditActionsAndGroups = default, Guid? storageAccountSubscriptionId = default, bool? isStorageSecondaryKeyInUse = default, bool? isAzureMonitorTargetEnabled = default, int? queueDelayMs = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState state, string id, string name, string type, string storageEndpoint, string storageAccountAccessKey, valuetype System.Nullable`1&lt;int32&gt; retentionDays, class System.Collections.Generic.IList`1&lt;string&gt; auditActionsAndGroups, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; storageAccountSubscriptionId, valuetype System.Nullable`1&lt;bool&gt; isStorageSecondaryKeyInUse, valuetype System.Nullable`1&lt;bool&gt; isAzureMonitorTargetEnabled, valuetype System.Nullable`1&lt;int32&gt; queueDelayMs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.#ctor(Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.IList{System.String},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As BlobAuditingPolicyState, Optional id As String = Nothing, Optional name As String = Nothing, Optional type As String = Nothing, Optional storageEndpoint As String = Nothing, Optional storageAccountAccessKey As String = Nothing, Optional retentionDays As Nullable(Of Integer) = Nothing, Optional auditActionsAndGroups As IList(Of String) = Nothing, Optional storageAccountSubscriptionId As Nullable(Of Guid) = Nothing, Optional isStorageSecondaryKeyInUse As Nullable(Of Boolean) = Nothing, Optional isAzureMonitorTargetEnabled As Nullable(Of Boolean) = Nothing, Optional queueDelayMs As Nullable(Of Integer) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy : Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState * string * string * string * string * string * Nullable&lt;int&gt; * System.Collections.Generic.IList&lt;string&gt; * Nullable&lt;Guid&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; -&gt; Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy" Usage="new Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy (state, id, name, type, storageEndpoint, storageAccountAccessKey, retentionDays, auditActionsAndGroups, storageAccountSubscriptionId, isStorageSecondaryKeyInUse, isAzureMonitorTargetEnabled, queueDelayMs)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="storageEndpoint" Type="System.String" />
        <Parameter Name="storageAccountAccessKey" Type="System.String" />
        <Parameter Name="retentionDays" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="auditActionsAndGroups" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="storageAccountSubscriptionId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="isStorageSecondaryKeyInUse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isAzureMonitorTargetEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="queueDelayMs" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="state">Specifies the state of the policy. If state is
             Enabled, storageEndpoint or isAzureMonitorTargetEnabled are
             required. Possible values include: 'Enabled', 'Disabled'</param>
        <param name="id">Fully qualified resource ID for the resource. Ex -
             /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        <param name="name">The name of the resource</param>
        <param name="type">The type of the resource. E.g.
             "Microsoft.Compute/virtualMachines" or
             "Microsoft.Storage/storageAccounts"</param>
        <param name="storageEndpoint">Specifies the blob storage endpoint
             (e.g. https://MyAccount.blob.core.windows.net). If state is
             Enabled, storageEndpoint or isAzureMonitorTargetEnabled is
             required.</param>
        <param name="storageAccountAccessKey">Specifies the identifier key
             of the auditing storage account.
             If state is Enabled and storageEndpoint is specified, not
             specifying the storageAccountAccessKey will use SQL server
             system-assigned managed identity to access the storage.
             Prerequisites for using managed identity authentication:
             1. Assign SQL Server a system-assigned managed identity in Azure
             Active Directory (AAD).
             2. Grant SQL Server identity access to the storage account by
             adding 'Storage Blob Data Contributor' RBAC role to the server
             identity.
             For more information, see [Auditing to storage using Managed
             Identity
             authentication](https://go.microsoft.com/fwlink/?linkid=2114355)</param>
        <param name="retentionDays">Specifies the number of days to keep in
             the audit logs in the storage account.</param>
        <param name="auditActionsAndGroups">Specifies the Actions-Groups
             and Actions to audit.
            
             The recommended set of action groups to use is the following
             combination - this will audit all the queries and stored procedures
             executed against the database, as well as successful and failed
             logins:
            
             BATCH_COMPLETED_GROUP,
             SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
             FAILED_DATABASE_AUTHENTICATION_GROUP.
            
             This above combination is also the set that is configured by
             default when enabling auditing from the Azure portal.
            
             The supported action groups to audit are (note: choose only
             specific groups that cover your auditing needs. Using unnecessary
             groups could lead to very large quantities of audit records):
            
             APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
             BACKUP_RESTORE_GROUP
             DATABASE_LOGOUT_GROUP
             DATABASE_OBJECT_CHANGE_GROUP
             DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
             DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
             DATABASE_OPERATION_GROUP
             DATABASE_PERMISSION_CHANGE_GROUP
             DATABASE_PRINCIPAL_CHANGE_GROUP
             DATABASE_PRINCIPAL_IMPERSONATION_GROUP
             DATABASE_ROLE_MEMBER_CHANGE_GROUP
             FAILED_DATABASE_AUTHENTICATION_GROUP
             SCHEMA_OBJECT_ACCESS_GROUP
             SCHEMA_OBJECT_CHANGE_GROUP
             SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
             SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
             SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
             USER_CHANGE_PASSWORD_GROUP
             BATCH_STARTED_GROUP
             BATCH_COMPLETED_GROUP
            
             These are groups that cover all sql statements and stored
             procedures executed against the database, and should not be used in
             combination with other groups as this will result in duplicate
             audit logs.
            
             For more information, see [Database-Level Audit Action
             Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
            
             For Database auditing policy, specific Actions can also be
             specified (note that Actions cannot be specified for Server
             auditing policy). The supported actions to audit are:
             SELECT
             UPDATE
             INSERT
             DELETE
             EXECUTE
             RECEIVE
             REFERENCES
            
             The general form for defining an action to be audited is:
             {action} ON {object} BY {principal}
            
             Note that &lt;object&gt; in the above format can refer to an object
             like a table, view, or stored procedure, or an entire database or
             schema. For the latter cases, the forms DATABASE::{db_name} and
             SCHEMA::{schema_name} are used, respectively.
            
             For example:
             SELECT on dbo.myTable by public
             SELECT on DATABASE::myDatabase by public
             SELECT on SCHEMA::mySchema by public
            
             For more information, see [Database-Level Audit
             Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)</param>
        <param name="storageAccountSubscriptionId">Specifies the blob
             storage subscription Id.</param>
        <param name="isStorageSecondaryKeyInUse">Specifies whether
             storageAccountAccessKey value is the storage's secondary
             key.</param>
        <param name="isAzureMonitorTargetEnabled">Specifies whether audit
             events are sent to Azure Monitor.
             In order to send the events to Azure Monitor, specify 'state' as
             'Enabled' and 'isAzureMonitorTargetEnabled' as true.
            
             When using REST API to configure auditing, Diagnostic Settings with
             'SQLSecurityAuditEvents' diagnostic logs category on the database
             should be also created.
             Note that for server level audit you should use the 'master'
             database as {databaseName}.
            
             Diagnostic Settings URI format:
             PUT
             https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
            
             For more information, see [Diagnostic Settings REST
             API](https://go.microsoft.com/fwlink/?linkid=2033207)
             or [Diagnostic Settings
             PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
             </param>
        <param name="queueDelayMs">Specifies the amount of time in
             milliseconds that can elapse before audit actions are forced to be
             processed.
             The default minimum value is 1000 (1 second). The maximum is
             2,147,483,647.</param>
        <summary>
             Initializes a new instance of the ServerBlobAuditingPolicy class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditActionsAndGroups">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; AuditActionsAndGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; AuditActionsAndGroups" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.AuditActionsAndGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property AuditActionsAndGroups As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.AuditActionsAndGroups : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.AuditActionsAndGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.auditActionsAndGroups")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.auditActionsAndGroups")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets specifies the Actions-Groups and Actions to audit.
            
             The recommended set of action groups to use is the following
             combination - this will audit all the queries and stored procedures
             executed against the database, as well as successful and failed
             logins:
            
             BATCH_COMPLETED_GROUP,
             SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
             FAILED_DATABASE_AUTHENTICATION_GROUP.
            
             This above combination is also the set that is configured by
             default when enabling auditing from the Azure portal.
            
             The supported action groups to audit are (note: choose only
             specific groups that cover your auditing needs. Using unnecessary
             groups could lead to very large quantities of audit records):
            
             APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
             BACKUP_RESTORE_GROUP
             DATABASE_LOGOUT_GROUP
             DATABASE_OBJECT_CHANGE_GROUP
             DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
             DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
             DATABASE_OPERATION_GROUP
             DATABASE_PERMISSION_CHANGE_GROUP
             DATABASE_PRINCIPAL_CHANGE_GROUP
             DATABASE_PRINCIPAL_IMPERSONATION_GROUP
             DATABASE_ROLE_MEMBER_CHANGE_GROUP
             FAILED_DATABASE_AUTHENTICATION_GROUP
             SCHEMA_OBJECT_ACCESS_GROUP
             SCHEMA_OBJECT_CHANGE_GROUP
             SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
             SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
             SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
             USER_CHANGE_PASSWORD_GROUP
             BATCH_STARTED_GROUP
             BATCH_COMPLETED_GROUP
            
             These are groups that cover all sql statements and stored
             procedures executed against the database, and should not be used in
             combination with other groups as this will result in duplicate
             audit logs.
            
             For more information, see [Database-Level Audit Action
             Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
            
             For Database auditing policy, specific Actions can also be
             specified (note that Actions cannot be specified for Server
             auditing policy). The supported actions to audit are:
             SELECT
             UPDATE
             INSERT
             DELETE
             EXECUTE
             RECEIVE
             REFERENCES
            
             The general form for defining an action to be audited is:
             {action} ON {object} BY {principal}
            
             Note that &amp;lt;object&amp;gt; in the above format can refer to
             an object like a table, view, or stored procedure, or an entire
             database or schema. For the latter cases, the forms
             DATABASE::{db_name} and SCHEMA::{schema_name} are used,
             respectively.
            
             For example:
             SELECT on dbo.myTable by public
             SELECT on DATABASE::myDatabase by public
             SELECT on SCHEMA::mySchema by public
            
             For more information, see [Database-Level Audit
             Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAzureMonitorTargetEnabled">
      <MemberSignature Language="C#" Value="public bool? IsAzureMonitorTargetEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsAzureMonitorTargetEnabled" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.IsAzureMonitorTargetEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAzureMonitorTargetEnabled As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IsAzureMonitorTargetEnabled : Nullable&lt;bool&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.IsAzureMonitorTargetEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.isAzureMonitorTargetEnabled")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.isAzureMonitorTargetEnabled")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets or sets specifies whether audit events are sent to Azure
             Monitor.
             In order to send the events to Azure Monitor, specify 'state' as
             'Enabled' and 'isAzureMonitorTargetEnabled' as true.
            
             When using REST API to configure auditing, Diagnostic Settings with
             'SQLSecurityAuditEvents' diagnostic logs category on the database
             should be also created.
             Note that for server level audit you should use the 'master'
             database as {databaseName}.
            
             Diagnostic Settings URI format:
             PUT
             https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
            
             For more information, see [Diagnostic Settings REST
             API](https://go.microsoft.com/fwlink/?linkid=2033207)
             or [Diagnostic Settings
             PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
            
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStorageSecondaryKeyInUse">
      <MemberSignature Language="C#" Value="public bool? IsStorageSecondaryKeyInUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsStorageSecondaryKeyInUse" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.IsStorageSecondaryKeyInUse" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStorageSecondaryKeyInUse As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.IsStorageSecondaryKeyInUse : Nullable&lt;bool&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.IsStorageSecondaryKeyInUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.isStorageSecondaryKeyInUse")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.isStorageSecondaryKeyInUse")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies whether storageAccountAccessKey value is the
            storage's secondary key.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDelayMs">
      <MemberSignature Language="C#" Value="public int? QueueDelayMs { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; QueueDelayMs" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.QueueDelayMs" />
      <MemberSignature Language="VB.NET" Value="Public Property QueueDelayMs As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.QueueDelayMs : Nullable&lt;int&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.QueueDelayMs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.queueDelayMs")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.queueDelayMs")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the amount of time in milliseconds that can
            elapse before audit actions are forced to be processed.
            The default minimum value is 1000 (1 second). The maximum is
            2,147,483,647.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RetentionDays">
      <MemberSignature Language="C#" Value="public int? RetentionDays { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; RetentionDays" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.RetentionDays" />
      <MemberSignature Language="VB.NET" Value="Public Property RetentionDays As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.RetentionDays : Nullable&lt;int&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.RetentionDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.retentionDays")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.retentionDays")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the number of days to keep in the audit logs
            in the storage account.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As BlobAuditingPolicyState" />
      <MemberSignature Language="F#" Value="member this.State : Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.state")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.state")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.Synapse.Models.BlobAuditingPolicyState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the state of the policy. If state is
            Enabled, storageEndpoint or isAzureMonitorTargetEnabled are
            required. Possible values include: 'Enabled', 'Disabled'
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageAccountAccessKey">
      <MemberSignature Language="C#" Value="public string StorageAccountAccessKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StorageAccountAccessKey" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageAccountAccessKey" />
      <MemberSignature Language="VB.NET" Value="Public Property StorageAccountAccessKey As String" />
      <MemberSignature Language="F#" Value="member this.StorageAccountAccessKey : string with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageAccountAccessKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.storageAccountAccessKey")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.storageAccountAccessKey")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the identifier key of the auditing storage
            account.
            If state is Enabled and storageEndpoint is specified, not
            specifying the storageAccountAccessKey will use SQL server
            system-assigned managed identity to access the storage.
            Prerequisites for using managed identity authentication:
            1. Assign SQL Server a system-assigned managed identity in Azure
            Active Directory (AAD).
            2. Grant SQL Server identity access to the storage account by
            adding 'Storage Blob Data Contributor' RBAC role to the server
            identity.
            For more information, see [Auditing to storage using Managed
            Identity
            authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageAccountSubscriptionId">
      <MemberSignature Language="C#" Value="public Guid? StorageAccountSubscriptionId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Guid&gt; StorageAccountSubscriptionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageAccountSubscriptionId" />
      <MemberSignature Language="VB.NET" Value="Public Property StorageAccountSubscriptionId As Nullable(Of Guid)" />
      <MemberSignature Language="F#" Value="member this.StorageAccountSubscriptionId : Nullable&lt;Guid&gt; with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageAccountSubscriptionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.storageAccountSubscriptionId")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.storageAccountSubscriptionId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the blob storage subscription Id.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StorageEndpoint">
      <MemberSignature Language="C#" Value="public string StorageEndpoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StorageEndpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public Property StorageEndpoint As String" />
      <MemberSignature Language="F#" Value="member this.StorageEndpoint : string with get, set" Usage="Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.StorageEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonProperty(PropertyName="properties.storageEndpoint")]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonProperty(PropertyName="properties.storageEndpoint")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets specifies the blob storage endpoint (e.g.
            https://MyAccount.blob.core.windows.net). If state is Enabled,
            storageEndpoint or isAzureMonitorTargetEnabled is required.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual void Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.Synapse.Models.ServerBlobAuditingPolicy.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Validate ()" />
      <MemberSignature Language="F#" Value="abstract member Validate : unit -&gt; unit&#xA;override this.Validate : unit -&gt; unit" Usage="serverBlobAuditingPolicy.Validate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.Synapse</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Validate the object.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
