<Type Name="DataFactoryResource" FullName="Azure.ResourceManager.DataFactory.DataFactoryResource">
  <TypeSignature Language="C#" Value="public class DataFactoryResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataFactoryResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DataFactory.DataFactoryResource" />
  <TypeSignature Language="VB.NET" Value="Public Class DataFactoryResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type DataFactoryResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a DataFactory along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetDataFactoryResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetDataFactory method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataFactoryResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDataFlowToDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt; AddDataFlowToDebugSession (Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt; AddDataFlowToDebugSession(class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddDataFlowToDebugSession(Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDataFlowToDebugSession (content As FactoryDataFlowDebugPackageContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryDataFlowStartDebugSessionResult)" />
      <MemberSignature Language="F#" Value="abstract member AddDataFlowToDebugSession : Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&#xA;override this.AddDataFlowToDebugSession : Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;" Usage="dataFactoryResource.AddDataFlowToDebugSession (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition with debug content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a data flow into debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession
            Operation Id: DataFlowDebugSession_AddDataFlow
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddDataFlowToDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&gt; AddDataFlowToDebugSessionAsync (Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&gt; AddDataFlowToDebugSessionAsync(class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddDataFlowToDebugSessionAsync(Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddDataFlowToDebugSessionAsync (content As FactoryDataFlowDebugPackageContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryDataFlowStartDebugSessionResult))" />
      <MemberSignature Language="F#" Value="abstract member AddDataFlowToDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&gt;&#xA;override this.AddDataFlowToDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&gt;" Usage="dataFactoryResource.AddDataFlowToDebugSessionAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowStartDebugSessionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugPackageContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition with debug content. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a data flow into debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/addDataFlowToDebugSession
            Operation Id: DataFlowDebugSession_AddDataFlow
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelPipelineRun (string runId, bool? isRecursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelPipelineRun(string runId, valuetype System.Nullable`1&lt;bool&gt; isRecursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CancelPipelineRun(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelPipelineRun (runId As String, Optional isRecursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelPipelineRun : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CancelPipelineRun : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataFactoryResource.CancelPipelineRun (runId, isRecursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="isRecursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancel a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel
            Operation Id: PipelineRuns_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelPipelineRunAsync (string runId, bool? isRecursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelPipelineRunAsync(string runId, valuetype System.Nullable`1&lt;bool&gt; isRecursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CancelPipelineRunAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelPipelineRunAsync (runId As String, Optional isRecursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelPipelineRunAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelPipelineRunAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataFactoryResource.CancelPipelineRunAsync (runId, isRecursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="isRecursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="isRecursive"> If true, cancel all the Child pipelines that are triggered by the current pipeline. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Cancel a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/cancel
            Operation Id: PipelineRuns_Cancel
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt; CreateDataFlowDebugSession (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt; CreateDataFlowDebugSession(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateDataFlowDebugSession(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataFlowDebugSession (waitUntil As WaitUntil, content As FactoryDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FactoryDataFlowCreateDebugSessionResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&#xA;override this.CreateDataFlowDebugSession : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;" Usage="dataFactoryResource.CreateDataFlowDebugSession (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug session definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&gt; CreateDataFlowDebugSessionAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&gt; CreateDataFlowDebugSessionAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateDataFlowDebugSessionAsync(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDataFlowDebugSessionAsync (waitUntil As WaitUntil, content As FactoryDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FactoryDataFlowCreateDebugSessionResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&gt;&#xA;override this.CreateDataFlowDebugSessionAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&gt;" Usage="dataFactoryResource.CreateDataFlowDebugSessionAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowCreateDebugSessionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug session definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/createDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string factoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string factoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.CreateResourceIdentifier(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, factoryName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, factoryName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="factoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="factoryName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.DataFactory.DataFactoryResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.DataFactoryData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DataFactory.DataFactoryData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.DataFactoryResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As DataFactoryData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.DataFactory.DataFactoryData" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.DataFactoryData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="dataFactoryResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="dataFactoryResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDataFlowDebugSession">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteDataFlowDebugSession (Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteDataFlowDebugSession(class Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteDataFlowDebugSession(Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDataFlowDebugSession (content As DeleteDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteDataFlowDebugSession : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataFactoryResource.DeleteDataFlowDebugSession (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition for deletion. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDataFlowDebugSessionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteDataFlowDebugSessionAsync (Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteDataFlowDebugSessionAsync(class Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.DeleteDataFlowDebugSessionAsync(Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDataFlowDebugSessionAsync (content As DeleteDataFlowDebugSessionContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteDataFlowDebugSessionAsync : Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataFactoryResource.DeleteDataFlowDebugSessionAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DeleteDataFlowDebugSessionContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Data flow debug session definition for deletion. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a data flow debug session.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/deleteDataFlowDebugSession
            Operation Id: DataFlowDebugSession_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDataFlowDebugSessionCommand">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt; ExecuteDataFlowDebugSessionCommand (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt; ExecuteDataFlowDebugSessionCommand(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.ExecuteDataFlowDebugSessionCommand(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteDataFlowDebugSessionCommand (waitUntil As WaitUntil, content As DataFlowDebugCommandContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FactoryDataFlowDebugCommandResult)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteDataFlowDebugSessionCommand : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&#xA;override this.ExecuteDataFlowDebugSessionCommand : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;" Usage="dataFactoryResource.ExecuteDataFlowDebugSessionCommand (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug command definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Execute a data flow debug command.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand
            Operation Id: DataFlowDebugSession_ExecuteCommand
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDataFlowDebugSessionCommandAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&gt; ExecuteDataFlowDebugSessionCommandAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&gt; ExecuteDataFlowDebugSessionCommandAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.ExecuteDataFlowDebugSessionCommandAsync(Azure.WaitUntil,Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExecuteDataFlowDebugSessionCommandAsync (waitUntil As WaitUntil, content As DataFlowDebugCommandContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FactoryDataFlowDebugCommandResult))" />
      <MemberSignature Language="F#" Value="abstract member ExecuteDataFlowDebugSessionCommandAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&gt;&#xA;override this.ExecuteDataFlowDebugSessionCommandAsync : Azure.WaitUntil * Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&gt;" Usage="dataFactoryResource.ExecuteDataFlowDebugSessionCommandAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataFlowDebugCommandResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.DataFlowDebugCommandContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Data flow debug command definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Execute a data flow debug command.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/executeDataFlowDebugCommand
            Operation Id: DataFlowDebugSession_ExecuteCommand
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Get (string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Get(string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.Get (ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivityRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt; GetActivityRun (string runId, Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt; GetActivityRun(string runId, class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetActivityRun(System.String,Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityRun (runId As String, content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ActivityRunInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetActivityRun : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;&#xA;override this.GetActivityRun : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;" Usage="dataFactoryResource.GetActivityRun (runId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="content"> Parameters to filter the activity runs. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query activity runs based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns
            Operation Id: ActivityRuns_QueryByPipelineRun
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.ActivityRunInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActivityRunAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt; GetActivityRunAsync (string runId, Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt; GetActivityRunAsync(string runId, class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetActivityRunAsync(System.String,Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityRunAsync (runId As String, content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ActivityRunInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetActivityRunAsync : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;&#xA;override this.GetActivityRunAsync : string * Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;" Usage="dataFactoryResource.GetActivityRunAsync (runId, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.ActivityRunInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="content"> Parameters to filter the activity runs. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query activity runs based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}/queryActivityruns
            Operation Id: ActivityRuns_QueryByPipelineRun
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.ActivityRunInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; GetAsync (string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; GetAsync(string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.GetAsync (ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifNoneMatch"> ETag of the factory entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowDebugSessions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessions (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowDebugSessions(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowDebugSessions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DataFlowDebugSessionInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowDebugSessions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;&#xA;override this.GetDataFlowDebugSessions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;" Usage="dataFactoryResource.GetDataFlowDebugSessions cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query all active data flow debug sessions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions
            Operation Id: DataFlowDebugSession_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFlowDebugSessionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessionsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt; GetDataFlowDebugSessionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataFlowDebugSessionsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataFlowDebugSessionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DataFlowDebugSessionInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFlowDebugSessionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;&#xA;override this.GetDataFlowDebugSessionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;" Usage="dataFactoryResource.GetDataFlowDebugSessionsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query all active data flow debug sessions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryDataFlowDebugSessions
            Operation Id: DataFlowDebugSession_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.DataFlowDebugSessionInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataPlaneAccess">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt; GetDataPlaneAccess (Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy policy, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt; GetDataPlaneAccess(class Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataPlaneAccess(Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataPlaneAccess (policy As FactoryDataPlaneUserAccessPolicy, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryDataPlaneAccessPolicyResult)" />
      <MemberSignature Language="F#" Value="abstract member GetDataPlaneAccess : Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&#xA;override this.GetDataPlaneAccess : Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;" Usage="dataFactoryResource.GetDataPlaneAccess (policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policy"> Data Plane user access policy definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Data Plane access.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess
            Operation Id: Factories_GetDataPlaneAccess
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policy" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataPlaneAccessAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&gt; GetDataPlaneAccessAsync (Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy policy, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&gt; GetDataPlaneAccessAsync(class Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy policy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetDataPlaneAccessAsync(Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataPlaneAccessAsync (policy As FactoryDataPlaneUserAccessPolicy, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryDataPlaneAccessPolicyResult))" />
      <MemberSignature Language="F#" Value="abstract member GetDataPlaneAccessAsync : Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&gt;&#xA;override this.GetDataPlaneAccessAsync : Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&gt;" Usage="dataFactoryResource.GetDataPlaneAccessAsync (policy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneAccessPolicyResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Azure.ResourceManager.DataFactory.Models.FactoryDataPlaneUserAccessPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="policy"> Data Plane user access policy definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Data Plane access.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getDataPlaneAccess
            Operation Id: Factories_GetDataPlaneAccess
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="policy" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeature">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt; GetExposureControlFeature (Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt; GetExposureControlFeature(class Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeature(Azure.ResourceManager.DataFactory.Models.ExposureControlContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeature (content As ExposureControlContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExposureControlResult)" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeature : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&#xA;override this.GetExposureControlFeature : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;" Usage="dataFactoryResource.GetExposureControlFeature (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get exposure control feature for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue
            Operation Id: ExposureControl_GetFeatureValueByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeatureAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt; GetExposureControlFeatureAsync (Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt; GetExposureControlFeatureAsync(class Azure.ResourceManager.DataFactory.Models.ExposureControlContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeatureAsync(Azure.ResourceManager.DataFactory.Models.ExposureControlContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeatureAsync (content As ExposureControlContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExposureControlResult))" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeatureAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;&#xA;override this.GetExposureControlFeatureAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;" Usage="dataFactoryResource.GetExposureControlFeatureAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get exposure control feature for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getFeatureValue
            Operation Id: ExposureControl_GetFeatureValueByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeatures">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt; GetExposureControlFeatures (Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt; GetExposureControlFeatures(class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeatures(Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeatures (content As ExposureControlBatchContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExposureControlBatchResult)" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeatures : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&#xA;override this.GetExposureControlFeatures : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;" Usage="dataFactoryResource.GetExposureControlFeatures (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request for list of features. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get list of exposure control features for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue
            Operation Id: ExposureControl_QueryFeatureValuesByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExposureControlFeaturesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt; GetExposureControlFeaturesAsync (Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt; GetExposureControlFeaturesAsync(class Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetExposureControlFeaturesAsync(Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExposureControlFeaturesAsync (content As ExposureControlBatchContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExposureControlBatchResult))" />
      <MemberSignature Language="F#" Value="abstract member GetExposureControlFeaturesAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;&#xA;override this.GetExposureControlFeaturesAsync : Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;" Usage="dataFactoryResource.GetExposureControlFeaturesAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.ExposureControlBatchResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.ExposureControlBatchContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The exposure control request for list of features. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get list of exposure control features for specific factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryFeaturesValue
            Operation Id: ExposureControl_QueryFeatureValuesByFactory
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDataFlow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt; GetFactoryDataFlow (string dataFlowName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt; GetFactoryDataFlow(string dataFlowName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDataFlow(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDataFlow (dataFlowName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryDataFlowResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDataFlow : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&#xA;override this.GetFactoryDataFlow : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;" Usage="dataFactoryResource.GetFactoryDataFlow (dataFlowName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFlowName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataFlowName"> The data flow name. </param>
        <param name="ifNoneMatch"> ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a data flow.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
            Operation Id: DataFlows_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataFlowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataFlowName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDataFlowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&gt; GetFactoryDataFlowAsync (string dataFlowName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&gt; GetFactoryDataFlowAsync(string dataFlowName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDataFlowAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDataFlowAsync (dataFlowName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryDataFlowResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDataFlowAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&gt;&#xA;override this.GetFactoryDataFlowAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryDataFlowAsync (dataFlowName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDataFlowResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataFlowName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataFlowName"> The data flow name. </param>
        <param name="ifNoneMatch"> ETag of the data flow entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a data flow.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/dataflows/{dataFlowName}
            Operation Id: DataFlows_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataFlowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataFlowName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDataFlows">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryDataFlowCollection GetFactoryDataFlows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryDataFlowCollection GetFactoryDataFlows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDataFlows" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDataFlows () As FactoryDataFlowCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDataFlows : unit -&gt; Azure.ResourceManager.DataFactory.FactoryDataFlowCollection&#xA;override this.GetFactoryDataFlows : unit -&gt; Azure.ResourceManager.DataFactory.FactoryDataFlowCollection" Usage="dataFactoryResource.GetFactoryDataFlows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryDataFlowCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryDataFlowResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryDataFlowResources and their operations over a FactoryDataFlowResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDataset">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt; GetFactoryDataset (string datasetName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt; GetFactoryDataset(string datasetName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDataset(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDataset (datasetName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryDatasetResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDataset : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&#xA;override this.GetFactoryDataset : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;" Usage="dataFactoryResource.GetFactoryDataset (datasetName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datasetName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="datasetName"> The dataset name. </param>
        <param name="ifNoneMatch"> ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a dataset.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
            Operation Id: Datasets_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="datasetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="datasetName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDatasetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&gt; GetFactoryDatasetAsync (string datasetName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&gt; GetFactoryDatasetAsync(string datasetName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDatasetAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDatasetAsync (datasetName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryDatasetResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDatasetAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&gt;&#xA;override this.GetFactoryDatasetAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryDatasetAsync (datasetName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryDatasetResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datasetName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="datasetName"> The dataset name. </param>
        <param name="ifNoneMatch"> ETag of the dataset entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a dataset.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/datasets/{datasetName}
            Operation Id: Datasets_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="datasetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="datasetName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryDatasets">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryDatasetCollection GetFactoryDatasets ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryDatasetCollection GetFactoryDatasets() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryDatasets" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryDatasets () As FactoryDatasetCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryDatasets : unit -&gt; Azure.ResourceManager.DataFactory.FactoryDatasetCollection&#xA;override this.GetFactoryDatasets : unit -&gt; Azure.ResourceManager.DataFactory.FactoryDatasetCollection" Usage="dataFactoryResource.GetFactoryDatasets " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryDatasetCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryDatasetResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryDatasetResources and their operations over a FactoryDatasetResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryGlobalParameter">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt; GetFactoryGlobalParameter (string globalParameterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt; GetFactoryGlobalParameter(string globalParameterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryGlobalParameter(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryGlobalParameter (globalParameterName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryGlobalParameterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryGlobalParameter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&#xA;override this.GetFactoryGlobalParameter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;" Usage="dataFactoryResource.GetFactoryGlobalParameter (globalParameterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalParameterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="globalParameterName"> The global parameter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Global parameter
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}
            Operation Id: GlobalParameters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="globalParameterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="globalParameterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryGlobalParameterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&gt; GetFactoryGlobalParameterAsync (string globalParameterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&gt; GetFactoryGlobalParameterAsync(string globalParameterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryGlobalParameterAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryGlobalParameterAsync (globalParameterName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryGlobalParameterResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryGlobalParameterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&gt;&#xA;override this.GetFactoryGlobalParameterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryGlobalParameterAsync (globalParameterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryGlobalParameterResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="globalParameterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="globalParameterName"> The global parameter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Global parameter
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/globalParameters/{globalParameterName}
            Operation Id: GlobalParameters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="globalParameterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="globalParameterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryGlobalParameters">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryGlobalParameterCollection GetFactoryGlobalParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryGlobalParameterCollection GetFactoryGlobalParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryGlobalParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryGlobalParameters () As FactoryGlobalParameterCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryGlobalParameters : unit -&gt; Azure.ResourceManager.DataFactory.FactoryGlobalParameterCollection&#xA;override this.GetFactoryGlobalParameters : unit -&gt; Azure.ResourceManager.DataFactory.FactoryGlobalParameterCollection" Usage="dataFactoryResource.GetFactoryGlobalParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryGlobalParameterCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryGlobalParameterResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryGlobalParameterResources and their operations over a FactoryGlobalParameterResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryIntegrationRuntime">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt; GetFactoryIntegrationRuntime (string integrationRuntimeName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt; GetFactoryIntegrationRuntime(string integrationRuntimeName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryIntegrationRuntime(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryIntegrationRuntime (integrationRuntimeName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryIntegrationRuntimeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryIntegrationRuntime : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&#xA;override this.GetFactoryIntegrationRuntime : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;" Usage="dataFactoryResource.GetFactoryIntegrationRuntime (integrationRuntimeName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationRuntimeName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationRuntimeName"> The integration runtime name. </param>
        <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration runtime.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
            Operation Id: IntegrationRuntimes_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationRuntimeName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationRuntimeName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryIntegrationRuntimeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&gt; GetFactoryIntegrationRuntimeAsync (string integrationRuntimeName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&gt; GetFactoryIntegrationRuntimeAsync(string integrationRuntimeName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryIntegrationRuntimeAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryIntegrationRuntimeAsync (integrationRuntimeName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryIntegrationRuntimeResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryIntegrationRuntimeAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&gt;&#xA;override this.GetFactoryIntegrationRuntimeAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryIntegrationRuntimeAsync (integrationRuntimeName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationRuntimeName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationRuntimeName"> The integration runtime name. </param>
        <param name="ifNoneMatch"> ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration runtime.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/integrationRuntimes/{integrationRuntimeName}
            Operation Id: IntegrationRuntimes_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationRuntimeName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationRuntimeName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryIntegrationRuntimes">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeCollection GetFactoryIntegrationRuntimes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeCollection GetFactoryIntegrationRuntimes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryIntegrationRuntimes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryIntegrationRuntimes () As FactoryIntegrationRuntimeCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryIntegrationRuntimes : unit -&gt; Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeCollection&#xA;override this.GetFactoryIntegrationRuntimes : unit -&gt; Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeCollection" Usage="dataFactoryResource.GetFactoryIntegrationRuntimes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryIntegrationRuntimeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryIntegrationRuntimeResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryIntegrationRuntimeResources and their operations over a FactoryIntegrationRuntimeResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryLinkedService">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt; GetFactoryLinkedService (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt; GetFactoryLinkedService(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryLinkedService(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryLinkedService (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryLinkedServiceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryLinkedService : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&#xA;override this.GetFactoryLinkedService : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;" Usage="dataFactoryResource.GetFactoryLinkedService (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a linked service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
            Operation Id: LinkedServices_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkedServiceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryLinkedServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&gt; GetFactoryLinkedServiceAsync (string linkedServiceName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&gt; GetFactoryLinkedServiceAsync(string linkedServiceName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryLinkedServiceAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryLinkedServiceAsync (linkedServiceName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryLinkedServiceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryLinkedServiceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&gt;&#xA;override this.GetFactoryLinkedServiceAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryLinkedServiceAsync (linkedServiceName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryLinkedServiceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkedServiceName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkedServiceName"> The linked service name. </param>
        <param name="ifNoneMatch"> ETag of the linked service entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a linked service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/linkedservices/{linkedServiceName}
            Operation Id: LinkedServices_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkedServiceName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkedServiceName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryLinkedServices">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryLinkedServiceCollection GetFactoryLinkedServices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryLinkedServiceCollection GetFactoryLinkedServices() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryLinkedServices" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryLinkedServices () As FactoryLinkedServiceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryLinkedServices : unit -&gt; Azure.ResourceManager.DataFactory.FactoryLinkedServiceCollection&#xA;override this.GetFactoryLinkedServices : unit -&gt; Azure.ResourceManager.DataFactory.FactoryLinkedServiceCollection" Usage="dataFactoryResource.GetFactoryLinkedServices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryLinkedServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryLinkedServiceResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryLinkedServiceResources and their operations over a FactoryLinkedServiceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt; GetFactoryPipeline (string pipelineName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt; GetFactoryPipeline(string pipelineName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPipeline(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPipeline (pipelineName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryPipelineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPipeline : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&#xA;override this.GetFactoryPipeline : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;" Usage="dataFactoryResource.GetFactoryPipeline (pipelineName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pipelineName"> The pipeline name. </param>
        <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
            Operation Id: Pipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPipelineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&gt; GetFactoryPipelineAsync (string pipelineName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&gt; GetFactoryPipelineAsync(string pipelineName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPipelineAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPipelineAsync (pipelineName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryPipelineResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPipelineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&gt;&#xA;override this.GetFactoryPipelineAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryPipelineAsync (pipelineName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPipelineResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pipelineName"> The pipeline name. </param>
        <param name="ifNoneMatch"> ETag of the pipeline entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a pipeline.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelines/{pipelineName}
            Operation Id: Pipelines_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="pipelineName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pipelineName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPipelines">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryPipelineCollection GetFactoryPipelines ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryPipelineCollection GetFactoryPipelines() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPipelines" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPipelines () As FactoryPipelineCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPipelines : unit -&gt; Azure.ResourceManager.DataFactory.FactoryPipelineCollection&#xA;override this.GetFactoryPipelines : unit -&gt; Azure.ResourceManager.DataFactory.FactoryPipelineCollection" Usage="dataFactoryResource.GetFactoryPipelines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryPipelineCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryPipelineResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryPipelineResources and their operations over a FactoryPipelineResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPrivateEndpointConnection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt; GetFactoryPrivateEndpointConnection (string privateEndpointConnectionName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt; GetFactoryPrivateEndpointConnection(string privateEndpointConnectionName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPrivateEndpointConnection(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPrivateEndpointConnection (privateEndpointConnectionName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryPrivateEndpointConnectionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPrivateEndpointConnection : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&#xA;override this.GetFactoryPrivateEndpointConnection : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;" Usage="dataFactoryResource.GetFactoryPrivateEndpointConnection (privateEndpointConnectionName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The private endpoint connection name. </param>
        <param name="ifNoneMatch"> ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private endpoint connection
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnection_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPrivateEndpointConnectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&gt; GetFactoryPrivateEndpointConnectionAsync (string privateEndpointConnectionName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&gt; GetFactoryPrivateEndpointConnectionAsync(string privateEndpointConnectionName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPrivateEndpointConnectionAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPrivateEndpointConnectionAsync (privateEndpointConnectionName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryPrivateEndpointConnectionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPrivateEndpointConnectionAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&gt;&#xA;override this.GetFactoryPrivateEndpointConnectionAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryPrivateEndpointConnectionAsync (privateEndpointConnectionName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="privateEndpointConnectionName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="privateEndpointConnectionName"> The private endpoint connection name. </param>
        <param name="ifNoneMatch"> ETag of the private endpoint connection entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a private endpoint connection
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateEndpointConnections/{privateEndpointConnectionName}
            Operation Id: PrivateEndpointConnection_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateEndpointConnectionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateEndpointConnectionName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryPrivateEndpointConnections">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionCollection GetFactoryPrivateEndpointConnections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionCollection GetFactoryPrivateEndpointConnections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryPrivateEndpointConnections" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryPrivateEndpointConnections () As FactoryPrivateEndpointConnectionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionCollection&#xA;override this.GetFactoryPrivateEndpointConnections : unit -&gt; Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionCollection" Usage="dataFactoryResource.GetFactoryPrivateEndpointConnections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryPrivateEndpointConnectionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryPrivateEndpointConnectionResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryPrivateEndpointConnectionResources and their operations over a FactoryPrivateEndpointConnectionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryTrigger">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetFactoryTrigger (string triggerName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetFactoryTrigger(string triggerName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryTrigger(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryTrigger (triggerName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryTrigger : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&#xA;override this.GetFactoryTrigger : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;" Usage="dataFactoryResource.GetFactoryTrigger (triggerName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerName"> The trigger name. </param>
        <param name="ifNoneMatch"> ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a trigger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
            Operation Id: Triggers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="triggerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="triggerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryTriggerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&gt; GetFactoryTriggerAsync (string triggerName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&gt; GetFactoryTriggerAsync(string triggerName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryTriggerAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryTriggerAsync (triggerName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryTriggerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryTriggerAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&gt;&#xA;override this.GetFactoryTriggerAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryTriggerAsync (triggerName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerName"> The trigger name. </param>
        <param name="ifNoneMatch"> ETag of the trigger entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a trigger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/triggers/{triggerName}
            Operation Id: Triggers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="triggerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="triggerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryTriggers">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryTriggerCollection GetFactoryTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryTriggerCollection GetFactoryTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryTriggers () As FactoryTriggerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryTriggers : unit -&gt; Azure.ResourceManager.DataFactory.FactoryTriggerCollection&#xA;override this.GetFactoryTriggers : unit -&gt; Azure.ResourceManager.DataFactory.FactoryTriggerCollection" Usage="dataFactoryResource.GetFactoryTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryTriggerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryTriggerResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryTriggerResources and their operations over a FactoryTriggerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryVirtualNetwork">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt; GetFactoryVirtualNetwork (string managedVirtualNetworkName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt; GetFactoryVirtualNetwork(string managedVirtualNetworkName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryVirtualNetwork(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryVirtualNetwork (managedVirtualNetworkName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryVirtualNetworkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryVirtualNetwork : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&#xA;override this.GetFactoryVirtualNetwork : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;" Usage="dataFactoryResource.GetFactoryVirtualNetwork (managedVirtualNetworkName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managedVirtualNetworkName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="managedVirtualNetworkName"> Managed virtual network name. </param>
        <param name="ifNoneMatch"> ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed Virtual Network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}
            Operation Id: ManagedVirtualNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedVirtualNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedVirtualNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryVirtualNetworkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&gt; GetFactoryVirtualNetworkAsync (string managedVirtualNetworkName, string ifNoneMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&gt; GetFactoryVirtualNetworkAsync(string managedVirtualNetworkName, string ifNoneMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryVirtualNetworkAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryVirtualNetworkAsync (managedVirtualNetworkName As String, Optional ifNoneMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryVirtualNetworkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryVirtualNetworkAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&gt;&#xA;override this.GetFactoryVirtualNetworkAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&gt;" Usage="dataFactoryResource.GetFactoryVirtualNetworkAsync (managedVirtualNetworkName, ifNoneMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.FactoryVirtualNetworkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managedVirtualNetworkName" Type="System.String" />
        <Parameter Name="ifNoneMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="managedVirtualNetworkName"> Managed virtual network name. </param>
        <param name="ifNoneMatch"> ETag of the managed Virtual Network entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a managed Virtual Network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/managedVirtualNetworks/{managedVirtualNetworkName}
            Operation Id: ManagedVirtualNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="managedVirtualNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="managedVirtualNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetFactoryVirtualNetworks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DataFactory.FactoryVirtualNetworkCollection GetFactoryVirtualNetworks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.DataFactory.FactoryVirtualNetworkCollection GetFactoryVirtualNetworks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetFactoryVirtualNetworks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFactoryVirtualNetworks () As FactoryVirtualNetworkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetFactoryVirtualNetworks : unit -&gt; Azure.ResourceManager.DataFactory.FactoryVirtualNetworkCollection&#xA;override this.GetFactoryVirtualNetworks : unit -&gt; Azure.ResourceManager.DataFactory.FactoryVirtualNetworkCollection" Usage="dataFactoryResource.GetFactoryVirtualNetworks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DataFactory.FactoryVirtualNetworkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of FactoryVirtualNetworkResources in the DataFactory. </summary>
        <returns> An object representing collection of FactoryVirtualNetworkResources and their operations over a FactoryVirtualNetworkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGitHubAccessToken">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt; GetGitHubAccessToken (Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt; GetGitHubAccessToken(class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetGitHubAccessToken(Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGitHubAccessToken (content As GitHubAccessTokenContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GitHubAccessTokenResult)" />
      <MemberSignature Language="F#" Value="abstract member GetGitHubAccessToken : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&#xA;override this.GetGitHubAccessToken : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;" Usage="dataFactoryResource.GetGitHubAccessToken (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Get GitHub access token request definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get GitHub Access Token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken
            Operation Id: Factories_GetGitHubAccessToken
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGitHubAccessTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt; GetGitHubAccessTokenAsync (Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt; GetGitHubAccessTokenAsync(class Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetGitHubAccessTokenAsync(Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGitHubAccessTokenAsync (content As GitHubAccessTokenContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GitHubAccessTokenResult))" />
      <MemberSignature Language="F#" Value="abstract member GetGitHubAccessTokenAsync : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;&#xA;override this.GetGitHubAccessTokenAsync : Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;" Usage="dataFactoryResource.GetGitHubAccessTokenAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.GitHubAccessTokenContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Get GitHub access token request definition. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get GitHub Access Token.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/getGitHubAccessToken
            Operation Id: Factories_GetGitHubAccessToken
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRun">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRun (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRun(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRun(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRun (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FactoryPipelineRunInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&#xA;override this.GetPipelineRun : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;" Usage="dataFactoryResource.GetPipelineRun (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRunAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&gt; GetPipelineRunAsync (string runId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&gt; GetPipelineRunAsync(string runId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRunAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRunAsync (runId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FactoryPipelineRunInfo))" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&gt;&#xA;override this.GetPipelineRunAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&gt;" Usage="dataFactoryResource.GetPipelineRunAsync (runId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="runId"> The pipeline run identifier. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a pipeline run by its run ID.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/pipelineruns/{runId}
            Operation Id: PipelineRuns_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="runId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="runId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRuns (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRuns(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRuns(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRuns (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of FactoryPipelineRunInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&#xA;override this.GetPipelineRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;" Usage="dataFactoryResource.GetPipelineRuns (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query pipeline runs in the factory based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns
            Operation Id: PipelineRuns_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPipelineRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRunsAsync (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt; GetPipelineRunsAsync(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPipelineRunsAsync(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPipelineRunsAsync (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of FactoryPipelineRunInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetPipelineRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;&#xA;override this.GetPipelineRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;" Usage="dataFactoryResource.GetPipelineRunsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query pipeline runs in the factory based on input filter conditions.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryPipelineRuns
            Operation Id: PipelineRuns_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryPipelineRunInfo" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateLinkResources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt; GetPrivateLinkResources (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt; GetPrivateLinkResources(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPrivateLinkResources(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrivateLinkResources (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of FactoryPrivateLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPrivateLinkResources : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;&#xA;override this.GetPrivateLinkResources : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;" Usage="dataFactoryResource.GetPrivateLinkResources cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the private link resources
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateLinkResources
            Operation Id: privateLinkResources_Get
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateLinkResourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt; GetPrivateLinkResourcesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt; GetPrivateLinkResourcesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetPrivateLinkResourcesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrivateLinkResourcesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of FactoryPrivateLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPrivateLinkResourcesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;&#xA;override this.GetPrivateLinkResourcesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;" Usage="dataFactoryResource.GetPrivateLinkResourcesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the private link resources
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/privateLinkResources
            Operation Id: privateLinkResources_Get
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryPrivateLinkResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTriggerRuns">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt; GetTriggerRuns (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt; GetTriggerRuns(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggerRuns(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggerRuns (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of FactoryTriggerRun)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggerRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;&#xA;override this.GetTriggerRuns : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;" Usage="dataFactoryResource.GetTriggerRuns (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query trigger runs.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns
            Operation Id: TriggerRuns_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggerRunsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt; GetTriggerRunsAsync (Azure.ResourceManager.DataFactory.Models.RunFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt; GetTriggerRunsAsync(class Azure.ResourceManager.DataFactory.Models.RunFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggerRunsAsync(Azure.ResourceManager.DataFactory.Models.RunFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggerRunsAsync (content As RunFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of FactoryTriggerRun)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggerRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;&#xA;override this.GetTriggerRunsAsync : Azure.ResourceManager.DataFactory.Models.RunFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;" Usage="dataFactoryResource.GetTriggerRunsAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.RunFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the pipeline run. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query trigger runs.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/queryTriggerRuns
            Operation Id: TriggerRuns_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.Models.FactoryTriggerRun" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetTriggers (Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetTriggers(class Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggers(Azure.ResourceManager.DataFactory.Models.TriggerFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggers (content As TriggerFilterContent, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of FactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggers : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&#xA;override this.GetTriggers : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;" Usage="dataFactoryResource.GetTriggers (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.TriggerFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the triggers. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query triggers.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/querytriggers
            Operation Id: Triggers_QueryByFactory
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.DataFactory.FactoryTriggerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTriggersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetTriggersAsync (Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt; GetTriggersAsync(class Azure.ResourceManager.DataFactory.Models.TriggerFilterContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.GetTriggersAsync(Azure.ResourceManager.DataFactory.Models.TriggerFilterContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTriggersAsync (content As TriggerFilterContent, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of FactoryTriggerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggersAsync : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;&#xA;override this.GetTriggersAsync : Azure.ResourceManager.DataFactory.Models.TriggerFilterContent * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;" Usage="dataFactoryResource.GetTriggersAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.DataFactory.FactoryTriggerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.DataFactory.Models.TriggerFilterContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Parameters to filter the triggers. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query triggers.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}/querytriggers
            Operation Id: Triggers_QueryByFactory
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.DataFactory.FactoryTriggerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DataFactory.DataFactoryResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.DataFactory.DataFactoryResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.DataFactory.DataFactoryResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Update (Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt; Update(class Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.Update(Azure.ResourceManager.DataFactory.Models.DataFactoryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (patch As DataFactoryPatch, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataFactoryResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&#xA;override this.Update : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;" Usage="dataFactoryResource.Update (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.DataFactory.Models.DataFactoryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The parameters for updating a factory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; UpdateAsync (Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt; UpdateAsync(class Azure.ResourceManager.DataFactory.Models.DataFactoryPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DataFactory.DataFactoryResource.UpdateAsync(Azure.ResourceManager.DataFactory.Models.DataFactoryPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (patch As DataFactoryPatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataFactoryResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.ResourceManager.DataFactory.Models.DataFactoryPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;" Usage="dataFactoryResource.UpdateAsync (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DataFactory.DataFactoryResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.DataFactory.Models.DataFactoryPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The parameters for updating a factory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Updates a factory.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataFactory/factories/{factoryName}
            Operation Id: Factories_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
