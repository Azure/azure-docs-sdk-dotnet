<Type Name="QuestionAnsweringProjectsClient" FullName="Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient">
  <TypeSignature Language="C#" Value="public class QuestionAnsweringProjectsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuestionAnsweringProjectsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class QuestionAnsweringProjectsClient" />
  <TypeSignature Language="F#" Value="type QuestionAnsweringProjectsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The QuestionAnsweringProjects service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QuestionAnsweringProjectsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuestionAnsweringProjectsClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" Usage="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.api.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuestionAnsweringProjectsClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" Usage="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuestionAnsweringProjectsClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As QuestionAnsweringClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions -&gt; Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" Usage="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.api.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuestionAnsweringProjectsClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As QuestionAnsweringClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient : Uri * Azure.Core.TokenCredential * Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions -&gt; Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" Usage="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFeedback">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddFeedback (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddFeedback(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.AddFeedback(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFeedback (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddFeedback : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddFeedback : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.AddFeedback (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Add Active Learning feedback. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Add Active Learning feedback
            
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>ActiveLearningFeedback</c>:
            <code>{
              records: [
                {
                  userId: string, # Optional. Unique identifier of the user.
                  userQuestion: string, # Optional. User suggested question for the QnA.
                  qnaId: number, # Optional. Unique ID of the QnA.
                }
              ], # Optional. A list of Feedback Records for Active Learning.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFeedbackAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddFeedbackAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddFeedbackAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.AddFeedbackAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFeedbackAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddFeedbackAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddFeedbackAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.AddFeedbackAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Add Active Learning feedback. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Add Active Learning feedback
            
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>ActiveLearningFeedback</c>:
            <code>{
              records: [
                {
                  userId: string, # Optional. Unique identifier of the user.
                  userQuestion: string, # Optional. User suggested question for the QnA.
                  qnaId: number, # Optional. Unique ID of the QnA.
                }
              ], # Optional. A list of Feedback Records for Active Learning.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateProject (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateProject(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.CreateProject(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateProject (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateProject : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateProject : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.CreateProject (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create or update a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Create or update a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>CreateProjectOptions</c>:
            <code>{
              description: string, # Optional. Description of the project.
              language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
            }
            </code>
            
            Response Body:
            
            Schema for <c>ProjectMetadata</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateProjectAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateProjectAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.CreateProjectAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateProjectAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateProjectAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateProjectAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.CreateProjectAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create or update a project. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Create or update a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>CreateProjectOptions</c>:
            <code>{
              description: string, # Optional. Description of the project.
              language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
            }
            </code>
            
            Response Body:
            
            Schema for <c>ProjectMetadata</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeleteProject (Azure.WaitUntil waitUntil, string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeleteProject(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeleteProject(Azure.WaitUntil,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteProject (waitUntil As WaitUntil, projectName As String, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeleteProject : Azure.WaitUntil * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeleteProject : Azure.WaitUntil * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.DeleteProject (waitUntil, projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete the project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Delete the project.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeleteProjectAsync (Azure.WaitUntil waitUntil, string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeleteProjectAsync(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeleteProjectAsync(Azure.WaitUntil,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteProjectAsync (waitUntil As WaitUntil, projectName As String, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteProjectAsync : Azure.WaitUntil * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteProjectAsync : Azure.WaitUntil * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.DeleteProjectAsync (waitUntil, projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete the project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Delete the project.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeployProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeployProject (Azure.WaitUntil waitUntil, string projectName, string deploymentName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeployProject(valuetype Azure.WaitUntil waitUntil, string projectName, string deploymentName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeployProject(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployProject (waitUntil As WaitUntil, projectName As String, deploymentName As String, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeployProject : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeployProject : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.DeployProject (waitUntil, projectName, deploymentName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deploy project to production. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Deploy project to production.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeployProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeployProjectAsync (Azure.WaitUntil waitUntil, string projectName, string deploymentName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeployProjectAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string deploymentName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeployProjectAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployProjectAsync (waitUntil As WaitUntil, projectName As String, deploymentName As String, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeployProjectAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeployProjectAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.DeployProjectAsync (waitUntil, projectName, deploymentName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deploy project to production. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Deploy project to production.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Export (Azure.WaitUntil waitUntil, string projectName, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Export(valuetype Azure.WaitUntil waitUntil, string projectName, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Export(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Export (waitUntil As WaitUntil, projectName As String, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Export : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Export : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.Export (waitUntil, projectName, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Export project metadata and assets. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Export project metadata and assets.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ExportAsync (Azure.WaitUntil waitUntil, string projectName, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ExportAsync(valuetype Azure.WaitUntil waitUntil, string projectName, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.ExportAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportAsync (waitUntil As WaitUntil, projectName As String, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ExportAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ExportAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.ExportAsync (waitUntil, projectName, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Export project metadata and assets. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Export project metadata and assets.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDeleteStatus (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDeleteStatus(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeleteStatus(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeleteStatus (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDeleteStatus : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDeleteStatus : string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetDeleteStatus (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of a Project delete job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of a Project delete job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDeleteStatusAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDeleteStatusAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeleteStatusAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeleteStatusAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDeleteStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDeleteStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetDeleteStatusAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of a Project delete job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of a Project delete job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployments">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDeployments (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDeployments(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployments (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDeployments : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDeployments : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetDeployments (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all deployments of a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List all deployments of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ProjectDeploymentsList</c>:
            <code>{
              deploymentName: string, # Optional. Name of the deployment.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeploymentsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDeploymentsAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDeploymentsAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeploymentsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeploymentsAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDeploymentsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDeploymentsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetDeploymentsAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all deployments of a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List all deployments of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ProjectDeploymentsList</c>:
            <code>{
              deploymentName: string, # Optional. Name of the deployment.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDeployStatus (string projectName, string deploymentName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDeployStatus(string projectName, string deploymentName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployStatus(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployStatus (projectName As String, deploymentName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDeployStatus : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDeployStatus : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetDeployStatus (projectName, deploymentName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of a Deploy job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of a Deploy job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="deploymentName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="deploymentName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDeployStatusAsync (string projectName, string deploymentName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDeployStatusAsync(string projectName, string deploymentName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployStatusAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployStatusAsync (projectName As String, deploymentName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDeployStatusAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDeployStatusAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetDeployStatusAsync (projectName, deploymentName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of a Deploy job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of a Deploy job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="deploymentName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" />, <paramref name="deploymentName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetExportStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetExportStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetExportStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetExportStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetExportStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetExportStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an Export job, once job completes, returns the project metadata, and assets. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of an Export job, once job completes, returns the project metadata, and assets.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetExportStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetExportStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetExportStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetExportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetExportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetExportStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an Export job, once job completes, returns the project metadata, and assets. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of an Export job, once job completes, returns the project metadata, and assets.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetImportStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetImportStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetImportStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetImportStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetImportStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetImportStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an Import job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of an Import job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetImportStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetImportStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetImportStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetImportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetImportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetImportStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an Import job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of an Import job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjectDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetProjectDetails (string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetProjectDetails(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectDetails(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectDetails (projectName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetProjectDetails : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetProjectDetails : string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetProjectDetails (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the requested project metadata. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get the requested project metadata.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ProjectMetadata</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjectDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetProjectDetailsAsync (string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetProjectDetailsAsync(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectDetailsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectDetailsAsync (projectName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetProjectDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetProjectDetailsAsync (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get the requested project metadata. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get the requested project metadata.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ProjectMetadata</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjects">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetProjects (int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetProjects(valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjects(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjects (Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjects : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetProjects : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetProjects (top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all projects for a user. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all projects for a user.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ProjectsMetadataValue</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjectsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetProjectsAsync (int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetProjectsAsync(valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectsAsync (Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetProjectsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetProjectsAsync (top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all projects for a user. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all projects for a user.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ProjectsMetadataValue</c>:
            <code>{
              projectName: string, # Optional. Name of the project.
              description: string, # Optional. Description of the project.
              language: string, # Optional. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
              multilingualResource: boolean, # Optional. Resource enabled for multiple languages across projects or not.
              settings: {
                defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
              }, # Optional. Configurable settings of the Project.
              createdDateTime: string (ISO 8601 Format), # Optional. Project creation date-time.
              lastModifiedDateTime: string (ISO 8601 Format), # Optional. Represents the project last modified date-time.
              lastDeployedDateTime: string (ISO 8601 Format), # Optional. Represents the project last deployment date-time.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQnas">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetQnas (string projectName, string source = default, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetQnas(string projectName, string source, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetQnas(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQnas (projectName As String, Optional source As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQnas : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetQnas : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetQnas (projectName, source, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="source"> Source of the QnA. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the QnAs of a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the QnAs of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>QnaAsset</c>:
            <code>{
              id: number, # Optional. Unique ID for the QnA.
              answer: string, # Optional. Answer text.
              source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
              questions: [string], # Optional. List of questions associated with the answer.
              metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
              dialog: {
                isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                prompts: [
                  {
                    displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                    qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                    qna: {
                      id: number, # Optional. Unique ID for the QnA.
                      answer: string, # Optional. Answer text.
                      source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                      questions: [string], # Optional. List of questions associated with the answer.
                      metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                      dialog: QnaDialog, # Optional. Context of a QnA.
                      activeLearningSuggestions: [
                        {
                          clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                          suggestedQuestions: [
                            {
                              question: string, # Optional. Question suggested by the Active Learning feature.
                              userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                              autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                            }
                          ], # Optional. List of all suggested questions for the QnA.
                        }
                      ], # Optional. List of Active Learning suggestions for the QnA.
                    }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                    displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                  }
                ], # Optional. List of prompts associated with the answer.
              }, # Optional. Context of a QnA.
              activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
              lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQnasAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetQnasAsync (string projectName, string source = default, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetQnasAsync(string projectName, string source, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetQnasAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQnasAsync (projectName As String, Optional source As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQnasAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetQnasAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetQnasAsync (projectName, source, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="source"> Source of the QnA. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the QnAs of a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the QnAs of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>QnaAsset</c>:
            <code>{
              id: number, # Optional. Unique ID for the QnA.
              answer: string, # Optional. Answer text.
              source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
              questions: [string], # Optional. List of questions associated with the answer.
              metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
              dialog: {
                isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                prompts: [
                  {
                    displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                    qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                    qna: {
                      id: number, # Optional. Unique ID for the QnA.
                      answer: string, # Optional. Answer text.
                      source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                      questions: [string], # Optional. List of questions associated with the answer.
                      metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                      dialog: QnaDialog, # Optional. Context of a QnA.
                      activeLearningSuggestions: [
                        {
                          clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                          suggestedQuestions: [
                            {
                              question: string, # Optional. Question suggested by the Active Learning feature.
                              userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                              autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                            }
                          ], # Optional. List of all suggested questions for the QnA.
                        }
                      ], # Optional. List of Active Learning suggestions for the QnA.
                    }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                    displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                  }
                ], # Optional. List of prompts associated with the answer.
              }, # Optional. Context of a QnA.
              activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
              lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSources (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSources(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSources(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSources (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSources : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSources : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSources (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the sources of a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the sources of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>QnaSourcesMetadata</c>:
            <code>{
              displayName: string, # Optional. Friendly name of the Source.
              source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
              sourceUri: string, # Required. URI location for the file or url.
              sourceKind: "file" | "url", # Required. Supported source types.
              contentStructureKind: "unstructured", # Optional. Content structure type for sources.
              lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSourcesAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSourcesAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSourcesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSourcesAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSourcesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSourcesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSourcesAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the sources of a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the sources of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>QnaSourcesMetadata</c>:
            <code>{
              displayName: string, # Optional. Friendly name of the Source.
              source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
              sourceUri: string, # Required. URI location for the file or url.
              sourceKind: "file" | "url", # Required. Supported source types.
              contentStructureKind: "unstructured", # Optional. Content structure type for sources.
              lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynonyms">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSynonyms (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSynonyms(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSynonyms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynonyms (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSynonyms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSynonyms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSynonyms (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the synonyms of a project. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the synonyms of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>SynonymAsset</c>:
            <code>{
              alterations: [string], # Required. Collection of word alterations.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynonymsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSynonymsAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSynonymsAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSynonymsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynonymsAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSynonymsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSynonymsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSynonymsAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets all the synonyms of a project. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Gets all the synonyms of a project.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>SynonymAsset</c>:
            <code>{
              alterations: [string], # Required. Collection of word alterations.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateQnasStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpdateQnasStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpdateQnasStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateQnasStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateQnasStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateQnasStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpdateQnasStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetUpdateQnasStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of update QnAs job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of update QnAs job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateQnasStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpdateQnasStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpdateQnasStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateQnasStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateQnasStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateQnasStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpdateQnasStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetUpdateQnasStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of update QnAs job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of update QnAs job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateSourcesStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpdateSourcesStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpdateSourcesStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateSourcesStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateSourcesStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateSourcesStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpdateSourcesStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetUpdateSourcesStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of update sources job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of update sources job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateSourcesStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpdateSourcesStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpdateSourcesStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateSourcesStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateSourcesStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateSourcesStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpdateSourcesStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetUpdateSourcesStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of update sources job. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Gets the status of update sources job.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Import (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Import(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Import (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Import : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Import : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.Import (waitUntil, projectName, content, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Import project assets. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Import project assets.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>ImportJobOptions</c>:
            <code>{
              metadata: {
                description: string, # Optional. Description of the project.
                language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
                multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
                settings: {
                  defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
                }, # Optional. Configurable settings of the Project.
              }, # Optional. Parameters needed to create the project.
              assets: {
                synonyms: [
                  {
                    alterations: [string], # Required. Collection of word alterations.
                  }
                ], # Optional. Collection of synonyms.
                qnas: [
                  {
                    sourceDisplayName: string, # Optional. Friendly name of the Source.
                    id: number, # Optional. Unique ID for the QnA.
                    answer: string, # Optional. Answer text.
                    source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                    questions: [string], # Optional. List of questions associated with the answer.
                    metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                    dialog: {
                      isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                      prompts: [
                        {
                          displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                          qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                          qna: {
                            id: number, # Optional. Unique ID for the QnA.
                            answer: string, # Optional. Answer text.
                            source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                            questions: [string], # Optional. List of questions associated with the answer.
                            metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                            dialog: QnaDialog, # Optional. Context of a QnA.
                            activeLearningSuggestions: [
                              {
                                clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                                suggestedQuestions: [
                                  {
                                    question: string, # Optional. Question suggested by the Active Learning feature.
                                    userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                                    autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                                  }
                                ], # Optional. List of all suggested questions for the QnA.
                              }
                            ], # Optional. List of Active Learning suggestions for the QnA.
                          }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                          displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                        }
                      ], # Optional. List of prompts associated with the answer.
                    }, # Optional. Context of a QnA.
                    activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
                    lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
                  }
                ], # Optional. List of QnA records to import.
              }, # Optional. All assets for this project.
              fileUri: string, # Optional. Import data File URI.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportAsync (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportAsync(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.ImportAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAsync (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.ImportAsync (waitUntil, projectName, content, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Import project assets. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Import project assets.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>ImportJobOptions</c>:
            <code>{
              metadata: {
                description: string, # Optional. Description of the project.
                language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
                multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
                settings: {
                  defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
                }, # Optional. Configurable settings of the Project.
              }, # Optional. Parameters needed to create the project.
              assets: {
                synonyms: [
                  {
                    alterations: [string], # Required. Collection of word alterations.
                  }
                ], # Optional. Collection of synonyms.
                qnas: [
                  {
                    sourceDisplayName: string, # Optional. Friendly name of the Source.
                    id: number, # Optional. Unique ID for the QnA.
                    answer: string, # Optional. Answer text.
                    source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                    questions: [string], # Optional. List of questions associated with the answer.
                    metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                    dialog: {
                      isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                      prompts: [
                        {
                          displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                          qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                          qna: {
                            id: number, # Optional. Unique ID for the QnA.
                            answer: string, # Optional. Answer text.
                            source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                            questions: [string], # Optional. List of questions associated with the answer.
                            metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                            dialog: QnaDialog, # Optional. Context of a QnA.
                            activeLearningSuggestions: [
                              {
                                clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                                suggestedQuestions: [
                                  {
                                    question: string, # Optional. Question suggested by the Active Learning feature.
                                    userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                                    autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                                  }
                                ], # Optional. List of all suggested questions for the QnA.
                              }
                            ], # Optional. List of Active Learning suggestions for the QnA.
                          }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                          displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                        }
                      ], # Optional. List of prompts associated with the answer.
                    }, # Optional. Context of a QnA.
                    activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
                    lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
                  }
                ], # Optional. List of QnA records to import.
              }, # Optional. All assets for this project.
              fileUri: string, # Optional. Import data File URI.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQnas">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; UpdateQnas (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; UpdateQnas(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateQnas(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQnas (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateQnas : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.UpdateQnas : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.UpdateQnas (waitUntil, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates the QnAs of a project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Updates the QnAs of a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>UpdateQnaOptions</c>:
            <code>{
              op: "add" | "delete" | "replace", # Required. Update operation type for assets.
              value: {
                id: number, # Optional. Unique ID for the QnA.
                answer: string, # Optional. Answer text.
                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                questions: [string], # Optional. List of questions associated with the answer.
                metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                dialog: {
                  isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                  prompts: [
                    {
                      displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                      qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                      qna: QnaRecord, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                      displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                    }
                  ], # Optional. List of prompts associated with the answer.
                }, # Optional. Context of a QnA.
                activeLearningSuggestions: [
                  {
                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                    suggestedQuestions: [
                      {
                        question: string, # Optional. Question suggested by the Active Learning feature.
                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                      }
                    ], # Optional. List of all suggested questions for the QnA.
                  }
                ], # Optional. List of Active Learning suggestions for the QnA.
              }, # Required. QnA record.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQnasAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; UpdateQnasAsync (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; UpdateQnasAsync(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateQnasAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQnasAsync (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member UpdateQnasAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.UpdateQnasAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.UpdateQnasAsync (waitUntil, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates the QnAs of a project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Updates the QnAs of a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>UpdateQnaOptions</c>:
            <code>{
              op: "add" | "delete" | "replace", # Required. Update operation type for assets.
              value: {
                id: number, # Optional. Unique ID for the QnA.
                answer: string, # Optional. Answer text.
                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                questions: [string], # Optional. List of questions associated with the answer.
                metadata: Dictionary&lt;string, string&gt;, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                dialog: {
                  isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                  prompts: [
                    {
                      displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                      qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                      qna: QnaRecord, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                      displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                    }
                  ], # Optional. List of prompts associated with the answer.
                }, # Optional. Context of a QnA.
                activeLearningSuggestions: [
                  {
                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                    suggestedQuestions: [
                      {
                        question: string, # Optional. Question suggested by the Active Learning feature.
                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                      }
                    ], # Optional. List of all suggested questions for the QnA.
                  }
                ], # Optional. List of Active Learning suggestions for the QnA.
              }, # Required. QnA record.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSources">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; UpdateSources (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; UpdateSources(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSources(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSources (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.UpdateSources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.UpdateSources (waitUntil, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates the sources of a project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Updates the sources of a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>UpdateSourcesOptions</c>:
            <code>{
              op: "add" | "delete" | "replace", # Required. Update operation type for assets.
              value: {
                displayName: string, # Optional. Friendly name of the Source.
                source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
                sourceUri: string, # Required. URI location for the file or url.
                sourceKind: "file" | "url", # Required. Supported source types.
                contentStructureKind: "unstructured", # Optional. Content structure type for sources.
                refresh: boolean, # Optional. Boolean flag used to refresh data from the Source.
              }, # Required. Update source record.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourcesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; UpdateSourcesAsync (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; UpdateSourcesAsync(valuetype Azure.WaitUntil waitUntil, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSourcesAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSourcesAsync (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member UpdateSourcesAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.UpdateSourcesAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.UpdateSourcesAsync (waitUntil, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates the sources of a project. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Updates the sources of a project.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>UpdateSourcesOptions</c>:
            <code>{
              op: "add" | "delete" | "replace", # Required. Update operation type for assets.
              value: {
                displayName: string, # Optional. Friendly name of the Source.
                source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
                sourceUri: string, # Required. URI location for the file or url.
                sourceKind: "file" | "url", # Required. Supported source types.
                contentStructureKind: "unstructured", # Optional. Content structure type for sources.
                refresh: boolean, # Optional. Boolean flag used to refresh data from the Source.
              }, # Required. Update source record.
            }
            </code>
            
            Response Body:
            
            <details><summary>ExportJobState</summary>Schema for <c>ExportJobState</c>:
            <code>{
              resultUrl: string, # Required. URL to download the result of the Export Job.
              createdDateTime: string (ISO 8601 Format), # Required.
              expirationDateTime: string (ISO 8601 Format), # Optional.
              jobId: string, # Required.
              lastUpdatedDateTime: string (ISO 8601 Format), # Required.
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                  message: string, # Required. A human-readable representation of the error.
                  target: string, # Optional. The target of the error.
                  details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                    message: string, # Required. Error message.
                    details: Dictionary&lt;string, string&gt;, # Optional. Error details.
                    target: string, # Optional. Error target.
                    innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                  }, # Optional. An object containing more specific information than the current object about the error.
                }
              ], # Optional.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSynonyms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateSynonyms (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateSynonyms(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSynonyms(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSynonyms (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateSynonyms : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateSynonyms : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.UpdateSynonyms (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates all the synonyms of a project. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Updates all the synonyms of a project.
            
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>SynonymAssets</c>:
            <code>{
              value: [
                {
                  alterations: [string], # Required. Collection of word alterations.
                }
              ], # Optional. Collection of synonyms.
              nextLink: string, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSynonymsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateSynonymsAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateSynonymsAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSynonymsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSynonymsAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSynonymsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateSynonymsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.UpdateSynonymsAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Updates all the synonyms of a project. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Updates all the synonyms of a project.
            
            Below is the JSON schema for the request payload.
            
            Request Body:
            
            Schema for <c>SynonymAssets</c>:
            <code>{
              value: [
                {
                  alterations: [string], # Required. Collection of word alterations.
                }
              ], # Optional. Collection of synonyms.
              nextLink: string, # Optional.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="projectName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
