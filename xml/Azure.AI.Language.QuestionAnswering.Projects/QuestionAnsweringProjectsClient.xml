<Type Name="QuestionAnsweringProjectsClient" FullName="Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient">
  <TypeSignature Language="C#" Value="public class QuestionAnsweringProjectsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuestionAnsweringProjectsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class QuestionAnsweringProjectsClient" />
  <TypeSignature Language="F#" Value="type QuestionAnsweringProjectsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The QuestionAnsweringProjects service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected QuestionAnsweringProjectsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuestionAnsweringProjectsClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, Optional options As QuestionAnsweringClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions -&gt; Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient" Usage="new Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.QuestionAnswering.QuestionAnsweringClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.api.cognitiveservices.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of QuestionAnsweringProjectsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFeedback">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddFeedback (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddFeedback(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.AddFeedback(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFeedback (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddFeedback : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddFeedback : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.AddFeedback (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add Active Learning feedback. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              records: [
                {
                  userId: string,
                  userQuestion: string,
                  qnaId: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFeedbackAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddFeedbackAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddFeedbackAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.AddFeedbackAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFeedbackAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddFeedbackAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddFeedbackAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.AddFeedbackAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Add Active Learning feedback. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              records: [
                {
                  userId: string,
                  userQuestion: string,
                  qnaId: number
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateProject (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateProject(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.CreateProject(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateProject (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateProject : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateProject : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.CreateProject (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create or update a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              description: string,
              language: string (required),
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              projectName: string,
              description: string,
              language: string,
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              },
              createdDateTime: string (ISO 8601 Format),
              lastModifiedDateTime: string (ISO 8601 Format),
              lastDeployedDateTime: string (ISO 8601 Format)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateProjectAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateProjectAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.CreateProjectAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateProjectAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateProjectAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateProjectAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.CreateProjectAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Create or update a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              description: string,
              language: string (required),
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              }
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              projectName: string,
              description: string,
              language: string,
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              },
              createdDateTime: string (ISO 8601 Format),
              lastModifiedDateTime: string (ISO 8601 Format),
              lastDeployedDateTime: string (ISO 8601 Format)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeleteProject (bool waitForCompletion, string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeleteProject(bool waitForCompletion, string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeleteProject(System.Boolean,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteProject (waitForCompletion As Boolean, projectName As String, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeleteProject : bool * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeleteProject : bool * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.DeleteProject (waitForCompletion, projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete the project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeleteProjectAsync (bool waitForCompletion, string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeleteProjectAsync(bool waitForCompletion, string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeleteProjectAsync(System.Boolean,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteProjectAsync (waitForCompletion As Boolean, projectName As String, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteProjectAsync : bool * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteProjectAsync : bool * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.DeleteProjectAsync (waitForCompletion, projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Delete the project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeployProject">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; DeployProject (bool waitForCompletion, string projectName, string deploymentName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; DeployProject(bool waitForCompletion, string projectName, string deploymentName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeployProject(System.Boolean,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployProject (waitForCompletion As Boolean, projectName As String, deploymentName As String, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member DeployProject : bool * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.DeployProject : bool * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.DeployProject (waitForCompletion, projectName, deploymentName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Deploy project to production. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeployProjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; DeployProjectAsync (bool waitForCompletion, string projectName, string deploymentName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; DeployProjectAsync(bool waitForCompletion, string projectName, string deploymentName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.DeployProjectAsync(System.Boolean,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeployProjectAsync (waitForCompletion As Boolean, projectName As String, deploymentName As String, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeployProjectAsync : bool * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.DeployProjectAsync : bool * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.DeployProjectAsync (waitForCompletion, projectName, deploymentName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Deploy project to production. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="deploymentName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Export (bool waitForCompletion, string projectName, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Export(bool waitForCompletion, string projectName, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Export(System.Boolean,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Export (waitForCompletion As Boolean, projectName As String, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Export : bool * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Export : bool * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.Export (waitForCompletion, projectName, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Export project metadata and assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              resultUrl: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ExportAsync (bool waitForCompletion, string projectName, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ExportAsync(bool waitForCompletion, string projectName, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.ExportAsync(System.Boolean,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportAsync (waitForCompletion As Boolean, projectName As String, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ExportAsync : bool * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ExportAsync : bool * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.ExportAsync (waitForCompletion, projectName, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Export project metadata and assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              resultUrl: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDeleteStatus (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDeleteStatus(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeleteStatus(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeleteStatus (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDeleteStatus : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDeleteStatus : string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetDeleteStatus (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of a Project delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDeleteStatusAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDeleteStatusAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeleteStatusAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeleteStatusAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDeleteStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDeleteStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetDeleteStatusAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of a Project delete job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployments">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDeployments (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDeployments(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployments(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployments (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDeployments : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDeployments : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetDeployments (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List all deployments of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  deploymentName: string,
                  lastDeployedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeploymentsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDeploymentsAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDeploymentsAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeploymentsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeploymentsAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDeploymentsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDeploymentsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetDeploymentsAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> List all deployments of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  deploymentName: string,
                  lastDeployedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDeployStatus (string projectName, string deploymentName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDeployStatus(string projectName, string deploymentName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployStatus(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployStatus (projectName As String, deploymentName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDeployStatus : string * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDeployStatus : string * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetDeployStatus (projectName, deploymentName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of a Deploy job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="deploymentName" />, or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDeployStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDeployStatusAsync (string projectName, string deploymentName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDeployStatusAsync(string projectName, string deploymentName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetDeployStatusAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDeployStatusAsync (projectName As String, deploymentName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDeployStatusAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDeployStatusAsync : string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetDeployStatusAsync (projectName, deploymentName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="deploymentName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="deploymentName"> The name of the specific deployment of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of a Deploy job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" />, <paramref name="deploymentName" />, or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetExportStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetExportStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetExportStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetExportStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetExportStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetExportStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of an Export job, once job completes, returns the project metadata, and assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              resultUrl: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetExportStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetExportStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetExportStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExportStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetExportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetExportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetExportStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of an Export job, once job completes, returns the project metadata, and assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              resultUrl: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetImportStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetImportStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetImportStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetImportStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetImportStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetImportStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of an Import job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetImportStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetImportStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetImportStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImportStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetImportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetImportStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetImportStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of an Import job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjectDetails">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetProjectDetails (string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetProjectDetails(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectDetails(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectDetails (projectName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetProjectDetails : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetProjectDetails : string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetProjectDetails (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the requested project metadata. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              projectName: string,
              description: string,
              language: string,
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              },
              createdDateTime: string (ISO 8601 Format),
              lastModifiedDateTime: string (ISO 8601 Format),
              lastDeployedDateTime: string (ISO 8601 Format)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjectDetailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetProjectDetailsAsync (string projectName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetProjectDetailsAsync(string projectName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectDetailsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectDetailsAsync (projectName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetProjectDetailsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetProjectDetailsAsync (projectName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the requested project metadata. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              projectName: string,
              description: string,
              language: string,
              multilingualResource: boolean,
              settings: {
                defaultAnswer: string
              },
              createdDateTime: string (ISO 8601 Format),
              lastModifiedDateTime: string (ISO 8601 Format),
              lastDeployedDateTime: string (ISO 8601 Format)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProjects">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetProjects (int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetProjects(valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjects(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjects (Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjects : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetProjects : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetProjects (top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all projects for a user. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  projectName: string,
                  description: string,
                  language: string,
                  multilingualResource: boolean,
                  settings: {
                    defaultAnswer: string
                  },
                  createdDateTime: string (ISO 8601 Format),
                  lastModifiedDateTime: string (ISO 8601 Format),
                  lastDeployedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetProjectsAsync (int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetProjectsAsync(valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetProjectsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProjectsAsync (Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetProjectsAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetProjectsAsync (top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all projects for a user. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  projectName: string,
                  description: string,
                  language: string,
                  multilingualResource: boolean,
                  settings: {
                    defaultAnswer: string
                  },
                  createdDateTime: string (ISO 8601 Format),
                  lastModifiedDateTime: string (ISO 8601 Format),
                  lastDeployedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQnas">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetQnas (string projectName, string source = default, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetQnas(string projectName, string source, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetQnas(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQnas (projectName As String, Optional source As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQnas : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetQnas : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetQnas (projectName, source, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="source"> Source of the QnA. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the QnAs of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  id: number,
                  answer: string,
                  source: string,
                  questions: [string],
                  metadata: Dictionary&lt;string, string&gt;,
                  dialog: {
                    isContextOnly: boolean,
                    prompts: [
                      {
                        displayOrder: number,
                        qnaId: number,
                        qna: {
                          id: number,
                          answer: string,
                          source: string,
                          questions: [string],
                          metadata: Dictionary&lt;string, string&gt;,
                          dialog: QnaDialog,
                          activeLearningSuggestions: [
                            {
                              clusterHead: string,
                              suggestedQuestions: [
                                {
                                  question: string,
                                  userSuggestedCount: number,
                                  autoSuggestedCount: number
                                }
                              ]
                            }
                          ]
                        },
                        displayText: string
                      }
                    ]
                  },
                  activeLearningSuggestions: [SuggestedQuestionsCluster],
                  lastUpdatedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQnasAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetQnasAsync (string projectName, string source = default, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetQnasAsync(string projectName, string source, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetQnasAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQnasAsync (projectName As String, Optional source As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQnasAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetQnasAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetQnasAsync (projectName, source, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="source"> Source of the QnA. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the QnAs of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  id: number,
                  answer: string,
                  source: string,
                  questions: [string],
                  metadata: Dictionary&lt;string, string&gt;,
                  dialog: {
                    isContextOnly: boolean,
                    prompts: [
                      {
                        displayOrder: number,
                        qnaId: number,
                        qna: {
                          id: number,
                          answer: string,
                          source: string,
                          questions: [string],
                          metadata: Dictionary&lt;string, string&gt;,
                          dialog: QnaDialog,
                          activeLearningSuggestions: [
                            {
                              clusterHead: string,
                              suggestedQuestions: [
                                {
                                  question: string,
                                  userSuggestedCount: number,
                                  autoSuggestedCount: number
                                }
                              ]
                            }
                          ]
                        },
                        displayText: string
                      }
                    ]
                  },
                  activeLearningSuggestions: [SuggestedQuestionsCluster],
                  lastUpdatedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSources">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSources (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSources(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSources(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSources (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSources : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSources : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSources (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the sources of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  displayName: string,
                  source: string,
                  sourceUri: string,
                  sourceKind: "file" | "url",
                  contentStructureKind: "unstructured",
                  lastUpdatedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSourcesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSourcesAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSourcesAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSourcesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSourcesAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSourcesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSourcesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSourcesAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the sources of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  displayName: string,
                  source: string,
                  sourceUri: string,
                  sourceKind: "file" | "url",
                  contentStructureKind: "unstructured",
                  lastUpdatedDateTime: string (ISO 8601 Format)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynonyms">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSynonyms (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSynonyms(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSynonyms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynonyms (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSynonyms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSynonyms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSynonyms (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the synonyms of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  alterations: [string]
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynonymsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSynonymsAsync (string projectName, int? top = default, int? skip = default, int? maxpagesize = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSynonymsAsync(string projectName, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; maxpagesize, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetSynonymsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynonymsAsync (projectName As String, Optional top As Nullable(Of Integer) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSynonymsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSynonymsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.GetSynonymsAsync (projectName, top, skip, maxpagesize, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="top"> The maximum number of resources to return from the collection. </param>
        <param name="skip"> An offset into the collection of the first resource to be returned. </param>
        <param name="maxpagesize"> The maximum number of resources to include in a single response. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets all the synonyms of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              value: [
                {
                  alterations: [string]
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateQnasStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpdateQnasStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpdateQnasStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateQnasStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateQnasStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateQnasStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpdateQnasStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetUpdateQnasStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of update QnAs job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateQnasStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpdateQnasStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpdateQnasStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateQnasStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateQnasStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateQnasStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpdateQnasStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetUpdateQnasStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of update QnAs job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateSourcesStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUpdateSourcesStatus (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUpdateSourcesStatus(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateSourcesStatus(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateSourcesStatus (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateSourcesStatus : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUpdateSourcesStatus : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.GetUpdateSourcesStatus (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of update sources job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateSourcesStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUpdateSourcesStatusAsync (string projectName, string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUpdateSourcesStatusAsync(string projectName, string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.GetUpdateSourcesStatusAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUpdateSourcesStatusAsync (projectName As String, jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUpdateSourcesStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUpdateSourcesStatusAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.GetUpdateSourcesStatusAsync (projectName, jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="jobId"> Job ID. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Gets the status of update sources job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: string,
              lastUpdatedDateTime: string (ISO 8601 Format),
              status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted",
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ]
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="jobId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Import (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Import(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import(System.Boolean,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Import (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Import : bool * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Import : bool * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.Import (waitForCompletion, projectName, content, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import project assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              metadata: {
                description: string,
                language: string (required),
                multilingualResource: boolean,
                settings: {
                  defaultAnswer: string
                }
              },
              assets: {
                synonyms: [
                  {
                    alterations: [string] (required)
                  }
                ],
                qnas: [
                  {
                    sourceDisplayName: string,
                    id: number,
                    answer: string,
                    source: string,
                    questions: [string],
                    metadata: Dictionary&lt;string, string&gt;,
                    dialog: {
                      isContextOnly: boolean,
                      prompts: [
                        {
                          displayOrder: number,
                          qnaId: number,
                          qna: {
                            id: number,
                            answer: string,
                            source: string,
                            questions: [string],
                            metadata: Dictionary&lt;string, string&gt;,
                            dialog: QnaDialog,
                            activeLearningSuggestions: [
                              {
                                clusterHead: string,
                                suggestedQuestions: [
                                  {
                                    question: string,
                                    userSuggestedCount: number,
                                    autoSuggestedCount: number
                                  }
                                ]
                              }
                            ]
                          },
                          displayText: string
                        }
                      ]
                    },
                    activeLearningSuggestions: [SuggestedQuestionsCluster],
                    lastUpdatedDateTime: string (ISO 8601 Format)
                  }
                ]
              },
              fileUri: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ImportAsync (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ImportAsync(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, string format, string assetKind, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.ImportAsync(System.Boolean,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAsync (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ImportAsync : bool * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ImportAsync : bool * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.ImportAsync (waitForCompletion, projectName, content, format, assetKind, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="assetKind" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="format"> Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel". </param>
        <param name="assetKind"> Kind of the asset of the project. Allowed values: "qnas" | "synonyms". </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Import project assets. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              metadata: {
                description: string,
                language: string (required),
                multilingualResource: boolean,
                settings: {
                  defaultAnswer: string
                }
              },
              assets: {
                synonyms: [
                  {
                    alterations: [string] (required)
                  }
                ],
                qnas: [
                  {
                    sourceDisplayName: string,
                    id: number,
                    answer: string,
                    source: string,
                    questions: [string],
                    metadata: Dictionary&lt;string, string&gt;,
                    dialog: {
                      isContextOnly: boolean,
                      prompts: [
                        {
                          displayOrder: number,
                          qnaId: number,
                          qna: {
                            id: number,
                            answer: string,
                            source: string,
                            questions: [string],
                            metadata: Dictionary&lt;string, string&gt;,
                            dialog: QnaDialog,
                            activeLearningSuggestions: [
                              {
                                clusterHead: string,
                                suggestedQuestions: [
                                  {
                                    question: string,
                                    userSuggestedCount: number,
                                    autoSuggestedCount: number
                                  }
                                ]
                              }
                            ]
                          },
                          displayText: string
                        }
                      ]
                    },
                    activeLearningSuggestions: [SuggestedQuestionsCluster],
                    lastUpdatedDateTime: string (ISO 8601 Format)
                  }
                ]
              },
              fileUri: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateQnas">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; UpdateQnas (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; UpdateQnas(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateQnas(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQnas (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateQnas : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.UpdateQnas : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.UpdateQnas (waitForCompletion, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates the QnAs of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              op: "add" | "delete" | "replace" (required),
              value: {
                id: number,
                answer: string,
                source: string,
                questions: [string],
                metadata: Dictionary&lt;string, string&gt;,
                dialog: {
                  isContextOnly: boolean,
                  prompts: [
                    {
                      displayOrder: number,
                      qnaId: number,
                      qna: QnaRecord,
                      displayText: string
                    }
                  ]
                },
                activeLearningSuggestions: [
                  {
                    clusterHead: string,
                    suggestedQuestions: [
                      {
                        question: string,
                        userSuggestedCount: number,
                        autoSuggestedCount: number
                      }
                    ]
                  }
                ]
              } (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQnasAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; UpdateQnasAsync (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; UpdateQnasAsync(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateQnasAsync(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQnasAsync (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member UpdateQnasAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.UpdateQnasAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.UpdateQnasAsync (waitForCompletion, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates the QnAs of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              op: "add" | "delete" | "replace" (required),
              value: {
                id: number,
                answer: string,
                source: string,
                questions: [string],
                metadata: Dictionary&lt;string, string&gt;,
                dialog: {
                  isContextOnly: boolean,
                  prompts: [
                    {
                      displayOrder: number,
                      qnaId: number,
                      qna: QnaRecord,
                      displayText: string
                    }
                  ]
                },
                activeLearningSuggestions: [
                  {
                    clusterHead: string,
                    suggestedQuestions: [
                      {
                        question: string,
                        userSuggestedCount: number,
                        autoSuggestedCount: number
                      }
                    ]
                  }
                ]
              } (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSources">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; UpdateSources (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; UpdateSources(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSources(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSources (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSources : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.UpdateSources : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="questionAnsweringProjectsClient.UpdateSources (waitForCompletion, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates the sources of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              op: "add" | "delete" | "replace" (required),
              value: {
                displayName: string,
                source: string,
                sourceUri: string (required),
                sourceKind: "file" | "url" (required),
                contentStructureKind: "unstructured",
                refresh: boolean
              } (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSourcesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; UpdateSourcesAsync (bool waitForCompletion, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; UpdateSourcesAsync(bool waitForCompletion, string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSourcesAsync(System.Boolean,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSourcesAsync (waitForCompletion As Boolean, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member UpdateSourcesAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.UpdateSourcesAsync : bool * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="questionAnsweringProjectsClient.UpdateSourcesAsync (waitForCompletion, projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitForCompletion" Type="System.Boolean" />
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitForCompletion"> true if the method should wait to return until the long-running operation has completed on the service; false if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates the sources of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              op: "add" | "delete" | "replace" (required),
              value: {
                displayName: string,
                source: string,
                sourceUri: string (required),
                sourceKind: "file" | "url" (required),
                contentStructureKind: "unstructured",
                refresh: boolean
              } (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSynonyms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateSynonyms (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateSynonyms(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSynonyms(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSynonyms (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateSynonyms : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateSynonyms : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="questionAnsweringProjectsClient.UpdateSynonyms (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates all the synonyms of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              value: [
                {
                  alterations: [string] (required)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSynonymsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateSynonymsAsync (string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateSynonymsAsync(string projectName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.UpdateSynonymsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSynonymsAsync (projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSynonymsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateSynonymsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="questionAnsweringProjectsClient.UpdateSynonymsAsync (projectName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.QuestionAnswering</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="projectName"> The name of the project to use. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Updates all the synonyms of a project. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              value: [
                {
                  alterations: [string] (required)
                }
              ],
              nextLink: string
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="projectName" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
