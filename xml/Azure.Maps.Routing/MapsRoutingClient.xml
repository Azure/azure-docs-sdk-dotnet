<Type Name="MapsRoutingClient" FullName="Azure.Maps.Routing.MapsRoutingClient">
  <TypeSignature Language="C#" Value="public class MapsRoutingClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MapsRoutingClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Maps.Routing.MapsRoutingClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MapsRoutingClient" />
  <TypeSignature Language="F#" Value="type MapsRoutingClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Maps.Routing</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Route service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MapsRoutingClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.AzureKeyCredential -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="credential"> Shared key credential used to authenticate to an Azure Maps Route Service. </param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.AzureSasCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureSasCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.AzureSasCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureSasCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.AzureSasCredential -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureSasCredential" />
      </Parameters>
      <Docs>
        <param name="credential"> The Shared Access Signature credential used to connect to Azure. This signature
            can be constructed using the <see cref="T:Azure.AzureSasCredential" />.</param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.AzureKeyCredential credential, Azure.Maps.Routing.MapsRoutingClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential, class Azure.Maps.Routing.MapsRoutingClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.AzureKeyCredential,Azure.Maps.Routing.MapsRoutingClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential, options As MapsRoutingClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.AzureKeyCredential * Azure.Maps.Routing.MapsRoutingClientOptions -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Maps.Routing.MapsRoutingClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> Shared key credential used to authenticate to an Azure Maps Route Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.AzureSasCredential credential, Azure.Maps.Routing.MapsRoutingClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureSasCredential credential, class Azure.Maps.Routing.MapsRoutingClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.AzureSasCredential,Azure.Maps.Routing.MapsRoutingClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureSasCredential, options As MapsRoutingClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.AzureSasCredential * Azure.Maps.Routing.MapsRoutingClientOptions -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureSasCredential" />
        <Parameter Name="options" Type="Azure.Maps.Routing.MapsRoutingClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> The Shared Access Signature credential used to connect to Azure. This signature
            can be constructed using the <see cref="T:Azure.AzureSasCredential" />.</param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.Core.TokenCredential credential, string clientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, string clientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.Core.TokenCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, clientId As String)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.Core.TokenCredential * string -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient (credential, clientId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="clientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"> A credential used to authenticate to an Azure Maps Route Service. </param>
        <param name="clientId"> Specifies which account is intended for usage in conjunction with the Microsoft Entra ID security model.
            It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API.
            To use Microsoft Entra ID security in Azure Maps see the following <see href="https://aka.ms/amauthdetails">articles</see> for guidance.
            </param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> or <paramref name="clientId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsRoutingClient (Azure.Core.TokenCredential credential, string clientId, Azure.Maps.Routing.MapsRoutingClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, string clientId, class Azure.Maps.Routing.MapsRoutingClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.#ctor(Azure.Core.TokenCredential,System.String,Azure.Maps.Routing.MapsRoutingClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, clientId As String, options As MapsRoutingClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Routing.MapsRoutingClient : Azure.Core.TokenCredential * string * Azure.Maps.Routing.MapsRoutingClientOptions -&gt; Azure.Maps.Routing.MapsRoutingClient" Usage="new Azure.Maps.Routing.MapsRoutingClient (credential, clientId, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="clientId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Maps.Routing.MapsRoutingClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> A credential used to authenticate to an Azure Maps Route Service. </param>
        <param name="clientId"> Specifies which account is intended for usage in conjunction with the Microsoft Entra ID security model.
            It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API.
            To use Microsoft Entra ID security in Azure Maps see the following <see href="https://aka.ms/amauthdetails">articles</see> for guidance.
            </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsRoutingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> or <paramref name="clientId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirections">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt; GetDirections (Azure.Maps.Routing.RouteDirectionQuery query, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteDirections&gt; GetDirections(class Azure.Maps.Routing.RouteDirectionQuery query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirections(Azure.Maps.Routing.RouteDirectionQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirections (query As RouteDirectionQuery, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouteDirections)" />
      <MemberSignature Language="F#" Value="abstract member GetDirections : Azure.Maps.Routing.RouteDirectionQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;&#xA;override this.GetDirections : Azure.Maps.Routing.RouteDirectionQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;" Usage="mapsRoutingClient.GetDirections (query, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="Azure.Maps.Routing.RouteDirectionQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="query"> The route direction query, including a list of route points and route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.
            Information returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.
            Routing service provides a set of parameters for a detailed description of vehicle-specific Consumption Model. Please check <see href="https://docs.microsoft.com/azure/azure-maps/consumption-model">Consumption Model</see> for detailed explanation of the concepts and parameters involved.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;&gt; GetDirectionsAsync (Azure.Maps.Routing.RouteDirectionQuery query, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteDirections&gt;&gt; GetDirectionsAsync(class Azure.Maps.Routing.RouteDirectionQuery query, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirectionsAsync(Azure.Maps.Routing.RouteDirectionQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectionsAsync (query As RouteDirectionQuery, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteDirections))" />
      <MemberSignature Language="F#" Value="abstract member GetDirectionsAsync : Azure.Maps.Routing.RouteDirectionQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;&gt;&#xA;override this.GetDirectionsAsync : Azure.Maps.Routing.RouteDirectionQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;&gt;" Usage="mapsRoutingClient.GetDirectionsAsync (query, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirections&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="Azure.Maps.Routing.RouteDirectionQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="query"> The route direction query, including a list of route points and route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.
            Information returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.
            Routing service provides a set of parameters for a detailed description of vehicle-specific Consumption Model. Please check <see href="https://docs.microsoft.com/azure/azure-maps/consumption-model">Consumption Model</see> for detailed explanation of the concepts and parameters involved.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="query" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectionsBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Maps.Routing.Models.GetDirectionsOperation GetDirectionsBatch (Azure.WaitUntil waitUntil, System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Maps.Routing.Models.GetDirectionsOperation GetDirectionsBatch(valuetype Azure.WaitUntil waitUntil, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Routing.RouteDirectionQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirectionsBatch(Azure.WaitUntil,System.Collections.Generic.IEnumerable{Azure.Maps.Routing.RouteDirectionQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectionsBatch (waitUntil As WaitUntil, queries As IEnumerable(Of RouteDirectionQuery), Optional cancellationToken As CancellationToken = Nothing) As GetDirectionsOperation" />
      <MemberSignature Language="F#" Value="abstract member GetDirectionsBatch : Azure.WaitUntil * seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Maps.Routing.Models.GetDirectionsOperation&#xA;override this.GetDirectionsBatch : Azure.WaitUntil * seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Maps.Routing.Models.GetDirectionsOperation" Usage="mapsRoutingClient.GetDirectionsBatch (waitUntil, queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Maps.Routing.Models.GetDirectionsOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> Whether to return once method is invoked or wait for the server operation to fully complete before returning. Possible value: <c>WaitUntil.Completed</c> and <c>WaitUntil.Started</c></param>
        <param name="queries"> The list of route directions queries/requests to process. The list can contain a max of 700 queries for async and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Route Directions Batch API sends batches of queries to <see href="https://docs.microsoft.com/rest/api/maps/route/getroutedirections">Route Directions API</see> using just a single API call.
            TThis Route Directions Batch API will run asynchronously (async) and it allows caller to batch up to <c>700</c> queries.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectionsBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetDirectionsOperation&gt; GetDirectionsBatchAsync (Azure.WaitUntil waitUntil, System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Maps.Routing.Models.GetDirectionsOperation&gt; GetDirectionsBatchAsync(valuetype Azure.WaitUntil waitUntil, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Routing.RouteDirectionQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirectionsBatchAsync(Azure.WaitUntil,System.Collections.Generic.IEnumerable{Azure.Maps.Routing.RouteDirectionQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectionsBatchAsync (waitUntil As WaitUntil, queries As IEnumerable(Of RouteDirectionQuery), Optional cancellationToken As CancellationToken = Nothing) As Task(Of GetDirectionsOperation)" />
      <MemberSignature Language="F#" Value="abstract member GetDirectionsBatchAsync : Azure.WaitUntil * seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetDirectionsOperation&gt;&#xA;override this.GetDirectionsBatchAsync : Azure.WaitUntil * seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetDirectionsOperation&gt;" Usage="mapsRoutingClient.GetDirectionsBatchAsync (waitUntil, queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetDirectionsOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> If the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="queries"> The list of route directions queries/requests to process. The list can contain a max of 700 queries for async and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Route Directions Batch API sends batches of queries to <see href="https://docs.microsoft.com/rest/api/maps/route/getroutedirections">Route Directions API</see> using just a single API call.
            TThis Route Directions Batch API will run asynchronously (async) and it allows caller to batch up to <c>700</c> queries.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectionsImmediateBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt; GetDirectionsImmediateBatch (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt; GetDirectionsImmediateBatch(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Routing.RouteDirectionQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirectionsImmediateBatch(System.Collections.Generic.IEnumerable{Azure.Maps.Routing.RouteDirectionQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectionsImmediateBatch (queries As IEnumerable(Of RouteDirectionQuery), Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouteDirectionsBatchResult)" />
      <MemberSignature Language="F#" Value="abstract member GetDirectionsImmediateBatch : seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&#xA;override this.GetDirectionsImmediateBatch : seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;" Usage="mapsRoutingClient.GetDirectionsImmediateBatch (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of route directions queries/requests to process. The list can contain 100 queries for sync version and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Route Directions Batch API sends batches of queries to <see href="https://docs.microsoft.com/rest/api/maps/route/getroutedirections">Route Directions API</see> using just a single API call.
            You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The sync API up to <c>100</c> queries.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectionsImmediateBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&gt; GetDirectionsImmediateBatchAsync (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&gt; GetDirectionsImmediateBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Routing.RouteDirectionQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetDirectionsImmediateBatchAsync(System.Collections.Generic.IEnumerable{Azure.Maps.Routing.RouteDirectionQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectionsImmediateBatchAsync (queries As IEnumerable(Of RouteDirectionQuery), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteDirectionsBatchResult))" />
      <MemberSignature Language="F#" Value="abstract member GetDirectionsImmediateBatchAsync : seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&gt;&#xA;override this.GetDirectionsImmediateBatchAsync : seq&lt;Azure.Maps.Routing.RouteDirectionQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&gt;" Usage="mapsRoutingClient.GetDirectionsImmediateBatchAsync (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteDirectionsBatchResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Routing.RouteDirectionQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of route directions queries/requests to process. The list can contain 100 queries for sync version and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Route Directions Batch API sends batches of queries to <see href="https://docs.microsoft.com/rest/api/maps/route/getroutedirections">Route Directions API</see> using just a single API call.
            You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The sync API up to <c>100</c> queries.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImmediateRouteMatrix">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt; GetImmediateRouteMatrix (Azure.Maps.Routing.RouteMatrixOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteMatrixResult&gt; GetImmediateRouteMatrix(class Azure.Maps.Routing.RouteMatrixOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrix(Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmediateRouteMatrix (options As RouteMatrixOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouteMatrixResult)" />
      <MemberSignature Language="F#" Value="abstract member GetImmediateRouteMatrix : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&#xA;override this.GetImmediateRouteMatrix : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;" Usage="mapsRoutingClient.GetImmediateRouteMatrix (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteMatrixOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request. For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for sync request is <c>100</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImmediateRouteMatrix">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt; GetImmediateRouteMatrix (Azure.Maps.Routing.RouteMatrixQuery routeMatrixQuery, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteMatrixResult&gt; GetImmediateRouteMatrix(class Azure.Maps.Routing.RouteMatrixQuery routeMatrixQuery, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrix(Azure.Maps.Routing.RouteMatrixQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmediateRouteMatrix (routeMatrixQuery As RouteMatrixQuery, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouteMatrixResult)" />
      <MemberSignature Language="F#" Value="abstract member GetImmediateRouteMatrix : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&#xA;override this.GetImmediateRouteMatrix : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;" Usage="mapsRoutingClient.GetImmediateRouteMatrix (routeMatrixQuery, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeMatrixQuery" Type="Azure.Maps.Routing.RouteMatrixQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="routeMatrixQuery"> The route matrix to query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request. For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for sync request is <c>100</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="routeMatrixQuery" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImmediateRouteMatrixAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt; GetImmediateRouteMatrixAsync (Azure.Maps.Routing.RouteMatrixOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt; GetImmediateRouteMatrixAsync(class Azure.Maps.Routing.RouteMatrixOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmediateRouteMatrixAsync (options As RouteMatrixOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteMatrixResult))" />
      <MemberSignature Language="F#" Value="abstract member GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;&#xA;override this.GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;" Usage="mapsRoutingClient.GetImmediateRouteMatrixAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteMatrixOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> The route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.
            For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of
            a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for sync request is <c>100</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImmediateRouteMatrixAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt; GetImmediateRouteMatrixAsync (Azure.Maps.Routing.RouteMatrixQuery routeMatrixQuery, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt; GetImmediateRouteMatrixAsync(class Azure.Maps.Routing.RouteMatrixQuery routeMatrixQuery, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmediateRouteMatrixAsync (routeMatrixQuery As RouteMatrixQuery, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteMatrixResult))" />
      <MemberSignature Language="F#" Value="abstract member GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;&#xA;override this.GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;" Usage="mapsRoutingClient.GetImmediateRouteMatrixAsync (routeMatrixQuery, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteMatrixResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routeMatrixQuery" Type="Azure.Maps.Routing.RouteMatrixQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="routeMatrixQuery"> The route matrix to query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.
            For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for sync request is <c>100</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="routeMatrixQuery" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRouteMatrix">
      <MemberSignature Language="C#" Value="public virtual Azure.Maps.Routing.Models.GetRouteMatrixOperation GetRouteMatrix (Azure.WaitUntil waitUntil, Azure.Maps.Routing.RouteMatrixOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Maps.Routing.Models.GetRouteMatrixOperation GetRouteMatrix(valuetype Azure.WaitUntil waitUntil, class Azure.Maps.Routing.RouteMatrixOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetRouteMatrix(Azure.WaitUntil,Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRouteMatrix (waitUntil As WaitUntil, options As RouteMatrixOptions, Optional cancellationToken As CancellationToken = Nothing) As GetRouteMatrixOperation" />
      <MemberSignature Language="F#" Value="abstract member GetRouteMatrix : Azure.WaitUntil * Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; Azure.Maps.Routing.Models.GetRouteMatrixOperation&#xA;override this.GetRouteMatrix : Azure.WaitUntil * Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; Azure.Maps.Routing.Models.GetRouteMatrixOperation" Usage="mapsRoutingClient.GetRouteMatrix (waitUntil, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Maps.Routing.Models.GetRouteMatrixOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteMatrixOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> If the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. </param>
        <param name="options"> The route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.
            For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for async request is <c>700</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRouteMatrixAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetRouteMatrixOperation&gt; GetRouteMatrixAsync (Azure.WaitUntil waitUntil, Azure.Maps.Routing.RouteMatrixOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Maps.Routing.Models.GetRouteMatrixOperation&gt; GetRouteMatrixAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Maps.Routing.RouteMatrixOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetRouteMatrixAsync(Azure.WaitUntil,Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRouteMatrixAsync (waitUntil As WaitUntil, options As RouteMatrixOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of GetRouteMatrixOperation)" />
      <MemberSignature Language="F#" Value="abstract member GetRouteMatrixAsync : Azure.WaitUntil * Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetRouteMatrixOperation&gt;&#xA;override this.GetRouteMatrixAsync : Azure.WaitUntil * Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetRouteMatrixOperation&gt;" Usage="mapsRoutingClient.GetRouteMatrixAsync (waitUntil, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Maps.Routing.Models.GetRouteMatrixOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteMatrixOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> If the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. </param>
        <param name="options"> The route direction options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.
            For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell.
            For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.
            The maximum size of a matrix for async request is <c>700</c> (the number of origins multiplied by the number of destinations).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRouteRange">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt; GetRouteRange (Azure.Maps.Routing.RouteRangeOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteRangeResult&gt; GetRouteRange(class Azure.Maps.Routing.RouteRangeOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetRouteRange(Azure.Maps.Routing.RouteRangeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRouteRange (options As RouteRangeOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouteRangeResult)" />
      <MemberSignature Language="F#" Value="abstract member GetRouteRange : Azure.Maps.Routing.RouteRangeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;&#xA;override this.GetRouteRange : Azure.Maps.Routing.RouteRangeOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;" Usage="mapsRoutingClient.GetRouteRange (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteRangeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Route range options to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            This service will calculate a set of locations that can be reached from the origin point based on fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone) is returned in a counterclockwise  orientation as well as the precise polygon center which was the result of the origin point.
            The returned polygon can be used for further processing such as <see href="https://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry">Search Inside Geometry</see> to  search for POIs within the provided Isochrone.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRouteRangeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;&gt; GetRouteRangeAsync (Azure.Maps.Routing.RouteRangeOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Routing.Models.RouteRangeResult&gt;&gt; GetRouteRangeAsync(class Azure.Maps.Routing.RouteRangeOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Routing.MapsRoutingClient.GetRouteRangeAsync(Azure.Maps.Routing.RouteRangeOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRouteRangeAsync (options As RouteRangeOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteRangeResult))" />
      <MemberSignature Language="F#" Value="abstract member GetRouteRangeAsync : Azure.Maps.Routing.RouteRangeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;&gt;&#xA;override this.GetRouteRangeAsync : Azure.Maps.Routing.RouteRangeOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;&gt;" Usage="mapsRoutingClient.GetRouteRangeAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Routing</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Routing.Models.RouteRangeResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Routing.RouteRangeOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Route range options to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            This service will calculate a set of locations that can be reached from the origin point based on fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone) is returned in a counterclockwise  orientation as well as the precise polygon center which was the result of the origin point.
            The returned polygon can be used for further processing such as  <see href="https://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry">Search Inside Geometry</see> to  search for POIs within the provided Isochrone.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
