<Type Name="LogsQueryClient" FullName="Azure.Monitor.Query.LogsQueryClient">
  <TypeSignature Language="C#" Value="public class LogsQueryClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LogsQueryClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Monitor.Query.LogsQueryClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LogsQueryClient" />
  <TypeSignature Language="F#" Value="type LogsQueryClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Monitor.Query</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> allows to query the Azure Monitor Logs service.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LogsQueryClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates an instance of <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> to support <see href="https://aka.ms/azsdk/net/mocking">mocking</see>.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsQueryClient (Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.#ctor(Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Query.LogsQueryClient : Azure.Core.TokenCredential -&gt; Azure.Monitor.Query.LogsQueryClient" Usage="new Azure.Monitor.Query.LogsQueryClient credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> instance to use for authentication.</param>
        <summary>
            Creates an instance of <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> for Azure Public Cloud usage. Uses the default 'https://api.loganalytics.io' endpoint.
            <code snippet="Snippet:CreateLogsClient" language="csharp">
            var client = new LogsQueryClient(new DefaultAzureCredential());
            </code></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsQueryClient (Azure.Core.TokenCredential credential, Azure.Monitor.Query.LogsQueryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, class Azure.Monitor.Query.LogsQueryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.#ctor(Azure.Core.TokenCredential,Azure.Monitor.Query.LogsQueryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, options As LogsQueryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Query.LogsQueryClient : Azure.Core.TokenCredential * Azure.Monitor.Query.LogsQueryClientOptions -&gt; Azure.Monitor.Query.LogsQueryClient" Usage="new Azure.Monitor.Query.LogsQueryClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> instance to use for authentication.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryClientOptions" /> instance to use as client configuration.</param>
        <summary>
            Creates an instance of <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> for Azure Public Cloud usage. Uses the default 'https://api.loganalytics.io' endpoint, unless <see cref="P:Azure.Monitor.Query.LogsQueryClientOptions.Audience" /> is set to an Azure sovereign cloud.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsQueryClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Query.LogsQueryClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Monitor.Query.LogsQueryClient" Usage="new Azure.Monitor.Query.LogsQueryClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">The service endpoint to use.</param>
        <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> instance to use for authentication.</param>
        <summary>
            Creates an instance of <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> for the Azure cloud represented by <paramref name="endpoint" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsQueryClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Monitor.Query.LogsQueryClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Monitor.Query.LogsQueryClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Monitor.Query.LogsQueryClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As LogsQueryClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Query.LogsQueryClient : Uri * Azure.Core.TokenCredential * Azure.Monitor.Query.LogsQueryClientOptions -&gt; Azure.Monitor.Query.LogsQueryClient" Usage="new Azure.Monitor.Query.LogsQueryClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The service endpoint to use.</param>
        <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> instance to use for authentication.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryClientOptions" /> instance to use as client configuration.</param>
        <summary>
            Creates an instance of <see cref="T:Azure.Monitor.Query.LogsQueryClient" /> for the Azure cloud represented by <paramref name="endpoint" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="public static string CreateQuery (FormattableString query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateQuery(class System.FormattableString query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.CreateQuery(System.FormattableString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateQuery (query As FormattableString) As String" />
      <MemberSignature Language="F#" Value="static member CreateQuery : FormattableString -&gt; string" Usage="Azure.Monitor.Query.LogsQueryClient.CreateQuery query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.FormattableString" />
      </Parameters>
      <Docs>
        <param name="query">An interpolated query string.</param>
        <summary>
            Create a Kusto query from an interpolated string. The interpolated values will be quoted and escaped as necessary.
            </summary>
        <returns>A valid Kusto query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.Monitor.Query.LogsQueryClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.Monitor.Query.LogsQueryClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the endpoint used by the client.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt; QueryBatch (Azure.Monitor.Query.LogsBatchQuery batch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt; QueryBatch(class Azure.Monitor.Query.LogsBatchQuery batch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryBatch(Azure.Monitor.Query.LogsBatchQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryBatch (batch As LogsBatchQuery, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogsBatchQueryResultCollection)" />
      <MemberSignature Language="F#" Value="abstract member QueryBatch : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&#xA;override this.QueryBatch : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;" Usage="logsQueryClient.QueryBatch (batch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Monitor.Query.LogsBatchQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="batch">The batch of queries to send.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Submits the batch query. Use the <see cref="T:Azure.Monitor.Query.LogsBatchQuery" /> to compose a batch query.
             <example snippet="Snippet:BatchQuery"><code language="csharp">
             string workspaceId = "&lt;workspace_id&gt;";
            
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             // Query TOP 10 resource groups by event count
             // And total event count
             var batch = new LogsBatchQuery();
            
             string countQueryId = batch.AddWorkspaceQuery(
                 workspaceId,
                 "AzureActivity | count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             string topQueryId = batch.AddWorkspaceQuery(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
            
             Response&lt;LogsBatchQueryResultCollection&gt; response = await client.QueryBatchAsync(batch);
            
             var count = response.Value.GetResult&lt;int&gt;(countQueryId).Single();
             var topEntries = response.Value.GetResult&lt;MyLogEntryModel&gt;(topQueryId);
            
             Console.WriteLine($"AzureActivity has total {count} events");
             foreach (var logEntryModel in topEntries)
             {
                 Console.WriteLine($"{logEntryModel.ResourceGroup} had {logEntryModel.Count} events");
             }
             </code></example></summary>
        <returns>The <see cref="T:Azure.Monitor.Query.Models.LogsBatchQueryResultCollection" /> containing the query identifier that has to be passed into <see cref="M:Azure.Monitor.Query.Models.LogsBatchQueryResultCollection.GetResult(System.String)" /> to get the result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&gt; QueryBatchAsync (Azure.Monitor.Query.LogsBatchQuery batch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&gt; QueryBatchAsync(class Azure.Monitor.Query.LogsBatchQuery batch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryBatchAsync(Azure.Monitor.Query.LogsBatchQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryBatchAsync (batch As LogsBatchQuery, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogsBatchQueryResultCollection))" />
      <MemberSignature Language="F#" Value="abstract member QueryBatchAsync : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&gt;&#xA;override this.QueryBatchAsync : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&gt;" Usage="logsQueryClient.QueryBatchAsync (batch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Monitor.Query.LogsBatchQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="batch">The batch of Kusto queries to send.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Submits the batch query. Use the <see cref="T:Azure.Monitor.Query.LogsBatchQuery" /> to compose a batch query.
             <example snippet="Snippet:BatchQuery"><code language="csharp">
             string workspaceId = "&lt;workspace_id&gt;";
            
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             // Query TOP 10 resource groups by event count
             // And total event count
             var batch = new LogsBatchQuery();
            
             string countQueryId = batch.AddWorkspaceQuery(
                 workspaceId,
                 "AzureActivity | count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             string topQueryId = batch.AddWorkspaceQuery(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
            
             Response&lt;LogsBatchQueryResultCollection&gt; response = await client.QueryBatchAsync(batch);
            
             var count = response.Value.GetResult&lt;int&gt;(countQueryId).Single();
             var topEntries = response.Value.GetResult&lt;MyLogEntryModel&gt;(topQueryId);
            
             Console.WriteLine($"AzureActivity has total {count} events");
             foreach (var logEntryModel in topEntries)
             {
                 Console.WriteLine($"{logEntryModel.ResourceGroup} had {logEntryModel.Count} events");
             }
             </code></example></summary>
        <returns>The <see cref="T:Azure.Monitor.Query.Models.LogsBatchQueryResultCollection" /> that allows retrieving query results.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt; QueryResource (Azure.Core.ResourceIdentifier resourceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsQueryResult&gt; QueryResource(class Azure.Core.ResourceIdentifier resourceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryResource(Azure.Core.ResourceIdentifier,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryResource (resourceId As ResourceIdentifier, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogsQueryResult)" />
      <MemberSignature Language="F#" Value="abstract member QueryResource : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&#xA;override this.QueryResource : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;" Usage="logsQueryClient.QueryResource (resourceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceId"> The Azure resource ID where the query should be executed. </param>
        <param name="query"> The Kusto query to fetch the logs. </param>
        <param name="timeRange"> The time period for which the logs should be looked up. </param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Returns all the Azure Monitor logs matching the given query for an Azure resource.
             <example snippet="Snippet:QueryResource"><code language="csharp">
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             string resourceId = "/subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group_name&gt;/providers/&lt;resource_provider&gt;/&lt;resource&gt;";
             string tableName = "&lt;table_name&gt;";
             Response&lt;LogsQueryResult&gt; results = await client.QueryResourceAsync(
                 new ResourceIdentifier(resourceId),
                 $"{tableName} | distinct * | project TimeGenerated",
                 new QueryTimeRange(TimeSpan.FromDays(7)));
            
             LogsTable resultTable = results.Value.Table;
             foreach (LogsTableRow row in resultTable.Rows)
             {
                 Console.WriteLine($"{row["OperationName"]} {row["ResourceGroup"]}");
             }
            
             foreach (LogsTableColumn columns in resultTable.Columns)
             {
                 Console.WriteLine("Name: " + columns.Name + " Type: " + columns.Type);
             }
             </code></example></summary>
        <returns>The logs matching the query.</returns>
        <remarks>
             When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryResource&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt; QueryResource&lt;T&gt; (Azure.Core.ResourceIdentifier resourceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt;&gt; QueryResource&lt;T&gt;(class Azure.Core.ResourceIdentifier resourceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryResource``1(Azure.Core.ResourceIdentifier,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryResource(Of T) (resourceId As ResourceIdentifier, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of T))" />
      <MemberSignature Language="F#" Value="abstract member QueryResource : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&#xA;override this.QueryResource : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;" Usage="logsQueryClient.QueryResource (resourceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="resourceId"> The Azure resource ID where the query should be executed. </param>
        <param name="query"> The Kusto query to fetch the logs. </param>
        <param name="timeRange"> The time period for which the logs should be looked up. </param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Returns all the Azure Monitor logs matching the given query for an Azure resource.
             <example snippet="Snippet:QueryResource"><code language="csharp">
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             string resourceId = "/subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group_name&gt;/providers/&lt;resource_provider&gt;/&lt;resource&gt;";
             string tableName = "&lt;table_name&gt;";
             Response&lt;LogsQueryResult&gt; results = await client.QueryResourceAsync(
                 new ResourceIdentifier(resourceId),
                 $"{tableName} | distinct * | project TimeGenerated",
                 new QueryTimeRange(TimeSpan.FromDays(7)));
            
             LogsTable resultTable = results.Value.Table;
             foreach (LogsTableRow row in resultTable.Rows)
             {
                 Console.WriteLine($"{row["OperationName"]} {row["ResourceGroup"]}");
             }
            
             foreach (LogsTableColumn columns in resultTable.Columns)
             {
                 Console.WriteLine("Name: " + columns.Name + " Type: " + columns.Type);
             }
             </code></example></summary>
        <returns>The logs matching the query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt; QueryResourceAsync (Azure.Core.ResourceIdentifier resourceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt; QueryResourceAsync(class Azure.Core.ResourceIdentifier resourceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryResourceAsync(Azure.Core.ResourceIdentifier,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryResourceAsync (resourceId As ResourceIdentifier, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogsQueryResult))" />
      <MemberSignature Language="F#" Value="abstract member QueryResourceAsync : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;&#xA;override this.QueryResourceAsync : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;" Usage="logsQueryClient.QueryResourceAsync (resourceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceId"> The Azure resource ID where the query should be executed. </param>
        <param name="query"> The Kusto query to fetch the logs. </param>
        <param name="timeRange"> The time period for which the logs should be looked up. </param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Returns all the Azure Monitor logs matching the given query for an Azure resource.
             <example snippet="Snippet:QueryResource"><code language="csharp">
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             string resourceId = "/subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group_name&gt;/providers/&lt;resource_provider&gt;/&lt;resource&gt;";
             string tableName = "&lt;table_name&gt;";
             Response&lt;LogsQueryResult&gt; results = await client.QueryResourceAsync(
                 new ResourceIdentifier(resourceId),
                 $"{tableName} | distinct * | project TimeGenerated",
                 new QueryTimeRange(TimeSpan.FromDays(7)));
            
             LogsTable resultTable = results.Value.Table;
             foreach (LogsTableRow row in resultTable.Rows)
             {
                 Console.WriteLine($"{row["OperationName"]} {row["ResourceGroup"]}");
             }
            
             foreach (LogsTableColumn columns in resultTable.Columns)
             {
                 Console.WriteLine("Name: " + columns.Name + " Type: " + columns.Type);
             }
             </code></example></summary>
        <returns>The logs matching the query.</returns>
        <remarks>
             When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryResourceAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;&gt; QueryResourceAsync&lt;T&gt; (Azure.Core.ResourceIdentifier resourceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt;&gt;&gt; QueryResourceAsync&lt;T&gt;(class Azure.Core.ResourceIdentifier resourceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryResourceAsync``1(Azure.Core.ResourceIdentifier,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryResourceAsync(Of T) (resourceId As ResourceIdentifier, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of T)))" />
      <MemberSignature Language="F#" Value="abstract member QueryResourceAsync : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&gt;&#xA;override this.QueryResourceAsync : Azure.Core.ResourceIdentifier * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&gt;" Usage="logsQueryClient.QueryResourceAsync (resourceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="resourceId"> The Azure resource ID where the query should be executed. </param>
        <param name="query"> The Kusto query to fetch the logs. </param>
        <param name="timeRange"> The time period for which the logs should be looked up. </param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Returns all the Azure Monitor logs matching the given query for an Azure resource.
             <example snippet="Snippet:QueryResource"><code language="csharp">
             var client = new LogsQueryClient(new DefaultAzureCredential());
            
             string resourceId = "/subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group_name&gt;/providers/&lt;resource_provider&gt;/&lt;resource&gt;";
             string tableName = "&lt;table_name&gt;";
             Response&lt;LogsQueryResult&gt; results = await client.QueryResourceAsync(
                 new ResourceIdentifier(resourceId),
                 $"{tableName} | distinct * | project TimeGenerated",
                 new QueryTimeRange(TimeSpan.FromDays(7)));
            
             LogsTable resultTable = results.Value.Table;
             foreach (LogsTableRow row in resultTable.Rows)
             {
                 Console.WriteLine($"{row["OperationName"]} {row["ResourceGroup"]}");
             }
            
             foreach (LogsTableColumn columns in resultTable.Columns)
             {
                 Console.WriteLine("Name: " + columns.Name + " Type: " + columns.Type);
             }
             </code></example></summary>
        <returns>The logs matching the query.</returns>
        <remarks>
             When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryWorkspace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt; QueryWorkspace (string workspaceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsQueryResult&gt; QueryWorkspace(string workspaceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryWorkspace(System.String,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryWorkspace (workspaceId As String, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogsQueryResult)" />
      <MemberSignature Language="F#" Value="abstract member QueryWorkspace : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&#xA;override this.QueryWorkspace : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;" Usage="logsQueryClient.QueryWorkspace (workspaceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workspaceId" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workspaceId">The workspace ID to include in the query (<c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>).</param>
        <param name="query">The Kusto query to fetch the logs.</param>
        <param name="timeRange">The time period for which the logs should be looked up.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
            Executes the logs query.
            </summary>
        <returns>The <see cref="T:Azure.Monitor.Query.Models.LogsQueryResult" /> containing the query results.</returns>
        <remarks>
            When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryWorkspace&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt; QueryWorkspace&lt;T&gt; (string workspaceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt;&gt; QueryWorkspace&lt;T&gt;(string workspaceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryWorkspace``1(System.String,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryWorkspace(Of T) (workspaceId As String, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of T))" />
      <MemberSignature Language="F#" Value="abstract member QueryWorkspace : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&#xA;override this.QueryWorkspace : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;" Usage="logsQueryClient.QueryWorkspace (workspaceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workspaceId" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="workspaceId">The workspace ID to include in the query (<c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>).</param>
        <param name="query">The Kusto query to fetch the logs.</param>
        <param name="timeRange">The time period for which the logs should be looked up.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Executes the logs query. Deserializes the result into a strongly typed model class or a primitive type if the query returns a single column.
            
             Example of querying a model:
             <example snippet="Snippet:QueryLogsAsModelCall"><code language="csharp">
             Response&lt;IReadOnlyList&lt;MyLogEntryModel&gt;&gt; response = await client.QueryWorkspaceAsync&lt;MyLogEntryModel&gt;(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             </code></example>
            
             Example of querying a primitive:
             <example snippet="Snippet:QueryLogsAsPrimitiveCall"><code language="csharp">
             Response&lt;IReadOnlyList&lt;string&gt;&gt; response = await client.QueryWorkspaceAsync&lt;string&gt;(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count | project ResourceGroup",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             </code></example></summary>
        <returns>Query results mapped to a type <typeparamref name="T" />.</returns>
        <remarks>
             When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryWorkspaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt; QueryWorkspaceAsync (string workspaceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt; QueryWorkspaceAsync(string workspaceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryWorkspaceAsync(System.String,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryWorkspaceAsync (workspaceId As String, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogsQueryResult))" />
      <MemberSignature Language="F#" Value="abstract member QueryWorkspaceAsync : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;&#xA;override this.QueryWorkspaceAsync : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;" Usage="logsQueryClient.QueryWorkspaceAsync (workspaceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Query.Models.LogsQueryResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workspaceId" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workspaceId">The workspace ID to include in the query (<c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>).</param>
        <param name="query">The Kusto query to fetch the logs.</param>
        <param name="timeRange">The time period for which the logs should be looked up.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
            Executes the logs query.
            </summary>
        <returns>The <see cref="T:Azure.Monitor.Query.Models.LogsQueryResult" /> with the query results.</returns>
        <remarks>
            When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryWorkspaceAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;&gt; QueryWorkspaceAsync&lt;T&gt; (string workspaceId, string query, Azure.Monitor.Query.QueryTimeRange timeRange, Azure.Monitor.Query.LogsQueryOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt;&gt;&gt; QueryWorkspaceAsync&lt;T&gt;(string workspaceId, string query, valuetype Azure.Monitor.Query.QueryTimeRange timeRange, class Azure.Monitor.Query.LogsQueryOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Query.LogsQueryClient.QueryWorkspaceAsync``1(System.String,System.String,Azure.Monitor.Query.QueryTimeRange,Azure.Monitor.Query.LogsQueryOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryWorkspaceAsync(Of T) (workspaceId As String, query As String, timeRange As QueryTimeRange, Optional options As LogsQueryOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of T)))" />
      <MemberSignature Language="F#" Value="abstract member QueryWorkspaceAsync : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&gt;&#xA;override this.QueryWorkspaceAsync : string * string * Azure.Monitor.Query.QueryTimeRange * Azure.Monitor.Query.LogsQueryOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;'T&gt;&gt;&gt;" Usage="logsQueryClient.QueryWorkspaceAsync (workspaceId, query, timeRange, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Query</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;T&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workspaceId" Type="System.String" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="timeRange" Type="Azure.Monitor.Query.QueryTimeRange" />
        <Parameter Name="options" Type="Azure.Monitor.Query.LogsQueryOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="workspaceId">The workspace ID to include in the query (<c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>).</param>
        <param name="query">The Kusto query to fetch the logs.</param>
        <param name="timeRange">The time period for which the logs should be looked up.</param>
        <param name="options">The <see cref="T:Azure.Monitor.Query.LogsQueryOptions" /> to configure the query.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to use.</param>
        <summary>
             Executes the logs query. Deserializes the result into a strongly typed model class or a primitive type if the query returns a single column.
            
             Example of querying a model:
             <example snippet="Snippet:QueryLogsAsModelCall"><code language="csharp">
             Response&lt;IReadOnlyList&lt;MyLogEntryModel&gt;&gt; response = await client.QueryWorkspaceAsync&lt;MyLogEntryModel&gt;(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             </code></example>
            
             Example of querying a primitive:
             <example snippet="Snippet:QueryLogsAsPrimitiveCall"><code language="csharp">
             Response&lt;IReadOnlyList&lt;string&gt;&gt; response = await client.QueryWorkspaceAsync&lt;string&gt;(
                 workspaceId,
                 "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count | project ResourceGroup",
                 new QueryTimeRange(TimeSpan.FromDays(1)));
             </code></example></summary>
        <returns>Query results mapped to a type <typeparamref name="T" />.</returns>
        <remarks>
             When the <paramref name="timeRange" /> argument is <see cref="P:Azure.Monitor.Query.QueryTimeRange.All" /> and the <paramref name="query" /> argument contains a time range filter, the underlying service uses the time range specified in <paramref name="query" />.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
