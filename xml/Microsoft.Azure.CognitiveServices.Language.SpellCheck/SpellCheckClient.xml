<Type Name="SpellCheckClient" FullName="Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient">
  <TypeSignature Language="C#" Value="public class SpellCheckClient : Microsoft.Rest.ServiceClient&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient&gt;, IDisposable, Microsoft.Azure.CognitiveServices.Language.SpellCheck.ISpellCheckClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpellCheckClient extends Microsoft.Rest.ServiceClient`1&lt;class Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient&gt; implements class Microsoft.Azure.CognitiveServices.Language.SpellCheck.ISpellCheckClient, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SpellCheckClient&#xA;Inherits ServiceClient(Of SpellCheckClient)&#xA;Implements IDisposable, ISpellCheckClient" />
  <TypeSignature Language="F#" Value="type SpellCheckClient = class&#xA;    inherit ServiceClient&lt;SpellCheckClient&gt;&#xA;    interface ISpellCheckClient&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Rest.ServiceClient&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Azure.CognitiveServices.Language.SpellCheck.ISpellCheckClient</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The Spell Check API - V7 lets you check a text string for spelling and
            grammar errors.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SpellCheckClient (params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient handlers" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handlers">
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpellCheckClient (Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Rest.ServiceClientCredentials credentials, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credentials As ServiceClientCredentials, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : Microsoft.Rest.ServiceClientCredentials * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient (credentials, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credentials" Type="Microsoft.Rest.ServiceClientCredentials" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credentials">
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
        <param name="handlers">
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SpellCheckClient (System.Net.Http.HttpClient httpClient, bool disposeHttpClient);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpClient httpClient, bool disposeHttpClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(System.Net.Http.HttpClient,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : System.Net.Http.HttpClient * bool -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient (httpClient, disposeHttpClient)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpClient" Type="System.Net.Http.HttpClient" />
        <Parameter Name="disposeHttpClient" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="httpClient">
            HttpClient to be used
            </param>
        <param name="disposeHttpClient">
            True: will dispose the provided httpClient on calling SpellCheckClient.Dispose(). False: will not dispose provided httpClient</param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SpellCheckClient (System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.HttpClientHandler rootHandler, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (rootHandler As HttpClientHandler, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : System.Net.Http.HttpClientHandler * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient (rootHandler, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rootHandler" Type="System.Net.Http.HttpClientHandler" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rootHandler">
            Optional. The http client handler used to handle http transport.
            </param>
        <param name="handlers">
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpellCheckClient (Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Rest.ServiceClientCredentials credentials, class System.Net.Http.HttpClient httpClient, bool disposeHttpClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : Microsoft.Rest.ServiceClientCredentials * System.Net.Http.HttpClient * bool -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient (credentials, httpClient, disposeHttpClient)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credentials" Type="Microsoft.Rest.ServiceClientCredentials" />
        <Parameter Name="httpClient" Type="System.Net.Http.HttpClient" />
        <Parameter Name="disposeHttpClient" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="credentials">
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
        <param name="httpClient">
            HttpClient to be used
            </param>
        <param name="disposeHttpClient">
            True: will dispose the provided httpClient on calling SpellCheckClient.Dispose(). False: will not dispose provided httpClient</param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpellCheckClient (Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Rest.ServiceClientCredentials credentials, class System.Net.Http.HttpClientHandler rootHandler, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credentials As ServiceClientCredentials, rootHandler As HttpClientHandler, ParamArray handlers As DelegatingHandler())" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient : Microsoft.Rest.ServiceClientCredentials * System.Net.Http.HttpClientHandler * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient" Usage="new Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient (credentials, rootHandler, handlers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credentials" Type="Microsoft.Rest.ServiceClientCredentials" />
        <Parameter Name="rootHandler" Type="System.Net.Http.HttpClientHandler" />
        <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
          <Attributes>
            <Attribute FrameworkAlternate="azure-dotnet">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credentials">
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
        <param name="rootHandler">
            Optional. The http client handler used to handle http transport.
            </param>
        <param name="handlers">
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        <summary>
            Initializes a new instance of the SpellCheckClient class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public Microsoft.Rest.ServiceClientCredentials Credentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Rest.ServiceClientCredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Credentials As ServiceClientCredentials" />
      <MemberSignature Language="F#" Value="member this.Credentials : Microsoft.Rest.ServiceClientCredentials" Usage="Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.ServiceClientCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializationSettings">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Newtonsoft.Json.JsonSerializerSettings DeserializationSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.DeserializationSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeserializationSettings As JsonSerializerSettings" />
      <MemberSignature Language="F#" Value="member this.DeserializationSettings : Newtonsoft.Json.JsonSerializerSettings" Usage="Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.DeserializationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.JsonSerializerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets json deserialization settings.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public string Endpoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Endpoint" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Property Endpoint As String" />
      <MemberSignature Language="F#" Value="member this.Endpoint : string with get, set" Usage="Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.Endpoint" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Azure.CognitiveServices.Language.SpellCheck.ISpellCheckClient.Endpoint</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            "https://westus.api.cognitive.microsoft.com",
            "https://api.cognitive.microsoft.com").
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationSettings">
      <MemberSignature Language="C#" Value="public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Newtonsoft.Json.JsonSerializerSettings SerializationSettings" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.SerializationSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationSettings As JsonSerializerSettings" />
      <MemberSignature Language="F#" Value="member this.SerializationSettings : Newtonsoft.Json.JsonSerializerSettings" Usage="Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.SerializationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.JsonSerializerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets json serialization settings.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellCheckerWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.SpellCheckModel&gt;&gt; SpellCheckerWithHttpMessagesAsync (string text, string acceptLanguage = null, string pragma = null, string userAgent = null, string clientId = null, string clientIp = null, string location = null, string actionType = null, string appName = null, string countryCode = null, string clientMachineName = null, string docId = null, string market = null, string sessionId = null, string setLang = null, string userId = null, string mode = null, string preContextText = null, string postContextText = null, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.HttpOperationResponse`1&lt;class Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.SpellCheckModel&gt;&gt; SpellCheckerWithHttpMessagesAsync(string text, string acceptLanguage, string pragma, string userAgent, string clientId, string clientIp, string location, string actionType, string appName, string countryCode, string clientMachineName, string docId, string market, string sessionId, string setLang, string userId, string mode, string preContextText, string postContextText, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.SpellCheckClient.SpellCheckerWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member SpellCheckerWithHttpMessagesAsync : string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.SpellCheckModel&gt;&gt;&#xA;override this.SpellCheckerWithHttpMessagesAsync : string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.SpellCheckModel&gt;&gt;" Usage="spellCheckClient.SpellCheckerWithHttpMessagesAsync (text, acceptLanguage, pragma, userAgent, clientId, clientIp, location, actionType, appName, countryCode, clientMachineName, docId, market, sessionId, setLang, userId, mode, preContextText, postContextText, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Azure.CognitiveServices.Language.SpellCheck.ISpellCheckClient.SpellCheckerWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.CognitiveServices.Language.SpellCheck</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.HttpOperationResponse&lt;Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.SpellCheckModel&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="acceptLanguage" Type="System.String" />
        <Parameter Name="pragma" Type="System.String" />
        <Parameter Name="userAgent" Type="System.String" />
        <Parameter Name="clientId" Type="System.String" />
        <Parameter Name="clientIp" Type="System.String" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="actionType" Type="System.String" />
        <Parameter Name="appName" Type="System.String" />
        <Parameter Name="countryCode" Type="System.String" />
        <Parameter Name="clientMachineName" Type="System.String" />
        <Parameter Name="docId" Type="System.String" />
        <Parameter Name="market" Type="System.String" />
        <Parameter Name="sessionId" Type="System.String" />
        <Parameter Name="setLang" Type="System.String" />
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="mode" Type="System.String" />
        <Parameter Name="preContextText" Type="System.String" />
        <Parameter Name="postContextText" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="text">
            The text string to check for spelling and grammar errors. The combined
            length of the text string, preContextText string, and postContextText
            string may not exceed 10,000 characters. You may specify this parameter in
            the query string of a GET request or in the body of a POST request. Because
            of the query string length limit, you'll typically use a POST request
            unless you're checking only short strings.
            </param>
        <param name="acceptLanguage">
            A comma-delimited list of one or more languages to use for user interface
            strings. The list is in decreasing order of preference. For additional
            information, including expected format, see
            [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). This
            header and the setLang query parameter are mutually exclusive; do not
            specify both. If you set this header, you must also specify the cc query
            parameter. Bing will use the first supported language it finds from the
            list, and combine that language with the cc parameter value to determine
            the market to return results for. If the list does not include a supported
            language, Bing will find the closest language and market that supports the
            request, and may use an aggregated or default market for the results
            instead of a specified one. You should use this header and the cc query
            parameter only if you specify multiple languages; otherwise, you should use
            the mkt and setLang query parameters. A user interface string is a string
            that's used as a label in a user interface. There are very few user
            interface strings in the JSON response objects. Any links in the response
            objects to Bing.com properties will apply the specified language.
            </param>
        <param name="pragma">
            By default, Bing returns cached content, if available. To prevent Bing from
            returning cached content, set the Pragma header to no-cache (for example,
            Pragma: no-cache).
            </param>
        <param name="userAgent">
            The user agent originating the request. Bing uses the user agent to provide
            mobile users with an optimized experience. Although optional, you are
            strongly encouraged to always specify this header. The user-agent should be
            the same string that any commonly used browser would send. For information
            about user agents, see [RFC
            2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
            </param>
        <param name="clientId">
            Bing uses this header to provide users with consistent behavior across Bing
            API calls. Bing often flights new features and improvements, and it uses
            the client ID as a key for assigning traffic on different flights. If you
            do not use the same client ID for a user across multiple requests, then
            Bing may assign the user to multiple conflicting flights. Being assigned to
            multiple conflicting flights can lead to an inconsistent user experience.
            For example, if the second request has a different flight assignment than
            the first, the experience may be unexpected. Also, Bing can use the client
            ID to tailor web results to that client ID’s search history, providing a
            richer experience for the user. Bing also uses this header to help improve
            result rankings by analyzing the activity generated by a client ID. The
            relevance improvements help with better quality of results delivered by
            Bing APIs and in turn enables higher click-through rates for the API
            consumer. IMPORTANT: Although optional, you should consider this header
            required. Persisting the client ID across multiple requests for the same
            end user and device combination enables 1) the API consumer to receive a
            consistent user experience, and 2) higher click-through rates via better
            quality of results from the Bing APIs. Each user that uses your application
            on the device must have a unique, Bing generated client ID. If you do not
            include this header in the request, Bing generates an ID and returns it in
            the X-MSEdge-ClientID response header. The only time that you should NOT
            include this header in a request is the first time the user uses your app
            on that device. Use the client ID for each Bing API request that your app
            makes for this user on the device. Persist the client ID. To persist the ID
            in a browser app, use a persistent HTTP cookie to ensure the ID is used
            across all sessions. Do not use a session cookie. For other apps such as
            mobile apps, use the device's persistent storage to persist the ID. The
            next time the user uses your app on that device, get the client ID that you
            persisted. Bing responses may or may not include this header. If the
            response includes this header, capture the client ID and use it for all
            subsequent Bing requests for the user on that device. If you include the
            X-MSEdge-ClientID, you must not include cookies in the request.
            </param>
        <param name="clientIp">
            The IPv4 or IPv6 address of the client device. The IP address is used to
            discover the user's location. Bing uses the location information to
            determine safe search behavior. Although optional, you are encouraged to
            always specify this header and the X-Search-Location header. Do not
            obfuscate the address (for example, by changing the last octet to 0).
            Obfuscating the address results in the location not being anywhere near the
            device's actual location, which may result in Bing serving erroneous
            results.
            </param>
        <param name="location">
            A semicolon-delimited list of key/value pairs that describe the client's
            geographical location. Bing uses the location information to determine safe
            search behavior and to return relevant local content. Specify the key/value
            pair as &lt;key&gt;:&lt;value&gt;. The following are the keys that you use
            to specify the user's location. lat (required): The latitude of the
            client's location, in degrees. The latitude must be greater than or equal
            to -90.0 and less than or equal to +90.0. Negative values indicate southern
            latitudes and positive values indicate northern latitudes. long (required):
            The longitude of the client's location, in degrees. The longitude must be
            greater than or equal to -180.0 and less than or equal to +180.0. Negative
            values indicate western longitudes and positive values indicate eastern
            longitudes. re (required): The radius, in meters, which specifies the
            horizontal accuracy of the coordinates. Pass the value returned by the
            device's location service. Typical values might be 22m for GPS/Wi-Fi, 380m
            for cell tower triangulation, and 18,000m for reverse IP lookup. ts
            (optional): The UTC UNIX timestamp of when the client was at the location.
            (The UNIX timestamp is the number of seconds since January 1, 1970.) head
            (optional): The client's relative heading or direction of travel. Specify
            the direction of travel as degrees from 0 through 360, counting clockwise
            relative to true north. Specify this key only if the sp key is nonzero. sp
            (optional): The horizontal velocity (speed), in meters per second, that the
            client device is traveling. alt (optional): The altitude of the client
            device, in meters. are (optional): The radius, in meters, that specifies
            the vertical accuracy of the coordinates. Specify this key only if you
            specify the alt key. Although many of the keys are optional, the more
            information that you provide, the more accurate the location results are.
            Although optional, you are encouraged to always specify the user's
            geographical location. Providing the location is especially important if
            the client's IP address does not accurately reflect the user's physical
            location (for example, if the client uses VPN). For optimal results, you
            should include this header and the  X-Search-ClientIP header, but at a
            minimum, you should include this header.
            </param>
        <param name="actionType">
            A string that's used by logging to determine whether the request is coming
            from an interactive session or a page load. The following are the possible
            values. 1) Edit—The request is from an interactive session 2) Load—The
            request is from a page load. Possible values include: 'Edit', 'Load'
            </param>
        <param name="appName">
            The unique name of your app. The name must be known by Bing. Do not include
            this parameter unless you have previously contacted Bing to get a unique
            app name. To get a unique name, contact your Bing Business Development
            manager.
            </param>
        <param name="countryCode">
            A 2-character country code of the country where the results come from. This
            API supports only the United States market. If you specify this query
            parameter, it must be set to us. If you set this parameter, you must also
            specify the Accept-Language header. Bing uses the first supported language
            it finds from the languages list, and combine that language with the
            country code that you specify to determine the market to return results
            for. If the languages list does not include a supported language, Bing
            finds the closest language and market that supports the request, or it may
            use an aggregated or default market for the results instead of a specified
            one. You should use this query parameter and the Accept-Language query
            parameter only if you specify multiple languages; otherwise, you should use
            the mkt and setLang query parameters. This parameter and the mkt query
            parameter are mutually exclusive—do not specify both.
            </param>
        <param name="clientMachineName">
            A unique name of the device that the request is being made from. Generate a
            unique value for each device (the value is unimportant). The service uses
            the ID to help debug issues and improve the quality of corrections.
            </param>
        <param name="docId">
            A unique ID that identifies the document that the text belongs to. Generate
            a unique value for each document (the value is unimportant). The service
            uses the ID to help debug issues and improve the quality of corrections.
            </param>
        <param name="market">
            The market where the results come from. You are strongly encouraged to
            always specify the market, if known. Specifying the market helps Bing route
            the request and return an appropriate and optimal response. This parameter
            and the cc query parameter are mutually exclusive—do not specify both.
            </param>
        <param name="sessionId">
            A unique ID that identifies this user session. Generate a unique value for
            each user session (the value is unimportant). The service uses the ID to
            help debug issues and improve the quality of corrections
            </param>
        <param name="setLang">
            The language to use for user interface strings. Specify the language using
            the ISO 639-1 2-letter language code. For example, the language code for
            English is EN. The default is EN (English). Although optional, you should
            always specify the language. Typically, you set setLang to the same
            language specified by mkt unless the user wants the user interface strings
            displayed in a different language. This parameter and the Accept-Language
            header are mutually exclusive—do not specify both. A user interface string
            is a string that's used as a label in a user interface. There are few user
            interface strings in the JSON response objects. Also, any links to Bing.com
            properties in the response objects apply the specified language.
            </param>
        <param name="userId">
            A unique ID that identifies the user. Generate a unique value for each user
            (the value is unimportant). The service uses the ID to help debug issues
            and improve the quality of corrections.
            </param>
        <param name="mode">
            The type of spelling and grammar checks to perform. The following are the
            possible values (the values are case insensitive). The default is Proof. 1)
            Proof—Finds most spelling and grammar mistakes. 2) Spell—Finds most
            spelling mistakes but does not find some of the grammar errors that Proof
            catches (for example, capitalization and repeated words). Possible values
            include: 'proof', 'spell'
            </param>
        <param name="preContextText">
            A string that gives context to the text string. For example, the text
            string petal is valid. However, if you set preContextText to bike, the
            context changes and the text string becomes not valid. In this case, the
            API suggests that you change petal to pedal (as in bike pedal). This text
            is not checked for grammar or spelling errors. The combined length of the
            text string, preContextText string, and postContextText string may not
            exceed 10,000 characters. You may specify this parameter in the query
            string of a GET request or in the body of a POST request.
            </param>
        <param name="postContextText">
            A string that gives context to the text string. For example, the text
            string read is valid. However, if you set postContextText to carpet, the
            context changes and the text string becomes not valid. In this case, the
            API suggests that you change read to red (as in red carpet). This text is
            not checked for grammar or spelling errors. The combined length of the text
            string, preContextText string, and postContextText string may not exceed
            10,000 characters. You may specify this parameter in the query string of a
            GET request or in the body of a POST request.
            </param>
        <param name="customHeaders">
            Headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            The Bing Spell Check API lets you perform contextual grammar and spell
            checking. Bing has developed a web-based spell-checker that leverages
            machine learning and statistical machine translation to dynamically train a
            constantly evolving and highly contextual algorithm. The spell-checker is
            based on a massive corpus of web searches and documents.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.CognitiveServices.Language.SpellCheck.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        <return>
            A response object containing the response body and response headers.
            </return>
      </Docs>
    </Member>
  </Members>
</Type>