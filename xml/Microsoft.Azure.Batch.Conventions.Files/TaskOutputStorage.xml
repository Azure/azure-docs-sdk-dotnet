<Type Name="TaskOutputStorage" FullName="Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage">
  <TypeSignature Language="C#" Value="public class TaskOutputStorage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskOutputStorage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage" />
  <TypeSignature Language="VB.NET" Value="Public Class TaskOutputStorage" />
  <TypeSignature Language="F#" Value="type TaskOutputStorage = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents persistent storage for the outputs of an Azure Batch task.
            </summary>
    <remarks>
            Task outputs refer to output data logically associated with a specific task, rather than
            the job as a whole. For example, in a movie rendering job, if a task rendered a single frame,
            that frame would be a task output.  Logs and other diagnostic information such as intermediate
            files may also be persisted as task outputs (see <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> for a way to
            categorise these so that clients can distinguish between the main output and auxiliary data).
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskOutputStorage (Uri jobOutputContainerUri, string taskId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri jobOutputContainerUri, string taskId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jobOutputContainerUri As Uri, taskId As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage : Uri * string -&gt; Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage" Usage="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage (jobOutputContainerUri, taskId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jobOutputContainerUri" Type="System.Uri" />
        <Parameter Name="taskId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobOutputContainerUri">The URL in Azure storage of the blob container to
            use for outputs associated with this job. This URL must contain a SAS (Shared Access
            Signature) granting access to the container, or the container must be public.</param>
        <param name="taskId">The id of the Azure Batch task.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage" /> class from a task id and
            a URL representing the job output container.
            </summary>
        <remarks>The container must already exist; the TaskOutputStorage class does not create
            it for you.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskOutputStorage (Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string jobId, string taskId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string jobId, string taskId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storageAccount As CloudStorageAccount, jobId As String, taskId As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage : Microsoft.WindowsAzure.Storage.CloudStorageAccount * string * string -&gt; Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage" Usage="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage (storageAccount, jobId, taskId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storageAccount" Type="Microsoft.WindowsAzure.Storage.CloudStorageAccount" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storageAccount">The storage account linked to the Azure Batch account.</param>
        <param name="jobId">The id of the Azure Batch job containing the task.</param>
        <param name="taskId">The id of the Azure Batch task.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage" /> class from a storage account,
            job id, and task id.
            </summary>
        <remarks>The job output container must already exist; the TaskOutputStorage class does not create
            it for you.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskOutputStorage (Uri jobOutputContainerUri, string taskId, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy storageRetryPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri jobOutputContainerUri, string taskId, class Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy storageRetryPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jobOutputContainerUri As Uri, taskId As String, storageRetryPolicy As IRetryPolicy)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage : Uri * string * Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy -&gt; Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage" Usage="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage (jobOutputContainerUri, taskId, storageRetryPolicy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jobOutputContainerUri" Type="System.Uri" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="storageRetryPolicy" Type="Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy" />
      </Parameters>
      <Docs>
        <param name="jobOutputContainerUri">The URL in Azure storage of the blob container to
            use for outputs associated with this job. This URL must contain a SAS (Shared Access
            Signature) granting access to the container, or the container must be public.</param>
        <param name="taskId">The id of the Azure Batch task.</param>
        <param name="storageRetryPolicy">The retry policy for storage requests.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage" /> class from a task id and
            a URL representing the job output container.
            </summary>
        <remarks>The container must already exist; the TaskOutputStorage class does not create
            it for you.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskOutputStorage (Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string jobId, string taskId, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy storageRetryPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.WindowsAzure.Storage.CloudStorageAccount storageAccount, string jobId, string taskId, class Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy storageRetryPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storageAccount As CloudStorageAccount, jobId As String, taskId As String, storageRetryPolicy As IRetryPolicy)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage : Microsoft.WindowsAzure.Storage.CloudStorageAccount * string * string * Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy -&gt; Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage" Usage="new Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage (storageAccount, jobId, taskId, storageRetryPolicy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storageAccount" Type="Microsoft.WindowsAzure.Storage.CloudStorageAccount" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="storageRetryPolicy" Type="Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy" />
      </Parameters>
      <Docs>
        <param name="storageAccount">The storage account linked to the Azure Batch account.</param>
        <param name="jobId">The id of the Azure Batch job containing the task.</param>
        <param name="taskId">The id of the Azure Batch task.</param>
        <param name="storageRetryPolicy">The retry policy for storage requests.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage" /> class from a storage account,
            job id, and task id.
            </summary>
        <remarks>The job output container must already exist; the TaskOutputStorage class does not create
            it for you.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt; GetOutputAsync (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string filePath, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt; GetOutputAsync(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string filePath, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetOutputAsync : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt;" Usage="taskOutputStorage.GetOutputAsync (kind, filePath, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category of the output to
            retrieve, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <param name="filePath">The path under which the output was persisted in blob storage.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> for controlling the lifetime of the asynchronous operation.</param>
        <summary>
            Retrieves a task output from Azure blob storage by kind and path.
            </summary>
        <returns>A reference to the requested file in Azure blob storage.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListOutputs">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt; ListOutputs (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt; ListOutputs(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListOutputs (kind As TaskOutputKind) As IEnumerable(Of OutputFileReference)" />
      <MemberSignature Language="F#" Value="member this.ListOutputs : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind -&gt; seq&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt;" Usage="taskOutputStorage.ListOutputs kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.Batch.Conventions.Files.OutputFileReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category of outputs to
            list, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <summary>
            Lists the task outputs of the specified kind.
            </summary>
        <returns>A list of persisted task outputs of the specified kind.</returns>
        <remarks>The list is retrieved lazily from Azure blob storage when it is enumerated.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string relativePath, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string relativePath, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskOutputStorage.SaveAsync (kind, relativePath, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
        <Parameter Name="relativePath" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category under which to
            store this file, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <param name="relativePath">The path of the file to save, relative to the current directory.
            If the file is in a subdirectory of the current directory, the relative path will be preserved
            in blob storage.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> for controlling the lifetime of the asynchronous operation.</param>
        <summary>
            Saves the specified file to persistent storage.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>If the file is outside the current directory, traversals up the directory tree are removed.
            For example, a <paramref name="relativePath" /> of "..\ProcessEnv.cmd" would be treated as "ProcessEnv.cmd"
            for the purposes of creating a blob name.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="kind" /> or <paramref name="relativePath" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="relativePath" /> argument is an absolute path, or is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string sourcePath, string destinationRelativePath, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string sourcePath, string destinationRelativePath, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SaveAsync : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskOutputStorage.SaveAsync (kind, sourcePath, destinationRelativePath, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="destinationRelativePath" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category under which to
            store this file, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <param name="sourcePath">The path of the file to save.</param>
        <param name="destinationRelativePath">The blob name under which to save the file. This may include a
            relative component, such as "pointclouds/pointcloud_0001.txt".</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> for controlling the lifetime of the asynchronous operation.</param>
        <summary>
            Saves the specified file to persistent storage.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="kind" />, <paramref name="sourcePath" />, or <paramref name="destinationRelativePath" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> or <paramref name="destinationRelativePath" /> argument is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveTextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveTextAsync (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string text, string destinationRelativePath, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveTextAsync(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string text, string destinationRelativePath, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SaveTextAsync : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="taskOutputStorage.SaveTextAsync (kind, text, destinationRelativePath, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="destinationRelativePath" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category under which to
            store this data, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <param name="text">The text to save.</param>
        <param name="destinationRelativePath">The blob name under which to save the text. This may include a
            relative component, such as "records/widget42.json".</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> for controlling the lifetime of the asynchronous operation.</param>
        <summary>
            Saves the specified text to persistent storage, without requiring you to create a local file.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="kind" />, <paramref name="text" />, or <paramref name="destinationRelativePath" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="destinationRelativePath" /> argument is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveTrackedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt; SaveTrackedAsync (string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt; SaveTrackedAsync(string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveTrackedAsync (relativePath As String) As Task(Of ITrackedSaveOperation)" />
      <MemberSignature Language="F#" Value="member this.SaveTrackedAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt;" Usage="taskOutputStorage.SaveTrackedAsync relativePath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relativePath">The path of the file to save, relative to the current directory.
            If the file is in a subdirectory of the current directory, the relative path will be preserved
            in blob storage.</param>
        <summary>
            Saves the specified file to persistent storage as a <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />,
            and tracks subsequent appends to the file and appends them to the persistent copy too.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation" /> which will save a file to blob storage and will periodically flush file
            appends to the blob until disposed.  When disposed, all remaining appends are flushed to
            blob storage, and further tracking of file appends is stopped.</returns>
        <remarks>
          <para>Tracking supports only appends. That is, while a file is being tracked, any data added
            at the end is appended to the persistent storage. Changes to data that has already been uploaded
            will not be reflected to the persistent store. This method is therefore intended for use only
            with files such as (non-rotating) log files where data is only added at the end of the file.
            If the entire contents of a file can change, use <see cref="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)" />
            and call it periodically or after each change.</para>
          <para>If the file is outside the current directory, traversals up the directory tree are removed.
            For example, a <paramref name="relativePath" /> of "..\ProcessEnv.cmd" would be treated as "ProcessEnv.cmd"
            for the purposes of creating a blob name.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="relativePath" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="relativePath" /> argument is an absolute path, or is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveTrackedAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt; SaveTrackedAsync (Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string sourcePath, string destinationRelativePath, TimeSpan flushInterval);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt; SaveTrackedAsync(class Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind kind, string sourcePath, string destinationRelativePath, valuetype System.TimeSpan flushInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveTrackedAsync (kind As TaskOutputKind, sourcePath As String, destinationRelativePath As String, flushInterval As TimeSpan) As Task(Of ITrackedSaveOperation)" />
      <MemberSignature Language="F#" Value="member this.SaveTrackedAsync : Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind * string * string * TimeSpan -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt;" Usage="taskOutputStorage.SaveTrackedAsync (kind, sourcePath, destinationRelativePath, flushInterval)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch.Conventions.Files</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" />
        <Parameter Name="sourcePath" Type="System.String" />
        <Parameter Name="destinationRelativePath" Type="System.String" />
        <Parameter Name="flushInterval" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" /> representing the category under which to
            store this file, for example <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" /> or <see cref="F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" />.</param>
        <param name="sourcePath">The path of the file to save.</param>
        <param name="destinationRelativePath">The blob name under which to save the file. This may include a
            relative component, such as "pointclouds/pointcloud_0001.txt".</param>
        <param name="flushInterval">The interval at which to flush appends to persistent storage.</param>
        <summary>
            Saves the specified file to persistent storage, and tracks subsequent appends to the file
            and appends them to the persistent copy too.
            </summary>
        <returns>An <see cref="T:Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation" /> which will save a file to blob storage and will periodically flush file
            appends to the blob until disposed.  When disposed, all remaining appends are flushed to
            blob storage, and further tracking of file appends is stopped.</returns>
        <remarks>
          <para>Tracking supports only appends. That is, while a file is being tracked, any data added
            at the end is appended to the persistent storage. Changes to data that has already been uploaded
            will not be reflected to the persistent store. This method is therefore intended for use only
            with files such as (non-rotating) log files where data is only added at the end of the file.
            If the entire contents of a file can change, use <see cref="M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)" />
            and call it periodically or after each change.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="kind" />, <paramref name="sourcePath" />, or <paramref name="destinationRelativePath" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="sourcePath" /> or <paramref name="destinationRelativePath" /> argument is empty.</exception>
      </Docs>
    </Member>
  </Members>
</Type>