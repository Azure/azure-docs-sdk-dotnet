<Type Name="ILeaseManager" FullName="Microsoft.Azure.EventHubs.Processor.ILeaseManager">
  <TypeSignature Language="C#" Value="public interface ILeaseManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILeaseManager" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.EventHubs.Processor.ILeaseManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILeaseManager" />
  <TypeSignature Language="F#" Value="type ILeaseManager = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            If you wish to have EventProcessorHost store leases somewhere other than Azure Storage,
            you can write your own lease manager using this interface.  
            
            <para>The Azure Storage managers use the same storage for both lease and checkpoints, so both
            interfaces are implemented by the same class. You are free to do the same thing if you have
            a unified store for both types of data.</para><para>This interface does not specify initialization methods because we have no way of knowing what
            information your implementation will require.</para></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; AcquireLeaseAsync (Microsoft.Azure.EventHubs.Processor.Lease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; AcquireLeaseAsync(class Microsoft.Azure.EventHubs.Processor.Lease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.AcquireLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)" />
      <MemberSignature Language="F#" Value="abstract member AcquireLeaseAsync : Microsoft.Azure.EventHubs.Processor.Lease -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.AcquireLeaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.EventHubs.Processor.Lease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease info for the desired partition as previously obtained from GetLeaseAsync()</param>
        <summary>
            Acquire the lease on the desired partition for this EventProcessorHost.
            
            <para>Note that it is legal to acquire a lease that is already owned by another host. Lease-stealing is how
            partitions are redistributed when additional hosts are started.</para></summary>
        <returns>true if the lease was acquired successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLeaseIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt; CreateLeaseIfNotExistsAsync (string partitionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.EventHubs.Processor.Lease&gt; CreateLeaseIfNotExistsAsync(string partitionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseIfNotExistsAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLeaseIfNotExistsAsync (partitionId As String) As Task(Of Lease)" />
      <MemberSignature Language="F#" Value="abstract member CreateLeaseIfNotExistsAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;" Usage="iLeaseManager.CreateLeaseIfNotExistsAsync partitionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partitionId">id of partition to create lease info for</param>
        <summary>
            Create in the store the lease info for the given partition, if it does not exist. Do nothing if it does exist
            in the store already. 
            </summary>
        <returns>the existing or newly-created lease info for the partition</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLeaseStoreIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; CreateLeaseStoreIfNotExistsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CreateLeaseStoreIfNotExistsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.CreateLeaseStoreIfNotExistsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateLeaseStoreIfNotExistsAsync () As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateLeaseStoreIfNotExistsAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.CreateLeaseStoreIfNotExistsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Create the lease store if it does not exist, do nothing if it does exist.
            </summary>
        <returns>true if the lease store already exists or was created successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteLeaseAsync (Microsoft.Azure.EventHubs.Processor.Lease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteLeaseAsync(class Microsoft.Azure.EventHubs.Processor.Lease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLeaseAsync : Microsoft.Azure.EventHubs.Processor.Lease -&gt; System.Threading.Tasks.Task" Usage="iLeaseManager.DeleteLeaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.EventHubs.Processor.Lease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease info for the desired partition as previously obtained from GetLeaseAsync()</param>
        <summary>
            Delete the lease info for the given partition from the store. If there is no stored lease for the given partition,
            that is treated as success.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLeaseStoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; DeleteLeaseStoreAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; DeleteLeaseStoreAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.DeleteLeaseStoreAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteLeaseStoreAsync () As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeleteLeaseStoreAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.DeleteLeaseStoreAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Not used by EventProcessorHost, but a convenient function to have for testing.
            </summary>
        <returns>true if the lease store was deleted successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllLeases">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;&gt; GetAllLeases ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.EventHubs.Processor.Lease&gt;&gt; GetAllLeases() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetAllLeases" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllLeases () As IEnumerable(Of Task(Of Lease))" />
      <MemberSignature Language="F#" Value="abstract member GetAllLeases : unit -&gt; seq&lt;System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;&gt;" Usage="iLeaseManager.GetAllLeases " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Return the lease info for all partitions.
            A typical implementation could just call GetLeaseAsync() on all partitions.
            </summary>
        <returns>list of lease info.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt; GetLeaseAsync (string partitionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.EventHubs.Processor.Lease&gt; GetLeaseAsync(string partitionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.GetLeaseAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLeaseAsync (partitionId As String) As Task(Of Lease)" />
      <MemberSignature Language="F#" Value="abstract member GetLeaseAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;" Usage="iLeaseManager.GetLeaseAsync partitionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.EventHubs.Processor.Lease&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partitionId">id of partition to get lease for</param>
        <summary>
            Return the lease info for the specified partition. Can return null if no lease has been
            created in the store for the specified partition.
            </summary>
        <returns>lease info for the partition, or null</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseDuration">
      <MemberSignature Language="C#" Value="public TimeSpan LeaseDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan LeaseDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LeaseDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.LeaseDuration : TimeSpan" Usage="Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Mostly useful for testing.
            </summary>
        <value>Duration of a lease before it expires unless renewed.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseRenewInterval">
      <MemberSignature Language="C#" Value="public TimeSpan LeaseRenewInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan LeaseRenewInterval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LeaseRenewInterval As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.LeaseRenewInterval : TimeSpan" Usage="Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseRenewInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Allows a lease manager implementation to specify to PartitionManager how often it should
            scan leases and renew them. In order to redistribute leases in a timely fashion after a host
            ceases operating, we recommend a relatively short interval, such as ten seconds. Obviously it
            should be less than half of the lease length, to prevent accidental expiration.
            </summary>
        <value>The sleep interval between scans</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseStoreExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LeaseStoreExistsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; LeaseStoreExistsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.LeaseStoreExistsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function LeaseStoreExistsAsync () As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member LeaseStoreExistsAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.LeaseStoreExistsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Does the lease store exist?
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ReleaseLeaseAsync (Microsoft.Azure.EventHubs.Processor.Lease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReleaseLeaseAsync(class Microsoft.Azure.EventHubs.Processor.Lease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.ReleaseLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseLeaseAsync : Microsoft.Azure.EventHubs.Processor.Lease -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.ReleaseLeaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.EventHubs.Processor.Lease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to be given up</param>
        <summary>
            Give up a lease currently held by this host.
            <para>If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</para></summary>
        <returns>true if the lease was released successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; RenewLeaseAsync (Microsoft.Azure.EventHubs.Processor.Lease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; RenewLeaseAsync(class Microsoft.Azure.EventHubs.Processor.Lease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.RenewLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)" />
      <MemberSignature Language="F#" Value="abstract member RenewLeaseAsync : Microsoft.Azure.EventHubs.Processor.Lease -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.RenewLeaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.EventHubs.Processor.Lease" />
      </Parameters>
      <Docs>
        <param name="lease">Lease to be renewed</param>
        <summary>
            Renew a lease currently held by this host.
            
            <para>If the lease has been stolen, or expired, or released, it is not possible to renew it. You will have to call getLease()
            and then acquireLease() again.</para></summary>
        <returns>true if the lease was renewed successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLeaseAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; UpdateLeaseAsync (Microsoft.Azure.EventHubs.Processor.Lease lease);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; UpdateLeaseAsync(class Microsoft.Azure.EventHubs.Processor.Lease lease) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.Processor.ILeaseManager.UpdateLeaseAsync(Microsoft.Azure.EventHubs.Processor.Lease)" />
      <MemberSignature Language="F#" Value="abstract member UpdateLeaseAsync : Microsoft.Azure.EventHubs.Processor.Lease -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iLeaseManager.UpdateLeaseAsync lease" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lease" Type="Microsoft.Azure.EventHubs.Processor.Lease" />
      </Parameters>
      <Docs>
        <param name="lease">New lease info to be stored</param>
        <summary>
            Update the store with the information in the provided lease.
            
            <para>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or
            released, it cannot be updated. Updating should renew the lease before performing the update to avoid lease
            expiration during the process.</para></summary>
        <returns>true if the updated was performed successfully, false if not</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>