<Type Name="BlobContainersOperations" FullName="Azure.ResourceManager.Storage.BlobContainersOperations">
  <TypeSignature Language="C#" Value="public class BlobContainersOperations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobContainersOperations extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Storage.BlobContainersOperations" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobContainersOperations" />
  <TypeSignature Language="F#" Value="type BlobContainersOperations = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The BlobContainers service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BlobContainersOperations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of BlobContainersOperations for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearLegalHold">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt; ClearLegalHold (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LegalHold legalHold, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LegalHold&gt; ClearLegalHold(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LegalHold legalHold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.ClearLegalHold(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LegalHold,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClearLegalHold (resourceGroupName As String, accountName As String, containerName As String, legalHold As LegalHold, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LegalHold)" />
      <MemberSignature Language="F#" Value="abstract member ClearLegalHold : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&#xA;override this.ClearLegalHold : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;" Usage="blobContainersOperations.ClearLegalHold (resourceGroupName, accountName, containerName, legalHold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="legalHold" Type="Azure.ResourceManager.Storage.Models.LegalHold" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="legalHold"> The LegalHold property that will be clear from a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearLegalHoldAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt; ClearLegalHoldAsync (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LegalHold legalHold, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt; ClearLegalHoldAsync(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LegalHold legalHold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.ClearLegalHoldAsync(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LegalHold,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ClearLegalHoldAsync (resourceGroupName As String, accountName As String, containerName As String, legalHold As LegalHold, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LegalHold))" />
      <MemberSignature Language="F#" Value="abstract member ClearLegalHoldAsync : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;&#xA;override this.ClearLegalHoldAsync : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;" Usage="blobContainersOperations.ClearLegalHoldAsync (resourceGroupName, accountName, containerName, legalHold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="legalHold" Type="Azure.ResourceManager.Storage.Models.LegalHold" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="legalHold"> The LegalHold property that will be clear from a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt; Create (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt; Create(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.Create(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.BlobContainer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (resourceGroupName As String, accountName As String, containerName As String, blobContainer As BlobContainer, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainer)" />
      <MemberSignature Language="F#" Value="abstract member Create : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&#xA;override this.Create : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;" Usage="blobContainersOperations.Create (resourceGroupName, accountName, containerName, blobContainer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobContainer" Type="Azure.ResourceManager.Storage.Models.BlobContainer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="blobContainer"> Properties of the blob container to create. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; CreateAsync (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; CreateAsync(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.CreateAsync(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.BlobContainer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (resourceGroupName As String, accountName As String, containerName As String, blobContainer As BlobContainer, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainer))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;&#xA;override this.CreateAsync : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;" Usage="blobContainersOperations.CreateAsync (resourceGroupName, accountName, containerName, blobContainer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobContainer" Type="Azure.ResourceManager.Storage.Models.BlobContainer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="blobContainer"> Properties of the blob container to create. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateImmutabilityPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; CreateOrUpdateImmutabilityPolicy (string resourceGroupName, string accountName, string containerName, string ifMatch = default, Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; CreateOrUpdateImmutabilityPolicy(string resourceGroupName, string accountName, string containerName, string ifMatch, class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.CreateOrUpdateImmutabilityPolicy(System.String,System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.ImmutabilityPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateImmutabilityPolicy (resourceGroupName As String, accountName As String, containerName As String, Optional ifMatch As String = Nothing, Optional parameters As ImmutabilityPolicy = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImmutabilityPolicy)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateImmutabilityPolicy : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&#xA;override this.CreateOrUpdateImmutabilityPolicy : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;" Usage="blobContainersOperations.CreateOrUpdateImmutabilityPolicy (resourceGroupName, accountName, containerName, ifMatch, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.ImmutabilityPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="parameters"> The ImmutabilityPolicy Properties that will be created or updated to a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateImmutabilityPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; CreateOrUpdateImmutabilityPolicyAsync (string resourceGroupName, string accountName, string containerName, string ifMatch = default, Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; CreateOrUpdateImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string ifMatch, class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.CreateOrUpdateImmutabilityPolicyAsync(System.String,System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.ImmutabilityPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateImmutabilityPolicyAsync (resourceGroupName As String, accountName As String, containerName As String, Optional ifMatch As String = Nothing, Optional parameters As ImmutabilityPolicy = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImmutabilityPolicy))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateImmutabilityPolicyAsync : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;&#xA;override this.CreateOrUpdateImmutabilityPolicyAsync : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;" Usage="blobContainersOperations.CreateOrUpdateImmutabilityPolicyAsync (resourceGroupName, accountName, containerName, ifMatch, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.ImmutabilityPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="parameters"> The ImmutabilityPolicy Properties that will be created or updated to a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string resourceGroupName, string accountName, string containerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string resourceGroupName, string accountName, string containerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.Delete(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (resourceGroupName As String, accountName As String, containerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Delete : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="blobContainersOperations.Delete (resourceGroupName, accountName, containerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes specified container under its account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string resourceGroupName, string accountName, string containerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string resourceGroupName, string accountName, string containerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.DeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (resourceGroupName As String, accountName As String, containerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="blobContainersOperations.DeleteAsync (resourceGroupName, accountName, containerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deletes specified container under its account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteImmutabilityPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; DeleteImmutabilityPolicy (string resourceGroupName, string accountName, string containerName, string ifMatch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; DeleteImmutabilityPolicy(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.DeleteImmutabilityPolicy(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteImmutabilityPolicy (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImmutabilityPolicy)" />
      <MemberSignature Language="F#" Value="abstract member DeleteImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&#xA;override this.DeleteImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;" Usage="blobContainersOperations.DeleteImmutabilityPolicy (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteImmutabilityPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; DeleteImmutabilityPolicyAsync (string resourceGroupName, string accountName, string containerName, string ifMatch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; DeleteImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.DeleteImmutabilityPolicyAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteImmutabilityPolicyAsync (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImmutabilityPolicy))" />
      <MemberSignature Language="F#" Value="abstract member DeleteImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;&#xA;override this.DeleteImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;" Usage="blobContainersOperations.DeleteImmutabilityPolicyAsync (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendImmutabilityPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; ExtendImmutabilityPolicy (string resourceGroupName, string accountName, string containerName, string ifMatch, Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; ExtendImmutabilityPolicy(string resourceGroupName, string accountName, string containerName, string ifMatch, class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.ExtendImmutabilityPolicy(System.String,System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.ImmutabilityPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtendImmutabilityPolicy (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional parameters As ImmutabilityPolicy = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImmutabilityPolicy)" />
      <MemberSignature Language="F#" Value="abstract member ExtendImmutabilityPolicy : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&#xA;override this.ExtendImmutabilityPolicy : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;" Usage="blobContainersOperations.ExtendImmutabilityPolicy (resourceGroupName, accountName, containerName, ifMatch, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.ImmutabilityPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="parameters"> The ImmutabilityPolicy Properties that will be extended for a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendImmutabilityPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; ExtendImmutabilityPolicyAsync (string resourceGroupName, string accountName, string containerName, string ifMatch, Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; ExtendImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string ifMatch, class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.ExtendImmutabilityPolicyAsync(System.String,System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.ImmutabilityPolicy,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExtendImmutabilityPolicyAsync (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional parameters As ImmutabilityPolicy = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImmutabilityPolicy))" />
      <MemberSignature Language="F#" Value="abstract member ExtendImmutabilityPolicyAsync : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;&#xA;override this.ExtendImmutabilityPolicyAsync : string * string * string * string * Azure.ResourceManager.Storage.Models.ImmutabilityPolicy * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;" Usage="blobContainersOperations.ExtendImmutabilityPolicyAsync (resourceGroupName, accountName, containerName, ifMatch, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.ImmutabilityPolicy" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="parameters"> The ImmutabilityPolicy Properties that will be extended for a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt; Get (string resourceGroupName, string accountName, string containerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt; Get(string resourceGroupName, string accountName, string containerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.Get(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (resourceGroupName As String, accountName As String, containerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainer)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&#xA;override this.Get : string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;" Usage="blobContainersOperations.Get (resourceGroupName, accountName, containerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets properties of a specified container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; GetAsync (string resourceGroupName, string accountName, string containerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; GetAsync(string resourceGroupName, string accountName, string containerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (resourceGroupName As String, accountName As String, containerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainer))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;&#xA;override this.GetAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;" Usage="blobContainersOperations.GetAsync (resourceGroupName, accountName, containerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets properties of a specified container. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImmutabilityPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; GetImmutabilityPolicy (string resourceGroupName, string accountName, string containerName, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; GetImmutabilityPolicy(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.GetImmutabilityPolicy(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmutabilityPolicy (resourceGroupName As String, accountName As String, containerName As String, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImmutabilityPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&#xA;override this.GetImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;" Usage="blobContainersOperations.GetImmutabilityPolicy (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the existing immutability policy along with the corresponding ETag in response headers and body. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImmutabilityPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; GetImmutabilityPolicyAsync (string resourceGroupName, string accountName, string containerName, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; GetImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.GetImmutabilityPolicyAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetImmutabilityPolicyAsync (resourceGroupName As String, accountName As String, containerName As String, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImmutabilityPolicy))" />
      <MemberSignature Language="F#" Value="abstract member GetImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;&#xA;override this.GetImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;" Usage="blobContainersOperations.GetImmutabilityPolicyAsync (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the existing immutability policy along with the corresponding ETag in response headers and body. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lease">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt; Lease (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LeaseContainerRequest parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt; Lease(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LeaseContainerRequest parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.Lease(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LeaseContainerRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Lease (resourceGroupName As String, accountName As String, containerName As String, Optional parameters As LeaseContainerRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LeaseContainerResponse)" />
      <MemberSignature Language="F#" Value="abstract member Lease : string * string * string * Azure.ResourceManager.Storage.Models.LeaseContainerRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&#xA;override this.Lease : string * string * string * Azure.ResourceManager.Storage.Models.LeaseContainerRequest * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;" Usage="blobContainersOperations.Lease (resourceGroupName, accountName, containerName, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.LeaseContainerRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="parameters"> Lease Container request body. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&gt; LeaseAsync (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LeaseContainerRequest parameters = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&gt; LeaseAsync(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LeaseContainerRequest parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.LeaseAsync(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LeaseContainerRequest,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LeaseAsync (resourceGroupName As String, accountName As String, containerName As String, Optional parameters As LeaseContainerRequest = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LeaseContainerResponse))" />
      <MemberSignature Language="F#" Value="abstract member LeaseAsync : string * string * string * Azure.ResourceManager.Storage.Models.LeaseContainerRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&gt;&#xA;override this.LeaseAsync : string * string * string * Azure.ResourceManager.Storage.Models.LeaseContainerRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&gt;" Usage="blobContainersOperations.LeaseAsync (resourceGroupName, accountName, containerName, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LeaseContainerResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.ResourceManager.Storage.Models.LeaseContainerRequest" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="parameters"> Lease Container request body. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt; List (string resourceGroupName, string accountName, string maxpagesize = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Storage.Models.ListContainerItem&gt; List(string resourceGroupName, string accountName, string maxpagesize, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.List(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function List (resourceGroupName As String, accountName As String, Optional maxpagesize As String = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ListContainerItem)" />
      <MemberSignature Language="F#" Value="abstract member List : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;&#xA;override this.List : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;" Usage="blobContainersOperations.List (resourceGroupName, accountName, maxpagesize, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="maxpagesize" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="maxpagesize"> Optional. Specified maximum number of containers that can be included in the list. </param>
        <param name="filter"> Optional. When specified, only container names starting with the filter will be listed. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt; ListAsync (string resourceGroupName, string accountName, string maxpagesize = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Storage.Models.ListContainerItem&gt; ListAsync(string resourceGroupName, string accountName, string maxpagesize, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.ListAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ListAsync (resourceGroupName As String, accountName As String, Optional maxpagesize As String = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ListContainerItem)" />
      <MemberSignature Language="F#" Value="abstract member ListAsync : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;&#xA;override this.ListAsync : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;" Usage="blobContainersOperations.ListAsync (resourceGroupName, accountName, maxpagesize, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Storage.Models.ListContainerItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="maxpagesize" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="maxpagesize"> Optional. Specified maximum number of containers that can be included in the list. </param>
        <param name="filter"> Optional. When specified, only container names starting with the filter will be listed. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockImmutabilityPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; LockImmutabilityPolicy (string resourceGroupName, string accountName, string containerName, string ifMatch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt; LockImmutabilityPolicy(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.LockImmutabilityPolicy(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LockImmutabilityPolicy (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ImmutabilityPolicy)" />
      <MemberSignature Language="F#" Value="abstract member LockImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&#xA;override this.LockImmutabilityPolicy : string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;" Usage="blobContainersOperations.LockImmutabilityPolicy (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockImmutabilityPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; LockImmutabilityPolicyAsync (string resourceGroupName, string accountName, string containerName, string ifMatch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt; LockImmutabilityPolicyAsync(string resourceGroupName, string accountName, string containerName, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.LockImmutabilityPolicyAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LockImmutabilityPolicyAsync (resourceGroupName As String, accountName As String, containerName As String, ifMatch As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ImmutabilityPolicy))" />
      <MemberSignature Language="F#" Value="abstract member LockImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;&#xA;override this.LockImmutabilityPolicyAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;" Usage="blobContainersOperations.LockImmutabilityPolicyAsync (resourceGroupName, accountName, containerName, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.ImmutabilityPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="ifMatch"> The entity state (ETag) version of the immutability policy to update. A value of "*" can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLegalHold">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt; SetLegalHold (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LegalHold legalHold, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LegalHold&gt; SetLegalHold(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LegalHold legalHold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.SetLegalHold(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LegalHold,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLegalHold (resourceGroupName As String, accountName As String, containerName As String, legalHold As LegalHold, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LegalHold)" />
      <MemberSignature Language="F#" Value="abstract member SetLegalHold : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&#xA;override this.SetLegalHold : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;" Usage="blobContainersOperations.SetLegalHold (resourceGroupName, accountName, containerName, legalHold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="legalHold" Type="Azure.ResourceManager.Storage.Models.LegalHold" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="legalHold"> The LegalHold property that will be set to a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLegalHoldAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt; SetLegalHoldAsync (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.LegalHold legalHold, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt; SetLegalHoldAsync(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.LegalHold legalHold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.SetLegalHoldAsync(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.LegalHold,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLegalHoldAsync (resourceGroupName As String, accountName As String, containerName As String, legalHold As LegalHold, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LegalHold))" />
      <MemberSignature Language="F#" Value="abstract member SetLegalHoldAsync : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;&#xA;override this.SetLegalHoldAsync : string * string * string * Azure.ResourceManager.Storage.Models.LegalHold * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;" Usage="blobContainersOperations.SetLegalHoldAsync (resourceGroupName, accountName, containerName, legalHold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.LegalHold&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="legalHold" Type="Azure.ResourceManager.Storage.Models.LegalHold" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="legalHold"> The LegalHold property that will be set to a blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt; Update (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt; Update(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.Update(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.BlobContainer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (resourceGroupName As String, accountName As String, containerName As String, blobContainer As BlobContainer, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BlobContainer)" />
      <MemberSignature Language="F#" Value="abstract member Update : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&#xA;override this.Update : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;" Usage="blobContainersOperations.Update (resourceGroupName, accountName, containerName, blobContainer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobContainer" Type="Azure.ResourceManager.Storage.Models.BlobContainer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="blobContainer"> Properties to update for the blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; UpdateAsync (string resourceGroupName, string accountName, string containerName, Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt; UpdateAsync(string resourceGroupName, string accountName, string containerName, class Azure.ResourceManager.Storage.Models.BlobContainer blobContainer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.BlobContainersOperations.UpdateAsync(System.String,System.String,System.String,Azure.ResourceManager.Storage.Models.BlobContainer,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (resourceGroupName As String, accountName As String, containerName As String, blobContainer As BlobContainer, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BlobContainer))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;&#xA;override this.UpdateAsync : string * string * string * Azure.ResourceManager.Storage.Models.BlobContainer * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;" Usage="blobContainersOperations.UpdateAsync (resourceGroupName, accountName, containerName, blobContainer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Storage.Models.BlobContainer&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="accountName" Type="System.String" />
        <Parameter Name="containerName" Type="System.String" />
        <Parameter Name="blobContainer" Type="Azure.ResourceManager.Storage.Models.BlobContainer" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupName"> The name of the resource group within the user's subscription. The name is case insensitive. </param>
        <param name="accountName"> The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. </param>
        <param name="containerName"> The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. </param>
        <param name="blobContainer"> Properties to update for the blob container. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn't already exist. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
