<Type Name="BicepInterpolatedStringHandler" FullName="Azure.Provisioning.Expressions.BicepInterpolatedStringHandler">
  <TypeSignature Language="C#" Value="public ref struct BicepInterpolatedStringHandler" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BicepInterpolatedStringHandler extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Azure.Provisioning.Expressions.BicepInterpolatedStringHandler" />
  <TypeSignature Language="VB.NET" Value="Public Structure BicepInterpolatedStringHandler" />
  <TypeSignature Language="F#" Value="type BicepInterpolatedStringHandler = struct" />
  <AssemblyInfo>
    <AssemblyName>Azure.Provisioning</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <param name="literalLength">Combined length of all literal segments.</param>
    <param name="formattedCount">Number of formatted segments.</param>
    <summary>
            Interpolated string handler for building interpolated Bicep string
            expressions.  This is an implementation detail for the C# compiler.  Users
            should prefer either <see cref="M:Azure.Provisioning.Expressions.BicepFunction.Interpolate(Azure.Provisioning.Expressions.BicepInterpolatedStringHandler)" /> or
            <see cref="T:Azure.Provisioning.Expressions.BicepStringBuilder" /> for constructing interpolated strings.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BicepInterpolatedStringHandler (int literalLength, int formattedCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 literalLength, int32 formattedCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Provisioning.Expressions.BicepInterpolatedStringHandler.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (literalLength As Integer, formattedCount As Integer)" />
      <MemberSignature Language="F#" Value="new Azure.Provisioning.Expressions.BicepInterpolatedStringHandler : int * int -&gt; Azure.Provisioning.Expressions.BicepInterpolatedStringHandler" Usage="new Azure.Provisioning.Expressions.BicepInterpolatedStringHandler (literalLength, formattedCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="literalLength" Type="System.Int32" />
        <Parameter Name="formattedCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="literalLength">Combined length of all literal segments.</param>
        <param name="formattedCount">Number of formatted segments.</param>
        <summary>
            Interpolated string handler for building interpolated Bicep string
            expressions.  This is an implementation detail for the C# compiler.  Users
            should prefer either <see cref="M:Azure.Provisioning.Expressions.BicepFunction.Interpolate(Azure.Provisioning.Expressions.BicepInterpolatedStringHandler)" /> or
            <see cref="T:Azure.Provisioning.Expressions.BicepStringBuilder" /> for constructing interpolated strings.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendFormatted&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AppendFormatted&lt;T&gt; (T t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendFormatted&lt;T&gt;(!!T t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Provisioning.Expressions.BicepInterpolatedStringHandler.AppendFormatted``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendFormatted(Of T) (t As T)" />
      <MemberSignature Language="F#" Value="member this.AppendFormatted : 'T -&gt; unit" Usage="bicepInterpolatedStringHandler.AppendFormatted t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendLiteral">
      <MemberSignature Language="C#" Value="public void AppendLiteral (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendLiteral(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Provisioning.Expressions.BicepInterpolatedStringHandler.AppendLiteral(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendLiteral (text As String)" />
      <MemberSignature Language="F#" Value="member this.AppendLiteral : string -&gt; unit" Usage="bicepInterpolatedStringHandler.AppendLiteral text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Provisioning</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
