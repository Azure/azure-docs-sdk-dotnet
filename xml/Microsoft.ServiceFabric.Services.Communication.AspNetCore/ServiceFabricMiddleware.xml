<Type Name="ServiceFabricMiddleware" FullName="Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware">
  <TypeSignature Language="C#" Value="public class ServiceFabricMiddleware" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceFabricMiddleware extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.AspNetCore</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>255.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A middleware to be used with Service Fabric stateful and stateless services hosted in Kestrel or WebListener.
            This middleware examines the Microsoft.AspNetCore.Http.HttpRequest.Path in request to determine if the request is intended for this replica.
            </summary>
    <remarks>
            This middleware when used with Kestrel and WebListener based Service Fabric Communication Listeners allows handling of scenarios when
            the Replica1 listening on Node1 and por11 has moved and another Replica2 is opened on Node1 got Port1. 
            A client which has resolved Replica1 before it moved, will send the request to Node1:Port1. Using this middleware 
            Replica2 can reject calls which were meant for Replica1 by examining the Path in incoming request.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceFabricMiddleware (Microsoft.AspNetCore.Http.RequestDelegate next, string urlSuffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.RequestDelegate next, string urlSuffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.AspNetCore</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="next" Type="Microsoft.AspNetCore.Http.RequestDelegate" />
        <Parameter Name="urlSuffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="next">Next request handler in pipeline.</param>
        <param name="urlSuffix"></param>
        <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Invoke (Microsoft.AspNetCore.Http.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task Invoke(class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>255.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.AspNetCore</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware/&lt;Invoke&gt;d__3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Context.</param>
        <summary>
            Invoke.
            </summary>
        <returns>Task for the execution by next middleware in pipeline.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>