<Type Name="ConfidentialLedgerClient" FullName="Azure.Security.ConfidentialLedger.ConfidentialLedgerClient">
  <TypeSignature Language="C#" Value="public class ConfidentialLedgerClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConfidentialLedgerClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ConfidentialLedgerClient" />
  <TypeSignature Language="F#" Value="type ConfidentialLedgerClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ConfidentialLedger service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfidentialLedgerClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ConfidentialLedgerClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerClient (Uri ledgerEndpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri ledgerEndpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ledgerEndpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Security.ConfidentialLedger.ConfidentialLedgerClient" Usage="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient (ledgerEndpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ledgerEndpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="ledgerEndpoint"> The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerUri" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerClient (Uri ledgerEndpoint, System.Security.Cryptography.X509Certificates.X509Certificate2 clientCertificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri ledgerEndpoint, class System.Security.Cryptography.X509Certificates.X509Certificate2 clientCertificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.#ctor(System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ledgerEndpoint As Uri, clientCertificate As X509Certificate2)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient : Uri * System.Security.Cryptography.X509Certificates.X509Certificate2 -&gt; Azure.Security.ConfidentialLedger.ConfidentialLedgerClient" Usage="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient (ledgerEndpoint, clientCertificate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ledgerEndpoint" Type="System.Uri" />
        <Parameter Name="clientCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="ledgerEndpoint"> The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com. </param>
        <param name="clientCertificate"> A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerClient (Uri ledgerEndpoint, Azure.Core.TokenCredential credential, Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri ledgerEndpoint, class Azure.Core.TokenCredential credential, class Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ledgerEndpoint As Uri, credential As TokenCredential, options As ConfidentialLedgerClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient : Uri * Azure.Core.TokenCredential * Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions -&gt; Azure.Security.ConfidentialLedger.ConfidentialLedgerClient" Usage="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient (ledgerEndpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ledgerEndpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions" />
      </Parameters>
      <Docs>
        <param name="ledgerEndpoint"> The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConfidentialLedgerClient (Uri ledgerEndpoint, System.Security.Cryptography.X509Certificates.X509Certificate2 clientCertificate, Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri ledgerEndpoint, class System.Security.Cryptography.X509Certificates.X509Certificate2 clientCertificate, class Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.#ctor(System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ledgerEndpoint As Uri, clientCertificate As X509Certificate2, options As ConfidentialLedgerClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient : Uri * System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions -&gt; Azure.Security.ConfidentialLedger.ConfidentialLedgerClient" Usage="new Azure.Security.ConfidentialLedger.ConfidentialLedgerClient (ledgerEndpoint, clientCertificate, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ledgerEndpoint" Type="System.Uri" />
        <Parameter Name="clientCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="options" Type="Azure.Security.ConfidentialLedger.ConfidentialLedgerClientOptions" />
      </Parameters>
      <Docs>
        <param name="ledgerEndpoint"> The Confidential Ledger URL, for example https://contoso.confidentialledger.azure.com. </param>
        <param name="clientCertificate"> A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ConfidentialLedgerClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLedgerEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateLedgerEntry (Azure.Core.RequestContent content, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateLedgerEntry(class Azure.Core.RequestContent content, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.CreateLedgerEntry(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateLedgerEntry (content As RequestContent, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateLedgerEntry : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateLedgerEntry : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.CreateLedgerEntry (content, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Writes a ledger entry. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>LedgerEntry</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code>
            
            Response Body:
            
            Schema for <c>LedgerWriteResult</c>:
            <code>{
              collectionId: string, # Required.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateLedgerEntry with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                contents = "<contents>",
            };
            
            Response response = client.CreateLedgerEntry(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            ]]></code>
            This sample shows how to call CreateLedgerEntry with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                contents = "<contents>",
            };
            
            Response response = client.CreateLedgerEntry(RequestContent.Create(data), "<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateLedgerEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateLedgerEntryAsync (Azure.Core.RequestContent content, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateLedgerEntryAsync(class Azure.Core.RequestContent content, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.CreateLedgerEntryAsync(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateLedgerEntryAsync (content As RequestContent, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateLedgerEntryAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateLedgerEntryAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.CreateLedgerEntryAsync (content, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Writes a ledger entry. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified.
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>LedgerEntry</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code>
            
            Response Body:
            
            Schema for <c>LedgerWriteResult</c>:
            <code>{
              collectionId: string, # Required.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateLedgerEntryAsync with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                contents = "<contents>",
            };
            
            Response response = await client.CreateLedgerEntryAsync(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            ]]></code>
            This sample shows how to call CreateLedgerEntryAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                contents = "<contents>",
            };
            
            Response response = await client.CreateLedgerEntryAsync(RequestContent.Create(data), "<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdateUser (string userId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdateUser(string userId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.CreateOrUpdateUser(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateUser (userId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateUser : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdateUser : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.CreateOrUpdateUser (userId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Adds a user or updates a user's fields. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A JSON merge patch is applied for existing users
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code>
            
            Response Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateUser with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                assignedRole = "Administrator",
            };
            
            Response response = client.CreateOrUpdateUser("<userId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateUserAsync (string userId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateUserAsync(string userId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.CreateOrUpdateUserAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateUserAsync (userId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateUserAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateUserAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.CreateOrUpdateUserAsync (userId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Adds a user or updates a user's fields. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A JSON merge patch is applied for existing users
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code>
            
            Response Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateUserAsync with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            var data = new {
                assignedRole = "Administrator",
            };
            
            Response response = await client.CreateOrUpdateUserAsync("<userId>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteUser (string userId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteUser(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.DeleteUser(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteUser (userId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteUser : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteUser : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.DeleteUser (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a user from the Confidential Ledger. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteUser with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.DeleteUser("<userId>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteUserAsync (string userId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteUserAsync(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.DeleteUserAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteUserAsync (userId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteUserAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteUserAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.DeleteUserAsync (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a user from the Confidential Ledger. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteUserAsync with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.DeleteUserAsync("<userId>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCollections">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetCollections (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetCollections(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetCollections(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollections (Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCollections : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetCollections : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetCollections context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Retrieves a list of collection ids present in the Confidential Ledger. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Collection ids are user-created collections of ledger entries
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>PagedCollections</c>:
            <code>{
              collectionId: string, # Required.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetCollections and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            foreach (var data in client.GetCollections())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCollectionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetCollectionsAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetCollectionsAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetCollectionsAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCollectionsAsync (Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCollectionsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetCollectionsAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetCollectionsAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Retrieves a list of collection ids present in the Confidential Ledger. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Collection ids are user-created collections of ledger entries
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>PagedCollections</c>:
            <code>{
              collectionId: string, # Required.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetCollectionsAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            await foreach (var data in client.GetCollectionsAsync())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("collectionId").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConsortiumMembers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetConsortiumMembers (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetConsortiumMembers(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetConsortiumMembers(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConsortiumMembers (Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetConsortiumMembers : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetConsortiumMembers : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetConsortiumMembers context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the consortium members. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Consortium members can manage the Confidential Ledger.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ConsortiumMembers</c>:
            <code>{
              certificate: string, # Required. PEM-encoded certificate associated with the member.
              id: string, # Required. Identifier assigned to the member.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetConsortiumMembers and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            foreach (var data in client.GetConsortiumMembers())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConsortiumMembersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetConsortiumMembersAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetConsortiumMembersAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetConsortiumMembersAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConsortiumMembersAsync (Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetConsortiumMembersAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetConsortiumMembersAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetConsortiumMembersAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Lists the consortium members. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Consortium members can manage the Confidential Ledger.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>ConsortiumMembers</c>:
            <code>{
              certificate: string, # Required. PEM-encoded certificate associated with the member.
              id: string, # Required. Identifier assigned to the member.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetConsortiumMembersAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            await foreach (var data in client.GetConsortiumMembersAsync())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("certificate").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConstitution">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetConstitution (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetConstitution(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetConstitution(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstitution (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetConstitution : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetConstitution : Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetConstitution context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the constitution used for governance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            The constitution is a script that assesses and applies proposals from consortium members.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Constitution</c>:
            <code>{
              digest: string, # Required. SHA256 digest of the constitution script.
              script: string, # Required. Contents of the constitution.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetConstitution and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetConstitution();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConstitutionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetConstitutionAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetConstitutionAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetConstitutionAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConstitutionAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetConstitutionAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetConstitutionAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetConstitutionAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the constitution used for governance. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            The constitution is a script that assesses and applies proposals from consortium members.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>Constitution</c>:
            <code>{
              digest: string, # Required. SHA256 digest of the constitution script.
              script: string, # Required. Contents of the constitution.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetConstitutionAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetConstitutionAsync();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("digest").ToString());
            Console.WriteLine(result.GetProperty("script").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentLedgerEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCurrentLedgerEntry (string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCurrentLedgerEntry(string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetCurrentLedgerEntry(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentLedgerEntry (Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentLedgerEntry : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCurrentLedgerEntry : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetCurrentLedgerEntry (collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the current value available in the ledger. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerEntry</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetCurrentLedgerEntry and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetCurrentLedgerEntry();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            ]]></code>
            This sample shows how to call GetCurrentLedgerEntry with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetCurrentLedgerEntry("<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentLedgerEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCurrentLedgerEntryAsync (string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCurrentLedgerEntryAsync(string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetCurrentLedgerEntryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentLedgerEntryAsync (Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentLedgerEntryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCurrentLedgerEntryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetCurrentLedgerEntryAsync (collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the current value available in the ledger. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerEntry</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetCurrentLedgerEntryAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetCurrentLedgerEntryAsync();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            ]]></code>
            This sample shows how to call GetCurrentLedgerEntryAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetCurrentLedgerEntryAsync("<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnclaveQuotes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEnclaveQuotes (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEnclaveQuotes(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetEnclaveQuotes(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnclaveQuotes (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEnclaveQuotes : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEnclaveQuotes : Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetEnclaveQuotes context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ConfidentialLedgerEnclaves</c>:
            <code>{
              currentNodeId: string, # Required. Id of the Confidential Ledger node responding to the request.
              enclaveQuotes: Dictionary&lt;string, EnclaveQuote&gt;, # Required. Dictionary of enclave quotes, indexed by node id.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetEnclaveQuotes and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetEnclaveQuotes();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("mrenclave").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("raw").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEnclaveQuotesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEnclaveQuotesAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEnclaveQuotesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetEnclaveQuotesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnclaveQuotesAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEnclaveQuotesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEnclaveQuotesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetEnclaveQuotesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets quotes for all nodes of the Confidential Ledger. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            A quote is an SGX enclave measurement that can be used to verify the validity of a node and its enclave.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ConfidentialLedgerEnclaves</c>:
            <code>{
              currentNodeId: string, # Required. Id of the Confidential Ledger node responding to the request.
              enclaveQuotes: Dictionary&lt;string, EnclaveQuote&gt;, # Required. Dictionary of enclave quotes, indexed by node id.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetEnclaveQuotesAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetEnclaveQuotesAsync();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("currentNodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("mrenclave").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("quoteVersion").ToString());
            Console.WriteLine(result.GetProperty("enclaveQuotes").GetProperty("<test>").GetProperty("raw").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerEntries">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetLedgerEntries (string collectionId = default, string fromTransactionId = default, string toTransactionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetLedgerEntries(string collectionId, string fromTransactionId, string toTransactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetLedgerEntries(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerEntries (Optional collectionId As String = Nothing, Optional fromTransactionId As String = Nothing, Optional toTransactionId As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerEntries : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetLedgerEntries : string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetLedgerEntries (collectionId, fromTransactionId, toTransactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="fromTransactionId" Type="System.String" />
        <Parameter Name="toTransactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="collectionId"> The collection id. </param>
        <param name="fromTransactionId"> Specify the first transaction ID in a range. </param>
        <param name="toTransactionId"> Specify the last transaction ID in a range. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>LedgerEntries</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerEntries and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            foreach (var data in client.GetLedgerEntries())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
            }
            ]]></code>
            This sample shows how to call GetLedgerEntries with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            foreach (var data in client.GetLedgerEntries("<collectionId>", "<fromTransactionId>", "<toTransactionId>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
                Console.WriteLine(result.GetProperty("collectionId").ToString());
                Console.WriteLine(result.GetProperty("transactionId").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerEntriesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetLedgerEntriesAsync (string collectionId = default, string fromTransactionId = default, string toTransactionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetLedgerEntriesAsync(string collectionId, string fromTransactionId, string toTransactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetLedgerEntriesAsync(System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerEntriesAsync (Optional collectionId As String = Nothing, Optional fromTransactionId As String = Nothing, Optional toTransactionId As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerEntriesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetLedgerEntriesAsync : string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="confidentialLedgerClient.GetLedgerEntriesAsync (collectionId, fromTransactionId, toTransactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="fromTransactionId" Type="System.String" />
        <Parameter Name="toTransactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="collectionId"> The collection id. </param>
        <param name="fromTransactionId"> Specify the first transaction ID in a range. </param>
        <param name="toTransactionId"> Specify the last transaction ID in a range. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets ledger entries from a collection corresponding to a range. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            A collection id may optionally be specified. Only entries in the specified (or default) collection will be returned.
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>LedgerEntries</c>:
            <code>{
              contents: string, # Required. Contents of the ledger entry.
              collectionId: string, # Optional.
              transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerEntriesAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            await foreach (var data in client.GetLedgerEntriesAsync())
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
            }
            ]]></code>
            This sample shows how to call GetLedgerEntriesAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            await foreach (var data in client.GetLedgerEntriesAsync("<collectionId>", "<fromTransactionId>", "<toTransactionId>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("contents").ToString());
                Console.WriteLine(result.GetProperty("collectionId").ToString());
                Console.WriteLine(result.GetProperty("transactionId").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetLedgerEntry (string transactionId, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetLedgerEntry(string transactionId, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetLedgerEntry(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerEntry (transactionId As String, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerEntry : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetLedgerEntry : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetLedgerEntry (transactionId, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerQueryResult</c>:
            <code>{
              state: "Loading" | "Ready", # Required. State of a ledger query.
              entry: {
                contents: string, # Required. Contents of the ledger entry.
                collectionId: string, # Optional.
                transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
              }, # Optional. The ledger entry found as a result of the query. This is only available if the query is in Ready state.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerEntry with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetLedgerEntry("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            ]]></code>
            This sample shows how to call GetLedgerEntry with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetLedgerEntry("<transactionId>", "<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLedgerEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetLedgerEntryAsync (string transactionId, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetLedgerEntryAsync(string transactionId, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetLedgerEntryAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLedgerEntryAsync (transactionId As String, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetLedgerEntryAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetLedgerEntryAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetLedgerEntryAsync (transactionId, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the ledger entry at the specified transaction id. A collection id may optionally be specified to indicate the collection from which to fetch the value. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            To return older ledger entries, the relevant sections of the ledger must be read from disk and validated. To prevent blocking within the enclave, the response will indicate whether the entry is ready and part of the response, or if the loading is still ongoing.
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerQueryResult</c>:
            <code>{
              state: "Loading" | "Ready", # Required. State of a ledger query.
              entry: {
                contents: string, # Required. Contents of the ledger entry.
                collectionId: string, # Optional.
                transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
              }, # Optional. The ledger entry found as a result of the query. This is only available if the query is in Ready state.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetLedgerEntryAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetLedgerEntryAsync("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            ]]></code>
            This sample shows how to call GetLedgerEntryAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetLedgerEntryAsync("<transactionId>", "<collectionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("contents").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("collectionId").ToString());
            Console.WriteLine(result.GetProperty("entry").GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetReceipt">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetReceipt (string transactionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetReceipt(string transactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetReceipt(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReceipt (transactionId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetReceipt : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetReceipt : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetReceipt (transactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a receipt certifying ledger contents at a particular transaction id. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TransactionReceipt</c>:
            <code>{
              receipt: {
                cert: string, # Optional.
                leaf: string, # Optional.
                leafComponents: {
                  claimsDigest: string, # Optional.
                  commitEvidence: string, # Optional.
                  writeSetDigest: string, # Optional.
                }, # Optional.
                nodeId: string, # Required.
                proof: [
                  {
                    left: string, # Optional.
                    right: string, # Optional.
                  }
                ], # Required.
                root: string, # Optional.
                serviceEndorsements: [string], # Optional.
                signature: string, # Required.
              }, # Optional.
              state: "Loading" | "Ready", # Required. State of a ledger query.
              transactionId: string, # Required. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetReceipt with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetReceipt("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("receipt").GetProperty("cert").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leaf").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("claimsDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("commitEvidence").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("writeSetDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("left").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("right").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("root").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("serviceEndorsements")[0].ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetReceiptAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetReceiptAsync (string transactionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetReceiptAsync(string transactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetReceiptAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReceiptAsync (transactionId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetReceiptAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetReceiptAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetReceiptAsync (transactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a receipt certifying ledger contents at a particular transaction id. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TransactionReceipt</c>:
            <code>{
              receipt: {
                cert: string, # Optional.
                leaf: string, # Optional.
                leafComponents: {
                  claimsDigest: string, # Optional.
                  commitEvidence: string, # Optional.
                  writeSetDigest: string, # Optional.
                }, # Optional.
                nodeId: string, # Required.
                proof: [
                  {
                    left: string, # Optional.
                    right: string, # Optional.
                  }
                ], # Required.
                root: string, # Optional.
                serviceEndorsements: [string], # Optional.
                signature: string, # Required.
              }, # Optional.
              state: "Loading" | "Ready", # Required. State of a ledger query.
              transactionId: string, # Required. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetReceiptAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetReceiptAsync("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("receipt").GetProperty("cert").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leaf").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("claimsDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("commitEvidence").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("leafComponents").GetProperty("writeSetDigest").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("left").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("proof")[0].GetProperty("right").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("root").ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("serviceEndorsements")[0].ToString());
            Console.WriteLine(result.GetProperty("receipt").GetProperty("signature").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTransactionStatus (string transactionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTransactionStatus(string transactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetTransactionStatus(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTransactionStatus (transactionId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTransactionStatus : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTransactionStatus : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetTransactionStatus (transactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an entry identified by a transaction id. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TransactionStatus</c>:
            <code>{
              state: "Committed" | "Pending", # Required. Represents the state of the transaction.
              transactionId: string, # Required. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetTransactionStatus with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetTransactionStatus("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTransactionStatusAsync (string transactionId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTransactionStatusAsync(string transactionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetTransactionStatusAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTransactionStatusAsync (transactionId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTransactionStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTransactionStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetTransactionStatusAsync (transactionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="transactionId"> Identifies a write transaction. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets the status of an entry identified by a transaction id. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TransactionStatus</c>:
            <code>{
              state: "Committed" | "Pending", # Required. Represents the state of the transaction.
              transactionId: string, # Required. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transactionId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="transactionId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetTransactionStatusAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetTransactionStatusAsync("<transactionId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("transactionId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetUser (string userId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetUser(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetUser(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUser (userId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetUser : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetUser : string * Azure.RequestContext -&gt; Azure.Response" Usage="confidentialLedgerClient.GetUser (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a user. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetUser with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = client.GetUser("<userId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetUserAsync (string userId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetUserAsync(string userId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.GetUserAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUserAsync (userId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetUserAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetUserAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="confidentialLedgerClient.GetUserAsync (userId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="userId"> The user id, either an AAD object ID or certificate fingerprint. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Gets a user. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>LedgerUser</c>:
            <code>{
              assignedRole: "Administrator" | "Contributor" | "Reader", # Required. Represents an assignable role.
              userId: string, # Optional. Identifier for the user. This must either be an AAD object id or a certificate fingerprint.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetUserAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentialLedgerClient(endpoint, credential);
            
            Response response = await client.GetUserAsync("<userId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("assignedRole").ToString());
            Console.WriteLine(result.GetProperty("userId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostLedgerEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation PostLedgerEntry (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation PostLedgerEntry(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.PostLedgerEntry(Azure.WaitUntil,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PostLedgerEntry (waitUntil As WaitUntil, content As RequestContent, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member PostLedgerEntry : Azure.WaitUntil * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.PostLedgerEntry : Azure.WaitUntil * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation" Usage="confidentialLedgerClient.PostLedgerEntry (waitUntil, content, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>.</param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context. </param>
        <summary> Posts a new entry to the ledger. A collection id may optionally be specified. </summary>
        <returns>To be added.</returns>
        <remarks>
             Below is the JSON schema for the request and response payloads.
            
             Request Body:
            
             Schema for <c>LedgerEntry</c>:
             <code>{
               contents: string, # Required. Contents of the ledger entry.
               collectionId: string, # Optional.
               transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
             }
             </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="PostLedgerEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; PostLedgerEntryAsync (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, string collectionId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; PostLedgerEntryAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, string collectionId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.ConfidentialLedger.ConfidentialLedgerClient.PostLedgerEntryAsync(Azure.WaitUntil,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PostLedgerEntryAsync (waitUntil As WaitUntil, content As RequestContent, Optional collectionId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member PostLedgerEntryAsync : Azure.WaitUntil * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.PostLedgerEntryAsync : Azure.WaitUntil * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="confidentialLedgerClient.PostLedgerEntryAsync (waitUntil, content, collectionId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="collectionId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>.</param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="collectionId"> The collection id. </param>
        <param name="context"> The request context. </param>
        <summary> Posts a new entry to the ledger. A collection id may optionally be specified. </summary>
        <returns>To be added.</returns>
        <remarks>
             Below is the JSON schema for the request and response payloads.
            
             Request Body:
            
             Schema for <c>LedgerEntry</c>:
             <code>{
               contents: string, # Required. Contents of the ledger entry.
               collectionId: string, # Optional.
               transactionId: string, # Optional. A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read.
             }
             </code></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
