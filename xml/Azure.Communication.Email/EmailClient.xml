<Type Name="EmailClient" FullName="Azure.Communication.Email.EmailClient">
  <TypeSignature Language="C#" Value="public class EmailClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EmailClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.Email.EmailClient" />
  <TypeSignature Language="VB.NET" Value="Public Class EmailClient" />
  <TypeSignature Language="F#" Value="type EmailClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.Email</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Email service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EmailClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of EmailClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailClient (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.Email.EmailClient : string -&gt; Azure.Communication.Email.EmailClient" Usage="new Azure.Communication.Email.EmailClient connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Connection string acquired from the Azure Communication Services resource.</param>
        <summary>
            Initializes a new instance of <see cref="T:Azure.Communication.Email.EmailClient" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailClient (string connectionString, Azure.Communication.Email.EmailClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Communication.Email.EmailClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.#ctor(System.String,Azure.Communication.Email.EmailClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, options As EmailClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.Email.EmailClient : string * Azure.Communication.Email.EmailClientOptions -&gt; Azure.Communication.Email.EmailClient" Usage="new Azure.Communication.Email.EmailClient (connectionString, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.Email.EmailClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Connection string acquired from the Azure Communication Services resource.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.Email.EmailClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Communication.Email.EmailClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Communication.Email.EmailClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Communication.Email.EmailClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, Optional options As EmailClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.Email.EmailClient : Uri * Azure.AzureKeyCredential * Azure.Communication.Email.EmailClientOptions -&gt; Azure.Communication.Email.EmailClient" Usage="new Azure.Communication.Email.EmailClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Communication.Email.EmailClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI of the Azure Communication Services resource.</param>
        <param name="credential">The <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.Email.EmailClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Communication.Email.EmailClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Communication.Email.EmailClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Communication.Email.EmailClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, Optional options As EmailClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.Email.EmailClient : Uri * Azure.Core.TokenCredential * Azure.Communication.Email.EmailClientOptions -&gt; Azure.Communication.Email.EmailClient" Usage="new Azure.Communication.Email.EmailClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Communication.Email.EmailClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI of the Azure Communication Services resource.</param>
        <param name="credential">The TokenCredential used to authenticate requests, such as DefaultAzureCredential.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.Email.EmailClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSendResult">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt; GetSendResult (string id, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.Email.EmailSendResult&gt; GetSendResult(string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.GetSendResult(System.String,System.Threading.CancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSendResult (id As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of EmailSendResult)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetSendResult : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;&#xA;override this.GetSendResult : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;" Usage="emailClient.GetSendResult (id, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id">ID of the existing email send operation.</param>
        <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notification that the operation should be cancelled.</param>
        <summary>
            Gets the status result of an existing email send operation.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSendResultAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;&gt; GetSendResultAsync (string id, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.Email.EmailSendResult&gt;&gt; GetSendResultAsync(string id, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.GetSendResultAsync(System.String,System.Threading.CancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSendResultAsync (id As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of EmailSendResult))" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="abstract member GetSendResultAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;&gt;&#xA;override this.GetSendResultAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;&gt;" Usage="emailClient.GetSendResultAsync (id, cancellationToken)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="azure-dotnet-preview">System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.Email.EmailSendResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id">ID of the existing email send operation.</param>
        <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
            notification that the operation should be cancelled.</param>
        <summary>
            Gets the status result of an existing email send operation.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public virtual Azure.Communication.Email.EmailSendOperation Send (Azure.WaitUntil wait, Azure.Communication.Email.EmailMessage message, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Communication.Email.EmailSendOperation Send(valuetype Azure.WaitUntil wait, class Azure.Communication.Email.EmailMessage message, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.Send(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Send (wait As WaitUntil, message As EmailMessage, Optional cancellationToken As CancellationToken = Nothing) As EmailSendOperation" />
      <MemberSignature Language="F#" Value="abstract member Send : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation&#xA;override this.Send : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation" Usage="emailClient.Send (wait, message, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.Email.EmailSendOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" />
        <Parameter Name="message" Type="Azure.Communication.Email.EmailMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="message"> Message payload for sending an email. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to one or more recipients. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public virtual Azure.Communication.Email.EmailSendOperation Send (Azure.WaitUntil wait, Azure.Communication.Email.EmailMessage message, Guid operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Communication.Email.EmailSendOperation Send(valuetype Azure.WaitUntil wait, class Azure.Communication.Email.EmailMessage message, valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.Send(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Send (wait As WaitUntil, message As EmailMessage, operationId As Guid, Optional cancellationToken As CancellationToken = Nothing) As EmailSendOperation" />
      <MemberSignature Language="F#" Value="abstract member Send : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * Guid * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation&#xA;override this.Send : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * Guid * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation" Usage="emailClient.Send (wait, message, operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.Email.EmailSendOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="message" Type="Azure.Communication.Email.EmailMessage" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="operationId" Type="System.Guid" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="message"> Message payload for sending an email. </param>
        <param name="operationId"> The ID to identify the long running operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to one or more recipients. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public virtual Azure.Communication.Email.EmailSendOperation Send (Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Communication.Email.EmailSendOperation Send(valuetype Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, string plainTextContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.Send(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Send (wait As WaitUntil, senderAddress As String, recipientAddress As String, subject As String, htmlContent As String, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As EmailSendOperation" />
      <MemberSignature Language="F#" Value="abstract member Send : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation&#xA;override this.Send : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation" Usage="emailClient.Send (wait, senderAddress, recipientAddress, subject, htmlContent, plainTextContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.Email.EmailSendOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" />
        <Parameter Name="senderAddress" Type="System.String" />
        <Parameter Name="recipientAddress" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="htmlContent" Type="System.String" />
        <Parameter Name="plainTextContent" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="senderAddress"> From address of the email. </param>
        <param name="recipientAddress"> Email address of the TO recipient. </param>
        <param name="subject"> Subject for the email. </param>
        <param name="htmlContent"> Email body in HTML format. </param>
        <param name="plainTextContent"> Email body in plain text format. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to a single recipient. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public virtual Azure.Communication.Email.EmailSendOperation Send (Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, Guid operationId, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Communication.Email.EmailSendOperation Send(valuetype Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, valuetype System.Guid operationId, string plainTextContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.Send(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.Guid,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Send (wait As WaitUntil, senderAddress As String, recipientAddress As String, subject As String, htmlContent As String, operationId As Guid, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As EmailSendOperation" />
      <MemberSignature Language="F#" Value="abstract member Send : Azure.WaitUntil * string * string * string * string * Guid * string * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation&#xA;override this.Send : Azure.WaitUntil * string * string * string * string * Guid * string * System.Threading.CancellationToken -&gt; Azure.Communication.Email.EmailSendOperation" Usage="emailClient.Send (wait, senderAddress, recipientAddress, subject, htmlContent, operationId, plainTextContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.Email.EmailSendOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="senderAddress" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="recipientAddress" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="subject" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="htmlContent" Type="System.String" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="operationId" Type="System.Guid" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="plainTextContent" Type="System.String" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="7" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="senderAddress"> From address of the email. </param>
        <param name="recipientAddress"> Email address of the TO recipient. </param>
        <param name="subject"> Subject for the email. </param>
        <param name="htmlContent"> Email body in HTML format. </param>
        <param name="operationId"> The ID to identify the long running operation. </param>
        <param name="plainTextContent"> Email body in plain text format. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to a single recipient. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt; SendAsync (Azure.WaitUntil wait, Azure.Communication.Email.EmailMessage message, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Communication.Email.EmailSendOperation&gt; SendAsync(valuetype Azure.WaitUntil wait, class Azure.Communication.Email.EmailMessage message, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SendAsync (wait As WaitUntil, message As EmailMessage, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)" />
      <MemberSignature Language="F#" Value="abstract member SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;&#xA;override this.SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;" Usage="emailClient.SendAsync (wait, message, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" />
        <Parameter Name="message" Type="Azure.Communication.Email.EmailMessage" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="message"> Message payload for sending an email. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to one or more recipients. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt; SendAsync (Azure.WaitUntil wait, Azure.Communication.Email.EmailMessage message, Guid operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Communication.Email.EmailSendOperation&gt; SendAsync(valuetype Azure.WaitUntil wait, class Azure.Communication.Email.EmailMessage message, valuetype System.Guid operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SendAsync (wait As WaitUntil, message As EmailMessage, operationId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)" />
      <MemberSignature Language="F#" Value="abstract member SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;&#xA;override this.SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;" Usage="emailClient.SendAsync (wait, message, operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="message" Type="Azure.Communication.Email.EmailMessage" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="operationId" Type="System.Guid" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="message"> Message payload for sending an email. </param>
        <param name="operationId"> The ID to identify the long running operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to one or more recipients. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt; SendAsync (Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Communication.Email.EmailSendOperation&gt; SendAsync(valuetype Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, string plainTextContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SendAsync (wait As WaitUntil, senderAddress As String, recipientAddress As String, subject As String, htmlContent As String, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)" />
      <MemberSignature Language="F#" Value="abstract member SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;&#xA;override this.SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;" Usage="emailClient.SendAsync (wait, senderAddress, recipientAddress, subject, htmlContent, plainTextContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" />
        <Parameter Name="senderAddress" Type="System.String" />
        <Parameter Name="recipientAddress" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="htmlContent" Type="System.String" />
        <Parameter Name="plainTextContent" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="senderAddress"> From address of the email. </param>
        <param name="recipientAddress"> Email address of the TO recipient. </param>
        <param name="subject"> Subject for the email. </param>
        <param name="htmlContent"> Email body in HTML format. </param>
        <param name="plainTextContent"> Email body in plain text format. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to a single recipient. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt; SendAsync (Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, Guid operationId, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Communication.Email.EmailSendOperation&gt; SendAsync(valuetype Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, valuetype System.Guid operationId, string plainTextContent, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.Guid,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SendAsync (wait As WaitUntil, senderAddress As String, recipientAddress As String, subject As String, htmlContent As String, operationId As Guid, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)" />
      <MemberSignature Language="F#" Value="abstract member SendAsync : Azure.WaitUntil * string * string * string * string * Guid * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;&#xA;override this.SendAsync : Azure.WaitUntil * string * string * string * string * Guid * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;" Usage="emailClient.SendAsync (wait, senderAddress, recipientAddress, subject, htmlContent, operationId, plainTextContent, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.Email</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Communication.Email.EmailSendOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wait" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="senderAddress" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="recipientAddress" Type="System.String" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="subject" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="htmlContent" Type="System.String" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="operationId" Type="System.Guid" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="plainTextContent" Type="System.String" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="7" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="wait">
          <see cref="F:Azure.WaitUntil.Completed" />
            if the method should wait to return until the long-running operation has completed on the service;
            <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation.
            For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="senderAddress"> From address of the email. </param>
        <param name="recipientAddress"> Email address of the TO recipient. </param>
        <param name="subject"> Subject for the email. </param>
        <param name="htmlContent"> Email body in HTML format. </param>
        <param name="plainTextContent"> Email body in plain text format. </param>
        <param name="operationId"> The ID to identify the long running operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Queues an email message to be sent to a single recipient. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
