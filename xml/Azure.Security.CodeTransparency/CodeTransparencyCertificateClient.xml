<Type Name="CodeTransparencyCertificateClient" FullName="Azure.Security.CodeTransparency.CodeTransparencyCertificateClient">
  <TypeSignature Language="C#" Value="public class CodeTransparencyCertificateClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeTransparencyCertificateClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTransparencyCertificateClient" />
  <TypeSignature Language="F#" Value="type CodeTransparencyCertificateClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The client to fetch the service certificate for the use in TLS connection.
            Very similar to the one used in Azure.Security.ConfidentialLedger.
            Certificate responses get cached for a configured time.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeTransparencyCertificateClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Constructor to facilitate mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTransparencyCertificateClient (Uri certificateEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri certificateEndpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (certificateEndpoint As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.Security.CodeTransparency.CodeTransparencyCertificateClient : Uri -&gt; Azure.Security.CodeTransparency.CodeTransparencyCertificateClient" Usage="new Azure.Security.CodeTransparency.CodeTransparencyCertificateClient certificateEndpoint" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateEndpoint" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="certificateEndpoint"> The Identity Service URL. </param>
        <summary> Initializes a new instance of CertificateClient.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificateEndpoint" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTransparencyCertificateClient (Uri certificateEndpoint, Azure.Security.CodeTransparency.CodeTransparencyClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri certificateEndpoint, class Azure.Security.CodeTransparency.CodeTransparencyClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.#ctor(System.Uri,Azure.Security.CodeTransparency.CodeTransparencyClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (certificateEndpoint As Uri, options As CodeTransparencyClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.CodeTransparency.CodeTransparencyCertificateClient : Uri * Azure.Security.CodeTransparency.CodeTransparencyClientOptions -&gt; Azure.Security.CodeTransparency.CodeTransparencyCertificateClient" Usage="new Azure.Security.CodeTransparency.CodeTransparencyCertificateClient (certificateEndpoint, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificateEndpoint" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Security.CodeTransparency.CodeTransparencyClientOptions" />
      </Parameters>
      <Docs>
        <param name="certificateEndpoint"> The Identity Service URL. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of CertificateClient.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificateEndpoint" />
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceIdentity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetServiceIdentity (string ledgerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetServiceIdentity(string ledgerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.GetServiceIdentity(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceIdentity (ledgerId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetServiceIdentity : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetServiceIdentity : string * Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyCertificateClient.GetServiceIdentity (ledgerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the  service instance to get information for. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            Gets identity information (TLS cert) for a service instance.
            </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceIdentity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt; GetServiceIdentity (string ledgerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ServiceIdentityResult&gt; GetServiceIdentity(string ledgerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.GetServiceIdentity(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceIdentity (ledgerId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ServiceIdentityResult)" />
      <MemberSignature Language="F#" Value="abstract member GetServiceIdentity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&#xA;override this.GetServiceIdentity : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;" Usage="codeTransparencyCertificateClient.GetServiceIdentity (ledgerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the  service instance to get information for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets identity information (TLS cert) for a service instance.
            Raw response could be null if the value is from cache.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceIdentityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetServiceIdentityAsync (string ledgerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetServiceIdentityAsync(string ledgerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.GetServiceIdentityAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceIdentityAsync (ledgerId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetServiceIdentityAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetServiceIdentityAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyCertificateClient.GetServiceIdentityAsync (ledgerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the  service instance to get information for. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            Gets identity information (TLS cert) for a service instance.
            </summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetServiceIdentityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&gt; GetServiceIdentityAsync (string ledgerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&gt; GetServiceIdentityAsync(string ledgerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyCertificateClient.GetServiceIdentityAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceIdentityAsync (ledgerId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ServiceIdentityResult))" />
      <MemberSignature Language="F#" Value="abstract member GetServiceIdentityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&gt;&#xA;override this.GetServiceIdentityAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&gt;" Usage="codeTransparencyCertificateClient.GetServiceIdentityAsync (ledgerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ServiceIdentityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ledgerId"> Id of the  service instance to get information for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets identity information (TLS cert) for a service instance.
            Raw response could be null if the value is from cache.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
