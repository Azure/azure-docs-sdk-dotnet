<Type Name="CodeTransparencyClient" FullName="Azure.Security.CodeTransparency.CodeTransparencyClient">
  <TypeSignature Language="C#" Value="public class CodeTransparencyClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeTransparencyClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.CodeTransparency.CodeTransparencyClient" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTransparencyClient" />
  <TypeSignature Language="F#" Value="type CodeTransparencyClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The CodeTransparency service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeTransparencyClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of CodeTransparencyClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTransparencyClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Security.CodeTransparency.CodeTransparencyClient : Uri * Azure.AzureKeyCredential -&gt; Azure.Security.CodeTransparency.CodeTransparencyClient" Usage="new Azure.Security.CodeTransparency.CodeTransparencyClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The <see cref="T:System.Uri" /> to use. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of CodeTransparencyClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTransparencyClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Security.CodeTransparency.CodeTransparencyClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Security.CodeTransparency.CodeTransparencyClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Security.CodeTransparency.CodeTransparencyClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As CodeTransparencyClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.CodeTransparency.CodeTransparencyClient : Uri * Azure.AzureKeyCredential * Azure.Security.CodeTransparency.CodeTransparencyClientOptions -&gt; Azure.Security.CodeTransparency.CodeTransparencyClient" Usage="new Azure.Security.CodeTransparency.CodeTransparencyClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Security.CodeTransparency.CodeTransparencyClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The <see cref="T:System.Uri" /> to use. </param>
        <param name="credential"> A JWT based credential used to authenticate to the Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary>
            Initializes a new instance of CodeTransparencyClient. The client will download its own
            TLS CA cert to perform server cert authentication.
            If the CA changes then there is a TTL which will help healing the long lived clients.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt; CreateEntry (BinaryData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.Security.CodeTransparency.GetOperationResult&gt; CreateEntry(class System.BinaryData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.CreateEntry(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEntry (body As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of GetOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateEntry : BinaryData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&#xA;override this.CreateEntry : BinaryData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;" Usage="codeTransparencyClient.CreateEntry (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> A raw CoseSign1 signature. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Post an entry to be registered on the CodeTransparency instance. The returned operation will have the entry id when it is complete. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt; CreateEntryAsync (BinaryData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.Security.CodeTransparency.GetOperationResult&gt;&gt; CreateEntryAsync(class System.BinaryData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.CreateEntryAsync(System.BinaryData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEntryAsync (body As BinaryData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of GetOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateEntryAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;&#xA;override this.CreateEntryAsync : BinaryData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;" Usage="codeTransparencyClient.CreateEntryAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.BinaryData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> A raw CoseSign1 signature. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Post an entry to be registered on the CodeTransparency instance. The returned operation will have the entry id when it is complete. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyConfig">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCodeTransparencyConfig (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCodeTransparencyConfig(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfig(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyConfig (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyConfig : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCodeTransparencyConfig : Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetCodeTransparencyConfig context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get CodeTransparency configuration information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfig(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCodeTransparencyConfig and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetCodeTransparencyConfig(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetCodeTransparencyConfig with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetCodeTransparencyConfig(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_algorithms")[0].ToString());
Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_did_issuers")[0].ToString());
Console.WriteLine(result.GetProperty("authentication").GetProperty("allow_unauthenticated").ToString());
Console.WriteLine(result.GetProperty("authentication").GetProperty("jwt").GetProperty("required_claims").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("service_identifier").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyConfig">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt; GetCodeTransparencyConfig (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt; GetCodeTransparencyConfig(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfig(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyConfig (Optional cancellationToken As CancellationToken = Nothing) As Response(Of CodeTransparencyConfiguration)" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyConfig : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&#xA;override this.GetCodeTransparencyConfig : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;" Usage="codeTransparencyClient.GetCodeTransparencyConfig cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get CodeTransparency configuration information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCodeTransparencyConfig.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<CodeTransparencyConfiguration> response = client.GetCodeTransparencyConfig();
]]></code>
This sample shows how to call GetCodeTransparencyConfig with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<CodeTransparencyConfiguration> response = client.GetCodeTransparencyConfig();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyConfigAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCodeTransparencyConfigAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCodeTransparencyConfigAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfigAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyConfigAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyConfigAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCodeTransparencyConfigAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetCodeTransparencyConfigAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get CodeTransparency configuration information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfigAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCodeTransparencyConfigAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetCodeTransparencyConfigAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetCodeTransparencyConfigAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetCodeTransparencyConfigAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_algorithms")[0].ToString());
Console.WriteLine(result.GetProperty("policy").GetProperty("accepted_did_issuers")[0].ToString());
Console.WriteLine(result.GetProperty("authentication").GetProperty("allow_unauthenticated").ToString());
Console.WriteLine(result.GetProperty("authentication").GetProperty("jwt").GetProperty("required_claims").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("service_identifier").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyConfigAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&gt; GetCodeTransparencyConfigAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&gt; GetCodeTransparencyConfigAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyConfigAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyConfigAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CodeTransparencyConfiguration))" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyConfigAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&gt;&#xA;override this.GetCodeTransparencyConfigAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&gt;" Usage="codeTransparencyClient.GetCodeTransparencyConfigAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.CodeTransparencyConfiguration&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get CodeTransparency configuration information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCodeTransparencyConfigAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<CodeTransparencyConfiguration> response = await client.GetCodeTransparencyConfigAsync();
]]></code>
This sample shows how to call GetCodeTransparencyConfigAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<CodeTransparencyConfiguration> response = await client.GetCodeTransparencyConfigAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyVersion">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCodeTransparencyVersion (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCodeTransparencyVersion(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersion(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyVersion (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyVersion : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCodeTransparencyVersion : Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetCodeTransparencyVersion context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get CodeTransparency version information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersion(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCodeTransparencyVersion and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetCodeTransparencyVersion(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scitt_version").ToString());
]]></code>
This sample shows how to call GetCodeTransparencyVersion with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetCodeTransparencyVersion(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scitt_version").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyVersion">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt; GetCodeTransparencyVersion (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.VersionResult&gt; GetCodeTransparencyVersion(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersion(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyVersion (Optional cancellationToken As CancellationToken = Nothing) As Response(Of VersionResult)" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyVersion : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;&#xA;override this.GetCodeTransparencyVersion : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;" Usage="codeTransparencyClient.GetCodeTransparencyVersion cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get CodeTransparency version information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCodeTransparencyVersion.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<VersionResult> response = client.GetCodeTransparencyVersion();
]]></code>
This sample shows how to call GetCodeTransparencyVersion with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<VersionResult> response = client.GetCodeTransparencyVersion();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyVersionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCodeTransparencyVersionAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCodeTransparencyVersionAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersionAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyVersionAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyVersionAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCodeTransparencyVersionAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetCodeTransparencyVersionAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get CodeTransparency version information.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersionAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCodeTransparencyVersionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetCodeTransparencyVersionAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scitt_version").ToString());
]]></code>
This sample shows how to call GetCodeTransparencyVersionAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetCodeTransparencyVersionAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("scitt_version").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTransparencyVersionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;&gt; GetCodeTransparencyVersionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.VersionResult&gt;&gt; GetCodeTransparencyVersionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetCodeTransparencyVersionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCodeTransparencyVersionAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VersionResult))" />
      <MemberSignature Language="F#" Value="abstract member GetCodeTransparencyVersionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;&gt;&#xA;override this.GetCodeTransparencyVersionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;&gt;" Usage="codeTransparencyClient.GetCodeTransparencyVersionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.VersionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get CodeTransparency version information. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCodeTransparencyVersionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<VersionResult> response = await client.GetCodeTransparencyVersionAsync();
]]></code>
This sample shows how to call GetCodeTransparencyVersionAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<VersionResult> response = await client.GetCodeTransparencyVersionAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDidConfig">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDidConfig (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDidConfig(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfig(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDidConfig (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDidConfig : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDidConfig : Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetDidConfig context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the DID configuration file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfig(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDidConfig and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetDidConfig(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
]]></code>
This sample shows how to call GetDidConfig with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetDidConfig(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("alg").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("crv").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("d").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dp").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dq").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("e").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("k").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kid").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("n").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("p").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("q").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("qi").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("use").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x5c")[0].ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("y").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDidConfig">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt; GetDidConfig (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.DidDocument&gt; GetDidConfig(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfig(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDidConfig (Optional cancellationToken As CancellationToken = Nothing) As Response(Of DidDocument)" />
      <MemberSignature Language="F#" Value="abstract member GetDidConfig : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;&#xA;override this.GetDidConfig : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;" Usage="codeTransparencyClient.GetDidConfig cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the DID configuration file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetDidConfig.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<DidDocument> response = client.GetDidConfig();
]]></code>
This sample shows how to call GetDidConfig with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<DidDocument> response = client.GetDidConfig();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDidConfigAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDidConfigAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDidConfigAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfigAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDidConfigAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDidConfigAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDidConfigAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetDidConfigAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the DID configuration file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfigAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDidConfigAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetDidConfigAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
]]></code>
This sample shows how to call GetDidConfigAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetDidConfigAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("controller").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("alg").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("crv").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("d").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dp").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("dq").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("e").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("k").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kid").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("kty").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("n").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("p").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("q").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("qi").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("use").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x").ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("x5c")[0].ToString());
Console.WriteLine(result.GetProperty("assertionMethod")[0].GetProperty("publicKeyJwk").GetProperty("y").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDidConfigAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;&gt; GetDidConfigAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.DidDocument&gt;&gt; GetDidConfigAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetDidConfigAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDidConfigAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DidDocument))" />
      <MemberSignature Language="F#" Value="abstract member GetDidConfigAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;&gt;&#xA;override this.GetDidConfigAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;&gt;" Usage="codeTransparencyClient.GetDidConfigAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.DidDocument&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the DID configuration file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetDidConfigAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<DidDocument> response = await client.GetDidConfigAsync();
]]></code>
This sample shows how to call GetDidConfigAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<DidDocument> response = await client.GetDidConfigAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntry (string entryId, bool? embedReceipt, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntry(string entryId, valuetype System.Nullable`1&lt;bool&gt; embedReceipt, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntry(System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntry (entryId As String, embedReceipt As Nullable(Of Boolean), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntry : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntry : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetEntry (entryId, embedReceipt, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="embedReceipt" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="embedReceipt"> Embed a receipt as part of the response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Entry with or without receipt embedded in its unprotected header
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntry(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntry and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntry("<entryId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntry with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntry("<entryId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntry">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetEntry (string entryId, bool? embedReceipt = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetEntry(string entryId, valuetype System.Nullable`1&lt;bool&gt; embedReceipt, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntry(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntry (entryId As String, Optional embedReceipt As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEntry : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetEntry : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="codeTransparencyClient.GetEntry (entryId, embedReceipt, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="embedReceipt" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="embedReceipt"> Embed a receipt as part of the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get Entry with or without receipt embedded in its unprotected header. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntry.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = client.GetEntry("<entryId>");
]]></code>
This sample shows how to call GetEntry with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = client.GetEntry("<entryId>", embedReceipt: true);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntryAsync (string entryId, bool? embedReceipt, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntryAsync(string entryId, valuetype System.Nullable`1&lt;bool&gt; embedReceipt, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryAsync(System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryAsync (entryId As String, embedReceipt As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryAsync : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntryAsync : string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetEntryAsync (entryId, embedReceipt, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="embedReceipt" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="embedReceipt"> Embed a receipt as part of the response. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Entry with or without receipt embedded in its unprotected header
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryAsync("<entryId>", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntryAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryAsync("<entryId>", true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetEntryAsync (string entryId, bool? embedReceipt = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetEntryAsync(string entryId, valuetype System.Nullable`1&lt;bool&gt; embedReceipt, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryAsync (entryId As String, Optional embedReceipt As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetEntryAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetEntryAsync : string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="codeTransparencyClient.GetEntryAsync (entryId, embedReceipt, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="embedReceipt" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="embedReceipt"> Embed a receipt as part of the response. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get Entry with or without receipt embedded in its unprotected header. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = await client.GetEntryAsync("<entryId>");
]]></code>
This sample shows how to call GetEntryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = await client.GetEntryAsync("<entryId>", embedReceipt: true);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryIds">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetEntryIds (long? from, long? to, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetEntryIds(valuetype System.Nullable`1&lt;int64&gt; from, valuetype System.Nullable`1&lt;int64&gt; to, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIds(System.Nullable{System.Int64},System.Nullable{System.Int64},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryIds (from As Nullable(Of Long), to As Nullable(Of Long), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryIds : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetEntryIds : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="codeTransparencyClient.GetEntryIds (from, to, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="to" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="from"> Starting Transaction Id. </param>
        <param name="to"> Ending Transaction Id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Historical query to get a list of entries of a given range
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIds(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryIds and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

foreach (BinaryData item in client.GetEntryIds(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEntryIds with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

foreach (BinaryData item in client.GetEntryIds(1234L, 1234L, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryIds">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;string&gt; GetEntryIds (long? from = default, long? to = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;string&gt; GetEntryIds(valuetype System.Nullable`1&lt;int64&gt; from, valuetype System.Nullable`1&lt;int64&gt; to, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIds(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryIds (Optional from As Nullable(Of Long) = Nothing, Optional to As Nullable(Of Long) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryIds : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;string&gt;&#xA;override this.GetEntryIds : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;string&gt;" Usage="codeTransparencyClient.GetEntryIds (from, to, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="to" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from"> Starting Transaction Id. </param>
        <param name="to"> Ending Transaction Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Historical query to get a list of entries of a given range. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEntryIds.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

foreach (string item in client.GetEntryIds())
{
}
]]></code>
This sample shows how to call GetEntryIds with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

foreach (string item in client.GetEntryIds(from: 1234L, to: 1234L))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryIdsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetEntryIdsAsync (long? from, long? to, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetEntryIdsAsync(valuetype System.Nullable`1&lt;int64&gt; from, valuetype System.Nullable`1&lt;int64&gt; to, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIdsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryIdsAsync (from As Nullable(Of Long), to As Nullable(Of Long), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryIdsAsync : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetEntryIdsAsync : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="codeTransparencyClient.GetEntryIdsAsync (from, to, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="to" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="from"> Starting Transaction Id. </param>
        <param name="to"> Ending Transaction Id. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Historical query to get a list of entries of a given range
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIdsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryIdsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

await foreach (BinaryData item in client.GetEntryIdsAsync(null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetEntryIdsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

await foreach (BinaryData item in client.GetEntryIdsAsync(1234L, 1234L, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryIdsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;string&gt; GetEntryIdsAsync (long? from = default, long? to = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;string&gt; GetEntryIdsAsync(valuetype System.Nullable`1&lt;int64&gt; from, valuetype System.Nullable`1&lt;int64&gt; to, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryIdsAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryIdsAsync (Optional from As Nullable(Of Long) = Nothing, Optional to As Nullable(Of Long) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryIdsAsync : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;string&gt;&#xA;override this.GetEntryIdsAsync : Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;string&gt;" Usage="codeTransparencyClient.GetEntryIdsAsync (from, to, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="to" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="from"> Starting Transaction Id. </param>
        <param name="to"> Ending Transaction Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Historical query to get a list of entries of a given range. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEntryIdsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

await foreach (string item in client.GetEntryIdsAsync())
{
}
]]></code>
This sample shows how to call GetEntryIdsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

await foreach (string item in client.GetEntryIdsAsync(from: 1234L, to: 1234L))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryReceipt">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntryReceipt (string entryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntryReceipt(string entryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceipt(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryReceipt (entryId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntryReceipt : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntryReceipt : string * Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetEntryReceipt (entryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the receipt of an entry given a specific entry id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceipt(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryReceipt and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryReceipt("<entryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntryReceipt with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryReceipt("<entryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryReceipt">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetEntryReceipt (string entryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetEntryReceipt(string entryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceipt(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryReceipt (entryId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryReceipt : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetEntryReceipt : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="codeTransparencyClient.GetEntryReceipt (entryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the receipt of an entry given a specific entry id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntryReceipt.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = client.GetEntryReceipt("<entryId>");
]]></code>
This sample shows how to call GetEntryReceipt with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = client.GetEntryReceipt("<entryId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryReceiptAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntryReceiptAsync (string entryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntryReceiptAsync(string entryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceiptAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryReceiptAsync (entryId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryReceiptAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntryReceiptAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetEntryReceiptAsync (entryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the receipt of an entry given a specific entry id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceiptAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryReceiptAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryReceiptAsync("<entryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetEntryReceiptAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryReceiptAsync("<entryId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryReceiptAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetEntryReceiptAsync (string entryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetEntryReceiptAsync(string entryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryReceiptAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryReceiptAsync (entryId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetEntryReceiptAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetEntryReceiptAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="codeTransparencyClient.GetEntryReceiptAsync (entryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="entryId"> ID of the entry to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the receipt of an entry given a specific entry id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="entryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntryReceiptAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = await client.GetEntryReceiptAsync("<entryId>");
]]></code>
This sample shows how to call GetEntryReceiptAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<BinaryData> response = await client.GetEntryReceiptAsync("<entryId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntryStatus (string operationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntryStatus(string operationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatus(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatus (operationId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatus : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntryStatus : string * Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetEntryStatus (operationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationId"> ID of the operation to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status the entry operation
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatus(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryStatus("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetEntryStatus with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryStatus("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entryId").ToString());
Console.WriteLine(result.GetProperty("error").ToString());
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt; GetEntryStatus (string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.GetOperationResult&gt; GetEntryStatus(string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatus(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatus (operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GetOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&#xA;override this.GetEntryStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;" Usage="codeTransparencyClient.GetEntryStatus (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> ID of the operation to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the status the entry operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntryStatus.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<GetOperationResult> response = client.GetEntryStatus("<operationId>");
]]></code>
This sample shows how to call GetEntryStatus with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<GetOperationResult> response = client.GetEntryStatus("<operationId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntryStatusAsync (string operationId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntryStatusAsync(string operationId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatusAsync (operationId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntryStatusAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetEntryStatusAsync (operationId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="operationId"> ID of the operation to retrieve. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status the entry operation
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryStatusAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code>
This sample shows how to call GetEntryStatusAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryStatusAsync("<operationId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("entryId").ToString());
Console.WriteLine(result.GetProperty("error").ToString());
Console.WriteLine(result.GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt; GetEntryStatusAsync (string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.GetOperationResult&gt;&gt; GetEntryStatusAsync(string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatusAsync (operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GetOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;&#xA;override this.GetEntryStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;" Usage="codeTransparencyClient.GetEntryStatusAsync (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.GetOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> ID of the operation to retrieve. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the status the entry operation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntryStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<GetOperationResult> response = await client.GetEntryStatusAsync("<operationId>");
]]></code>
This sample shows how to call GetEntryStatusAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<GetOperationResult> response = await client.GetEntryStatusAsync("<operationId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntryStatuses (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntryStatuses(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatuses(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatuses (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatuses : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntryStatuses : Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetEntryStatuses context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status of all entries operations
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatuses(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryStatuses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryStatuses(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
]]></code>
This sample shows how to call GetEntryStatuses with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetEntryStatuses(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("entryId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("error").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt; GetEntryStatuses (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ListOperationResult&gt; GetEntryStatuses(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatuses(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatuses (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ListOperationResult)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatuses : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;&#xA;override this.GetEntryStatuses : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;" Usage="codeTransparencyClient.GetEntryStatuses cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the status of all entries operations. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEntryStatuses.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ListOperationResult> response = client.GetEntryStatuses();
]]></code>
This sample shows how to call GetEntryStatuses with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ListOperationResult> response = client.GetEntryStatuses();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntryStatusesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntryStatusesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatusesAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatusesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntryStatusesAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetEntryStatusesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the status of all entries operations
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusesAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntryStatusesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryStatusesAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
]]></code>
This sample shows how to call GetEntryStatusesAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetEntryStatusesAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("entryId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("error").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("operationId").ToString());
Console.WriteLine(result.GetProperty("operations")[0].GetProperty("status").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntryStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;&gt; GetEntryStatusesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ListOperationResult&gt;&gt; GetEntryStatusesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetEntryStatusesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntryStatusesAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ListOperationResult))" />
      <MemberSignature Language="F#" Value="abstract member GetEntryStatusesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;&gt;&#xA;override this.GetEntryStatusesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;&gt;" Usage="codeTransparencyClient.GetEntryStatusesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ListOperationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get the status of all entries operations. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetEntryStatusesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ListOperationResult> response = await client.GetEntryStatusesAsync();
]]></code>
This sample shows how to call GetEntryStatusesAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ListOperationResult> response = await client.GetEntryStatusesAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetParameters (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetParameters(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParameters(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetParameters (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetParameters : Azure.RequestContext -&gt; Azure.Response" Usage="codeTransparencyClient.GetParameters context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get service parameters
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParameters(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetParameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetParameters(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
Console.WriteLine(result.GetProperty("serviceId").ToString());
Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
]]></code>
This sample shows how to call GetParameters with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = client.GetParameters(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
Console.WriteLine(result.GetProperty("serviceId").ToString());
Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt; GetParameters (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ParametersResult&gt; GetParameters(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParameters(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetParameters (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ParametersResult)" />
      <MemberSignature Language="F#" Value="abstract member GetParameters : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;&#xA;override this.GetParameters : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;" Usage="codeTransparencyClient.GetParameters cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get service parameters. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetParameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ParametersResult> response = client.GetParameters();
]]></code>
This sample shows how to call GetParameters with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ParametersResult> response = client.GetParameters();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetParametersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetParametersAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetParametersAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParametersAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetParametersAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetParametersAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetParametersAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="codeTransparencyClient.GetParametersAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get service parameters
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParametersAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetParametersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetParametersAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
Console.WriteLine(result.GetProperty("serviceId").ToString());
Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
]]></code>
This sample shows how to call GetParametersAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response response = await client.GetParametersAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("serviceCertificate").ToString());
Console.WriteLine(result.GetProperty("serviceId").ToString());
Console.WriteLine(result.GetProperty("signatureAlgorithm").ToString());
Console.WriteLine(result.GetProperty("treeAlgorithm").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetParametersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;&gt; GetParametersAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Security.CodeTransparency.ParametersResult&gt;&gt; GetParametersAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.CodeTransparency.CodeTransparencyClient.GetParametersAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetParametersAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ParametersResult))" />
      <MemberSignature Language="F#" Value="abstract member GetParametersAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;&gt;&#xA;override this.GetParametersAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;&gt;" Usage="codeTransparencyClient.GetParametersAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Security.CodeTransparency.ParametersResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get service parameters. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetParametersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ParametersResult> response = await client.GetParametersAsync();
]]></code>
This sample shows how to call GetParametersAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
CodeTransparencyClient client = new CodeTransparencyClient(endpoint, credential);

Response<ParametersResult> response = await client.GetParametersAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Security.CodeTransparency.CodeTransparencyClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Security.CodeTransparency.CodeTransparencyClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.CodeTransparency</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
