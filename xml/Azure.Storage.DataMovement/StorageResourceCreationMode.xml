<Type Name="StorageResourceCreationMode" FullName="Azure.Storage.DataMovement.StorageResourceCreationMode">
  <TypeSignature Language="C#" Value="public enum StorageResourceCreationMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed StorageResourceCreationMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.DataMovement.StorageResourceCreationMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum StorageResourceCreationMode" />
  <TypeSignature Language="F#" Value="type StorageResourceCreationMode = " />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.DataMovement</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
    <AssemblyVersion>12.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
            Defines the behavior when a transfer resource already exists.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="Default" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Azure.Storage.DataMovement.StorageResourceCreationMode Default = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.DataMovement.StorageResourceCreationMode.Default" />
      <MemberSignature Language="VB.NET" Value="Default" />
      <MemberSignature Language="F#" Value="Default = 0" Usage="Azure.Storage.DataMovement.StorageResourceCreationMode.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.DataMovement.StorageResourceCreationMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
            The default value. This will be <see cref="F:Azure.Storage.DataMovement.StorageResourceCreationMode.FailIfExists" /> or, when resuming a transfer, it
            will use the value that was used when first starting the transfer. Any other value will override
            the behavior on resume.
            <para />
            NOTE: If a transfer was paused/stopped before all resources were enumerated, any unenumerated
            resource will use the value of <see cref="F:Azure.Storage.DataMovement.StorageResourceCreationMode.FailIfExists" /> on resume.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="FailIfExists">
      <MemberSignature Language="C#" Value="FailIfExists" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Azure.Storage.DataMovement.StorageResourceCreationMode FailIfExists = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.DataMovement.StorageResourceCreationMode.FailIfExists" />
      <MemberSignature Language="VB.NET" Value="FailIfExists" />
      <MemberSignature Language="F#" Value="FailIfExists = 1" Usage="Azure.Storage.DataMovement.StorageResourceCreationMode.FailIfExists" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.DataMovement.StorageResourceCreationMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
            If the resource already exists in the destination path, a failure will be thrown.
            <para />
            The value for <see cref="P:Azure.Storage.DataMovement.TransferManagerOptions.ErrorMode" /> will determine if
            the transfer continues after the failure or not.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="OverwriteIfExists">
      <MemberSignature Language="C#" Value="OverwriteIfExists" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Azure.Storage.DataMovement.StorageResourceCreationMode OverwriteIfExists = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.DataMovement.StorageResourceCreationMode.OverwriteIfExists" />
      <MemberSignature Language="VB.NET" Value="OverwriteIfExists" />
      <MemberSignature Language="F#" Value="OverwriteIfExists = 2" Usage="Azure.Storage.DataMovement.StorageResourceCreationMode.OverwriteIfExists" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.DataMovement.StorageResourceCreationMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
            Overwrites the resource if it already exists. No error will be thrown.
            </summary>
      </Docs>
    </Member>
    <Member MemberName="SkipIfExists">
      <MemberSignature Language="C#" Value="SkipIfExists" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Azure.Storage.DataMovement.StorageResourceCreationMode SkipIfExists = int32(3)" />
      <MemberSignature Language="DocId" Value="F:Azure.Storage.DataMovement.StorageResourceCreationMode.SkipIfExists" />
      <MemberSignature Language="VB.NET" Value="SkipIfExists" />
      <MemberSignature Language="F#" Value="SkipIfExists = 3" Usage="Azure.Storage.DataMovement.StorageResourceCreationMode.SkipIfExists" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.DataMovement</AssemblyName>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.DataMovement.StorageResourceCreationMode</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>
             If the resource already exists in the destination path, no failure will be thrown.
             The resource will simply be skipped over and the transfer will continue.
            
             If ErrorHandlingOptions.StopOnAnyFailures is set, the resource will still be skipped.
             </summary>
      </Docs>
    </Member>
  </Members>
</Type>
