<Type Name="PurviewResourceSetRule" FullName="Azure.Analytics.Purview.Account.PurviewResourceSetRule">
  <TypeSignature Language="C#" Value="public class PurviewResourceSetRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PurviewResourceSetRule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Account.PurviewResourceSetRule" />
  <TypeSignature Language="VB.NET" Value="Public Class PurviewResourceSetRule" />
  <TypeSignature Language="F#" Value="type PurviewResourceSetRule = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The PurviewResourceSetRule sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PurviewResourceSetRule ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of PurviewResourceSetRule for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateResourceSetRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdateResourceSetRule (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdateResourceSetRule(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.CreateOrUpdateResourceSetRule(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateResourceSetRule (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateResourceSetRule : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdateResourceSetRule : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="purviewResourceSetRule.CreateOrUpdateResourceSetRule (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an resource set config. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code>
            
            Response Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateResourceSetRule and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            var data = new {};
            
            Response response = client.CreateOrUpdateResourceSetRule(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call CreateOrUpdateResourceSetRule with all request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            var data = new {
                advancedResourceSet = new {
                    modifiedAt = "2022-05-10T18:57:31.2311892Z",
                    resourceSetProcessing = "Default",
                },
                pathPatternConfig = new {
                    acceptedPatterns = new[] {
                        new {
                            createdBy = "<createdBy>",
                            filterType = "Pattern",
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            path = "<path>",
                        }
                    },
                    complexReplacers = new[] {
                        new {
                            createdBy = "<createdBy>",
                            description = "<description>",
                            disabled = true,
                            disableRecursiveReplacerApplication = true,
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            typeName = "<typeName>",
                        }
                    },
                    createdBy = "<createdBy>",
                    enableDefaultPatterns = true,
                    lastUpdatedTimestamp = 1234L,
                    modifiedBy = "<modifiedBy>",
                    normalizationRules = new[] {
                        new {
                            description = "<description>",
                            disabled = true,
                            dynamicReplacement = true,
                            entityTypes = new[] {
                                "<String>"
                            },
                            lastUpdatedTimestamp = 1234L,
                            name = "<name>",
                            regex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            replaceWith = "<replaceWith>",
                            version = 123.45d,
                        }
                    },
                    regexReplacers = new[] {
                        new {
                            condition = "<condition>",
                            createdBy = "<createdBy>",
                            description = "<description>",
                            disabled = true,
                            disableRecursiveReplacerApplication = true,
                            doNotReplaceRegex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            regex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            replaceWith = "<replaceWith>",
                        }
                    },
                    rejectedPatterns = new[] {
                        new {
                            createdBy = "<createdBy>",
                            filterType = "Pattern",
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            path = "<path>",
                        }
                    },
                    scopedRules = new[] {
                        new {
                            bindingUrl = "<bindingUrl>",
                            rules = new[] {
                                new {
                                    displayName = "<displayName>",
                                    isResourceSet = true,
                                    lastUpdatedTimestamp = 1234L,
                                    name = "<name>",
                                    qualifiedName = "<qualifiedName>",
                                }
                            },
                            storeType = "<storeType>",
                        }
                    },
                    version = 1234,
                },
            };
            
            Response response = client.CreateOrUpdateResourceSetRule(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateResourceSetRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateResourceSetRuleAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateResourceSetRuleAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.CreateOrUpdateResourceSetRuleAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateResourceSetRuleAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateResourceSetRuleAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateResourceSetRuleAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewResourceSetRule.CreateOrUpdateResourceSetRuleAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Creates or updates an resource set config. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code>
            
            Response Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateResourceSetRuleAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            var data = new {};
            
            Response response = await client.CreateOrUpdateResourceSetRuleAsync(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call CreateOrUpdateResourceSetRuleAsync with all request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            var data = new {
                advancedResourceSet = new {
                    modifiedAt = "2022-05-10T18:57:31.2311892Z",
                    resourceSetProcessing = "Default",
                },
                pathPatternConfig = new {
                    acceptedPatterns = new[] {
                        new {
                            createdBy = "<createdBy>",
                            filterType = "Pattern",
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            path = "<path>",
                        }
                    },
                    complexReplacers = new[] {
                        new {
                            createdBy = "<createdBy>",
                            description = "<description>",
                            disabled = true,
                            disableRecursiveReplacerApplication = true,
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            typeName = "<typeName>",
                        }
                    },
                    createdBy = "<createdBy>",
                    enableDefaultPatterns = true,
                    lastUpdatedTimestamp = 1234L,
                    modifiedBy = "<modifiedBy>",
                    normalizationRules = new[] {
                        new {
                            description = "<description>",
                            disabled = true,
                            dynamicReplacement = true,
                            entityTypes = new[] {
                                "<String>"
                            },
                            lastUpdatedTimestamp = 1234L,
                            name = "<name>",
                            regex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            replaceWith = "<replaceWith>",
                            version = 123.45d,
                        }
                    },
                    regexReplacers = new[] {
                        new {
                            condition = "<condition>",
                            createdBy = "<createdBy>",
                            description = "<description>",
                            disabled = true,
                            disableRecursiveReplacerApplication = true,
                            doNotReplaceRegex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            regex = new {
                                maxDigits = 1234,
                                maxLetters = 1234,
                                minDashes = 1234,
                                minDigits = 1234,
                                minDigitsOrLetters = 1234,
                                minDots = 1234,
                                minHex = 1234,
                                minLetters = 1234,
                                minUnderscores = 1234,
                                options = 1234,
                                regexStr = "<regexStr>",
                            },
                            replaceWith = "<replaceWith>",
                        }
                    },
                    rejectedPatterns = new[] {
                        new {
                            createdBy = "<createdBy>",
                            filterType = "Pattern",
                            lastUpdatedTimestamp = 1234L,
                            modifiedBy = "<modifiedBy>",
                            name = "<name>",
                            path = "<path>",
                        }
                    },
                    scopedRules = new[] {
                        new {
                            bindingUrl = "<bindingUrl>",
                            rules = new[] {
                                new {
                                    displayName = "<displayName>",
                                    isResourceSet = true,
                                    lastUpdatedTimestamp = 1234L,
                                    name = "<name>",
                                    qualifiedName = "<qualifiedName>",
                                }
                            },
                            storeType = "<storeType>",
                        }
                    },
                    version = 1234,
                },
            };
            
            Response response = await client.CreateOrUpdateResourceSetRuleAsync(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteResourceSetRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteResourceSetRule (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteResourceSetRule(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.DeleteResourceSetRule(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteResourceSetRule (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteResourceSetRule : Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteResourceSetRule : Azure.RequestContext -&gt; Azure.Response" Usage="purviewResourceSetRule.DeleteResourceSetRule context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteResourceSetRule.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            Response response = client.DeleteResourceSetRule();
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteResourceSetRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteResourceSetRuleAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteResourceSetRuleAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.DeleteResourceSetRuleAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteResourceSetRuleAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteResourceSetRuleAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteResourceSetRuleAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewResourceSetRule.DeleteResourceSetRuleAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Deletes a ResourceSetRuleConfig resource. </summary>
        <returns> The response returned from the service. </returns>
        <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: string,
                details: [
                  {
                    code: string,
                    details: [ErrorModel],
                    message: string,
                    target: string
                  }
                ],
                message: string,
                target: string
              }
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteResourceSetRuleAsync.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            Response response = await client.DeleteResourceSetRuleAsync();
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetResourceSetRule (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetResourceSetRule(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.GetResourceSetRule(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRule (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRule : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetResourceSetRule : Azure.RequestContext -&gt; Azure.Response" Usage="purviewResourceSetRule.GetResourceSetRule context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a resource set config service model. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetResourceSetRule and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            Response response = client.GetResourceSetRule();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetResourceSetRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetResourceSetRuleAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetResourceSetRuleAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Account.PurviewResourceSetRule.GetResourceSetRuleAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSetRuleAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSetRuleAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetResourceSetRuleAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="purviewResourceSetRule.GetResourceSetRuleAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get a resource set config service model. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>ResourceSetRuleConfig</c>:
            <code>{
              advancedResourceSet: {
                modifiedAt: string (ISO 8601 Format), # Optional. Date at which ResourceSetProcessing property of the account is updated.
                resourceSetProcessing: "Default" | "Advanced", # Optional. The advanced resource property of the account.
              }, # Optional. Gets or sets the advanced resource set property of the account.
              name: string, # Optional. The name of the rule
              pathPatternConfig: {
                acceptedPatterns: [
                  {
                    createdBy: string, # Optional.
                    filterType: "Pattern" | "Regex", # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    path: string, # Required.
                  }
                ], # Optional.
                complexReplacers: [
                  {
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Optional.
                    typeName: string, # Optional.
                  }
                ], # Optional.
                createdBy: string, # Required.
                enableDefaultPatterns: boolean, # Required.
                lastUpdatedTimestamp: number, # Optional.
                modifiedBy: string, # Optional.
                normalizationRules: [
                  {
                    description: string, # Optional.
                    disabled: boolean, # Optional.
                    dynamicReplacement: boolean, # Optional.
                    entityTypes: [string], # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    name: string, # Optional.
                    regex: {
                      maxDigits: number, # Optional.
                      maxLetters: number, # Optional.
                      minDashes: number, # Optional.
                      minDigits: number, # Optional.
                      minDigitsOrLetters: number, # Optional.
                      minDots: number, # Optional.
                      minHex: number, # Optional.
                      minLetters: number, # Optional.
                      minUnderscores: number, # Optional.
                      options: number, # Optional.
                      regexStr: string, # Optional.
                    }, # Optional.
                    replaceWith: string, # Optional.
                    version: number, # Optional.
                  }
                ], # Optional.
                regexReplacers: [
                  {
                    condition: string, # Optional.
                    createdBy: string, # Optional.
                    description: string, # Optional.
                    disabled: boolean, # Required.
                    disableRecursiveReplacerApplication: boolean, # Optional.
                    doNotReplaceRegex: FastRegex, # Optional.
                    lastUpdatedTimestamp: number, # Optional.
                    modifiedBy: string, # Optional.
                    name: string, # Required.
                    regex: FastRegex, # Optional.
                    replaceWith: string, # Optional.
                  }
                ], # Optional.
                rejectedPatterns: [Filter], # Optional.
                scopedRules: [
                  {
                    bindingUrl: string, # Required.
                    rules: [
                      {
                        displayName: string, # Optional.
                        isResourceSet: boolean, # Optional.
                        lastUpdatedTimestamp: number, # Optional.
                        name: string, # Optional.
                        qualifiedName: string, # Required.
                      }
                    ], # Optional.
                    storeType: string, # Required.
                  }
                ], # Optional.
                version: number, # Optional.
              }, # Optional. The configuration rules for path pattern extraction.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetResourceSetRuleAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new PurviewAccountClient(endpoint, credential).GetPurviewResourceSetRuleClient();
            
            Response response = await client.GetResourceSetRuleAsync();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("modifiedAt").ToString());
            Console.WriteLine(result.GetProperty("advancedResourceSet").GetProperty("resourceSetProcessing").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("acceptedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("complexReplacers")[0].GetProperty("typeName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("enableDefaultPatterns").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("dynamicReplacement").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("entityTypes")[0].ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("normalizationRules")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("condition").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disabled").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("disableRecursiveReplacerApplication").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("doNotReplaceRegex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("maxLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDashes").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigits").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDigitsOrLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minDots").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minHex").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minLetters").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("minUnderscores").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("options").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("regex").GetProperty("regexStr").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("regexReplacers")[0].GetProperty("replaceWith").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("filterType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("rejectedPatterns")[0].GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("bindingUrl").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("isResourceSet").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("lastUpdatedTimestamp").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("rules")[0].GetProperty("qualifiedName").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("scopedRules")[0].GetProperty("storeType").ToString());
            Console.WriteLine(result.GetProperty("pathPatternConfig").GetProperty("version").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Account.PurviewResourceSetRule.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Account.PurviewResourceSetRule.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Account</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
