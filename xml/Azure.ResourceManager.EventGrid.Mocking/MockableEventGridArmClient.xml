<Type Name="MockableEventGridArmClient" FullName="Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient">
  <TypeSignature Language="C#" Value="public class MockableEventGridArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableEventGridArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableEventGridArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableEventGridArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableEventGridArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaCertificateResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.CaCertificateResource GetCaCertificateResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.CaCertificateResource GetCaCertificateResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetCaCertificateResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCaCertificateResource (id As ResourceIdentifier) As CaCertificateResource" />
      <MemberSignature Language="F#" Value="abstract member GetCaCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.CaCertificateResource&#xA;override this.GetCaCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.CaCertificateResource" Usage="mockableEventGridArmClient.GetCaCertificateResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.CaCertificateResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.CaCertificateResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.CaCertificateResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.CaCertificateResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.CaCertificateResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource GetDomainEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource GetDomainEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetDomainEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDomainEventSubscriptionResource (id As ResourceIdentifier) As DomainEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetDomainEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource&#xA;override this.GetDomainEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource" Usage="mockableEventGridArmClient.GetDomainEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.DomainEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainNetworkSecurityPerimeterConfigurationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource GetDomainNetworkSecurityPerimeterConfigurationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource GetDomainNetworkSecurityPerimeterConfigurationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetDomainNetworkSecurityPerimeterConfigurationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDomainNetworkSecurityPerimeterConfigurationResource (id As ResourceIdentifier) As DomainNetworkSecurityPerimeterConfigurationResource" />
      <MemberSignature Language="F#" Value="abstract member GetDomainNetworkSecurityPerimeterConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource&#xA;override this.GetDomainNetworkSecurityPerimeterConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource" Usage="mockableEventGridArmClient.GetDomainNetworkSecurityPerimeterConfigurationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.DomainNetworkSecurityPerimeterConfigurationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainTopicEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource GetDomainTopicEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource GetDomainTopicEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetDomainTopicEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDomainTopicEventSubscriptionResource (id As ResourceIdentifier) As DomainTopicEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetDomainTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource&#xA;override this.GetDomainTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource" Usage="mockableEventGridArmClient.GetDomainTopicEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.DomainTopicResource GetDomainTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.DomainTopicResource GetDomainTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetDomainTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDomainTopicResource (id As ResourceIdentifier) As DomainTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetDomainTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainTopicResource&#xA;override this.GetDomainTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.DomainTopicResource" Usage="mockableEventGridArmClient.GetDomainTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.DomainTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.DomainTopicResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.DomainTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomainPrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource GetEventGridDomainPrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource GetEventGridDomainPrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridDomainPrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomainPrivateEndpointConnectionResource (id As ResourceIdentifier) As EventGridDomainPrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomainPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource&#xA;override this.GetEventGridDomainPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource" Usage="mockableEventGridArmClient.GetEventGridDomainPrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomainPrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource GetEventGridDomainPrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource GetEventGridDomainPrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridDomainPrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomainPrivateLinkResource (id As ResourceIdentifier) As EventGridDomainPrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomainPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource&#xA;override this.GetEventGridDomainPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource" Usage="mockableEventGridArmClient.GetEventGridDomainPrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainPrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomainResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridDomainResource GetEventGridDomainResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridDomainResource GetEventGridDomainResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridDomainResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomainResource (id As ResourceIdentifier) As EventGridDomainResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomainResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainResource&#xA;override this.GetEventGridDomainResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridDomainResource" Usage="mockableEventGridArmClient.GetEventGridDomainResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridDomainResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridDomainResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespaceClientGroupResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource GetEventGridNamespaceClientGroupResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource GetEventGridNamespaceClientGroupResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridNamespaceClientGroupResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespaceClientGroupResource (id As ResourceIdentifier) As EventGridNamespaceClientGroupResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespaceClientGroupResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource&#xA;override this.GetEventGridNamespaceClientGroupResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource" Usage="mockableEventGridArmClient.GetEventGridNamespaceClientGroupResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientGroupResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespaceClientResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource GetEventGridNamespaceClientResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource GetEventGridNamespaceClientResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridNamespaceClientResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespaceClientResource (id As ResourceIdentifier) As EventGridNamespaceClientResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespaceClientResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource&#xA;override this.GetEventGridNamespaceClientResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource" Usage="mockableEventGridArmClient.GetEventGridNamespaceClientResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceClientResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespacePermissionBindingResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource GetEventGridNamespacePermissionBindingResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource GetEventGridNamespacePermissionBindingResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridNamespacePermissionBindingResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespacePermissionBindingResource (id As ResourceIdentifier) As EventGridNamespacePermissionBindingResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespacePermissionBindingResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource&#xA;override this.GetEventGridNamespacePermissionBindingResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource" Usage="mockableEventGridArmClient.GetEventGridNamespacePermissionBindingResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespacePermissionBindingResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridNamespaceResource GetEventGridNamespaceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridNamespaceResource GetEventGridNamespaceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridNamespaceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespaceResource (id As ResourceIdentifier) As EventGridNamespaceResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceResource&#xA;override this.GetEventGridNamespaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceResource" Usage="mockableEventGridArmClient.GetEventGridNamespaceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridNamespaceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridNamespaceResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridPartnerNamespacePrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource GetEventGridPartnerNamespacePrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource GetEventGridPartnerNamespacePrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridPartnerNamespacePrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridPartnerNamespacePrivateEndpointConnectionResource (id As ResourceIdentifier) As EventGridPartnerNamespacePrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridPartnerNamespacePrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource&#xA;override this.GetEventGridPartnerNamespacePrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource" Usage="mockableEventGridArmClient.GetEventGridPartnerNamespacePrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridPartnerNamespacePrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopicPrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource GetEventGridTopicPrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource GetEventGridTopicPrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridTopicPrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopicPrivateEndpointConnectionResource (id As ResourceIdentifier) As EventGridTopicPrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopicPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource&#xA;override this.GetEventGridTopicPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource" Usage="mockableEventGridArmClient.GetEventGridTopicPrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopicPrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource GetEventGridTopicPrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource GetEventGridTopicPrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridTopicPrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopicPrivateLinkResource (id As ResourceIdentifier) As EventGridTopicPrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopicPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource&#xA;override this.GetEventGridTopicPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource" Usage="mockableEventGridArmClient.GetEventGridTopicPrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicPrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridTopicResource GetEventGridTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridTopicResource GetEventGridTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventGridTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopicResource (id As ResourceIdentifier) As EventGridTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicResource&#xA;override this.GetEventGridTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventGridTopicResource" Usage="mockableEventGridArmClient.GetEventGridTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventGridTopicResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventSubscription">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt; GetEventSubscription (Azure.Core.ResourceIdentifier scope, string eventSubscriptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt; GetEventSubscription(class Azure.Core.ResourceIdentifier scope, string eventSubscriptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventSubscription(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventSubscription (scope As ResourceIdentifier, eventSubscriptionName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of EventSubscriptionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEventSubscription : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&#xA;override this.GetEventSubscription : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;" Usage="mockableEventGridArmClient.GetEventSubscription (scope, eventSubscriptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="eventSubscriptionName"> Name of the event subscription to be found. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of an event subscription.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}</description></item><item><term>Operation Id</term><description>EventSubscriptions_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventSubscriptionResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventSubscriptionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&gt; GetEventSubscriptionAsync (Azure.Core.ResourceIdentifier scope, string eventSubscriptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&gt; GetEventSubscriptionAsync(class Azure.Core.ResourceIdentifier scope, string eventSubscriptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventSubscriptionAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventSubscriptionAsync (scope As ResourceIdentifier, eventSubscriptionName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of EventSubscriptionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetEventSubscriptionAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&gt;&#xA;override this.GetEventSubscriptionAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&gt;" Usage="mockableEventGridArmClient.GetEventSubscriptionAsync (scope, eventSubscriptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventSubscriptionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="eventSubscriptionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="eventSubscriptionName"> Name of the event subscription to be found. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of an event subscription.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}</description></item><item><term>Operation Id</term><description>EventSubscriptions_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventSubscriptionResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventSubscriptionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="eventSubscriptionName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventSubscriptionResource GetEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventSubscriptionResource GetEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventSubscriptionResource (id As ResourceIdentifier) As EventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventSubscriptionResource&#xA;override this.GetEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventSubscriptionResource" Usage="mockableEventGridArmClient.GetEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.EventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.EventSubscriptionResource.CreateResourceIdentifier(System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.EventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.EventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventSubscriptions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventSubscriptionCollection GetEventSubscriptions (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventSubscriptionCollection GetEventSubscriptions(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventSubscriptions(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventSubscriptions (scope As ResourceIdentifier) As EventSubscriptionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetEventSubscriptions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventSubscriptionCollection&#xA;override this.GetEventSubscriptions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.EventSubscriptionCollection" Usage="mockableEventGridArmClient.GetEventSubscriptions scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventSubscriptionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of EventSubscriptionResources in the ArmClient. </summary>
        <returns> An object representing collection of EventSubscriptionResources and their operations over a EventSubscriptionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventTypes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt; GetEventTypes (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt; GetEventTypes(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventTypes(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventTypes (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EventTypeUnderTopic)" />
      <MemberSignature Language="F#" Value="abstract member GetEventTypes : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;&#xA;override this.GetEventTypes : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;" Usage="mockableEventGridArmClient.GetEventTypes (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The resource identifier that the event types will be listed on. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List event types for a topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes</description></item><item><term>Operation Id</term><description>Topics_ListEventTypes</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventTypesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt; GetEventTypesAsync (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt; GetEventTypesAsync(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetEventTypesAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventTypesAsync (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EventTypeUnderTopic)" />
      <MemberSignature Language="F#" Value="abstract member GetEventTypesAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;&#xA;override this.GetEventTypesAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;" Usage="mockableEventGridArmClient.GetEventTypesAsync (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The resource identifier that the event types will be listed on. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List event types for a topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes</description></item><item><term>Operation Id</term><description>Topics_ListEventTypes</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.EventGrid.Models.EventTypeUnderTopic" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionTopic">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.ExtensionTopicResource GetExtensionTopic (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.ExtensionTopicResource GetExtensionTopic(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetExtensionTopic(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionTopic (scope As ResourceIdentifier) As ExtensionTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionTopic : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.ExtensionTopicResource&#xA;override this.GetExtensionTopic : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.ExtensionTopicResource" Usage="mockableEventGridArmClient.GetExtensionTopic scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.ExtensionTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets an object representing a ExtensionTopicResource along with the instance operations that can be performed on it in the ArmClient. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.ExtensionTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.ExtensionTopicResource GetExtensionTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.ExtensionTopicResource GetExtensionTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetExtensionTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionTopicResource (id As ResourceIdentifier) As ExtensionTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.ExtensionTopicResource&#xA;override this.GetExtensionTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.ExtensionTopicResource" Usage="mockableEventGridArmClient.GetExtensionTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.ExtensionTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.EventGrid.ExtensionTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.ExtensionTopicResource.CreateResourceIdentifier(System.String)" /> to create an <see cref="T:Azure.ResourceManager.EventGrid.ExtensionTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.ExtensionTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceTopicEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource GetNamespaceTopicEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource GetNamespaceTopicEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetNamespaceTopicEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNamespaceTopicEventSubscriptionResource (id As ResourceIdentifier) As NamespaceTopicEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetNamespaceTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource&#xA;override this.GetNamespaceTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource" Usage="mockableEventGridArmClient.GetNamespaceTopicEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.NamespaceTopicResource GetNamespaceTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.NamespaceTopicResource GetNamespaceTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetNamespaceTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNamespaceTopicResource (id As ResourceIdentifier) As NamespaceTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetNamespaceTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.NamespaceTopicResource&#xA;override this.GetNamespaceTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.NamespaceTopicResource" Usage="mockableEventGridArmClient.GetNamespaceTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.NamespaceTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.NamespaceTopicResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.NamespaceTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerConfigurationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerConfigurationResource GetPartnerConfigurationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerConfigurationResource GetPartnerConfigurationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerConfigurationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerConfigurationResource (id As ResourceIdentifier) As PartnerConfigurationResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerConfigurationResource&#xA;override this.GetPartnerConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerConfigurationResource" Usage="mockableEventGridArmClient.GetPartnerConfigurationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerConfigurationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerConfigurationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerConfigurationResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerConfigurationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerConfigurationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerDestinationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerDestinationResource GetPartnerDestinationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerDestinationResource GetPartnerDestinationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerDestinationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerDestinationResource (id As ResourceIdentifier) As PartnerDestinationResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerDestinationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerDestinationResource&#xA;override this.GetPartnerDestinationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerDestinationResource" Usage="mockableEventGridArmClient.GetPartnerDestinationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerDestinationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerDestinationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerDestinationResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerDestinationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerDestinationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespaceChannelResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource GetPartnerNamespaceChannelResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource GetPartnerNamespaceChannelResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerNamespaceChannelResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespaceChannelResource (id As ResourceIdentifier) As PartnerNamespaceChannelResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespaceChannelResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource&#xA;override this.GetPartnerNamespaceChannelResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource" Usage="mockableEventGridArmClient.GetPartnerNamespaceChannelResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceChannelResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespacePrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource GetPartnerNamespacePrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource GetPartnerNamespacePrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerNamespacePrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespacePrivateLinkResource (id As ResourceIdentifier) As PartnerNamespacePrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespacePrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource&#xA;override this.GetPartnerNamespacePrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource" Usage="mockableEventGridArmClient.GetPartnerNamespacePrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespacePrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerNamespaceResource GetPartnerNamespaceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerNamespaceResource GetPartnerNamespaceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerNamespaceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespaceResource (id As ResourceIdentifier) As PartnerNamespaceResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceResource&#xA;override this.GetPartnerNamespaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceResource" Usage="mockableEventGridArmClient.GetPartnerNamespaceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerNamespaceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerNamespaceResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerRegistrationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerRegistrationResource GetPartnerRegistrationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerRegistrationResource GetPartnerRegistrationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerRegistrationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerRegistrationResource (id As ResourceIdentifier) As PartnerRegistrationResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerRegistrationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerRegistrationResource&#xA;override this.GetPartnerRegistrationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerRegistrationResource" Usage="mockableEventGridArmClient.GetPartnerRegistrationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerRegistrationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerRegistrationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerRegistrationResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerRegistrationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerRegistrationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerTopicEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource GetPartnerTopicEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource GetPartnerTopicEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerTopicEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerTopicEventSubscriptionResource (id As ResourceIdentifier) As PartnerTopicEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource&#xA;override this.GetPartnerTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource" Usage="mockableEventGridArmClient.GetPartnerTopicEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerTopicResource GetPartnerTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerTopicResource GetPartnerTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetPartnerTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerTopicResource (id As ResourceIdentifier) As PartnerTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerTopicResource&#xA;override this.GetPartnerTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.PartnerTopicResource" Usage="mockableEventGridArmClient.GetPartnerTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.PartnerTopicResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTopicEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource GetSystemTopicEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource GetSystemTopicEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetSystemTopicEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSystemTopicEventSubscriptionResource (id As ResourceIdentifier) As SystemTopicEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetSystemTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource&#xA;override this.GetSystemTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource" Usage="mockableEventGridArmClient.GetSystemTopicEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTopicResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.SystemTopicResource GetSystemTopicResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.SystemTopicResource GetSystemTopicResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetSystemTopicResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSystemTopicResource (id As ResourceIdentifier) As SystemTopicResource" />
      <MemberSignature Language="F#" Value="abstract member GetSystemTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.SystemTopicResource&#xA;override this.GetSystemTopicResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.SystemTopicResource" Usage="mockableEventGridArmClient.GetSystemTopicResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.SystemTopicResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.SystemTopicResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.SystemTopicResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicEventSubscriptionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource GetTopicEventSubscriptionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource GetTopicEventSubscriptionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetTopicEventSubscriptionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicEventSubscriptionResource (id As ResourceIdentifier) As TopicEventSubscriptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource&#xA;override this.GetTopicEventSubscriptionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource" Usage="mockableEventGridArmClient.GetTopicEventSubscriptionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.TopicEventSubscriptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicNetworkSecurityPerimeterConfigurationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource GetTopicNetworkSecurityPerimeterConfigurationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource GetTopicNetworkSecurityPerimeterConfigurationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetTopicNetworkSecurityPerimeterConfigurationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicNetworkSecurityPerimeterConfigurationResource (id As ResourceIdentifier) As TopicNetworkSecurityPerimeterConfigurationResource" />
      <MemberSignature Language="F#" Value="abstract member GetTopicNetworkSecurityPerimeterConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource&#xA;override this.GetTopicNetworkSecurityPerimeterConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource" Usage="mockableEventGridArmClient.GetTopicNetworkSecurityPerimeterConfigurationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.TopicNetworkSecurityPerimeterConfigurationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicSpaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.TopicSpaceResource GetTopicSpaceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.TopicSpaceResource GetTopicSpaceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetTopicSpaceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicSpaceResource (id As ResourceIdentifier) As TopicSpaceResource" />
      <MemberSignature Language="F#" Value="abstract member GetTopicSpaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicSpaceResource&#xA;override this.GetTopicSpaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicSpaceResource" Usage="mockableEventGridArmClient.GetTopicSpaceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.TopicSpaceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.TopicSpaceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.TopicSpaceResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.TopicSpaceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.TopicSpaceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicTypeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.TopicTypeResource GetTopicTypeResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.TopicTypeResource GetTopicTypeResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetTopicTypeResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicTypeResource (id As ResourceIdentifier) As TopicTypeResource" />
      <MemberSignature Language="F#" Value="abstract member GetTopicTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicTypeResource&#xA;override this.GetTopicTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.TopicTypeResource" Usage="mockableEventGridArmClient.GetTopicTypeResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.TopicTypeResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.TopicTypeResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.TopicTypeResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.TopicTypeResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.TopicTypeResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVerifiedPartnerResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.VerifiedPartnerResource GetVerifiedPartnerResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.VerifiedPartnerResource GetVerifiedPartnerResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridArmClient.GetVerifiedPartnerResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVerifiedPartnerResource (id As ResourceIdentifier) As VerifiedPartnerResource" />
      <MemberSignature Language="F#" Value="abstract member GetVerifiedPartnerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.VerifiedPartnerResource&#xA;override this.GetVerifiedPartnerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.EventGrid.VerifiedPartnerResource" Usage="mockableEventGridArmClient.GetVerifiedPartnerResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.VerifiedPartnerResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.EventGrid.VerifiedPartnerResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.EventGrid.VerifiedPartnerResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.EventGrid.VerifiedPartnerResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.VerifiedPartnerResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
