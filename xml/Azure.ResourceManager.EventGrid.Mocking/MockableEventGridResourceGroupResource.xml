<Type Name="MockableEventGridResourceGroupResource" FullName="Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource">
  <TypeSignature Language="C#" Value="public class MockableEventGridResourceGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableEventGridResourceGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableEventGridResourceGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableEventGridResourceGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ResourceGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableEventGridResourceGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomain">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt; GetEventGridDomain (string domainName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridDomainResource&gt; GetEventGridDomain(string domainName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridDomain(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomain (domainName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of EventGridDomainResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomain : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&#xA;override this.GetEventGridDomain : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridDomain (domainName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="domainName"> Name of the domain. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a domain.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}</description></item><item><term>Operation Id</term><description>Domains_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domainName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="domainName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomainAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&gt; GetEventGridDomainAsync (string domainName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&gt; GetEventGridDomainAsync(string domainName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridDomainAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomainAsync (domainName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of EventGridDomainResource))" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomainAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&gt;&#xA;override this.GetEventGridDomainAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridDomainAsync (domainName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridDomainResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="domainName"> Name of the domain. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a domain.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}</description></item><item><term>Operation Id</term><description>Domains_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridDomainResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="domainName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="domainName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridDomains">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridDomainCollection GetEventGridDomains ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridDomainCollection GetEventGridDomains() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridDomains" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridDomains () As EventGridDomainCollection" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridDomains : unit -&gt; Azure.ResourceManager.EventGrid.EventGridDomainCollection&#xA;override this.GetEventGridDomains : unit -&gt; Azure.ResourceManager.EventGrid.EventGridDomainCollection" Usage="mockableEventGridResourceGroupResource.GetEventGridDomains " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridDomainCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of EventGridDomainResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of EventGridDomainResources and their operations over a EventGridDomainResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt; GetEventGridNamespace (string namespaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt; GetEventGridNamespace(string namespaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridNamespace(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespace (namespaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of EventGridNamespaceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespace : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&#xA;override this.GetEventGridNamespace : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridNamespace (namespaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="namespaceName"> Name of the namespace. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a namespace.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}</description></item><item><term>Operation Id</term><description>Namespaces_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="namespaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="namespaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&gt; GetEventGridNamespaceAsync (string namespaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&gt; GetEventGridNamespaceAsync(string namespaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridNamespaceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespaceAsync (namespaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of EventGridNamespaceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespaceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&gt;&#xA;override this.GetEventGridNamespaceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridNamespaceAsync (namespaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridNamespaceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="namespaceName"> Name of the namespace. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a namespace.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}</description></item><item><term>Operation Id</term><description>Namespaces_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridNamespaceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="namespaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="namespaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridNamespaces">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridNamespaceCollection GetEventGridNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridNamespaceCollection GetEventGridNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridNamespaces () As EventGridNamespaceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridNamespaces : unit -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceCollection&#xA;override this.GetEventGridNamespaces : unit -&gt; Azure.ResourceManager.EventGrid.EventGridNamespaceCollection" Usage="mockableEventGridResourceGroupResource.GetEventGridNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridNamespaceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of EventGridNamespaceResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of EventGridNamespaceResources and their operations over a EventGridNamespaceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopic">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt; GetEventGridTopic (string topicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridTopicResource&gt; GetEventGridTopic(string topicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridTopic(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopic (topicName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of EventGridTopicResource)" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&#xA;override this.GetEventGridTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridTopic (topicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Name of the topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}</description></item><item><term>Operation Id</term><description>Topics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopicAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&gt; GetEventGridTopicAsync (string topicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&gt; GetEventGridTopicAsync(string topicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridTopicAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopicAsync (topicName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of EventGridTopicResource))" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&gt;&#xA;override this.GetEventGridTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetEventGridTopicAsync (topicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.EventGridTopicResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicName"> Name of the topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}</description></item><item><term>Operation Id</term><description>Topics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.EventGridTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEventGridTopics">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.EventGridTopicCollection GetEventGridTopics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.EventGridTopicCollection GetEventGridTopics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetEventGridTopics" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEventGridTopics () As EventGridTopicCollection" />
      <MemberSignature Language="F#" Value="abstract member GetEventGridTopics : unit -&gt; Azure.ResourceManager.EventGrid.EventGridTopicCollection&#xA;override this.GetEventGridTopics : unit -&gt; Azure.ResourceManager.EventGrid.EventGridTopicCollection" Usage="mockableEventGridResourceGroupResource.GetEventGridTopics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.EventGridTopicCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of EventGridTopicResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of EventGridTopicResources and their operations over a EventGridTopicResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlobalEventSubscriptionsDataForTopicType">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetGlobalEventSubscriptionsDataForTopicType (string topicTypeName, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetGlobalEventSubscriptionsDataForTopicType(string topicTypeName, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetGlobalEventSubscriptionsDataForTopicType(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlobalEventSubscriptionsDataForTopicType (topicTypeName As String, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetGlobalEventSubscriptionsDataForTopicType : string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetGlobalEventSubscriptionsDataForTopicType : string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetGlobalEventSubscriptionsDataForTopicType (topicTypeName, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all global event subscriptions under a resource group for a specific topic type.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions
            Operation Id: EventSubscriptions_ListGlobalByResourceGroupForTopicType
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlobalEventSubscriptionsDataForTopicTypeAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetGlobalEventSubscriptionsDataForTopicTypeAsync (string topicTypeName, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetGlobalEventSubscriptionsDataForTopicTypeAsync(string topicTypeName, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetGlobalEventSubscriptionsDataForTopicTypeAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlobalEventSubscriptionsDataForTopicTypeAsync (topicTypeName As String, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetGlobalEventSubscriptionsDataForTopicTypeAsync : string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetGlobalEventSubscriptionsDataForTopicTypeAsync : string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetGlobalEventSubscriptionsDataForTopicTypeAsync (topicTypeName, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all global event subscriptions under a resource group for a specific topic type.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions
            Operation Id: EventSubscriptions_ListGlobalByResourceGroupForTopicType
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerConfiguration">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerConfigurationResource GetPartnerConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerConfigurationResource GetPartnerConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerConfiguration () As PartnerConfigurationResource" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerConfiguration : unit -&gt; Azure.ResourceManager.EventGrid.PartnerConfigurationResource&#xA;override this.GetPartnerConfiguration : unit -&gt; Azure.ResourceManager.EventGrid.PartnerConfigurationResource" Usage="mockableEventGridResourceGroupResource.GetPartnerConfiguration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerConfigurationResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a PartnerConfigurationResource along with the instance operations that can be performed on it in the ResourceGroupResource. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.EventGrid.PartnerConfigurationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerDestination">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt; GetPartnerDestination (string partnerDestinationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt; GetPartnerDestination(string partnerDestinationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerDestination(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerDestination (partnerDestinationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PartnerDestinationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerDestination : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&#xA;override this.GetPartnerDestination : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerDestination (partnerDestinationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerDestinationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerDestinationName"> Name of the partner destination. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner destination.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}</description></item><item><term>Operation Id</term><description>PartnerDestinations_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerDestinationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerDestinationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerDestinationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerDestinationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&gt; GetPartnerDestinationAsync (string partnerDestinationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&gt; GetPartnerDestinationAsync(string partnerDestinationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerDestinationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerDestinationAsync (partnerDestinationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PartnerDestinationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerDestinationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&gt;&#xA;override this.GetPartnerDestinationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerDestinationAsync (partnerDestinationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerDestinationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerDestinationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerDestinationName"> Name of the partner destination. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner destination.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerDestinations/{partnerDestinationName}</description></item><item><term>Operation Id</term><description>PartnerDestinations_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerDestinationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerDestinationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerDestinationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerDestinations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerDestinationCollection GetPartnerDestinations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerDestinationCollection GetPartnerDestinations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerDestinations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerDestinations () As PartnerDestinationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerDestinations : unit -&gt; Azure.ResourceManager.EventGrid.PartnerDestinationCollection&#xA;override this.GetPartnerDestinations : unit -&gt; Azure.ResourceManager.EventGrid.PartnerDestinationCollection" Usage="mockableEventGridResourceGroupResource.GetPartnerDestinations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerDestinationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of PartnerDestinationResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of PartnerDestinationResources and their operations over a PartnerDestinationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt; GetPartnerNamespace (string partnerNamespaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt; GetPartnerNamespace(string partnerNamespaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerNamespace(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespace (partnerNamespaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PartnerNamespaceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespace : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&#xA;override this.GetPartnerNamespace : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerNamespace (partnerNamespaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerNamespaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerNamespaceName"> Name of the partner namespace. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner namespace.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}</description></item><item><term>Operation Id</term><description>PartnerNamespaces_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerNamespaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerNamespaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&gt; GetPartnerNamespaceAsync (string partnerNamespaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&gt; GetPartnerNamespaceAsync(string partnerNamespaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerNamespaceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespaceAsync (partnerNamespaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PartnerNamespaceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespaceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&gt;&#xA;override this.GetPartnerNamespaceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerNamespaceAsync (partnerNamespaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerNamespaceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerNamespaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerNamespaceName"> Name of the partner namespace. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner namespace.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}</description></item><item><term>Operation Id</term><description>PartnerNamespaces_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerNamespaceResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerNamespaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerNamespaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerNamespaces">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerNamespaceCollection GetPartnerNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerNamespaceCollection GetPartnerNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerNamespaces () As PartnerNamespaceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerNamespaces : unit -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceCollection&#xA;override this.GetPartnerNamespaces : unit -&gt; Azure.ResourceManager.EventGrid.PartnerNamespaceCollection" Usage="mockableEventGridResourceGroupResource.GetPartnerNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerNamespaceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of PartnerNamespaceResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of PartnerNamespaceResources and their operations over a PartnerNamespaceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerRegistration">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt; GetPartnerRegistration (string partnerRegistrationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt; GetPartnerRegistration(string partnerRegistrationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerRegistration(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerRegistration (partnerRegistrationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PartnerRegistrationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&#xA;override this.GetPartnerRegistration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerRegistration (partnerRegistrationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerRegistrationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerRegistrationName"> Name of the partner registration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a partner registration with the specified parameters.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}</description></item><item><term>Operation Id</term><description>PartnerRegistrations_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerRegistrationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerRegistrationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerRegistrationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerRegistrationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&gt; GetPartnerRegistrationAsync (string partnerRegistrationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&gt; GetPartnerRegistrationAsync(string partnerRegistrationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerRegistrationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerRegistrationAsync (partnerRegistrationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PartnerRegistrationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&gt;&#xA;override this.GetPartnerRegistrationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerRegistrationAsync (partnerRegistrationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerRegistrationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerRegistrationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerRegistrationName"> Name of the partner registration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a partner registration with the specified parameters.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}</description></item><item><term>Operation Id</term><description>PartnerRegistrations_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerRegistrationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerRegistrationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerRegistrationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerRegistrations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerRegistrationCollection GetPartnerRegistrations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerRegistrationCollection GetPartnerRegistrations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerRegistrations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerRegistrations () As PartnerRegistrationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerRegistrations : unit -&gt; Azure.ResourceManager.EventGrid.PartnerRegistrationCollection&#xA;override this.GetPartnerRegistrations : unit -&gt; Azure.ResourceManager.EventGrid.PartnerRegistrationCollection" Usage="mockableEventGridResourceGroupResource.GetPartnerRegistrations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerRegistrationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of PartnerRegistrationResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of PartnerRegistrationResources and their operations over a PartnerRegistrationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerTopic">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt; GetPartnerTopic (string partnerTopicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerTopicResource&gt; GetPartnerTopic(string partnerTopicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerTopic(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerTopic (partnerTopicName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PartnerTopicResource)" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&#xA;override this.GetPartnerTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerTopic (partnerTopicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerTopicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerTopicName"> Name of the partner topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}</description></item><item><term>Operation Id</term><description>PartnerTopics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerTopicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerTopicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerTopicAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&gt; GetPartnerTopicAsync (string partnerTopicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&gt; GetPartnerTopicAsync(string partnerTopicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerTopicAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerTopicAsync (partnerTopicName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PartnerTopicResource))" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&gt;&#xA;override this.GetPartnerTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetPartnerTopicAsync (partnerTopicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.PartnerTopicResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partnerTopicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partnerTopicName"> Name of the partner topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a partner topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}</description></item><item><term>Operation Id</term><description>PartnerTopics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.PartnerTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="partnerTopicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="partnerTopicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartnerTopics">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.PartnerTopicCollection GetPartnerTopics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.PartnerTopicCollection GetPartnerTopics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetPartnerTopics" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartnerTopics () As PartnerTopicCollection" />
      <MemberSignature Language="F#" Value="abstract member GetPartnerTopics : unit -&gt; Azure.ResourceManager.EventGrid.PartnerTopicCollection&#xA;override this.GetPartnerTopics : unit -&gt; Azure.ResourceManager.EventGrid.PartnerTopicCollection" Usage="mockableEventGridResourceGroupResource.GetPartnerTopics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.PartnerTopicCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of PartnerTopicResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of PartnerTopicResources and their operations over a PartnerTopicResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionalEventSubscriptionsData">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsData (Azure.Core.AzureLocation location, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsData(valuetype Azure.Core.AzureLocation location, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsData(Azure.Core.AzureLocation,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegionalEventSubscriptionsData (location As AzureLocation, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetRegionalEventSubscriptionsData : Azure.Core.AzureLocation * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetRegionalEventSubscriptionsData : Azure.Core.AzureLocation * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsData (location, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> Name of the location. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all event subscriptions from the given location under a specific Azure subscription and resource group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions
            Operation Id: EventSubscriptions_ListRegionalByResourceGroup
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionalEventSubscriptionsDataAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataAsync (Azure.Core.AzureLocation location, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataAsync(valuetype Azure.Core.AzureLocation location, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataAsync(Azure.Core.AzureLocation,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegionalEventSubscriptionsDataAsync (location As AzureLocation, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetRegionalEventSubscriptionsDataAsync : Azure.Core.AzureLocation * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetRegionalEventSubscriptionsDataAsync : Azure.Core.AzureLocation * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataAsync (location, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> Name of the location. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all event subscriptions from the given location under a specific Azure subscription and resource group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions
            Operation Id: EventSubscriptions_ListRegionalByResourceGroup
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionalEventSubscriptionsDataForTopicType">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataForTopicType (Azure.Core.AzureLocation location, string topicTypeName, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataForTopicType(valuetype Azure.Core.AzureLocation location, string topicTypeName, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataForTopicType(Azure.Core.AzureLocation,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegionalEventSubscriptionsDataForTopicType (location As AzureLocation, topicTypeName As String, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetRegionalEventSubscriptionsDataForTopicType : Azure.Core.AzureLocation * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetRegionalEventSubscriptionsDataForTopicType : Azure.Core.AzureLocation * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataForTopicType (location, topicTypeName, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> Name of the location. </param>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions
            Operation Id: EventSubscriptions_ListRegionalByResourceGroupForTopicType
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionalEventSubscriptionsDataForTopicTypeAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataForTopicTypeAsync (Azure.Core.AzureLocation location, string topicTypeName, string filter = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt; GetRegionalEventSubscriptionsDataForTopicTypeAsync(valuetype Azure.Core.AzureLocation location, string topicTypeName, string filter, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataForTopicTypeAsync(Azure.Core.AzureLocation,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRegionalEventSubscriptionsDataForTopicTypeAsync (location As AzureLocation, topicTypeName As String, Optional filter As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of EventGridSubscriptionData)" />
      <MemberSignature Language="F#" Value="abstract member GetRegionalEventSubscriptionsDataForTopicTypeAsync : Azure.Core.AzureLocation * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;&#xA;override this.GetRegionalEventSubscriptionsDataForTopicTypeAsync : Azure.Core.AzureLocation * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;" Usage="mockableEventGridResourceGroupResource.GetRegionalEventSubscriptionsDataForTopicTypeAsync (location, topicTypeName, filter, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.EventGrid.EventGridSubscriptionData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> Name of the location. </param>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="filter"> The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. </param>
        <param name="top"> The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions
            Operation Id: EventSubscriptions_ListRegionalByResourceGroupForTopicType
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.EventGrid.EventGridSubscriptionData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTopic">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt; GetSystemTopic (string systemTopicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.SystemTopicResource&gt; GetSystemTopic(string systemTopicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetSystemTopic(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSystemTopic (systemTopicName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SystemTopicResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSystemTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&#xA;override this.GetSystemTopic : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;" Usage="mockableEventGridResourceGroupResource.GetSystemTopic (systemTopicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="systemTopicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="systemTopicName"> Name of the system topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a system topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}</description></item><item><term>Operation Id</term><description>SystemTopics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.SystemTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="systemTopicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="systemTopicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTopicAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&gt; GetSystemTopicAsync (string systemTopicName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&gt; GetSystemTopicAsync(string systemTopicName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetSystemTopicAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSystemTopicAsync (systemTopicName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SystemTopicResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSystemTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&gt;&#xA;override this.GetSystemTopicAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&gt;" Usage="mockableEventGridResourceGroupResource.GetSystemTopicAsync (systemTopicName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.SystemTopicResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="systemTopicName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="systemTopicName"> Name of the system topic. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a system topic.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}</description></item><item><term>Operation Id</term><description>SystemTopics_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.SystemTopicResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="systemTopicName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="systemTopicName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTopics">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.SystemTopicCollection GetSystemTopics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.SystemTopicCollection GetSystemTopics() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridResourceGroupResource.GetSystemTopics" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSystemTopics () As SystemTopicCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSystemTopics : unit -&gt; Azure.ResourceManager.EventGrid.SystemTopicCollection&#xA;override this.GetSystemTopics : unit -&gt; Azure.ResourceManager.EventGrid.SystemTopicCollection" Usage="mockableEventGridResourceGroupResource.GetSystemTopics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.SystemTopicCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SystemTopicResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of SystemTopicResources and their operations over a SystemTopicResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
