<Type Name="MockableEventGridTenantResource" FullName="Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource">
  <TypeSignature Language="C#" Value="public class MockableEventGridTenantResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableEventGridTenantResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableEventGridTenantResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableEventGridTenantResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to TenantResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableEventGridTenantResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTopicType">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt; GetTopicType (string topicTypeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.TopicTypeResource&gt; GetTopicType(string topicTypeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetTopicType(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicType (topicTypeName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TopicTypeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTopicType : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&#xA;override this.GetTopicType : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;" Usage="mockableEventGridTenantResource.GetTopicType (topicTypeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information about a topic type.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}</description></item><item><term>Operation Id</term><description>TopicTypes_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.TopicTypeResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicTypeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicTypeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTopicTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&gt; GetTopicTypeAsync (string topicTypeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&gt; GetTopicTypeAsync(string topicTypeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetTopicTypeAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicTypeAsync (topicTypeName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TopicTypeResource))" />
      <MemberSignature Language="F#" Value="abstract member GetTopicTypeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&gt;&#xA;override this.GetTopicTypeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&gt;" Usage="mockableEventGridTenantResource.GetTopicTypeAsync (topicTypeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.TopicTypeResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="topicTypeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="topicTypeName"> Name of the topic type. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get information about a topic type.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}</description></item><item><term>Operation Id</term><description>TopicTypes_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.TopicTypeResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="topicTypeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="topicTypeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTopicTypes">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.TopicTypeCollection GetTopicTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.TopicTypeCollection GetTopicTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetTopicTypes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTopicTypes () As TopicTypeCollection" />
      <MemberSignature Language="F#" Value="abstract member GetTopicTypes : unit -&gt; Azure.ResourceManager.EventGrid.TopicTypeCollection&#xA;override this.GetTopicTypes : unit -&gt; Azure.ResourceManager.EventGrid.TopicTypeCollection" Usage="mockableEventGridTenantResource.GetTopicTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.TopicTypeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of TopicTypeResources in the TenantResource. </summary>
        <returns> An object representing collection of TopicTypeResources and their operations over a TopicTypeResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVerifiedPartner">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt; GetVerifiedPartner (string verifiedPartnerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt; GetVerifiedPartner(string verifiedPartnerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetVerifiedPartner(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVerifiedPartner (verifiedPartnerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VerifiedPartnerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetVerifiedPartner : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&#xA;override this.GetVerifiedPartner : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;" Usage="mockableEventGridTenantResource.GetVerifiedPartner (verifiedPartnerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verifiedPartnerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="verifiedPartnerName"> Name of the verified partner. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a verified partner.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.EventGrid/verifiedPartners/{verifiedPartnerName}</description></item><item><term>Operation Id</term><description>VerifiedPartners_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.VerifiedPartnerResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="verifiedPartnerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="verifiedPartnerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVerifiedPartnerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&gt; GetVerifiedPartnerAsync (string verifiedPartnerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&gt; GetVerifiedPartnerAsync(string verifiedPartnerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetVerifiedPartnerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVerifiedPartnerAsync (verifiedPartnerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VerifiedPartnerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetVerifiedPartnerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&gt;&#xA;override this.GetVerifiedPartnerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&gt;" Usage="mockableEventGridTenantResource.GetVerifiedPartnerAsync (verifiedPartnerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.EventGrid.VerifiedPartnerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verifiedPartnerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="verifiedPartnerName"> Name of the verified partner. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get properties of a verified partner.
            <list type="bullet"><item><term>Request Path</term><description>/providers/Microsoft.EventGrid/verifiedPartners/{verifiedPartnerName}</description></item><item><term>Operation Id</term><description>VerifiedPartners_Get</description></item><item><term>Default Api Version</term><description>2024-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.EventGrid.VerifiedPartnerResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="verifiedPartnerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="verifiedPartnerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVerifiedPartners">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.EventGrid.VerifiedPartnerCollection GetVerifiedPartners ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.EventGrid.VerifiedPartnerCollection GetVerifiedPartners() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.EventGrid.Mocking.MockableEventGridTenantResource.GetVerifiedPartners" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVerifiedPartners () As VerifiedPartnerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetVerifiedPartners : unit -&gt; Azure.ResourceManager.EventGrid.VerifiedPartnerCollection&#xA;override this.GetVerifiedPartners : unit -&gt; Azure.ResourceManager.EventGrid.VerifiedPartnerCollection" Usage="mockableEventGridTenantResource.GetVerifiedPartners " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.EventGrid</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.EventGrid.VerifiedPartnerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of VerifiedPartnerResources in the TenantResource. </summary>
        <returns> An object representing collection of VerifiedPartnerResources and their operations over a VerifiedPartnerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
