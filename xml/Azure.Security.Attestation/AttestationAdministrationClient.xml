<Type Name="AttestationAdministrationClient" FullName="Azure.Security.Attestation.AttestationAdministrationClient">
  <TypeSignature Language="C#" Value="public class AttestationAdministrationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttestationAdministrationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Security.Attestation.AttestationAdministrationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AttestationAdministrationClient" />
  <TypeSignature Language="F#" Value="type AttestationAdministrationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Security.Attestation</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Attestation Client for the Microsoft Azure Attestation service.
            
             The Attestation client contains the implementation of the "Attest" family of MAA apis.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AttestationAdministrationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Parameterless constructor for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttestationAdministrationClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Security.Attestation.AttestationAdministrationClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Security.Attestation.AttestationAdministrationClient" Usage="new Azure.Security.Attestation.AttestationAdministrationClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">Uri for the Microsoft Azure Attestation Service Instance to use.</param>
        <param name="credential">Credentials to be used in the Client.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.Attestation.AttestationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttestationAdministrationClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Security.Attestation.AttestationClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Security.Attestation.AttestationClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.Attestation.AttestationClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As AttestationClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Security.Attestation.AttestationAdministrationClient : Uri * Azure.Core.TokenCredential * Azure.Security.Attestation.AttestationClientOptions -&gt; Azure.Security.Attestation.AttestationAdministrationClient" Usage="new Azure.Security.Attestation.AttestationAdministrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Security.Attestation.AttestationClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">Uri for the Microsoft Azure Attestation Service Instance to use.</param>
        <param name="credential">Credentials to be used in the Client.</param>
        <param name="options">
          <see cref="T:Azure.Security.Attestation.AttestationClientOptions" /> used to configure the API client.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.Attestation.AttestationClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPolicyManagementCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt; AddPolicyManagementCertificate (System.Security.Cryptography.X509Certificates.X509Certificate2 newSigningCertificate, Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyCertificatesModificationResult&gt; AddPolicyManagementCertificate(class System.Security.Cryptography.X509Certificates.X509Certificate2 newSigningCertificate, class Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.AddPolicyManagementCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddPolicyManagementCertificate (newSigningCertificate As X509Certificate2, existingSigningKey As AttestationTokenSigningKey, Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of PolicyCertificatesModificationResult)" />
      <MemberSignature Language="F#" Value="abstract member AddPolicyManagementCertificate : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&#xA;override this.AddPolicyManagementCertificate : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;" Usage="attestationAdministrationClient.AddPolicyManagementCertificate (newSigningCertificate, existingSigningKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSigningCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="existingSigningKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newSigningCertificate">The new certificate to add.</param>
        <param name="existingSigningKey">An existing key corresponding to the existing certificate.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
            Adds the specified new signing certificate to the set of policy management certificates.
            </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddPolicyManagementCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt; AddPolicyManagementCertificateAsync (System.Security.Cryptography.X509Certificates.X509Certificate2 newSigningCertificate, Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt; AddPolicyManagementCertificateAsync(class System.Security.Cryptography.X509Certificates.X509Certificate2 newSigningCertificate, class Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.AddPolicyManagementCertificateAsync(System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddPolicyManagementCertificateAsync (newSigningCertificate As X509Certificate2, existingSigningKey As AttestationTokenSigningKey, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of PolicyCertificatesModificationResult))" />
      <MemberSignature Language="F#" Value="abstract member AddPolicyManagementCertificateAsync : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;&#xA;override this.AddPolicyManagementCertificateAsync : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;" Usage="attestationAdministrationClient.AddPolicyManagementCertificateAsync (newSigningCertificate, existingSigningKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSigningCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="existingSigningKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="newSigningCertificate">The new certificate to add.</param>
        <param name="existingSigningKey">An existing key corresponding to the existing certificate.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
            Adds the specified new signing certificate to the set of policy management certificates.
            </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.Security.Attestation.AttestationAdministrationClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.Security.Attestation.AttestationAdministrationClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the URI used to communicate with the service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;string&gt; GetPolicy (Azure.Security.Attestation.AttestationType attestationType, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;string&gt; GetPolicy(valuetype Azure.Security.Attestation.AttestationType attestationType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicy(Azure.Security.Attestation.AttestationType,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolicy (attestationType As AttestationType, Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetPolicy : Azure.Security.Attestation.AttestationType * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;string&gt;&#xA;override this.GetPolicy : Azure.Security.Attestation.AttestationType * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;string&gt;" Usage="attestationAdministrationClient.GetPolicy (attestationType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">
          <see cref="T:Azure.Security.Attestation.AttestationType" /> to retrieve.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
             Retrieves the attesttion policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" />.
             </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
             This API returns the underlying attestation policy object stored in the attestation service for this <paramref name="attestationType" />.
            
             The actual service response to the API is an RFC 7519 JSON Web Token(see https://tools.ietf.org/html/rfc7519"). This token can be retrieved from <see cref="P:Azure.Security.Attestation.AttestationResponse`1.Token" />.
             For the GetPolicy API, the body of the <see cref="P:Azure.Security.Attestation.AttestationResponse`1.Token" /> is a <see cref="T:Azure.Security.Attestation.StoredAttestationPolicy" /> object, NOT a string.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;string&gt;&gt; GetPolicyAsync (Azure.Security.Attestation.AttestationType attestationType, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;string&gt;&gt; GetPolicyAsync(valuetype Azure.Security.Attestation.AttestationType attestationType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyAsync(Azure.Security.Attestation.AttestationType,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolicyAsync (attestationType As AttestationType, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of String))" />
      <MemberSignature Language="F#" Value="abstract member GetPolicyAsync : Azure.Security.Attestation.AttestationType * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;string&gt;&gt;&#xA;override this.GetPolicyAsync : Azure.Security.Attestation.AttestationType * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;string&gt;&gt;" Usage="attestationAdministrationClient.GetPolicyAsync (attestationType, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">Attestation Type to retrieve.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
             Retrieves the attesttion policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" />.
             </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
             This API returns the underlying attestation policy object stored in the attestation service for this <paramref name="attestationType" />.
            
             The actual service response to the API is an RFC 7519 JSON Web Token(see https://tools.ietf.org/html/rfc7519"). This token can be retrieved from <see cref="P:Azure.Security.Attestation.AttestationResponse`1.Token" />.
             For the GetPolicyAsync API, the body of the <see cref="P:Azure.Security.Attestation.AttestationResponse`1.Token" /> is a <see cref="T:Azure.Security.Attestation.StoredAttestationPolicy" /> object, NOT a string.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicyManagementCertificates">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt; GetPolicyManagementCertificates (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt; GetPolicyManagementCertificates(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificates(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolicyManagementCertificates (Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of IReadOnlyList(Of X509Certificate2))" />
      <MemberSignature Language="F#" Value="abstract member GetPolicyManagementCertificates : System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&#xA;override this.GetPolicyManagementCertificates : System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;" Usage="attestationAdministrationClient.GetPolicyManagementCertificates cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token used to cancel the operation.</param>
        <summary>
             Returns the set of policy management certificates currently configured for the attestation service instance.
            
             If the service instance is running in AAD mode, this list will always be empty.
             </summary>
        <returns>A set of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> objects representing the set of root certificates for policy management.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolicyManagementCertificatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&gt; GetPolicyManagementCertificatesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&gt; GetPolicyManagementCertificatesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificatesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolicyManagementCertificatesAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of IReadOnlyList(Of X509Certificate2)))" />
      <MemberSignature Language="F#" Value="abstract member GetPolicyManagementCertificatesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&gt;&#xA;override this.GetPolicyManagementCertificatesAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&gt;" Usage="attestationAdministrationClient.GetPolicyManagementCertificatesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;System.Collections.Generic.IReadOnlyList&lt;System.Security.Cryptography.X509Certificates.X509Certificate2&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Cancellation token used to cancel the operation.</param>
        <summary>
             Returns the set of policy management certificates currently configured for the attestation service instance.
            
             If the service instance is running in AAD mode, this list will always be empty.
             </summary>
        <returns>A set of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> objects representing the set of root certificates for policy management.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePolicyManagementCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt; RemovePolicyManagementCertificate (System.Security.Cryptography.X509Certificates.X509Certificate2 certificateToRemove, Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyCertificatesModificationResult&gt; RemovePolicyManagementCertificate(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificateToRemove, class Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.RemovePolicyManagementCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemovePolicyManagementCertificate (certificateToRemove As X509Certificate2, existingSigningKey As AttestationTokenSigningKey, Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of PolicyCertificatesModificationResult)" />
      <MemberSignature Language="F#" Value="abstract member RemovePolicyManagementCertificate : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&#xA;override this.RemovePolicyManagementCertificate : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;" Usage="attestationAdministrationClient.RemovePolicyManagementCertificate (certificateToRemove, existingSigningKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateToRemove" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="existingSigningKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateToRemove">The certificate to remove.</param>
        <param name="existingSigningKey">An existing key corresponding to the existing certificate.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
            Retrieves the attesttion policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" />.
            </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePolicyManagementCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt; RemovePolicyManagementCertificateAsync (System.Security.Cryptography.X509Certificates.X509Certificate2 certificateToRemove, Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt; RemovePolicyManagementCertificateAsync(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificateToRemove, class Azure.Security.Attestation.AttestationTokenSigningKey existingSigningKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.RemovePolicyManagementCertificateAsync(System.Security.Cryptography.X509Certificates.X509Certificate2,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemovePolicyManagementCertificateAsync (certificateToRemove As X509Certificate2, existingSigningKey As AttestationTokenSigningKey, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of PolicyCertificatesModificationResult))" />
      <MemberSignature Language="F#" Value="abstract member RemovePolicyManagementCertificateAsync : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;&#xA;override this.RemovePolicyManagementCertificateAsync : System.Security.Cryptography.X509Certificates.X509Certificate2 * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;" Usage="attestationAdministrationClient.RemovePolicyManagementCertificateAsync (certificateToRemove, existingSigningKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyCertificatesModificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificateToRemove" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
        <Parameter Name="existingSigningKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificateToRemove">The certificate to remove.</param>
        <param name="existingSigningKey">An existing key corresponding to the existing certificate.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
            Removes one of the attestation policy management certificates.
            </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt; ResetPolicy (Azure.Security.Attestation.AttestationType attestationType, Azure.Security.Attestation.AttestationTokenSigningKey signingKey = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyModificationResult&gt; ResetPolicy(valuetype Azure.Security.Attestation.AttestationType attestationType, class Azure.Security.Attestation.AttestationTokenSigningKey signingKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.ResetPolicy(Azure.Security.Attestation.AttestationType,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResetPolicy (attestationType As AttestationType, Optional signingKey As AttestationTokenSigningKey = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of PolicyModificationResult)" />
      <MemberSignature Language="F#" Value="abstract member ResetPolicy : Azure.Security.Attestation.AttestationType * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&#xA;override this.ResetPolicy : Azure.Security.Attestation.AttestationType * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;" Usage="attestationAdministrationClient.ResetPolicy (attestationType, signingKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="signingKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">
          <see cref="T:Azure.Security.Attestation.AttestationType" /> whose policy should be reset.</param>
        <param name="signingKey">If provided, specifies the signing key and certificate used to sign the request to the attestation service.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
             Resets the policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" /> to the default value.
             </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
             If the <paramref name="signingKey" /> parameter is not provided, then the policy document sent to the
             attestation service will be unsigned. Unsigned attestation policies are only allowed when the attestation instance is running in AAD mode - if the
             attestation instance is running in Isolated mode, then a signing key and signing certificate MUST be provided to ensure that the caller of the API is authorized to change policy.
             The <see cref="P:Azure.Security.Attestation.AttestationTokenSigningKey.Certificate" /> fieldMUST be one of the certificates returned by the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificates(System.Threading.CancellationToken)" /> API.
             <para /></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt; ResetPolicyAsync (Azure.Security.Attestation.AttestationType attestationType, Azure.Security.Attestation.AttestationTokenSigningKey signingKey = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyModificationResult&gt;&gt; ResetPolicyAsync(valuetype Azure.Security.Attestation.AttestationType attestationType, class Azure.Security.Attestation.AttestationTokenSigningKey signingKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.ResetPolicyAsync(Azure.Security.Attestation.AttestationType,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResetPolicyAsync (attestationType As AttestationType, Optional signingKey As AttestationTokenSigningKey = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of PolicyModificationResult))" />
      <MemberSignature Language="F#" Value="abstract member ResetPolicyAsync : Azure.Security.Attestation.AttestationType * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;&#xA;override this.ResetPolicyAsync : Azure.Security.Attestation.AttestationType * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;" Usage="attestationAdministrationClient.ResetPolicyAsync (attestationType, signingKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="signingKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">
          <see cref="T:Azure.Security.Attestation.AttestationType" /> whose policy should be reset.</param>
        <param name="signingKey">If provided, specifies the signing key used to sign the request to the attestation service.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
            Resets the policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" /> to the default value.
            </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
            If the <paramref name="signingKey" /> parameter is not provided, then the policy document sent to the
            attestation service will be unsigned. Unsigned attestation policies are only allowed when the attestation instance is running in AAD mode - if the
            attestation instance is running in Isolated mode, then a signing key and signing certificate MUST be provided to ensure that the caller of the API is authorized to change policy.
            The <see cref="P:Azure.Security.Attestation.AttestationTokenSigningKey.Certificate" /> parameter MUST be one of the certificates returned by the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificates(System.Threading.CancellationToken)" /> API.
            <para /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt; SetPolicy (Azure.Security.Attestation.AttestationType attestationType, string policyToSet, Azure.Security.Attestation.AttestationTokenSigningKey signingKey = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyModificationResult&gt; SetPolicy(valuetype Azure.Security.Attestation.AttestationType attestationType, string policyToSet, class Azure.Security.Attestation.AttestationTokenSigningKey signingKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.SetPolicy(Azure.Security.Attestation.AttestationType,System.String,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPolicy (attestationType As AttestationType, policyToSet As String, Optional signingKey As AttestationTokenSigningKey = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AttestationResponse(Of PolicyModificationResult)" />
      <MemberSignature Language="F#" Value="abstract member SetPolicy : Azure.Security.Attestation.AttestationType * string * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&#xA;override this.SetPolicy : Azure.Security.Attestation.AttestationType * string * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;" Usage="attestationAdministrationClient.SetPolicy (attestationType, policyToSet, signingKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="policyToSet" Type="System.String" />
        <Parameter Name="signingKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">
          <see cref="T:Azure.Security.Attestation.AttestationType" /> whose policy should be set.</param>
        <param name="policyToSet">Specifies the attestation policy to set.</param>
        <param name="signingKey">If provided, specifies the signing key used to sign the request to the attestation service.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
             Sets the attesttion policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" />.
             </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
             If the <paramref name="signingKey" /> parameter is not provided, then the policy document sent to the
             attestation service will be unsigned. Unsigned attestation policies are only allowed when the attestation instance is running in AAD mode - if the
             attestation instance is running in Isolated mode, then a signing key and signing certificate MUST be provided to ensure that the caller of the API is authorized to change policy.
             The <see cref="P:Azure.Security.Attestation.AttestationTokenSigningKey.Certificate" /> field MUST be one of the certificates returned by the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificates(System.Threading.CancellationToken)" /> API.
             <para />
             Clients need to be able to verify that the attestation policy document was not modified before the policy document was received by the attestation service's enclave.
             There are two properties provided in the [PolicyResult][attestation_policy_result] that can be used to verify that the service received the policy document:
             <list type="bullet"><item><description><see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicySigner" /> - if the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.SetPolicy(Azure.Security.Attestation.AttestationType,System.String,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" /> call included a signing certificate, this will be the certificate provided at the time of the `SetPolicy` call. If no policy signer was set, this will be null. </description></item><item><description><see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicyTokenHash" /> - this is the hash of the [JSON Web Token][json_web_token] sent to the service</description></item></list>
             To verify the hash, clients can generate an attestation token and verify the hash generated from that token:
             <code snippet="Snippet:VerifySigningHash" language="csharp">
             // The SetPolicyAsync API will create an AttestationToken signed with the TokenSigningKey to transmit the policy.
             // To verify that the policy specified by the caller was received by the service inside the enclave, we
             // verify that the hash of the policy document returned from the Attestation Service matches the hash
             // of an attestation token created locally.
             TokenSigningKey signingKey = new TokenSigningKey(&lt;Customer provided signing key&gt;, &lt;Customer provided certificate&gt;)
             var policySetToken = new AttestationToken(
                 BinaryData.FromObjectAsJson(new StoredAttestationPolicy { AttestationPolicy = attestationPolicy }),
                 signingKey);
            
             using var shaHasher = SHA256.Create();
             byte[] attestationPolicyHash = shaHasher.ComputeHash(Encoding.UTF8.GetBytes(policySetToken.Serialize()));
            
             Debug.Assert(attestationPolicyHash.SequenceEqual(setResult.Value.PolicyTokenHash.ToArray()));
             </code>
            
             If the signing key and certificate are not provided, then the SetPolicyAsync API will create an unsecured attestation token
             wrapping the attestation policy. To validate the <see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicyTokenHash" /> return value, a developer
             can create their own <see cref="T:Azure.Security.Attestation.AttestationToken" /> and create the hash of that.
             <code>
             using var shaHasher = SHA256Managed.Create();
             var policySetToken = new UnsecuredAttestationToken(new StoredAttestationPolicy { AttestationPolicy = disallowDebugging });
             disallowDebuggingHash = shaHasher.ComputeHash(Encoding.UTF8.GetBytes(policySetToken.Serialize()));
             </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt; SetPolicyAsync (Azure.Security.Attestation.AttestationType attestationType, string policyToSet, Azure.Security.Attestation.AttestationTokenSigningKey signingKey = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Security.Attestation.AttestationResponse`1&lt;class Azure.Security.Attestation.PolicyModificationResult&gt;&gt; SetPolicyAsync(valuetype Azure.Security.Attestation.AttestationType attestationType, string policyToSet, class Azure.Security.Attestation.AttestationTokenSigningKey signingKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Security.Attestation.AttestationAdministrationClient.SetPolicyAsync(Azure.Security.Attestation.AttestationType,System.String,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPolicyAsync (attestationType As AttestationType, policyToSet As String, Optional signingKey As AttestationTokenSigningKey = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AttestationResponse(Of PolicyModificationResult))" />
      <MemberSignature Language="F#" Value="abstract member SetPolicyAsync : Azure.Security.Attestation.AttestationType * string * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;&#xA;override this.SetPolicyAsync : Azure.Security.Attestation.AttestationType * string * Azure.Security.Attestation.AttestationTokenSigningKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;" Usage="attestationAdministrationClient.SetPolicyAsync (attestationType, policyToSet, signingKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Security.Attestation</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Security.Attestation.AttestationResponse&lt;Azure.Security.Attestation.PolicyModificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attestationType" Type="Azure.Security.Attestation.AttestationType" />
        <Parameter Name="policyToSet" Type="System.String" />
        <Parameter Name="signingKey" Type="Azure.Security.Attestation.AttestationTokenSigningKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attestationType">
          <see cref="T:Azure.Security.Attestation.AttestationType" /> whose policy should be set.</param>
        <param name="policyToSet">Specifies the attestation policy to set.</param>
        <param name="signingKey">If provided, specifies the signing key used to sign the request to the attestation service.</param>
        <param name="cancellationToken">Cancellation token used to cancel this operation.</param>
        <summary>
             Sets the attesttion policy for the specified <see cref="T:Azure.Security.Attestation.AttestationType" />.
             </summary>
        <returns>An <see cref="T:Azure.Security.Attestation.AttestationResponse`1" /> with the policy for the specified attestation type.</returns>
        <remarks>
             If the <paramref name="signingKey" /> parameter is not provided, then the policy document sent to the
             attestation service will be unsigned. Unsigned attestation policies are only allowed when the attestation instance is running in AAD mode - if the
             attestation instance is running in Isolated mode, then a signing key and signing certificate MUST be provided to ensure that the caller of the API is authorized to change policy.
             The <see cref="P:Azure.Security.Attestation.AttestationTokenSigningKey.Certificate" /> field MUST be one of the certificates returned by the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.GetPolicyManagementCertificates(System.Threading.CancellationToken)" /> API.
             <para />
             Clients need to be able to verify that the attestation policy document was not modified before the policy document was received by the attestation service's enclave.
             There are two properties provided in the [PolicyResult][attestation_policy_result] that can be used to verify that the service received the policy document:
             <list type="bullet"><item><description><see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicySigner" /> - if the <see cref="M:Azure.Security.Attestation.AttestationAdministrationClient.SetPolicy(Azure.Security.Attestation.AttestationType,System.String,Azure.Security.Attestation.AttestationTokenSigningKey,System.Threading.CancellationToken)" /> call included a signing certificate, this will be the certificate provided at the time of the `SetPolicy` call. If no policy signer was set, this will be null. </description></item><item><description><see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicyTokenHash" /> - this is the hash of the [JSON Web Token][json_web_token] sent to the service</description></item></list>
             To verify the hash, clients can generate an attestation token and verify the hash generated from that token:
             <code snippet="Snippet:VerifySigningHash" language="csharp">
             // The SetPolicyAsync API will create an AttestationToken signed with the TokenSigningKey to transmit the policy.
             // To verify that the policy specified by the caller was received by the service inside the enclave, we
             // verify that the hash of the policy document returned from the Attestation Service matches the hash
             // of an attestation token created locally.
             TokenSigningKey signingKey = new TokenSigningKey(&lt;Customer provided signing key&gt;, &lt;Customer provided certificate&gt;)
             var policySetToken = new AttestationToken(
                 BinaryData.FromObjectAsJson(new StoredAttestationPolicy { AttestationPolicy = attestationPolicy }),
                 signingKey);
            
             using var shaHasher = SHA256.Create();
             byte[] attestationPolicyHash = shaHasher.ComputeHash(Encoding.UTF8.GetBytes(policySetToken.Serialize()));
            
             Debug.Assert(attestationPolicyHash.SequenceEqual(setResult.Value.PolicyTokenHash.ToArray()));
             </code>
            
             If the signing key and certificate are not provided, then the SetPolicyAsync API will create an unsecured attestation token
             wrapping the attestation policy. To validate the <see cref="P:Azure.Security.Attestation.PolicyModificationResult.PolicyTokenHash" /> return value, a developer
             can create their own <see cref="T:Azure.Security.Attestation.AttestationToken" /> and create the hash of that.
             <code>
             using var shaHasher = SHA256Managed.Create();
             var policySetToken = new AttestationToken(new StoredAttestationPolicy { AttestationPolicy = disallowDebugging });
             disallowDebuggingHash = shaHasher.ComputeHash(Encoding.UTF8.GetBytes(policySetToken.ToString()));
             </code></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
