<Type Name="ClinicalMatchingClient" FullName="Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient">
  <TypeSignature Language="C#" Value="public class ClinicalMatchingClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClinicalMatchingClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ClinicalMatchingClient" />
  <TypeSignature Language="F#" Value="type ClinicalMatchingClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ClinicalMatching service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ClinicalMatchingClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ClinicalMatchingClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClinicalMatchingClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient : Uri * Azure.AzureKeyCredential -&gt; Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient" Usage="new Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of ClinicalMatchingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClinicalMatchingClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ClinicalMatchingClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient : Uri * Azure.AzureKeyCredential * Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClientOptions -&gt; Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient" Usage="new Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus2.api.cognitive.microsoft.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of ClinicalMatchingClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="MatchTrials">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; MatchTrials (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; MatchTrials(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrials(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchTrials (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member MatchTrials : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.MatchTrials : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="clinicalMatchingClient.MatchTrials (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Trial Matcher job
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrials(Azure.WaitUntil,Azure.Health.Insights.ClinicalMatching.TrialMatcherData,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call MatchTrials and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation<BinaryData> operation = client.MatchTrials(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code>
This sample shows how to call MatchTrials with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T18:57:31.2311892Z",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        clinicalTrials = new
        {
            customTrials = new object[]
            {
                new
                {
                    id = "<id>",
                    eligibilityCriteriaText = "<eligibilityCriteriaText>",
                    demographics = new
                    {
                        acceptedSex = "all",
                        acceptedAgeRange = new
                        {
                            minimumAge = new
                            {
                                unit = "years",
                                value = 123.45F,
                            },
                        },
                    },
                    metadata = new
                    {
                        phases = new object[]
                        {
                            "notApplicable"
                        },
                        studyType = "interventional",
                        recruitmentStatus = "unknownStatus",
                        conditions = new object[]
                        {
                            "<conditions>"
                        },
                        sponsors = new object[]
                        {
                            "<sponsors>"
                        },
                        contacts = new object[]
                        {
                            new
                            {
                                name = "<name>",
                                email = "<email>",
                                phone = "<phone>",
                            }
                        },
                        facilities = new object[]
                        {
                            new
                            {
                                name = "<name>",
                                city = "<city>",
                                state = "<state>",
                                countryOrRegion = "<countryOrRegion>",
                            }
                        },
                    },
                }
            },
            registryFilters = new object[]
            {
                new
                {
                    conditions = new object[]
                    {
                        "<conditions>"
                    },
                    studyTypes = new object[]
                    {
                        "interventional"
                    },
                    recruitmentStatuses = new object[]
                    {
                        "unknownStatus"
                    },
                    sponsors = new object[]
                    {
                        "<sponsors>"
                    },
                    phases = new object[]
                    {
                        "notApplicable"
                    },
                    purposes = new object[]
                    {
                        "notApplicable"
                    },
                    ids = new object[]
                    {
                        "<ids>"
                    },
                    sources = new object[]
                    {
                        "custom"
                    },
                    facilityNames = new object[]
                    {
                        "<facilityNames>"
                    },
                    facilityLocations = new object[]
                    {
                        new
                        {
                            city = "<city>",
                            state = "<state>",
                            countryOrRegion = "<countryOrRegion>",
                        }
                    },
                    facilityAreas = new object[]
                    {
                        new
                        {
                            type = "Feature",
                            geometry = new
                            {
                                type = "Point",
                                coordinates = new object[]
                                {
                                    123.45F
                                },
                            },
                            properties = new
                            {
                                subType = "Circle",
                                radius = 123.45,
                            },
                        }
                    },
                }
            },
        },
    },
});
Operation<BinaryData> operation = client.MatchTrials(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("eligibilityCriteriaEvidence").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("phases")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("studyType").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("recruitmentStatus").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("conditions")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("sponsors")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("phone").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("countryOrRegion").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("semanticType").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("knowledgeGraphLastUpdateDate").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="MatchTrials">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt; MatchTrials (Azure.WaitUntil waitUntil, Azure.Health.Insights.ClinicalMatching.TrialMatcherData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt; MatchTrials(valuetype Azure.WaitUntil waitUntil, class Azure.Health.Insights.ClinicalMatching.TrialMatcherData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrials(Azure.WaitUntil,Azure.Health.Insights.ClinicalMatching.TrialMatcherData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchTrials (waitUntil As WaitUntil, body As TrialMatcherData, Optional cancellationToken As CancellationToken = Nothing) As Operation(Of TrialMatcherResults)" />
      <MemberSignature Language="F#" Value="abstract member MatchTrials : Azure.WaitUntil * Azure.Health.Insights.ClinicalMatching.TrialMatcherData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&#xA;override this.MatchTrials : Azure.WaitUntil * Azure.Health.Insights.ClinicalMatching.TrialMatcherData * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;" Usage="clinicalMatchingClient.MatchTrials (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.Health.Insights.ClinicalMatching.TrialMatcherData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create Trial Matcher job. </summary>
        <returns>To be added.</returns>
        <remarks> Creates a Trial Matcher job with the given request body. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call MatchTrials.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

TrialMatcherData body = new TrialMatcherData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation<TrialMatcherResults> operation = client.MatchTrials(WaitUntil.Completed, body);
TrialMatcherResults responseData = operation.Value;
]]></code>
This sample shows how to call MatchTrials with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

TrialMatcherData body = new TrialMatcherData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
        }},
    }
})
{
    Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials
    {
        CustomTrials = {new ClinicalTrialDetails("<id>", new ClinicalTrialMetadata(new string[]{"<conditions>"})
        {
            Phases = {ClinicalTrialPhase.NotApplicable},
            StudyType = ClinicalTrialStudyType.Interventional,
            RecruitmentStatus = ClinicalTrialRecruitmentStatus.UnknownStatus,
            Sponsors = {"<sponsors>"},
            Contacts = {new ContactDetails
            {
                Name = "<name>",
                Email = "<email>",
                Phone = "<phone>",
            }},
            Facilities = {new ClinicalTrialResearchFacility("<name>", "<countryOrRegion>")
            {
                City = "<city>",
                State = "<state>",
            }},
        })
        {
            EligibilityCriteriaText = "<eligibilityCriteriaText>",
            Demographics = new ClinicalTrialDemographics
            {
                AcceptedSex = ClinicalTrialAcceptedSex.All,
                AcceptedAgeRange = new AcceptedAgeRange
                {
                    MinimumAge = new AcceptedAge(AgeUnit.Years, 123.45F),
                    MaximumAge = default,
                },
            },
        }},
        RegistryFilters = {new ClinicalTrialRegistryFilter
        {
            Conditions = {"<conditions>"},
            StudyTypes = {ClinicalTrialStudyType.Interventional},
            RecruitmentStatuses = {ClinicalTrialRecruitmentStatus.UnknownStatus},
            Sponsors = {"<sponsors>"},
            Phases = {ClinicalTrialPhase.NotApplicable},
            Purposes = {ClinicalTrialPurpose.NotApplicable},
            Ids = {"<ids>"},
            Sources = {ClinicalTrialSource.Custom},
            FacilityNames = {"<facilityNames>"},
            FacilityLocations = {new GeographicLocation("<countryOrRegion>")
            {
                City = "<city>",
                State = "<state>",
            }},
            FacilityAreas = {new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[]{123.45F}), new AreaProperties(GeoJsonPropertiesSubType.Circle, 123.45))},
        }},
    })
    {
        Verbose = true,
        IncludeEvidence = true,
    },
};
Operation<TrialMatcherResults> operation = client.MatchTrials(WaitUntil.Completed, body);
TrialMatcherResults responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="MatchTrialsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; MatchTrialsAsync (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; MatchTrialsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrialsAsync(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchTrialsAsync (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member MatchTrialsAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.MatchTrialsAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="clinicalMatchingClient.MatchTrialsAsync (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create Trial Matcher job
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrialsAsync(Azure.WaitUntil,Azure.Health.Insights.ClinicalMatching.TrialMatcherData,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call MatchTrialsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
        }
    },
});
Operation<BinaryData> operation = await client.MatchTrialsAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
]]></code>
This sample shows how to call MatchTrialsAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    patients = new object[]
    {
        new
        {
            id = "<id>",
            info = new
            {
                sex = "female",
                birthDate = "2022-05-10",
                clinicalInfo = new object[]
                {
                    new
                    {
                        system = "<system>",
                        code = "<code>",
                        name = "<name>",
                        value = "<value>",
                    }
                },
            },
            data = new object[]
            {
                new
                {
                    type = "note",
                    clinicalType = "consultation",
                    id = "<id>",
                    language = "<language>",
                    createdDateTime = "2022-05-10T18:57:31.2311892Z",
                    content = new
                    {
                        sourceType = "inline",
                        value = "<value>",
                    },
                }
            },
        }
    },
    configuration = new
    {
        verbose = true,
        includeEvidence = true,
        clinicalTrials = new
        {
            customTrials = new object[]
            {
                new
                {
                    id = "<id>",
                    eligibilityCriteriaText = "<eligibilityCriteriaText>",
                    demographics = new
                    {
                        acceptedSex = "all",
                        acceptedAgeRange = new
                        {
                            minimumAge = new
                            {
                                unit = "years",
                                value = 123.45F,
                            },
                        },
                    },
                    metadata = new
                    {
                        phases = new object[]
                        {
                            "notApplicable"
                        },
                        studyType = "interventional",
                        recruitmentStatus = "unknownStatus",
                        conditions = new object[]
                        {
                            "<conditions>"
                        },
                        sponsors = new object[]
                        {
                            "<sponsors>"
                        },
                        contacts = new object[]
                        {
                            new
                            {
                                name = "<name>",
                                email = "<email>",
                                phone = "<phone>",
                            }
                        },
                        facilities = new object[]
                        {
                            new
                            {
                                name = "<name>",
                                city = "<city>",
                                state = "<state>",
                                countryOrRegion = "<countryOrRegion>",
                            }
                        },
                    },
                }
            },
            registryFilters = new object[]
            {
                new
                {
                    conditions = new object[]
                    {
                        "<conditions>"
                    },
                    studyTypes = new object[]
                    {
                        "interventional"
                    },
                    recruitmentStatuses = new object[]
                    {
                        "unknownStatus"
                    },
                    sponsors = new object[]
                    {
                        "<sponsors>"
                    },
                    phases = new object[]
                    {
                        "notApplicable"
                    },
                    purposes = new object[]
                    {
                        "notApplicable"
                    },
                    ids = new object[]
                    {
                        "<ids>"
                    },
                    sources = new object[]
                    {
                        "custom"
                    },
                    facilityNames = new object[]
                    {
                        "<facilityNames>"
                    },
                    facilityLocations = new object[]
                    {
                        new
                        {
                            city = "<city>",
                            state = "<state>",
                            countryOrRegion = "<countryOrRegion>",
                        }
                    },
                    facilityAreas = new object[]
                    {
                        new
                        {
                            type = "Feature",
                            geometry = new
                            {
                                type = "Point",
                                coordinates = new object[]
                                {
                                    123.45F
                                },
                            },
                            properties = new
                            {
                                subType = "Circle",
                                radius = 123.45,
                            },
                        }
                    },
                }
            },
        },
    },
});
Operation<BinaryData> operation = await client.MatchTrialsAsync(WaitUntil.Completed, content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("confidenceScore").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("eligibilityCriteriaEvidence").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("offset").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientDataEvidence").GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("patientInfoEvidence").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("evidence")[0].GetProperty("importance").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("phases")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("studyType").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("recruitmentStatus").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("conditions")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("sponsors")[0].ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("email").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("contacts")[0].GetProperty("phone").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("city").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("inferences")[0].GetProperty("metadata").GetProperty("facilities")[0].GetProperty("countryOrRegion").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("system").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("semanticType").ToString());
Console.WriteLine(result.GetProperty("patients")[0].GetProperty("neededClinicalInfo")[0].GetProperty("category").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("knowledgeGraphLastUpdateDate").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="MatchTrialsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&gt; MatchTrialsAsync (Azure.WaitUntil waitUntil, Azure.Health.Insights.ClinicalMatching.TrialMatcherData body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&gt; MatchTrialsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Health.Insights.ClinicalMatching.TrialMatcherData body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.MatchTrialsAsync(Azure.WaitUntil,Azure.Health.Insights.ClinicalMatching.TrialMatcherData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MatchTrialsAsync (waitUntil As WaitUntil, body As TrialMatcherData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of TrialMatcherResults))" />
      <MemberSignature Language="F#" Value="abstract member MatchTrialsAsync : Azure.WaitUntil * Azure.Health.Insights.ClinicalMatching.TrialMatcherData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&gt;&#xA;override this.MatchTrialsAsync : Azure.WaitUntil * Azure.Health.Insights.ClinicalMatching.TrialMatcherData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&gt;" Usage="clinicalMatchingClient.MatchTrialsAsync (waitUntil, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.Health.Insights.ClinicalMatching.TrialMatcherResults&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="body" Type="Azure.Health.Insights.ClinicalMatching.TrialMatcherData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create Trial Matcher job. </summary>
        <returns>To be added.</returns>
        <remarks> Creates a Trial Matcher job with the given request body. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call MatchTrialsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

TrialMatcherData body = new TrialMatcherData(new PatientRecord[]
{
    new PatientRecord("<id>")
});
Operation<TrialMatcherResults> operation = await client.MatchTrialsAsync(WaitUntil.Completed, body);
TrialMatcherResults responseData = operation.Value;
]]></code>
This sample shows how to call MatchTrialsAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
ClinicalMatchingClient client = new ClinicalMatchingClient(endpoint, credential);

TrialMatcherData body = new TrialMatcherData(new PatientRecord[]
{
    new PatientRecord("<id>")
    {
        Info = new PatientInfo
        {
            Sex = PatientInfoSex.Female,
            BirthDate = DateTimeOffset.Parse("2022-05-10"),
            ClinicalInfo = {new ClinicalCodedElement("<system>", "<code>")
            {
                Name = "<name>",
                Value = "<value>",
            }},
        },
        Data = {new PatientDocument(DocumentType.Note, "<id>", new DocumentContent(DocumentContentSourceType.Inline, "<value>"))
        {
            ClinicalType = ClinicalDocumentType.Consultation,
            Language = "<language>",
            CreatedDateTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
        }},
    }
})
{
    Configuration = new TrialMatcherModelConfiguration(new ClinicalTrials
    {
        CustomTrials = {new ClinicalTrialDetails("<id>", new ClinicalTrialMetadata(new string[]{"<conditions>"})
        {
            Phases = {ClinicalTrialPhase.NotApplicable},
            StudyType = ClinicalTrialStudyType.Interventional,
            RecruitmentStatus = ClinicalTrialRecruitmentStatus.UnknownStatus,
            Sponsors = {"<sponsors>"},
            Contacts = {new ContactDetails
            {
                Name = "<name>",
                Email = "<email>",
                Phone = "<phone>",
            }},
            Facilities = {new ClinicalTrialResearchFacility("<name>", "<countryOrRegion>")
            {
                City = "<city>",
                State = "<state>",
            }},
        })
        {
            EligibilityCriteriaText = "<eligibilityCriteriaText>",
            Demographics = new ClinicalTrialDemographics
            {
                AcceptedSex = ClinicalTrialAcceptedSex.All,
                AcceptedAgeRange = new AcceptedAgeRange
                {
                    MinimumAge = new AcceptedAge(AgeUnit.Years, 123.45F),
                    MaximumAge = default,
                },
            },
        }},
        RegistryFilters = {new ClinicalTrialRegistryFilter
        {
            Conditions = {"<conditions>"},
            StudyTypes = {ClinicalTrialStudyType.Interventional},
            RecruitmentStatuses = {ClinicalTrialRecruitmentStatus.UnknownStatus},
            Sponsors = {"<sponsors>"},
            Phases = {ClinicalTrialPhase.NotApplicable},
            Purposes = {ClinicalTrialPurpose.NotApplicable},
            Ids = {"<ids>"},
            Sources = {ClinicalTrialSource.Custom},
            FacilityNames = {"<facilityNames>"},
            FacilityLocations = {new GeographicLocation("<countryOrRegion>")
            {
                City = "<city>",
                State = "<state>",
            }},
            FacilityAreas = {new GeographicArea(GeoJsonType.Feature, new AreaGeometry(GeoJsonGeometryType.Point, new float[]{123.45F}), new AreaProperties(GeoJsonPropertiesSubType.Circle, 123.45))},
        }},
    })
    {
        Verbose = true,
        IncludeEvidence = true,
    },
};
Operation<TrialMatcherResults> operation = await client.MatchTrialsAsync(WaitUntil.Completed, body);
TrialMatcherResults responseData = operation.Value;
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Health.Insights.ClinicalMatching.ClinicalMatchingClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Health.Insights.ClinicalMatching</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
