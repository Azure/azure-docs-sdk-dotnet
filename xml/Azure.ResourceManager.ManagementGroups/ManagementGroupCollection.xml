<Type Name="ManagementGroupCollection" FullName="Azure.ResourceManager.ManagementGroups.ManagementGroupCollection">
  <TypeSignature Language="C#" Value="public class ManagementGroupCollection : Azure.ResourceManager.ArmCollection, System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManagementGroupCollection extends Azure.ResourceManager.ArmCollection implements class System.Collections.Generic.IAsyncEnumerable`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ManagementGroupCollection&#xA;Inherits ArmCollection&#xA;Implements IAsyncEnumerable(Of ManagementGroupResource), IEnumerable(Of ManagementGroupResource)" />
  <TypeSignature Language="F#" Value="type ManagementGroupCollection = class&#xA;    inherit ArmCollection&#xA;    interface seq&lt;ManagementGroupResource&gt;&#xA;    interface IEnumerable&#xA;    interface IAsyncEnumerable&lt;ManagementGroupResource&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            To get a <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" /> instance call the GetManagementGroups method from an instance of <see cref="T:Azure.ResourceManager.Resources.TenantResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ManagementGroupCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckManagementGroupNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt; CheckManagementGroupNameAvailability (Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt; CheckManagementGroupNameAvailability(class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckManagementGroupNameAvailability(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckManagementGroupNameAvailability (options As ManagementGroupNameAvailabilityOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagementGroupNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckManagementGroupNameAvailability : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&#xA;override this.CheckManagementGroupNameAvailability : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;" Usage="managementGroupCollection.CheckManagementGroupNameAvailability (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks if the specified management group name is valid and unique
            Request Path: /providers/Microsoft.Management/checkNameAvailability
            Operation Id: ManagementGroups_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckManagementGroupNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt; CheckManagementGroupNameAvailabilityAsync (Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt; CheckManagementGroupNameAvailabilityAsync(class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckManagementGroupNameAvailabilityAsync(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckManagementGroupNameAvailabilityAsync (options As ManagementGroupNameAvailabilityOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagementGroupNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckManagementGroupNameAvailabilityAsync : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;&#xA;override this.CheckManagementGroupNameAvailabilityAsync : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;" Usage="managementGroupCollection.CheckManagementGroupNameAvailabilityAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks if the specified management group name is valid and unique
            Request Path: /providers/Microsoft.Management/checkNameAvailability
            Operation Id: ManagementGroups_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt; CheckNameAvailability (Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt; CheckNameAvailability(class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckNameAvailability(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckNameAvailability (content As ManagementGroupNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagementGroupNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckNameAvailability : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&#xA;override this.CheckNameAvailability : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;" Usage="managementGroupCollection.CheckNameAvailability (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks if the specified management group name is valid and unique
            Request Path: /providers/Microsoft.Management/checkNameAvailability
            Operation Id: ManagementGroups_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt; CheckNameAvailabilityAsync (Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt; CheckNameAvailabilityAsync(class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CheckNameAvailabilityAsync(Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckNameAvailabilityAsync (content As ManagementGroupNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagementGroupNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckNameAvailabilityAsync : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;&#xA;override this.CheckNameAvailabilityAsync : Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;" Usage="managementGroupCollection.CheckNameAvailabilityAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupNameAvailabilityContent" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="content"> Management group name availability check parameters. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks if the specified management group name is valid and unique
            Request Path: /providers/Microsoft.Management/checkNameAvailability
            Operation Id: ManagementGroups_CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; CreateOrUpdate (Azure.WaitUntil waitUntil, string groupId, Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions options, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; CreateOrUpdate(valuetype Azure.WaitUntil waitUntil, string groupId, class Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions options, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (waitUntil As WaitUntil, groupId As String, options As CreateManagementGroupOptions, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ManagementGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.CreateOrUpdate (waitUntil, groupId, options, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="groupId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cacheControl" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="groupId"> Management Group ID. </param>
        <param name="options"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; CreateOrUpdate (Azure.WaitUntil waitUntil, string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent content, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; CreateOrUpdate(valuetype Azure.WaitUntil waitUntil, string groupId, class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent content, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdate(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (waitUntil As WaitUntil, groupId As String, content As ManagementGroupCreateOrUpdateContent, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of ManagementGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.CreateOrUpdate : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.CreateOrUpdate (waitUntil, groupId, content, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="groupId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="content" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cacheControl" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="groupId"> Management Group ID. </param>
        <param name="content"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; CreateOrUpdateAsync (Azure.WaitUntil waitUntil, string groupId, Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions options, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; CreateOrUpdateAsync(valuetype Azure.WaitUntil waitUntil, string groupId, class Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions options, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (waitUntil As WaitUntil, groupId As String, options As CreateManagementGroupOptions, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ManagementGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;&#xA;override this.CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;" Usage="managementGroupCollection.CreateOrUpdateAsync (waitUntil, groupId, options, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="groupId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="Azure.ResourceManager.ManagementGroups.Models.CreateManagementGroupOptions" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cacheControl" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="waitUntil"> "F:Azure.WaitUntil.Completed" if the method should wait to return until the long-running operation has completed on the service; "F:Azure.WaitUntil.Started" if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="groupId"> Management Group ID. </param>
        <param name="options"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="options" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; CreateOrUpdateAsync (Azure.WaitUntil waitUntil, string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent content, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; CreateOrUpdateAsync(valuetype Azure.WaitUntil waitUntil, string groupId, class Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent content, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.CreateOrUpdateAsync(Azure.WaitUntil,System.String,Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (waitUntil As WaitUntil, groupId As String, content As ManagementGroupCreateOrUpdateContent, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of ManagementGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;&#xA;override this.CreateOrUpdateAsync : Azure.WaitUntil * string * Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;" Usage="managementGroupCollection.CreateOrUpdateAsync (waitUntil, groupId, content, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="groupId" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="content" Type="Azure.ResourceManager.ManagementGroups.Models.ManagementGroupCreateOrUpdateContent" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cacheControl" Type="System.String" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="groupId"> Management Group ID. </param>
        <param name="content"> Management group creation parameters. </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Create or update a management group.
            If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.Exists(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="managementGroupCollection.Exists (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.ExistsAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="managementGroupCollection.ExistsAsync (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; Get (string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; Get(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.Get(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagementGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.Get : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.Get (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the details of the management group.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; GetAll (string cacheControl = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; GetAll(string cacheControl, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAll(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAll (Optional cacheControl As String = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagementGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAll : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.GetAll : string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.GetAll (cacheControl, skiptoken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List management groups for the authenticated user.
            
            Request Path: /providers/Microsoft.Management/managementGroups
            Operation Id: ManagementGroups_List
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; GetAllAsync (string cacheControl = default, string skiptoken = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; GetAllAsync(string cacheControl, string skiptoken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAllAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllAsync (Optional cacheControl As String = Nothing, Optional skiptoken As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagementGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAllAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.GetAllAsync : string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.GetAllAsync (cacheControl, skiptoken, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="skiptoken">
            Page continuation token is only used if a previous operation returned a partial result. 
            If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
            
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List management groups for the authenticated user.
            
            Request Path: /providers/Microsoft.Management/managementGroups
            Operation Id: ManagementGroups_List
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ManagementGroups.ManagementGroupResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; GetAsync (string groupId, Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType? expand = default, bool? recurse = default, string filter = default, string cacheControl = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt; GetAsync(string groupId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; expand, valuetype System.Nullable`1&lt;bool&gt; recurse, string filter, string cacheControl, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.GetAsync(System.String,System.Nullable{Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType},System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (groupId As String, Optional expand As Nullable(Of ManagementGroupExpandType) = Nothing, Optional recurse As Nullable(Of Boolean) = Nothing, Optional filter As String = Nothing, Optional cacheControl As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagementGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;&#xA;override this.GetAsync : string * Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt; * Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;" Usage="managementGroupCollection.GetAsync (groupId, expand, recurse, filter, cacheControl, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupId" Type="System.String" />
        <Parameter Name="expand" Type="System.Nullable&lt;Azure.ResourceManager.ManagementGroups.Models.ManagementGroupExpandType&gt;" />
        <Parameter Name="recurse" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cacheControl" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupId"> Management Group ID. </param>
        <param name="expand"> The $expand=children query string parameter allows clients to request inclusion of children in the response payload.  $expand=path includes the path from the root group to the current group.  $expand=ancestors includes the ancestor Ids of the current group. </param>
        <param name="recurse"> The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true. </param>
        <param name="filter"> A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription'). </param>
        <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with 'no-cache' value to bypass existing caches. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the details of the management group.
            
            Request Path: /providers/Microsoft.Management/managementGroups/{groupId}
            Operation Id: ManagementGroups_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="groupId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="groupId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; IAsyncEnumerable&lt;ManagementGroupResource&gt;.GetAsyncEnumerator (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerator`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetAsyncEnumerator(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#Generic#IAsyncEnumerable&lt;Azure#ResourceManager#ManagementGroups#ManagementGroupResource&gt;#GetAsyncEnumerator(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator (cancellationToken As CancellationToken) As IAsyncEnumerator(Of ManagementGroupResource) Implements IAsyncEnumerable(Of ManagementGroupResource).GetAsyncEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetAsyncEnumerator : System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.System.Collections.Generic.IAsyncEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetAsyncEnumerator cancellationToken" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that may be used to cancel the asynchronous iteration.</param>
        <summary>Returns an enumerator that iterates asynchronously through the collection.</summary>
        <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; IEnumerable&lt;ManagementGroupResource&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt; System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#Generic#IEnumerable&lt;Azure#ResourceManager#ManagementGroups#ManagementGroupResource&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of ManagementGroupResource) Implements IEnumerable(Of ManagementGroupResource).GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;" Usage="managementGroupCollection.System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;Azure.ResourceManager.ManagementGroups.ManagementGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ManagementGroups.ManagementGroupCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="managementGroupCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through a collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
