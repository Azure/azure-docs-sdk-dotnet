<Type Name="LogsIngestionClient" FullName="Azure.Monitor.Ingestion.LogsIngestionClient">
  <TypeSignature Language="C#" Value="public class LogsIngestionClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LogsIngestionClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Monitor.Ingestion.LogsIngestionClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LogsIngestionClient" />
  <TypeSignature Language="F#" Value="type LogsIngestionClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The LogsIngestion service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LogsIngestionClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of LogsIngestionClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsIngestionClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Ingestion.LogsIngestionClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Monitor.Ingestion.LogsIngestionClient" Usage="new Azure.Monitor.Ingestion.LogsIngestionClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Data Collection Endpoint for the Data Collection Rule, for example https://dce-name.eastus-2.ingest.monitor.azure.com. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of LogsIngestionClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LogsIngestionClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Monitor.Ingestion.LogsIngestionClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Monitor.Ingestion.LogsIngestionClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Monitor.Ingestion.LogsIngestionClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As LogsIngestionClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Monitor.Ingestion.LogsIngestionClient : Uri * Azure.Core.TokenCredential * Azure.Monitor.Ingestion.LogsIngestionClientOptions -&gt; Azure.Monitor.Ingestion.LogsIngestionClient" Usage="new Azure.Monitor.Ingestion.LogsIngestionClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Monitor.Ingestion.LogsIngestionClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The Data Collection Endpoint for the Data Collection Rule, for example https://dce-name.eastus-2.ingest.monitor.azure.com. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of LogsIngestionClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Monitor.Ingestion.LogsIngestionClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Monitor.Ingestion.LogsIngestionClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Upload">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Upload (string ruleId, string streamName, Azure.Core.RequestContent content, string contentEncoding = &quot;gzip&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Upload(string ruleId, string streamName, class Azure.Core.RequestContent content, string contentEncoding, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.Upload(System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Upload (ruleId As String, streamName As String, content As RequestContent, Optional contentEncoding As String = &quot;gzip&quot;, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Upload : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Upload : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="logsIngestionClient.Upload (ruleId, streamName, content, contentEncoding, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleId" Type="System.String" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="contentEncoding" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ruleId"> The immutable Id of the Data Collection Rule resource. </param>
        <param name="streamName"> The streamDeclaration name as defined in the Data Collection Rule. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="contentEncoding"> gzip. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Ingestion API used to directly ingest data using Data Collection Rules. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> See error response code and error response message for more detail. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleId" />, <paramref name="streamName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleId" /> or <paramref name="streamName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Upload with required parameters and request content.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new LogsIngestionClient(endpoint, credential);
            
            var data = new[] {
                new {}
            };
            
            Response response = client.Upload("<ruleId>", "<streamName>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
            ]]></code>
            This sample shows how to call Upload with all parameters and request content.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new LogsIngestionClient(endpoint, credential);
            
            var data = new[] {
                new {}
            };
            
            Response response = client.Upload("<ruleId>", "<streamName>", RequestContent.Create(data), <gzip>);
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Upload&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt; Upload&lt;T&gt; (string ruleId, string streamName, System.Collections.Generic.IEnumerable&lt;T&gt; logEntries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Monitor.Ingestion.UploadLogsResult&gt; Upload&lt;T&gt;(string ruleId, string streamName, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; logEntries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.Upload``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Upload(Of T) (ruleId As String, streamName As String, logEntries As IEnumerable(Of T), Optional cancellationToken As CancellationToken = Nothing) As Response(Of UploadLogsResult)" />
      <MemberSignature Language="F#" Value="abstract member Upload : string * string * seq&lt;'T&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;&#xA;override this.Upload : string * string * seq&lt;'T&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;" Usage="logsIngestionClient.Upload (ruleId, streamName, logEntries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ruleId" Type="System.String" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="logEntries" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="ruleId"> The immutable Id of the Data Collection Rule resource. </param>
        <param name="streamName"> The streamDeclaration name as defined in the Data Collection Rule. </param>
        <param name="logEntries"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="cancellationToken" />
        <summary> Ingestion API used to directly ingest data using Data Collection Rules. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> See error response code and error response message for more detail. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleId" />, <paramref name="streamName" /> or <paramref name="logEntries" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleId" /> or <paramref name="streamName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-Success status code. </exception>
        <example>
             This sample shows how to call Upload with required parameters and request content.
             <code><![CDATA[
             var credential = new DefaultAzureCredential();
             var endpoint = new Uri("<https://my-account-name.azure.com>");
             var client = new LogsIngestionClient(endpoint, credential);
            
             var data = new[] {
                 new {}
             };
            
             Response response = client.Upload("<ruleId>", "<streamName>", data);
             Console.WriteLine(response.Status);
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UploadAsync (string ruleId, string streamName, Azure.Core.RequestContent content, string contentEncoding = &quot;gzip&quot;, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UploadAsync(string ruleId, string streamName, class Azure.Core.RequestContent content, string contentEncoding, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadAsync (ruleId As String, streamName As String, content As RequestContent, Optional contentEncoding As String = &quot;gzip&quot;, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UploadAsync : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UploadAsync : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="logsIngestionClient.UploadAsync (ruleId, streamName, content, contentEncoding, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleId" Type="System.String" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="contentEncoding" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="ruleId"> The immutable Id of the Data Collection Rule resource. </param>
        <param name="streamName"> The streamDeclaration name as defined in the Data Collection Rule. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="contentEncoding"> gzip. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Ingestion API used to directly ingest data using Data Collection Rules. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> See error response code and error response message for more detail. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleId" />, <paramref name="streamName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleId" /> or <paramref name="streamName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call UploadAsync with required parameters and request content.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new LogsIngestionClient(endpoint, credential);
            
            var data = new[] {
                new {}
            };
            
            Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
            ]]></code>
            This sample shows how to call UploadAsync with all parameters and request content.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new LogsIngestionClient(endpoint, credential);
            
            var data = new[] {
                new {}
            };
            
            Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data), <gzip>);
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;&gt; UploadAsync&lt;T&gt; (string ruleId, string streamName, System.Collections.Generic.IEnumerable&lt;T&gt; logEntries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Monitor.Ingestion.UploadLogsResult&gt;&gt; UploadAsync&lt;T&gt;(string ruleId, string streamName, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; logEntries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadAsync(Of T) (ruleId As String, streamName As String, logEntries As IEnumerable(Of T), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UploadLogsResult))" />
      <MemberSignature Language="F#" Value="abstract member UploadAsync : string * string * seq&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;&gt;&#xA;override this.UploadAsync : string * string * seq&lt;'T&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;&gt;" Usage="logsIngestionClient.UploadAsync (ruleId, streamName, logEntries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Monitor.Ingestion</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Monitor.Ingestion.UploadLogsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ruleId" Type="System.String" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="logEntries" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="ruleId"> The immutable Id of the Data Collection Rule resource. </param>
        <param name="streamName"> The streamDeclaration name as defined in the Data Collection Rule. </param>
        <param name="logEntries"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="cancellationToken" />
        <summary> Ingestion API used to directly ingest data using Data Collection Rules. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> See error response code and error response message for more detail. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleId" />, <paramref name="streamName" /> or <paramref name="logEntries" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleId" /> or <paramref name="streamName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-Success status code. </exception>
        <example>
             This sample shows how to call Upload with required parameters and request content.
             <code><![CDATA[
             var credential = new DefaultAzureCredential();
             var endpoint = new Uri("<https://my-account-name.azure.com>");
             var client = new LogsIngestionClient(endpoint, credential);
            
             var data = new[] {
                 new {}
             };
            
             Response response = client.Upload("<ruleId>", "<streamName>", data);
             Console.WriteLine(response.Status);
             ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
