<Type Name="UpstreamTemplate" FullName="Azure.ResourceManager.SignalR.Models.UpstreamTemplate">
  <TypeSignature Language="C#" Value="public class UpstreamTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UpstreamTemplate extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.SignalR.Models.UpstreamTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class UpstreamTemplate" />
  <TypeSignature Language="F#" Value="type UpstreamTemplate = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Upstream template item settings. It defines the Upstream URL of the incoming requests.
            The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UpstreamTemplate (string urlTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string urlTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (urlTemplate As String)" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.SignalR.Models.UpstreamTemplate : string -&gt; Azure.ResourceManager.SignalR.Models.UpstreamTemplate" Usage="new Azure.ResourceManager.SignalR.Models.UpstreamTemplate urlTemplate" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="urlTemplate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlTemplate">
            Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
            For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
            </param>
        <summary> Initializes a new instance of UpstreamTemplate. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="urlTemplate" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Auth">
      <MemberSignature Language="C#" Value="public Azure.ResourceManager.SignalR.Models.UpstreamAuthSettings Auth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.SignalR.Models.UpstreamAuthSettings Auth" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.Auth" />
      <MemberSignature Language="VB.NET" Value="Public Property Auth As UpstreamAuthSettings" />
      <MemberSignature Language="F#" Value="member this.Auth : Azure.ResourceManager.SignalR.Models.UpstreamAuthSettings with get, set" Usage="Azure.ResourceManager.SignalR.Models.UpstreamTemplate.Auth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.SignalR.Models.UpstreamAuthSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Upstream auth settings. If not set, no auth is used for upstream messages. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryPattern">
      <MemberSignature Language="C#" Value="public string CategoryPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryPattern" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.CategoryPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryPattern As String" />
      <MemberSignature Language="F#" Value="member this.CategoryPattern : string with get, set" Usage="Azure.ResourceManager.SignalR.Models.UpstreamTemplate.CategoryPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the matching pattern for category names. If not set, it matches any category.
            There are 3 kind of patterns supported:
                1. "*", it to matches any category name.
                2. Combine multiple categories with ",", for example "connections,messages", it matches category "connections" and "messages".
                3. The single category name, for example, "connections", it matches the category "connections".
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventPattern">
      <MemberSignature Language="C#" Value="public string EventPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EventPattern" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.EventPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property EventPattern As String" />
      <MemberSignature Language="F#" Value="member this.EventPattern : string with get, set" Usage="Azure.ResourceManager.SignalR.Models.UpstreamTemplate.EventPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the matching pattern for event names. If not set, it matches any event.
            There are 3 kind of patterns supported:
                1. "*", it to matches any event name.
                2. Combine multiple events with ",", for example "connect,disconnect", it matches event "connect" and "disconnect".
                3. The single event name, for example, "connect", it matches "connect".
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HubPattern">
      <MemberSignature Language="C#" Value="public string HubPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HubPattern" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.HubPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property HubPattern As String" />
      <MemberSignature Language="F#" Value="member this.HubPattern : string with get, set" Usage="Azure.ResourceManager.SignalR.Models.UpstreamTemplate.HubPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the matching pattern for hub names. If not set, it matches any hub.
            There are 3 kind of patterns supported:
                1. "*", it to matches any hub name.
                2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2".
                3. The single hub name, for example, "hub1", it matches "hub1".
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTemplate">
      <MemberSignature Language="C#" Value="public string UrlTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UrlTemplate" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.SignalR.Models.UpstreamTemplate.UrlTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property UrlTemplate As String" />
      <MemberSignature Language="F#" Value="member this.UrlTemplate : string with get, set" Usage="Azure.ResourceManager.SignalR.Models.UpstreamTemplate.UrlTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.SignalR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
            For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
