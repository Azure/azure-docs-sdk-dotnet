<Type Name="ComputeBatchModelFactory" FullName="Azure.Compute.Batch.ComputeBatchModelFactory">
  <TypeSignature Language="C#" Value="public static class ComputeBatchModelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ComputeBatchModelFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Compute.Batch.ComputeBatchModelFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class ComputeBatchModelFactory" />
  <TypeSignature Language="F#" Value="type ComputeBatchModelFactory = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Compute.Batch</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Model factory for models. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AutoScaleRun">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.AutoScaleRun AutoScaleRun (DateTimeOffset timestamp = default, string results = default, Azure.Compute.Batch.AutoScaleRunError error = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.AutoScaleRun AutoScaleRun(valuetype System.DateTimeOffset timestamp, string results, class Azure.Compute.Batch.AutoScaleRunError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.AutoScaleRun(System.DateTimeOffset,System.String,Azure.Compute.Batch.AutoScaleRunError)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AutoScaleRun (Optional timestamp As DateTimeOffset = Nothing, Optional results As String = Nothing, Optional error As AutoScaleRunError = Nothing) As AutoScaleRun" />
      <MemberSignature Language="F#" Value="static member AutoScaleRun : DateTimeOffset * string * Azure.Compute.Batch.AutoScaleRunError -&gt; Azure.Compute.Batch.AutoScaleRun" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.AutoScaleRun (timestamp, results, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.AutoScaleRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.DateTimeOffset" />
        <Parameter Name="results" Type="System.String" />
        <Parameter Name="error" Type="Azure.Compute.Batch.AutoScaleRunError" />
      </Parameters>
      <Docs>
        <param name="timestamp"> The time at which the autoscale formula was last evaluated. </param>
        <param name="results"> The final values of all variables used in the evaluation of the autoscale formula. Each variable value is returned in the form $variable=value, and variables are separated by semicolons. </param>
        <param name="error"> Details of the error encountered evaluating the autoscale formula on the Pool, if the evaluation was unsuccessful. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.AutoScaleRun" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.AutoScaleRun" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoScaleRunError">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.AutoScaleRunError AutoScaleRunError (string code = default, string message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt; values = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.AutoScaleRunError AutoScaleRunError(string code, string message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.NameValuePair&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.AutoScaleRunError(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.NameValuePair})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AutoScaleRunError (Optional code As String = Nothing, Optional message As String = Nothing, Optional values As IEnumerable(Of NameValuePair) = Nothing) As AutoScaleRunError" />
      <MemberSignature Language="F#" Value="static member AutoScaleRunError : string * string * seq&lt;Azure.Compute.Batch.NameValuePair&gt; -&gt; Azure.Compute.Batch.AutoScaleRunError" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.AutoScaleRunError (code, message, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.AutoScaleRunError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt;" />
      </Parameters>
      <Docs>
        <param name="code"> An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the autoscale error, intended to be suitable for display in a user interface. </param>
        <param name="values"> A list of additional error details related to the autoscale error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.AutoScaleRunError" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.AutoScaleRunError" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchApplication">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchApplication BatchApplication (string id = default, string displayName = default, System.Collections.Generic.IEnumerable&lt;string&gt; versions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchApplication BatchApplication(string id, string displayName, class System.Collections.Generic.IEnumerable`1&lt;string&gt; versions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchApplication(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchApplication (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional versions As IEnumerable(Of String) = Nothing) As BatchApplication" />
      <MemberSignature Language="F#" Value="static member BatchApplication : string * string * seq&lt;string&gt; -&gt; Azure.Compute.Batch.BatchApplication" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchApplication (id, displayName, versions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchApplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="versions" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the application within the Account. </param>
        <param name="displayName"> The display name for the application. </param>
        <param name="versions"> The list of available versions of the application. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchApplication" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchApplication" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchError">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchError BatchError (string code = default, Azure.Compute.Batch.BatchErrorMessage message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchErrorDetail&gt; values = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchError BatchError(string code, class Azure.Compute.Batch.BatchErrorMessage message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchErrorDetail&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchError(System.String,Azure.Compute.Batch.BatchErrorMessage,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchErrorDetail})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchError (Optional code As String = Nothing, Optional message As BatchErrorMessage = Nothing, Optional values As IEnumerable(Of BatchErrorDetail) = Nothing) As BatchError" />
      <MemberSignature Language="F#" Value="static member BatchError : string * Azure.Compute.Batch.BatchErrorMessage * seq&lt;Azure.Compute.Batch.BatchErrorDetail&gt; -&gt; Azure.Compute.Batch.BatchError" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchError (code, message, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="Azure.Compute.Batch.BatchErrorMessage" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchErrorDetail&gt;" />
      </Parameters>
      <Docs>
        <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the error, intended to be suitable for display in a user interface. </param>
        <param name="values"> A collection of key-value pairs containing additional details about the error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchError" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchError" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchErrorDetail">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchErrorDetail BatchErrorDetail (string key = default, string value = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchErrorDetail BatchErrorDetail(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchErrorDetail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchErrorDetail (Optional key As String = Nothing, Optional value As String = Nothing) As BatchErrorDetail" />
      <MemberSignature Language="F#" Value="static member BatchErrorDetail : string * string -&gt; Azure.Compute.Batch.BatchErrorDetail" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchErrorDetail (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchErrorDetail</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"> An identifier specifying the meaning of the Value property. </param>
        <param name="value"> The additional information included with the error response. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchErrorDetail" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchErrorDetail" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchErrorMessage">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchErrorMessage BatchErrorMessage (string lang = default, string value = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchErrorMessage BatchErrorMessage(string lang, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchErrorMessage(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchErrorMessage (Optional lang As String = Nothing, Optional value As String = Nothing) As BatchErrorMessage" />
      <MemberSignature Language="F#" Value="static member BatchErrorMessage : string * string -&gt; Azure.Compute.Batch.BatchErrorMessage" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchErrorMessage (lang, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchErrorMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lang" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lang"> The language code of the error message. </param>
        <param name="value"> The text of the message. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchErrorMessage" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchErrorMessage" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJob">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJob BatchJob (string id = default, string displayName = default, bool? usesTaskDependencies = default, string url = default, string eTag = default, DateTimeOffset? lastModified = default, DateTimeOffset? creationTime = default, Azure.Compute.Batch.BatchJobState? state = default, DateTimeOffset? stateTransitionTime = default, Azure.Compute.Batch.BatchJobState? previousState = default, DateTimeOffset? previousStateTransitionTime = default, int? priority = default, bool? allowTaskPreemption = default, int? maxParallelTasks = default, Azure.Compute.Batch.BatchJobConstraints constraints = default, Azure.Compute.Batch.BatchJobManagerTask jobManagerTask = default, Azure.Compute.Batch.BatchJobPreparationTask jobPreparationTask = default, Azure.Compute.Batch.BatchJobReleaseTask jobReleaseTask = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt; commonEnvironmentSettings = default, Azure.Compute.Batch.BatchPoolInfo poolInfo = default, Azure.Compute.Batch.OnAllBatchTasksComplete? onAllTasksComplete = default, Azure.Compute.Batch.OnBatchTaskFailure? onTaskFailure = default, Azure.Compute.Batch.BatchJobNetworkConfiguration networkConfiguration = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default, Azure.Compute.Batch.BatchJobExecutionInfo executionInfo = default, Azure.Compute.Batch.BatchJobStatistics stats = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJob BatchJob(string id, string displayName, valuetype System.Nullable`1&lt;bool&gt; usesTaskDependencies, string url, string eTag, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastModified, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; creationTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchJobState&gt; state, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchJobState&gt; previousState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; previousStateTransitionTime, valuetype System.Nullable`1&lt;int32&gt; priority, valuetype System.Nullable`1&lt;bool&gt; allowTaskPreemption, valuetype System.Nullable`1&lt;int32&gt; maxParallelTasks, class Azure.Compute.Batch.BatchJobConstraints constraints, class Azure.Compute.Batch.BatchJobManagerTask jobManagerTask, class Azure.Compute.Batch.BatchJobPreparationTask jobPreparationTask, class Azure.Compute.Batch.BatchJobReleaseTask jobReleaseTask, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.EnvironmentSetting&gt; commonEnvironmentSettings, class Azure.Compute.Batch.BatchPoolInfo poolInfo, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.OnAllBatchTasksComplete&gt; onAllTasksComplete, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.OnBatchTaskFailure&gt; onTaskFailure, class Azure.Compute.Batch.BatchJobNetworkConfiguration networkConfiguration, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata, class Azure.Compute.Batch.BatchJobExecutionInfo executionInfo, class Azure.Compute.Batch.BatchJobStatistics stats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJob(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchJobState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchJobState},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},Azure.Compute.Batch.BatchJobConstraints,Azure.Compute.Batch.BatchJobManagerTask,Azure.Compute.Batch.BatchJobPreparationTask,Azure.Compute.Batch.BatchJobReleaseTask,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.EnvironmentSetting},Azure.Compute.Batch.BatchPoolInfo,System.Nullable{Azure.Compute.Batch.OnAllBatchTasksComplete},System.Nullable{Azure.Compute.Batch.OnBatchTaskFailure},Azure.Compute.Batch.BatchJobNetworkConfiguration,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem},Azure.Compute.Batch.BatchJobExecutionInfo,Azure.Compute.Batch.BatchJobStatistics)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJob (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional usesTaskDependencies As Nullable(Of Boolean) = Nothing, Optional url As String = Nothing, Optional eTag As String = Nothing, Optional lastModified As Nullable(Of DateTimeOffset) = Nothing, Optional creationTime As Nullable(Of DateTimeOffset) = Nothing, Optional state As Nullable(Of BatchJobState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional previousState As Nullable(Of BatchJobState) = Nothing, Optional previousStateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional priority As Nullable(Of Integer) = Nothing, Optional allowTaskPreemption As Nullable(Of Boolean) = Nothing, Optional maxParallelTasks As Nullable(Of Integer) = Nothing, Optional constraints As BatchJobConstraints = Nothing, Optional jobManagerTask As BatchJobManagerTask = Nothing, Optional jobPreparationTask As BatchJobPreparationTask = Nothing, Optional jobReleaseTask As BatchJobReleaseTask = Nothing, Optional commonEnvironmentSettings As IEnumerable(Of EnvironmentSetting) = Nothing, Optional poolInfo As BatchPoolInfo = Nothing, Optional onAllTasksComplete As Nullable(Of OnAllBatchTasksComplete) = Nothing, Optional onTaskFailure As Nullable(Of OnBatchTaskFailure) = Nothing, Optional networkConfiguration As BatchJobNetworkConfiguration = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing, Optional executionInfo As BatchJobExecutionInfo = Nothing, Optional stats As BatchJobStatistics = Nothing) As BatchJob" />
      <MemberSignature Language="F#" Value="static member BatchJob : string * string * Nullable&lt;bool&gt; * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchJobState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchJobState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchJobConstraints * Azure.Compute.Batch.BatchJobManagerTask * Azure.Compute.Batch.BatchJobPreparationTask * Azure.Compute.Batch.BatchJobReleaseTask * seq&lt;Azure.Compute.Batch.EnvironmentSetting&gt; * Azure.Compute.Batch.BatchPoolInfo * Nullable&lt;Azure.Compute.Batch.OnAllBatchTasksComplete&gt; * Nullable&lt;Azure.Compute.Batch.OnBatchTaskFailure&gt; * Azure.Compute.Batch.BatchJobNetworkConfiguration * seq&lt;Azure.Compute.Batch.MetadataItem&gt; * Azure.Compute.Batch.BatchJobExecutionInfo * Azure.Compute.Batch.BatchJobStatistics -&gt; Azure.Compute.Batch.BatchJob" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJob (id, displayName, usesTaskDependencies, url, eTag, lastModified, creationTime, state, stateTransitionTime, previousState, previousStateTransitionTime, priority, allowTaskPreemption, maxParallelTasks, constraints, jobManagerTask, jobPreparationTask, jobReleaseTask, commonEnvironmentSettings, poolInfo, onAllTasksComplete, onTaskFailure, networkConfiguration, metadata, executionInfo, stats)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="usesTaskDependencies" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="eTag" Type="System.String" />
        <Parameter Name="lastModified" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="creationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchJobState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="previousState" Type="System.Nullable&lt;Azure.Compute.Batch.BatchJobState&gt;" />
        <Parameter Name="previousStateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="priority" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="allowTaskPreemption" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="maxParallelTasks" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="constraints" Type="Azure.Compute.Batch.BatchJobConstraints" />
        <Parameter Name="jobManagerTask" Type="Azure.Compute.Batch.BatchJobManagerTask" />
        <Parameter Name="jobPreparationTask" Type="Azure.Compute.Batch.BatchJobPreparationTask" />
        <Parameter Name="jobReleaseTask" Type="Azure.Compute.Batch.BatchJobReleaseTask" />
        <Parameter Name="commonEnvironmentSettings" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt;" />
        <Parameter Name="poolInfo" Type="Azure.Compute.Batch.BatchPoolInfo" />
        <Parameter Name="onAllTasksComplete" Type="System.Nullable&lt;Azure.Compute.Batch.OnAllBatchTasksComplete&gt;" />
        <Parameter Name="onTaskFailure" Type="System.Nullable&lt;Azure.Compute.Batch.OnBatchTaskFailure&gt;" />
        <Parameter Name="networkConfiguration" Type="Azure.Compute.Batch.BatchJobNetworkConfiguration" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
        <Parameter Name="executionInfo" Type="Azure.Compute.Batch.BatchJobExecutionInfo" />
        <Parameter Name="stats" Type="Azure.Compute.Batch.BatchJobStatistics" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Job within the Account. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        <param name="displayName"> The display name for the Job. </param>
        <param name="usesTaskDependencies"> Whether Tasks in the Job can define dependencies on each other. The default is false. </param>
        <param name="url"> The URL of the Job. </param>
        <param name="eTag"> The ETag of the Job. This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime. </param>
        <param name="lastModified"> The last modified time of the Job. This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state. </param>
        <param name="creationTime"> The creation time of the Job. </param>
        <param name="state"> The current state of the Job. </param>
        <param name="stateTransitionTime"> The time at which the Job entered its current state. </param>
        <param name="previousState"> The previous state of the Job. This property is not set if the Job is in its initial Active state. </param>
        <param name="previousStateTransitionTime"> The time at which the Job entered its previous state. This property is not set if the Job is in its initial Active state. </param>
        <param name="priority"> The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. </param>
        <param name="allowTaskPreemption"> Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. </param>
        <param name="maxParallelTasks"> The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API. </param>
        <param name="constraints"> The execution constraints for the Job. </param>
        <param name="jobManagerTask"> Details of a Job Manager Task to be launched when the Job is started. </param>
        <param name="jobPreparationTask"> The Job Preparation Task. The Job Preparation Task is a special Task run on each Compute Node before any other Task of the Job. </param>
        <param name="jobReleaseTask"> The Job Release Task. The Job Release Task is a special Task run at the end of the Job on each Compute Node that has run any other Task of the Job. </param>
        <param name="commonEnvironmentSettings"> The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value. </param>
        <param name="poolInfo"> The Pool settings associated with the Job. </param>
        <param name="onAllTasksComplete"> The action the Batch service should take when all Tasks in the Job are in the completed state. The default is noaction. </param>
        <param name="onTaskFailure"> The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction. </param>
        <param name="networkConfiguration"> The network configuration for the Job. </param>
        <param name="metadata"> A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        <param name="executionInfo"> The execution information for the Job. </param>
        <param name="stats"> Resource usage statistics for the entire lifetime of the Job. This property is populated only if the CloudJob was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJob" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJob" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobCreateContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobCreateContent BatchJobCreateContent (string id = default, string displayName = default, bool? usesTaskDependencies = default, int? priority = default, bool? allowTaskPreemption = default, int? maxParallelTasks = default, Azure.Compute.Batch.BatchJobConstraints constraints = default, Azure.Compute.Batch.BatchJobManagerTask jobManagerTask = default, Azure.Compute.Batch.BatchJobPreparationTask jobPreparationTask = default, Azure.Compute.Batch.BatchJobReleaseTask jobReleaseTask = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt; commonEnvironmentSettings = default, Azure.Compute.Batch.BatchPoolInfo poolInfo = default, Azure.Compute.Batch.OnAllBatchTasksComplete? onAllTasksComplete = default, Azure.Compute.Batch.OnBatchTaskFailure? onTaskFailure = default, Azure.Compute.Batch.BatchJobNetworkConfiguration networkConfiguration = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobCreateContent BatchJobCreateContent(string id, string displayName, valuetype System.Nullable`1&lt;bool&gt; usesTaskDependencies, valuetype System.Nullable`1&lt;int32&gt; priority, valuetype System.Nullable`1&lt;bool&gt; allowTaskPreemption, valuetype System.Nullable`1&lt;int32&gt; maxParallelTasks, class Azure.Compute.Batch.BatchJobConstraints constraints, class Azure.Compute.Batch.BatchJobManagerTask jobManagerTask, class Azure.Compute.Batch.BatchJobPreparationTask jobPreparationTask, class Azure.Compute.Batch.BatchJobReleaseTask jobReleaseTask, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.EnvironmentSetting&gt; commonEnvironmentSettings, class Azure.Compute.Batch.BatchPoolInfo poolInfo, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.OnAllBatchTasksComplete&gt; onAllTasksComplete, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.OnBatchTaskFailure&gt; onTaskFailure, class Azure.Compute.Batch.BatchJobNetworkConfiguration networkConfiguration, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobCreateContent(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},Azure.Compute.Batch.BatchJobConstraints,Azure.Compute.Batch.BatchJobManagerTask,Azure.Compute.Batch.BatchJobPreparationTask,Azure.Compute.Batch.BatchJobReleaseTask,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.EnvironmentSetting},Azure.Compute.Batch.BatchPoolInfo,System.Nullable{Azure.Compute.Batch.OnAllBatchTasksComplete},System.Nullable{Azure.Compute.Batch.OnBatchTaskFailure},Azure.Compute.Batch.BatchJobNetworkConfiguration,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobCreateContent (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional usesTaskDependencies As Nullable(Of Boolean) = Nothing, Optional priority As Nullable(Of Integer) = Nothing, Optional allowTaskPreemption As Nullable(Of Boolean) = Nothing, Optional maxParallelTasks As Nullable(Of Integer) = Nothing, Optional constraints As BatchJobConstraints = Nothing, Optional jobManagerTask As BatchJobManagerTask = Nothing, Optional jobPreparationTask As BatchJobPreparationTask = Nothing, Optional jobReleaseTask As BatchJobReleaseTask = Nothing, Optional commonEnvironmentSettings As IEnumerable(Of EnvironmentSetting) = Nothing, Optional poolInfo As BatchPoolInfo = Nothing, Optional onAllTasksComplete As Nullable(Of OnAllBatchTasksComplete) = Nothing, Optional onTaskFailure As Nullable(Of OnBatchTaskFailure) = Nothing, Optional networkConfiguration As BatchJobNetworkConfiguration = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing) As BatchJobCreateContent" />
      <MemberSignature Language="F#" Value="static member BatchJobCreateContent : string * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchJobConstraints * Azure.Compute.Batch.BatchJobManagerTask * Azure.Compute.Batch.BatchJobPreparationTask * Azure.Compute.Batch.BatchJobReleaseTask * seq&lt;Azure.Compute.Batch.EnvironmentSetting&gt; * Azure.Compute.Batch.BatchPoolInfo * Nullable&lt;Azure.Compute.Batch.OnAllBatchTasksComplete&gt; * Nullable&lt;Azure.Compute.Batch.OnBatchTaskFailure&gt; * Azure.Compute.Batch.BatchJobNetworkConfiguration * seq&lt;Azure.Compute.Batch.MetadataItem&gt; -&gt; Azure.Compute.Batch.BatchJobCreateContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobCreateContent (id, displayName, usesTaskDependencies, priority, allowTaskPreemption, maxParallelTasks, constraints, jobManagerTask, jobPreparationTask, jobReleaseTask, commonEnvironmentSettings, poolInfo, onAllTasksComplete, onTaskFailure, networkConfiguration, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobCreateContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="usesTaskDependencies" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="priority" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="allowTaskPreemption" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="maxParallelTasks" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="constraints" Type="Azure.Compute.Batch.BatchJobConstraints" />
        <Parameter Name="jobManagerTask" Type="Azure.Compute.Batch.BatchJobManagerTask" />
        <Parameter Name="jobPreparationTask" Type="Azure.Compute.Batch.BatchJobPreparationTask" />
        <Parameter Name="jobReleaseTask" Type="Azure.Compute.Batch.BatchJobReleaseTask" />
        <Parameter Name="commonEnvironmentSettings" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt;" />
        <Parameter Name="poolInfo" Type="Azure.Compute.Batch.BatchPoolInfo" />
        <Parameter Name="onAllTasksComplete" Type="System.Nullable&lt;Azure.Compute.Batch.OnAllBatchTasksComplete&gt;" />
        <Parameter Name="onTaskFailure" Type="System.Nullable&lt;Azure.Compute.Batch.OnBatchTaskFailure&gt;" />
        <Parameter Name="networkConfiguration" Type="Azure.Compute.Batch.BatchJobNetworkConfiguration" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Job within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        <param name="displayName"> The display name for the Job. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="usesTaskDependencies"> Whether Tasks in the Job can define dependencies on each other. The default is false. </param>
        <param name="priority"> The priority of the Job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. </param>
        <param name="allowTaskPreemption"> Whether Tasks in this job can be preempted by other high priority jobs. If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. </param>
        <param name="maxParallelTasks"> The maximum number of tasks that can be executed in parallel for the job. The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API. </param>
        <param name="constraints"> The execution constraints for the Job. </param>
        <param name="jobManagerTask"> Details of a Job Manager Task to be launched when the Job is started. If the Job does not specify a Job Manager Task, the user must explicitly add Tasks to the Job. If the Job does specify a Job Manager Task, the Batch service creates the Job Manager Task when the Job is created, and will try to schedule the Job Manager Task before scheduling other Tasks in the Job. The Job Manager Task's typical purpose is to control and/or monitor Job execution, for example by deciding what additional Tasks to run, determining when the work is complete, etc. (However, a Job Manager Task is not restricted to these activities - it is a fully-fledged Task in the system and perform whatever actions are required for the Job.) For example, a Job Manager Task might download a file specified as a parameter, analyze the contents of that file and submit additional Tasks based on those contents. </param>
        <param name="jobPreparationTask"> The Job Preparation Task. If a Job has a Job Preparation Task, the Batch service will run the Job Preparation Task on a Node before starting any Tasks of that Job on that Compute Node. </param>
        <param name="jobReleaseTask"> The Job Release Task. A Job Release Task cannot be specified without also specifying a Job Preparation Task for the Job. The Batch service runs the Job Release Task on the Nodes that have run the Job Preparation Task. The primary purpose of the Job Release Task is to undo changes to Compute Nodes made by the Job Preparation Task. Example activities include deleting local files, or shutting down services that were started as part of Job preparation. </param>
        <param name="commonEnvironmentSettings"> The list of common environment variable settings. These environment variables are set for all Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value. </param>
        <param name="poolInfo"> The Pool on which the Batch service runs the Job's Tasks. </param>
        <param name="onAllTasksComplete"> The action the Batch service should take when all Tasks in the Job are in the completed state. Note that if a Job contains no Tasks, then all Tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic Job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete to terminatejob once you have finished adding Tasks. The default is noaction. </param>
        <param name="onTaskFailure"> The action the Batch service should take when any Task in the Job fails. A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction. </param>
        <param name="networkConfiguration"> The network configuration for the Job. </param>
        <param name="metadata"> A list of name-value pairs associated with the Job as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobCreateContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobCreateContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobExecutionInfo BatchJobExecutionInfo (DateTimeOffset startTime = default, DateTimeOffset? endTime = default, string poolId = default, Azure.Compute.Batch.BatchJobSchedulingError schedulingError = default, string terminationReason = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobExecutionInfo BatchJobExecutionInfo(valuetype System.DateTimeOffset startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, string poolId, class Azure.Compute.Batch.BatchJobSchedulingError schedulingError, string terminationReason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobExecutionInfo(System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.String,Azure.Compute.Batch.BatchJobSchedulingError,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobExecutionInfo (Optional startTime As DateTimeOffset = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional poolId As String = Nothing, Optional schedulingError As BatchJobSchedulingError = Nothing, Optional terminationReason As String = Nothing) As BatchJobExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchJobExecutionInfo : DateTimeOffset * Nullable&lt;DateTimeOffset&gt; * string * Azure.Compute.Batch.BatchJobSchedulingError * string -&gt; Azure.Compute.Batch.BatchJobExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobExecutionInfo (startTime, endTime, poolId, schedulingError, terminationReason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="schedulingError" Type="Azure.Compute.Batch.BatchJobSchedulingError" />
        <Parameter Name="terminationReason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startTime"> The start time of the Job. This is the time at which the Job was created. </param>
        <param name="endTime"> The completion time of the Job. This property is set only if the Job is in the completed state. </param>
        <param name="poolId"> The ID of the Pool to which this Job is assigned. This element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool. </param>
        <param name="schedulingError"> Details of any error encountered by the service in starting the Job. This property is not set if there was no error starting the Job. </param>
        <param name="terminationReason"> A string describing the reason the Job ended. This property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobPreparationAndReleaseTaskStatus">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus BatchJobPreparationAndReleaseTaskStatus (string poolId = default, string nodeId = default, string nodeUrl = default, Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo jobPreparationTaskExecutionInfo = default, Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo jobReleaseTaskExecutionInfo = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus BatchJobPreparationAndReleaseTaskStatus(string poolId, string nodeId, string nodeUrl, class Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo jobPreparationTaskExecutionInfo, class Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo jobReleaseTaskExecutionInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobPreparationAndReleaseTaskStatus(System.String,System.String,System.String,Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo,Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobPreparationAndReleaseTaskStatus (Optional poolId As String = Nothing, Optional nodeId As String = Nothing, Optional nodeUrl As String = Nothing, Optional jobPreparationTaskExecutionInfo As BatchJobPreparationTaskExecutionInfo = Nothing, Optional jobReleaseTaskExecutionInfo As BatchJobReleaseTaskExecutionInfo = Nothing) As BatchJobPreparationAndReleaseTaskStatus" />
      <MemberSignature Language="F#" Value="static member BatchJobPreparationAndReleaseTaskStatus : string * string * string * Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo * Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo -&gt; Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobPreparationAndReleaseTaskStatus (poolId, nodeId, nodeUrl, jobPreparationTaskExecutionInfo, jobReleaseTaskExecutionInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="nodeUrl" Type="System.String" />
        <Parameter Name="jobPreparationTaskExecutionInfo" Type="Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo" />
        <Parameter Name="jobReleaseTaskExecutionInfo" Type="Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool containing the Compute Node to which this entry refers. </param>
        <param name="nodeId"> The ID of the Compute Node to which this entry refers. </param>
        <param name="nodeUrl"> The URL of the Compute Node to which this entry refers. </param>
        <param name="jobPreparationTaskExecutionInfo"> Information about the execution status of the Job Preparation Task on this Compute Node. </param>
        <param name="jobReleaseTaskExecutionInfo"> Information about the execution status of the Job Release Task on this Compute Node. This property is set only if the Job Release Task has run on the Compute Node. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobPreparationTaskExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo BatchJobPreparationTaskExecutionInfo (DateTimeOffset startTime = default, DateTimeOffset? endTime = default, Azure.Compute.Batch.BatchJobPreparationTaskState state = default, string taskRootDirectory = default, string taskRootDirectoryUrl = default, int? exitCode = default, Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo = default, Azure.Compute.Batch.BatchTaskFailureInfo failureInfo = default, int retryCount = 0, DateTimeOffset? lastRetryTime = default, Azure.Compute.Batch.BatchTaskExecutionResult? result = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo BatchJobPreparationTaskExecutionInfo(valuetype System.DateTimeOffset startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, valuetype Azure.Compute.Batch.BatchJobPreparationTaskState state, string taskRootDirectory, string taskRootDirectoryUrl, valuetype System.Nullable`1&lt;int32&gt; exitCode, class Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo, class Azure.Compute.Batch.BatchTaskFailureInfo failureInfo, int32 retryCount, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastRetryTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskExecutionResult&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobPreparationTaskExecutionInfo(System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.BatchJobPreparationTaskState,System.String,System.String,System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskContainerExecutionInfo,Azure.Compute.Batch.BatchTaskFailureInfo,System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchTaskExecutionResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobPreparationTaskExecutionInfo (Optional startTime As DateTimeOffset = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional state As BatchJobPreparationTaskState = Nothing, Optional taskRootDirectory As String = Nothing, Optional taskRootDirectoryUrl As String = Nothing, Optional exitCode As Nullable(Of Integer) = Nothing, Optional containerInfo As BatchTaskContainerExecutionInfo = Nothing, Optional failureInfo As BatchTaskFailureInfo = Nothing, Optional retryCount As Integer = 0, Optional lastRetryTime As Nullable(Of DateTimeOffset) = Nothing, Optional result As Nullable(Of BatchTaskExecutionResult) = Nothing) As BatchJobPreparationTaskExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchJobPreparationTaskExecutionInfo : DateTimeOffset * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.BatchJobPreparationTaskState * string * string * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskContainerExecutionInfo * Azure.Compute.Batch.BatchTaskFailureInfo * int * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt; -&gt; Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobPreparationTaskExecutionInfo (startTime, endTime, state, taskRootDirectory, taskRootDirectoryUrl, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="state" Type="Azure.Compute.Batch.BatchJobPreparationTaskState" />
        <Parameter Name="taskRootDirectory" Type="System.String" />
        <Parameter Name="taskRootDirectoryUrl" Type="System.String" />
        <Parameter Name="exitCode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="containerInfo" Type="Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />
        <Parameter Name="failureInfo" Type="Azure.Compute.Batch.BatchTaskFailureInfo" />
        <Parameter Name="retryCount" Type="System.Int32" />
        <Parameter Name="lastRetryTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="result" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt;" />
      </Parameters>
      <Docs>
        <param name="startTime"> The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at which the Task started running. </param>
        <param name="endTime"> The time at which the Job Preparation Task completed. This property is set only if the Task is in the Completed state. </param>
        <param name="state"> The current state of the Job Preparation Task on the Compute Node. </param>
        <param name="taskRootDirectory"> The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files. </param>
        <param name="taskRootDirectoryUrl"> The URL to the root directory of the Job Preparation Task on the Compute Node. </param>
        <param name="exitCode"> The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated. </param>
        <param name="containerInfo"> Information about the container under which the Task is executing. This property is set only if the Task runs in a container context. </param>
        <param name="failureInfo"> Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered a failure. </param>
        <param name="retryCount"> The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        <param name="lastRetryTime"> The most recent time at which a retry of the Job Preparation Task started running. This property is set only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        <param name="result"> The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobPreparationTaskExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobReleaseTaskExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo BatchJobReleaseTaskExecutionInfo (DateTimeOffset startTime = default, DateTimeOffset? endTime = default, Azure.Compute.Batch.BatchJobReleaseTaskState state = default, string taskRootDirectory = default, string taskRootDirectoryUrl = default, int? exitCode = default, Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo = default, Azure.Compute.Batch.BatchTaskFailureInfo failureInfo = default, Azure.Compute.Batch.BatchTaskExecutionResult? result = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo BatchJobReleaseTaskExecutionInfo(valuetype System.DateTimeOffset startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, valuetype Azure.Compute.Batch.BatchJobReleaseTaskState state, string taskRootDirectory, string taskRootDirectoryUrl, valuetype System.Nullable`1&lt;int32&gt; exitCode, class Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo, class Azure.Compute.Batch.BatchTaskFailureInfo failureInfo, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskExecutionResult&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobReleaseTaskExecutionInfo(System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.BatchJobReleaseTaskState,System.String,System.String,System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskContainerExecutionInfo,Azure.Compute.Batch.BatchTaskFailureInfo,System.Nullable{Azure.Compute.Batch.BatchTaskExecutionResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobReleaseTaskExecutionInfo (Optional startTime As DateTimeOffset = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional state As BatchJobReleaseTaskState = Nothing, Optional taskRootDirectory As String = Nothing, Optional taskRootDirectoryUrl As String = Nothing, Optional exitCode As Nullable(Of Integer) = Nothing, Optional containerInfo As BatchTaskContainerExecutionInfo = Nothing, Optional failureInfo As BatchTaskFailureInfo = Nothing, Optional result As Nullable(Of BatchTaskExecutionResult) = Nothing) As BatchJobReleaseTaskExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchJobReleaseTaskExecutionInfo : DateTimeOffset * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.BatchJobReleaseTaskState * string * string * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskContainerExecutionInfo * Azure.Compute.Batch.BatchTaskFailureInfo * Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt; -&gt; Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobReleaseTaskExecutionInfo (startTime, endTime, state, taskRootDirectory, taskRootDirectoryUrl, exitCode, containerInfo, failureInfo, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="state" Type="Azure.Compute.Batch.BatchJobReleaseTaskState" />
        <Parameter Name="taskRootDirectory" Type="System.String" />
        <Parameter Name="taskRootDirectoryUrl" Type="System.String" />
        <Parameter Name="exitCode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="containerInfo" Type="Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />
        <Parameter Name="failureInfo" Type="Azure.Compute.Batch.BatchTaskFailureInfo" />
        <Parameter Name="result" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt;" />
      </Parameters>
      <Docs>
        <param name="startTime"> The time at which the Task started running. If the Task has been restarted or retried, this is the most recent time at which the Task started running. </param>
        <param name="endTime"> The time at which the Job Release Task completed. This property is set only if the Task is in the Completed state. </param>
        <param name="state"> The current state of the Job Release Task on the Compute Node. </param>
        <param name="taskRootDirectory"> The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files. </param>
        <param name="taskRootDirectoryUrl"> The URL to the root directory of the Job Release Task on the Compute Node. </param>
        <param name="exitCode"> The exit code of the program specified on the Task command line. This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated. </param>
        <param name="containerInfo"> Information about the container under which the Task is executing. This property is set only if the Task runs in a container context. </param>
        <param name="failureInfo"> Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered a failure. </param>
        <param name="result"> The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobReleaseTaskExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobSchedule">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobSchedule BatchJobSchedule (string id = default, string displayName = default, string url = default, string eTag = default, DateTimeOffset? lastModified = default, DateTimeOffset? creationTime = default, Azure.Compute.Batch.BatchJobScheduleState? state = default, DateTimeOffset? stateTransitionTime = default, Azure.Compute.Batch.BatchJobScheduleState? previousState = default, DateTimeOffset? previousStateTransitionTime = default, Azure.Compute.Batch.BatchJobScheduleConfiguration schedule = default, Azure.Compute.Batch.BatchJobSpecification jobSpecification = default, Azure.Compute.Batch.BatchJobScheduleExecutionInfo executionInfo = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default, Azure.Compute.Batch.BatchJobScheduleStatistics stats = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobSchedule BatchJobSchedule(string id, string displayName, string url, string eTag, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastModified, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; creationTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchJobScheduleState&gt; state, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchJobScheduleState&gt; previousState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; previousStateTransitionTime, class Azure.Compute.Batch.BatchJobScheduleConfiguration schedule, class Azure.Compute.Batch.BatchJobSpecification jobSpecification, class Azure.Compute.Batch.BatchJobScheduleExecutionInfo executionInfo, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata, class Azure.Compute.Batch.BatchJobScheduleStatistics stats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobSchedule(System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchJobScheduleState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchJobScheduleState},System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.BatchJobScheduleConfiguration,Azure.Compute.Batch.BatchJobSpecification,Azure.Compute.Batch.BatchJobScheduleExecutionInfo,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem},Azure.Compute.Batch.BatchJobScheduleStatistics)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobSchedule (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional url As String = Nothing, Optional eTag As String = Nothing, Optional lastModified As Nullable(Of DateTimeOffset) = Nothing, Optional creationTime As Nullable(Of DateTimeOffset) = Nothing, Optional state As Nullable(Of BatchJobScheduleState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional previousState As Nullable(Of BatchJobScheduleState) = Nothing, Optional previousStateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional schedule As BatchJobScheduleConfiguration = Nothing, Optional jobSpecification As BatchJobSpecification = Nothing, Optional executionInfo As BatchJobScheduleExecutionInfo = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing, Optional stats As BatchJobScheduleStatistics = Nothing) As BatchJobSchedule" />
      <MemberSignature Language="F#" Value="static member BatchJobSchedule : string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchJobScheduleState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchJobScheduleState&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.BatchJobScheduleConfiguration * Azure.Compute.Batch.BatchJobSpecification * Azure.Compute.Batch.BatchJobScheduleExecutionInfo * seq&lt;Azure.Compute.Batch.MetadataItem&gt; * Azure.Compute.Batch.BatchJobScheduleStatistics -&gt; Azure.Compute.Batch.BatchJobSchedule" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobSchedule (id, displayName, url, eTag, lastModified, creationTime, state, stateTransitionTime, previousState, previousStateTransitionTime, schedule, jobSpecification, executionInfo, metadata, stats)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobSchedule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="eTag" Type="System.String" />
        <Parameter Name="lastModified" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="creationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchJobScheduleState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="previousState" Type="System.Nullable&lt;Azure.Compute.Batch.BatchJobScheduleState&gt;" />
        <Parameter Name="previousStateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="schedule" Type="Azure.Compute.Batch.BatchJobScheduleConfiguration" />
        <Parameter Name="jobSpecification" Type="Azure.Compute.Batch.BatchJobSpecification" />
        <Parameter Name="executionInfo" Type="Azure.Compute.Batch.BatchJobScheduleExecutionInfo" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
        <Parameter Name="stats" Type="Azure.Compute.Batch.BatchJobScheduleStatistics" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the schedule within the Account. </param>
        <param name="displayName"> The display name for the schedule. </param>
        <param name="url"> The URL of the Job Schedule. </param>
        <param name="eTag"> The ETag of the Job Schedule. This is an opaque string. You can use it to detect whether the Job Schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime. </param>
        <param name="lastModified"> The last modified time of the Job Schedule. This is the last time at which the schedule level data, such as the Job specification or recurrence information, changed. It does not factor in job-level changes such as new Jobs being created or Jobs changing state. </param>
        <param name="creationTime"> The creation time of the Job Schedule. </param>
        <param name="state"> The current state of the Job Schedule. </param>
        <param name="stateTransitionTime"> The time at which the Job Schedule entered the current state. </param>
        <param name="previousState"> The previous state of the Job Schedule. This property is not present if the Job Schedule is in its initial active state. </param>
        <param name="previousStateTransitionTime"> The time at which the Job Schedule entered its previous state. This property is not present if the Job Schedule is in its initial active state. </param>
        <param name="schedule"> The schedule according to which Jobs will be created. All times are fixed respective to UTC and are not impacted by daylight saving time. </param>
        <param name="jobSpecification"> The details of the Jobs to be created on this schedule. </param>
        <param name="executionInfo"> Information about Jobs that have been and will be run under this schedule. </param>
        <param name="metadata"> A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        <param name="stats"> The lifetime resource usage statistics for the Job Schedule. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobSchedule" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobSchedule" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobScheduleCreateContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobScheduleCreateContent BatchJobScheduleCreateContent (string id = default, string displayName = default, Azure.Compute.Batch.BatchJobScheduleConfiguration schedule = default, Azure.Compute.Batch.BatchJobSpecification jobSpecification = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobScheduleCreateContent BatchJobScheduleCreateContent(string id, string displayName, class Azure.Compute.Batch.BatchJobScheduleConfiguration schedule, class Azure.Compute.Batch.BatchJobSpecification jobSpecification, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleCreateContent(System.String,System.String,Azure.Compute.Batch.BatchJobScheduleConfiguration,Azure.Compute.Batch.BatchJobSpecification,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobScheduleCreateContent (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional schedule As BatchJobScheduleConfiguration = Nothing, Optional jobSpecification As BatchJobSpecification = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing) As BatchJobScheduleCreateContent" />
      <MemberSignature Language="F#" Value="static member BatchJobScheduleCreateContent : string * string * Azure.Compute.Batch.BatchJobScheduleConfiguration * Azure.Compute.Batch.BatchJobSpecification * seq&lt;Azure.Compute.Batch.MetadataItem&gt; -&gt; Azure.Compute.Batch.BatchJobScheduleCreateContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleCreateContent (id, displayName, schedule, jobSpecification, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobScheduleCreateContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="schedule" Type="Azure.Compute.Batch.BatchJobScheduleConfiguration" />
        <Parameter Name="jobSpecification" Type="Azure.Compute.Batch.BatchJobSpecification" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the schedule within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        <param name="displayName"> The display name for the schedule. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="schedule"> The schedule according to which Jobs will be created. All times are fixed respective to UTC and are not impacted by daylight saving time. </param>
        <param name="jobSpecification"> The details of the Jobs to be created on this schedule. </param>
        <param name="metadata"> A list of name-value pairs associated with the schedule as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobScheduleCreateContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobScheduleCreateContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobScheduleExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobScheduleExecutionInfo BatchJobScheduleExecutionInfo (DateTimeOffset? nextRunTime = default, Azure.Compute.Batch.RecentBatchJob recentJob = default, DateTimeOffset? endTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobScheduleExecutionInfo BatchJobScheduleExecutionInfo(valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; nextRunTime, class Azure.Compute.Batch.RecentBatchJob recentJob, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleExecutionInfo(System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.RecentBatchJob,System.Nullable{System.DateTimeOffset})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobScheduleExecutionInfo (Optional nextRunTime As Nullable(Of DateTimeOffset) = Nothing, Optional recentJob As RecentBatchJob = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing) As BatchJobScheduleExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchJobScheduleExecutionInfo : Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.RecentBatchJob * Nullable&lt;DateTimeOffset&gt; -&gt; Azure.Compute.Batch.BatchJobScheduleExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleExecutionInfo (nextRunTime, recentJob, endTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobScheduleExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextRunTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="recentJob" Type="Azure.Compute.Batch.RecentBatchJob" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
      </Parameters>
      <Docs>
        <param name="nextRunTime"> The next time at which a Job will be created under this schedule. This property is meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule is disabled, no Job will be created at nextRunTime unless the Job is enabled before then. </param>
        <param name="recentJob"> Information about the most recent Job under the Job Schedule. This property is present only if the at least one Job has run under the schedule. </param>
        <param name="endTime"> The time at which the schedule ended. This property is set only if the Job Schedule is in the completed state. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobScheduleExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobScheduleExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobScheduleStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobScheduleStatistics BatchJobScheduleStatistics (string url = default, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = 0, long writeIOps = 0, float readIOGiB = 0, float writeIOGiB = 0, long numSucceededTasks = 0, long numFailedTasks = 0, long numTaskRetries = 0, TimeSpan waitTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobScheduleStatistics BatchJobScheduleStatistics(string url, valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, valuetype System.TimeSpan userCpuTime, valuetype System.TimeSpan kernelCpuTime, valuetype System.TimeSpan wallClockTime, int64 readIOps, int64 writeIOps, float32 readIOGiB, float32 writeIOGiB, int64 numSucceededTasks, int64 numFailedTasks, int64 numTaskRetries, valuetype System.TimeSpan waitTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleStatistics(System.String,System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int64,System.Int64,System.Single,System.Single,System.Int64,System.Int64,System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobScheduleStatistics (Optional url As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional userCpuTime As TimeSpan = Nothing, Optional kernelCpuTime As TimeSpan = Nothing, Optional wallClockTime As TimeSpan = Nothing, Optional readIOps As Long = 0, Optional writeIOps As Long = 0, Optional readIOGiB As Single = 0, Optional writeIOGiB As Single = 0, Optional numSucceededTasks As Long = 0, Optional numFailedTasks As Long = 0, Optional numTaskRetries As Long = 0, Optional waitTime As TimeSpan = Nothing) As BatchJobScheduleStatistics" />
      <MemberSignature Language="F#" Value="static member BatchJobScheduleStatistics : string * DateTimeOffset * DateTimeOffset * TimeSpan * TimeSpan * TimeSpan * int64 * int64 * single * single * int64 * int64 * int64 * TimeSpan -&gt; Azure.Compute.Batch.BatchJobScheduleStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobScheduleStatistics (url, startTime, lastUpdateTime, userCpuTime, kernelCpuTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, numSucceededTasks, numFailedTasks, numTaskRetries, waitTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobScheduleStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="userCpuTime" Type="System.TimeSpan" />
        <Parameter Name="kernelCpuTime" Type="System.TimeSpan" />
        <Parameter Name="wallClockTime" Type="System.TimeSpan" />
        <Parameter Name="readIOps" Type="System.Int64" />
        <Parameter Name="writeIOps" Type="System.Int64" />
        <Parameter Name="readIOGiB" Type="System.Single" />
        <Parameter Name="writeIOGiB" Type="System.Single" />
        <Parameter Name="numSucceededTasks" Type="System.Int64" />
        <Parameter Name="numFailedTasks" Type="System.Int64" />
        <Parameter Name="numTaskRetries" Type="System.Int64" />
        <Parameter Name="waitTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="url"> The URL of the statistics. </param>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="userCpuTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule. </param>
        <param name="kernelCpuTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule. </param>
        <param name="wallClockTime"> The total wall clock time of all the Tasks in all the Jobs created under the schedule. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </param>
        <param name="readIOps"> The total number of disk read operations made by all Tasks in all Jobs created under the schedule. </param>
        <param name="writeIOps"> The total number of disk write operations made by all Tasks in all Jobs created under the schedule. </param>
        <param name="readIOGiB"> The total gibibytes read from disk by all Tasks in all Jobs created under the schedule. </param>
        <param name="writeIOGiB"> The total gibibytes written to disk by all Tasks in all Jobs created under the schedule. </param>
        <param name="numSucceededTasks"> The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task completes successfully if it returns exit code 0. </param>
        <param name="numFailedTasks"> The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if it exhausts its maximum retry count without returning exit code 0. </param>
        <param name="numTaskRetries"> The total number of retries during the given time range on all Tasks in all Jobs created under the schedule. </param>
        <param name="waitTime"> The total wait time of all Tasks in all Jobs created under the schedule. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.). This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobScheduleStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobScheduleStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobSchedulingError">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobSchedulingError BatchJobSchedulingError (Azure.Compute.Batch.ErrorCategory category = default, string code = default, string message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt; details = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobSchedulingError BatchJobSchedulingError(valuetype Azure.Compute.Batch.ErrorCategory category, string code, string message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.NameValuePair&gt; details) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobSchedulingError(Azure.Compute.Batch.ErrorCategory,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.NameValuePair})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobSchedulingError (Optional category As ErrorCategory = Nothing, Optional code As String = Nothing, Optional message As String = Nothing, Optional details As IEnumerable(Of NameValuePair) = Nothing) As BatchJobSchedulingError" />
      <MemberSignature Language="F#" Value="static member BatchJobSchedulingError : Azure.Compute.Batch.ErrorCategory * string * string * seq&lt;Azure.Compute.Batch.NameValuePair&gt; -&gt; Azure.Compute.Batch.BatchJobSchedulingError" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobSchedulingError (category, code, message, details)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobSchedulingError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="Azure.Compute.Batch.ErrorCategory" />
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="details" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt;" />
      </Parameters>
      <Docs>
        <param name="category"> The category of the Job scheduling error. </param>
        <param name="code"> An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the Job scheduling error, intended to be suitable for display in a user interface. </param>
        <param name="details"> A list of additional error details related to the scheduling error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobSchedulingError" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobSchedulingError" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchJobStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchJobStatistics BatchJobStatistics (string url = default, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = 0, long writeIOps = 0, float readIOGiB = 0, float writeIOGiB = 0, long numSucceededTasks = 0, long numFailedTasks = 0, long numTaskRetries = 0, TimeSpan waitTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchJobStatistics BatchJobStatistics(string url, valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, valuetype System.TimeSpan userCpuTime, valuetype System.TimeSpan kernelCpuTime, valuetype System.TimeSpan wallClockTime, int64 readIOps, int64 writeIOps, float32 readIOGiB, float32 writeIOGiB, int64 numSucceededTasks, int64 numFailedTasks, int64 numTaskRetries, valuetype System.TimeSpan waitTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobStatistics(System.String,System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int64,System.Int64,System.Single,System.Single,System.Int64,System.Int64,System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchJobStatistics (Optional url As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional userCpuTime As TimeSpan = Nothing, Optional kernelCpuTime As TimeSpan = Nothing, Optional wallClockTime As TimeSpan = Nothing, Optional readIOps As Long = 0, Optional writeIOps As Long = 0, Optional readIOGiB As Single = 0, Optional writeIOGiB As Single = 0, Optional numSucceededTasks As Long = 0, Optional numFailedTasks As Long = 0, Optional numTaskRetries As Long = 0, Optional waitTime As TimeSpan = Nothing) As BatchJobStatistics" />
      <MemberSignature Language="F#" Value="static member BatchJobStatistics : string * DateTimeOffset * DateTimeOffset * TimeSpan * TimeSpan * TimeSpan * int64 * int64 * single * single * int64 * int64 * int64 * TimeSpan -&gt; Azure.Compute.Batch.BatchJobStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchJobStatistics (url, startTime, lastUpdateTime, userCpuTime, kernelCpuTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, numSucceededTasks, numFailedTasks, numTaskRetries, waitTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchJobStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="userCpuTime" Type="System.TimeSpan" />
        <Parameter Name="kernelCpuTime" Type="System.TimeSpan" />
        <Parameter Name="wallClockTime" Type="System.TimeSpan" />
        <Parameter Name="readIOps" Type="System.Int64" />
        <Parameter Name="writeIOps" Type="System.Int64" />
        <Parameter Name="readIOGiB" Type="System.Single" />
        <Parameter Name="writeIOGiB" Type="System.Single" />
        <Parameter Name="numSucceededTasks" Type="System.Int64" />
        <Parameter Name="numFailedTasks" Type="System.Int64" />
        <Parameter Name="numTaskRetries" Type="System.Int64" />
        <Parameter Name="waitTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="url"> The URL of the statistics. </param>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="userCpuTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        <param name="kernelCpuTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        <param name="wallClockTime"> The total wall clock time of all Tasks in the Job.  The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </param>
        <param name="readIOps"> The total number of disk read operations made by all Tasks in the Job. </param>
        <param name="writeIOps"> The total number of disk write operations made by all Tasks in the Job. </param>
        <param name="readIOGiB"> The total amount of data in GiB read from disk by all Tasks in the Job. </param>
        <param name="writeIOGiB"> The total amount of data in GiB written to disk by all Tasks in the Job. </param>
        <param name="numSucceededTasks"> The total number of Tasks successfully completed in the Job during the given time range. A Task completes successfully if it returns exit code 0. </param>
        <param name="numFailedTasks"> The total number of Tasks in the Job that failed during the given time range. A Task fails if it exhausts its maximum retry count without returning exit code 0. </param>
        <param name="numTaskRetries"> The total number of retries on all the Tasks in the Job during the given time range. </param>
        <param name="waitTime"> The total wait time of all Tasks in the Job. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchJobStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchJobStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNode">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNode BatchNode (string id = default, string url = default, Azure.Compute.Batch.BatchNodeState? state = default, Azure.Compute.Batch.SchedulingState? schedulingState = default, DateTimeOffset? stateTransitionTime = default, DateTimeOffset? lastBootTime = default, DateTimeOffset? allocationTime = default, string ipAddress = default, string affinityId = default, string vmSize = default, int? totalTasksRun = default, int? runningTasksCount = default, int? runningTaskSlotsCount = default, int? totalTasksSucceeded = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskInfo&gt; recentTasks = default, Azure.Compute.Batch.BatchStartTask startTask = default, Azure.Compute.Batch.BatchStartTaskInfo startTaskInfo = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchNodeError&gt; errors = default, bool? isDedicated = default, Azure.Compute.Batch.BatchNodeEndpointConfiguration endpointConfiguration = default, Azure.Compute.Batch.BatchNodeAgentInfo nodeAgentInfo = default, Azure.Compute.Batch.VirtualMachineInfo virtualMachineInfo = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNode BatchNode(string id, string url, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchNodeState&gt; state, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.SchedulingState&gt; schedulingState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastBootTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; allocationTime, string ipAddress, string affinityId, string vmSize, valuetype System.Nullable`1&lt;int32&gt; totalTasksRun, valuetype System.Nullable`1&lt;int32&gt; runningTasksCount, valuetype System.Nullable`1&lt;int32&gt; runningTaskSlotsCount, valuetype System.Nullable`1&lt;int32&gt; totalTasksSucceeded, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchTaskInfo&gt; recentTasks, class Azure.Compute.Batch.BatchStartTask startTask, class Azure.Compute.Batch.BatchStartTaskInfo startTaskInfo, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchNodeError&gt; errors, valuetype System.Nullable`1&lt;bool&gt; isDedicated, class Azure.Compute.Batch.BatchNodeEndpointConfiguration endpointConfiguration, class Azure.Compute.Batch.BatchNodeAgentInfo nodeAgentInfo, class Azure.Compute.Batch.VirtualMachineInfo virtualMachineInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNode(System.String,System.String,System.Nullable{Azure.Compute.Batch.BatchNodeState},System.Nullable{Azure.Compute.Batch.SchedulingState},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchTaskInfo},Azure.Compute.Batch.BatchStartTask,Azure.Compute.Batch.BatchStartTaskInfo,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchNodeError},System.Nullable{System.Boolean},Azure.Compute.Batch.BatchNodeEndpointConfiguration,Azure.Compute.Batch.BatchNodeAgentInfo,Azure.Compute.Batch.VirtualMachineInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNode (Optional id As String = Nothing, Optional url As String = Nothing, Optional state As Nullable(Of BatchNodeState) = Nothing, Optional schedulingState As Nullable(Of SchedulingState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional lastBootTime As Nullable(Of DateTimeOffset) = Nothing, Optional allocationTime As Nullable(Of DateTimeOffset) = Nothing, Optional ipAddress As String = Nothing, Optional affinityId As String = Nothing, Optional vmSize As String = Nothing, Optional totalTasksRun As Nullable(Of Integer) = Nothing, Optional runningTasksCount As Nullable(Of Integer) = Nothing, Optional runningTaskSlotsCount As Nullable(Of Integer) = Nothing, Optional totalTasksSucceeded As Nullable(Of Integer) = Nothing, Optional recentTasks As IEnumerable(Of BatchTaskInfo) = Nothing, Optional startTask As BatchStartTask = Nothing, Optional startTaskInfo As BatchStartTaskInfo = Nothing, Optional errors As IEnumerable(Of BatchNodeError) = Nothing, Optional isDedicated As Nullable(Of Boolean) = Nothing, Optional endpointConfiguration As BatchNodeEndpointConfiguration = Nothing, Optional nodeAgentInfo As BatchNodeAgentInfo = Nothing, Optional virtualMachineInfo As VirtualMachineInfo = Nothing) As BatchNode" />
      <MemberSignature Language="F#" Value="static member BatchNode : string * string * Nullable&lt;Azure.Compute.Batch.BatchNodeState&gt; * Nullable&lt;Azure.Compute.Batch.SchedulingState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * string * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * seq&lt;Azure.Compute.Batch.BatchTaskInfo&gt; * Azure.Compute.Batch.BatchStartTask * Azure.Compute.Batch.BatchStartTaskInfo * seq&lt;Azure.Compute.Batch.BatchNodeError&gt; * Nullable&lt;bool&gt; * Azure.Compute.Batch.BatchNodeEndpointConfiguration * Azure.Compute.Batch.BatchNodeAgentInfo * Azure.Compute.Batch.VirtualMachineInfo -&gt; Azure.Compute.Batch.BatchNode" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNode (id, url, state, schedulingState, stateTransitionTime, lastBootTime, allocationTime, ipAddress, affinityId, vmSize, totalTasksRun, runningTasksCount, runningTaskSlotsCount, totalTasksSucceeded, recentTasks, startTask, startTaskInfo, errors, isDedicated, endpointConfiguration, nodeAgentInfo, virtualMachineInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchNodeState&gt;" />
        <Parameter Name="schedulingState" Type="System.Nullable&lt;Azure.Compute.Batch.SchedulingState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="lastBootTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="allocationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ipAddress" Type="System.String" />
        <Parameter Name="affinityId" Type="System.String" />
        <Parameter Name="vmSize" Type="System.String" />
        <Parameter Name="totalTasksRun" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="runningTasksCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="runningTaskSlotsCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="totalTasksSucceeded" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="recentTasks" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskInfo&gt;" />
        <Parameter Name="startTask" Type="Azure.Compute.Batch.BatchStartTask" />
        <Parameter Name="startTaskInfo" Type="Azure.Compute.Batch.BatchStartTaskInfo" />
        <Parameter Name="errors" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchNodeError&gt;" />
        <Parameter Name="isDedicated" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="endpointConfiguration" Type="Azure.Compute.Batch.BatchNodeEndpointConfiguration" />
        <Parameter Name="nodeAgentInfo" Type="Azure.Compute.Batch.BatchNodeAgentInfo" />
        <Parameter Name="virtualMachineInfo" Type="Azure.Compute.Batch.VirtualMachineInfo" />
      </Parameters>
      <Docs>
        <param name="id"> The ID of the Compute Node. Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes. </param>
        <param name="url"> The URL of the Compute Node. </param>
        <param name="state"> The current state of the Compute Node. The Spot/Low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available. </param>
        <param name="schedulingState"> Whether the Compute Node is available for Task scheduling. </param>
        <param name="stateTransitionTime"> The time at which the Compute Node entered its current state. </param>
        <param name="lastBootTime"> The last time at which the Compute Node was started. This property may not be present if the Compute Node state is unusable. </param>
        <param name="allocationTime"> The time at which this Compute Node was allocated to the Pool. This is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted. </param>
        <param name="ipAddress"> The IP address that other Nodes can use to communicate with this Compute Node. Every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes. </param>
        <param name="affinityId"> An identifier which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere. </param>
        <param name="vmSize"> The size of the virtual machine hosting the Compute Node. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        <param name="totalTasksRun"> The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        <param name="runningTasksCount"> The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        <param name="runningTaskSlotsCount"> The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        <param name="totalTasksSucceeded"> The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        <param name="recentTasks"> A list of Tasks whose state has recently changed. This property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool. </param>
        <param name="startTask"> The Task specified to run on the Compute Node as it joins the Pool. </param>
        <param name="startTaskInfo"> Runtime information about the execution of the StartTask on the Compute Node. </param>
        <param name="errors"> The list of errors that are currently being encountered by the Compute Node. </param>
        <param name="isDedicated"> Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node. </param>
        <param name="endpointConfiguration"> The endpoint configuration for the Compute Node. </param>
        <param name="nodeAgentInfo"> Information about the Compute Node agent version and the time the Compute Node upgraded to a new version. </param>
        <param name="virtualMachineInfo"> Info about the current state of the virtual machine. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNode" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNode" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeAgentInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeAgentInfo BatchNodeAgentInfo (string version = default, DateTimeOffset lastUpdateTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeAgentInfo BatchNodeAgentInfo(string version, valuetype System.DateTimeOffset lastUpdateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeAgentInfo(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeAgentInfo (Optional version As String = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing) As BatchNodeAgentInfo" />
      <MemberSignature Language="F#" Value="static member BatchNodeAgentInfo : string * DateTimeOffset -&gt; Azure.Compute.Batch.BatchNodeAgentInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeAgentInfo (version, lastUpdateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeAgentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="version"> The version of the Batch Compute Node agent running on the Compute Node. This version number can be checked against the Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md. </param>
        <param name="lastUpdateTime"> The time when the Compute Node agent was updated on the Compute Node. This is the most recent time that the Compute Node agent was updated to a new version. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeAgentInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeAgentInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeCounts">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeCounts BatchNodeCounts (int creating = 0, int idle = 0, int offline = 0, int preempted = 0, int rebooting = 0, int reimaging = 0, int running = 0, int starting = 0, int startTaskFailed = 0, int leavingPool = 0, int unknown = 0, int unusable = 0, int waitingForStartTask = 0, int total = 0, int upgradingOs = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeCounts BatchNodeCounts(int32 creating, int32 idle, int32 offline, int32 preempted, int32 rebooting, int32 reimaging, int32 running, int32 starting, int32 startTaskFailed, int32 leavingPool, int32 unknown, int32 unusable, int32 waitingForStartTask, int32 total, int32 upgradingOs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeCounts(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeCounts (Optional creating As Integer = 0, Optional idle As Integer = 0, Optional offline As Integer = 0, Optional preempted As Integer = 0, Optional rebooting As Integer = 0, Optional reimaging As Integer = 0, Optional running As Integer = 0, Optional starting As Integer = 0, Optional startTaskFailed As Integer = 0, Optional leavingPool As Integer = 0, Optional unknown As Integer = 0, Optional unusable As Integer = 0, Optional waitingForStartTask As Integer = 0, Optional total As Integer = 0, Optional upgradingOs As Integer = 0) As BatchNodeCounts" />
      <MemberSignature Language="F#" Value="static member BatchNodeCounts : int * int * int * int * int * int * int * int * int * int * int * int * int * int * int -&gt; Azure.Compute.Batch.BatchNodeCounts" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeCounts (creating, idle, offline, preempted, rebooting, reimaging, running, starting, startTaskFailed, leavingPool, unknown, unusable, waitingForStartTask, total, upgradingOs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeCounts</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creating" Type="System.Int32" />
        <Parameter Name="idle" Type="System.Int32" />
        <Parameter Name="offline" Type="System.Int32" />
        <Parameter Name="preempted" Type="System.Int32" />
        <Parameter Name="rebooting" Type="System.Int32" />
        <Parameter Name="reimaging" Type="System.Int32" />
        <Parameter Name="running" Type="System.Int32" />
        <Parameter Name="starting" Type="System.Int32" />
        <Parameter Name="startTaskFailed" Type="System.Int32" />
        <Parameter Name="leavingPool" Type="System.Int32" />
        <Parameter Name="unknown" Type="System.Int32" />
        <Parameter Name="unusable" Type="System.Int32" />
        <Parameter Name="waitingForStartTask" Type="System.Int32" />
        <Parameter Name="total" Type="System.Int32" />
        <Parameter Name="upgradingOs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="creating"> The number of Compute Nodes in the creating state. </param>
        <param name="idle"> The number of Compute Nodes in the idle state. </param>
        <param name="offline"> The number of Compute Nodes in the offline state. </param>
        <param name="preempted"> The number of Compute Nodes in the preempted state. </param>
        <param name="rebooting"> The count of Compute Nodes in the rebooting state. </param>
        <param name="reimaging"> The number of Compute Nodes in the reimaging state. </param>
        <param name="running"> The number of Compute Nodes in the running state. </param>
        <param name="starting"> The number of Compute Nodes in the starting state. </param>
        <param name="startTaskFailed"> The number of Compute Nodes in the startTaskFailed state. </param>
        <param name="leavingPool"> The number of Compute Nodes in the leavingPool state. </param>
        <param name="unknown"> The number of Compute Nodes in the unknown state. </param>
        <param name="unusable"> The number of Compute Nodes in the unusable state. </param>
        <param name="waitingForStartTask"> The number of Compute Nodes in the waitingForStartTask state. </param>
        <param name="total"> The total number of Compute Nodes. </param>
        <param name="upgradingOs"> The number of Compute Nodes in the upgradingOS state. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeCounts" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeCounts" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeEndpointConfiguration">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeEndpointConfiguration BatchNodeEndpointConfiguration (System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InboundEndpoint&gt; inboundEndpoints = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeEndpointConfiguration BatchNodeEndpointConfiguration(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.InboundEndpoint&gt; inboundEndpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeEndpointConfiguration(System.Collections.Generic.IEnumerable{Azure.Compute.Batch.InboundEndpoint})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeEndpointConfiguration (Optional inboundEndpoints As IEnumerable(Of InboundEndpoint) = Nothing) As BatchNodeEndpointConfiguration" />
      <MemberSignature Language="F#" Value="static member BatchNodeEndpointConfiguration : seq&lt;Azure.Compute.Batch.InboundEndpoint&gt; -&gt; Azure.Compute.Batch.BatchNodeEndpointConfiguration" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeEndpointConfiguration inboundEndpoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeEndpointConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inboundEndpoints" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InboundEndpoint&gt;" />
      </Parameters>
      <Docs>
        <param name="inboundEndpoints"> The list of inbound endpoints that are accessible on the Compute Node. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeEndpointConfiguration" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeEndpointConfiguration" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeError">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeError BatchNodeError (string code = default, string message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt; errorDetails = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeError BatchNodeError(string code, string message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.NameValuePair&gt; errorDetails) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeError(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.NameValuePair})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeError (Optional code As String = Nothing, Optional message As String = Nothing, Optional errorDetails As IEnumerable(Of NameValuePair) = Nothing) As BatchNodeError" />
      <MemberSignature Language="F#" Value="static member BatchNodeError : string * string * seq&lt;Azure.Compute.Batch.NameValuePair&gt; -&gt; Azure.Compute.Batch.BatchNodeError" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeError (code, message, errorDetails)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorDetails" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt;" />
      </Parameters>
      <Docs>
        <param name="code"> An identifier for the Compute Node error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the Compute Node error, intended to be suitable for display in a user interface. </param>
        <param name="errorDetails"> The list of additional error details related to the Compute Node error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeError" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeError" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeFile">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeFile BatchNodeFile (string name = default, string url = default, bool? isDirectory = default, Azure.Compute.Batch.FileProperties properties = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeFile BatchNodeFile(string name, string url, valuetype System.Nullable`1&lt;bool&gt; isDirectory, class Azure.Compute.Batch.FileProperties properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeFile(System.String,System.String,System.Nullable{System.Boolean},Azure.Compute.Batch.FileProperties)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeFile (Optional name As String = Nothing, Optional url As String = Nothing, Optional isDirectory As Nullable(Of Boolean) = Nothing, Optional properties As FileProperties = Nothing) As BatchNodeFile" />
      <MemberSignature Language="F#" Value="static member BatchNodeFile : string * string * Nullable&lt;bool&gt; * Azure.Compute.Batch.FileProperties -&gt; Azure.Compute.Batch.BatchNodeFile" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeFile (name, url, isDirectory, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="isDirectory" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="properties" Type="Azure.Compute.Batch.FileProperties" />
      </Parameters>
      <Docs>
        <param name="name"> The file path. </param>
        <param name="url"> The URL of the file. </param>
        <param name="isDirectory"> Whether the object represents a directory. </param>
        <param name="properties"> The file properties. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeFile" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeFile" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeInfo BatchNodeInfo (string affinityId = default, string nodeUrl = default, string poolId = default, string nodeId = default, string taskRootDirectory = default, string taskRootDirectoryUrl = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeInfo BatchNodeInfo(string affinityId, string nodeUrl, string poolId, string nodeId, string taskRootDirectory, string taskRootDirectoryUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeInfo(System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeInfo (Optional affinityId As String = Nothing, Optional nodeUrl As String = Nothing, Optional poolId As String = Nothing, Optional nodeId As String = Nothing, Optional taskRootDirectory As String = Nothing, Optional taskRootDirectoryUrl As String = Nothing) As BatchNodeInfo" />
      <MemberSignature Language="F#" Value="static member BatchNodeInfo : string * string * string * string * string * string -&gt; Azure.Compute.Batch.BatchNodeInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeInfo (affinityId, nodeUrl, poolId, nodeId, taskRootDirectory, taskRootDirectoryUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affinityId" Type="System.String" />
        <Parameter Name="nodeUrl" Type="System.String" />
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="taskRootDirectory" Type="System.String" />
        <Parameter Name="taskRootDirectoryUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affinityId"> An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. </param>
        <param name="nodeUrl"> The URL of the Compute Node on which the Task ran. </param>
        <param name="poolId"> The ID of the Pool on which the Task ran. </param>
        <param name="nodeId"> The ID of the Compute Node on which the Task ran. </param>
        <param name="taskRootDirectory"> The root directory of the Task on the Compute Node. </param>
        <param name="taskRootDirectoryUrl"> The URL to the root directory of the Task on the Compute Node. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeRemoteLoginSettings">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeRemoteLoginSettings BatchNodeRemoteLoginSettings (string remoteLoginIpAddress = default, int remoteLoginPort = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeRemoteLoginSettings BatchNodeRemoteLoginSettings(string remoteLoginIpAddress, int32 remoteLoginPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeRemoteLoginSettings(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeRemoteLoginSettings (Optional remoteLoginIpAddress As String = Nothing, Optional remoteLoginPort As Integer = 0) As BatchNodeRemoteLoginSettings" />
      <MemberSignature Language="F#" Value="static member BatchNodeRemoteLoginSettings : string * int -&gt; Azure.Compute.Batch.BatchNodeRemoteLoginSettings" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeRemoteLoginSettings (remoteLoginIpAddress, remoteLoginPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeRemoteLoginSettings</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteLoginIpAddress" Type="System.String" />
        <Parameter Name="remoteLoginPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="remoteLoginIpAddress"> The IP address used for remote login to the Compute Node. </param>
        <param name="remoteLoginPort"> The port used for remote login to the Compute Node. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeRemoteLoginSettings" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeRemoteLoginSettings" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeUserCreateContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeUserCreateContent BatchNodeUserCreateContent (string name = default, bool? isAdmin = default, DateTimeOffset? expiryTime = default, string password = default, string sshPublicKey = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeUserCreateContent BatchNodeUserCreateContent(string name, valuetype System.Nullable`1&lt;bool&gt; isAdmin, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; expiryTime, string password, string sshPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeUserCreateContent(System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTimeOffset},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeUserCreateContent (Optional name As String = Nothing, Optional isAdmin As Nullable(Of Boolean) = Nothing, Optional expiryTime As Nullable(Of DateTimeOffset) = Nothing, Optional password As String = Nothing, Optional sshPublicKey As String = Nothing) As BatchNodeUserCreateContent" />
      <MemberSignature Language="F#" Value="static member BatchNodeUserCreateContent : string * Nullable&lt;bool&gt; * Nullable&lt;DateTimeOffset&gt; * string * string -&gt; Azure.Compute.Batch.BatchNodeUserCreateContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeUserCreateContent (name, isAdmin, expiryTime, password, sshPublicKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeUserCreateContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isAdmin" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="expiryTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="sshPublicKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The user name of the Account. </param>
        <param name="isAdmin"> Whether the Account should be an administrator on the Compute Node. The default value is false. </param>
        <param name="expiryTime"> The time at which the Account should expire. If omitted, the default is 1 day from the current time. For Linux Compute Nodes, the expiryTime has a precision up to a day. </param>
        <param name="password"> The password of the Account. The password is required for Windows Compute Nodes (those created with 'virtualMachineConfiguration' using a Windows Image reference). For Linux Compute Nodes, the password can optionally be specified along with the sshPublicKey property. </param>
        <param name="sshPublicKey"> The SSH public key that can be used for remote login to the Compute Node. The public key should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be specified only for Linux Compute Nodes. If this is specified for a Windows Compute Node, then the Batch service rejects the request; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeUserCreateContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeUserCreateContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchNodeVMExtension">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchNodeVMExtension BatchNodeVMExtension (string provisioningState = default, Azure.Compute.Batch.VMExtension vmExtension = default, Azure.Compute.Batch.VMExtensionInstanceView instanceView = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchNodeVMExtension BatchNodeVMExtension(string provisioningState, class Azure.Compute.Batch.VMExtension vmExtension, class Azure.Compute.Batch.VMExtensionInstanceView instanceView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeVMExtension(System.String,Azure.Compute.Batch.VMExtension,Azure.Compute.Batch.VMExtensionInstanceView)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchNodeVMExtension (Optional provisioningState As String = Nothing, Optional vmExtension As VMExtension = Nothing, Optional instanceView As VMExtensionInstanceView = Nothing) As BatchNodeVMExtension" />
      <MemberSignature Language="F#" Value="static member BatchNodeVMExtension : string * Azure.Compute.Batch.VMExtension * Azure.Compute.Batch.VMExtensionInstanceView -&gt; Azure.Compute.Batch.BatchNodeVMExtension" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchNodeVMExtension (provisioningState, vmExtension, instanceView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchNodeVMExtension</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="vmExtension" Type="Azure.Compute.Batch.VMExtension" />
        <Parameter Name="instanceView" Type="Azure.Compute.Batch.VMExtensionInstanceView" />
      </Parameters>
      <Docs>
        <param name="provisioningState"> The provisioning state of the virtual machine extension. </param>
        <param name="vmExtension"> The virtual machine extension. </param>
        <param name="instanceView"> The vm extension instance view. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchNodeVMExtension" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchNodeVMExtension" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPool">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPool BatchPool (string id = default, string displayName = default, string url = default, string eTag = default, DateTimeOffset? lastModified = default, DateTimeOffset? creationTime = default, Azure.Compute.Batch.BatchPoolState? state = default, DateTimeOffset? stateTransitionTime = default, Azure.Compute.Batch.AllocationState? allocationState = default, DateTimeOffset? allocationStateTransitionTime = default, string vmSize = default, Azure.Compute.Batch.VirtualMachineConfiguration virtualMachineConfiguration = default, TimeSpan? resizeTimeout = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResizeError&gt; resizeErrors = default, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; resourceTags = default, int? currentDedicatedNodes = default, int? currentLowPriorityNodes = default, int? targetDedicatedNodes = default, int? targetLowPriorityNodes = default, bool? enableAutoScale = default, string autoScaleFormula = default, TimeSpan? autoScaleEvaluationInterval = default, Azure.Compute.Batch.AutoScaleRun autoScaleRun = default, bool? enableInterNodeCommunication = default, Azure.Compute.Batch.NetworkConfiguration networkConfiguration = default, Azure.Compute.Batch.BatchStartTask startTask = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences = default, int? taskSlotsPerNode = default, Azure.Compute.Batch.BatchTaskSchedulingPolicy taskSchedulingPolicy = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAccount&gt; userAccounts = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default, Azure.Compute.Batch.BatchPoolStatistics stats = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MountConfiguration&gt; mountConfiguration = default, Azure.Compute.Batch.BatchPoolIdentity identity = default, Azure.Compute.Batch.BatchNodeCommunicationMode? targetNodeCommunicationMode = default, Azure.Compute.Batch.BatchNodeCommunicationMode? currentNodeCommunicationMode = default, Azure.Compute.Batch.UpgradePolicy upgradePolicy = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPool BatchPool(string id, string displayName, string url, string eTag, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastModified, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; creationTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchPoolState&gt; state, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.AllocationState&gt; allocationState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; allocationStateTransitionTime, string vmSize, class Azure.Compute.Batch.VirtualMachineConfiguration virtualMachineConfiguration, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; resizeTimeout, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.ResizeError&gt; resizeErrors, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; resourceTags, valuetype System.Nullable`1&lt;int32&gt; currentDedicatedNodes, valuetype System.Nullable`1&lt;int32&gt; currentLowPriorityNodes, valuetype System.Nullable`1&lt;int32&gt; targetDedicatedNodes, valuetype System.Nullable`1&lt;int32&gt; targetLowPriorityNodes, valuetype System.Nullable`1&lt;bool&gt; enableAutoScale, string autoScaleFormula, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; autoScaleEvaluationInterval, class Azure.Compute.Batch.AutoScaleRun autoScaleRun, valuetype System.Nullable`1&lt;bool&gt; enableInterNodeCommunication, class Azure.Compute.Batch.NetworkConfiguration networkConfiguration, class Azure.Compute.Batch.BatchStartTask startTask, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences, valuetype System.Nullable`1&lt;int32&gt; taskSlotsPerNode, class Azure.Compute.Batch.BatchTaskSchedulingPolicy taskSchedulingPolicy, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.UserAccount&gt; userAccounts, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata, class Azure.Compute.Batch.BatchPoolStatistics stats, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MountConfiguration&gt; mountConfiguration, class Azure.Compute.Batch.BatchPoolIdentity identity, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchNodeCommunicationMode&gt; targetNodeCommunicationMode, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchNodeCommunicationMode&gt; currentNodeCommunicationMode, class Azure.Compute.Batch.UpgradePolicy upgradePolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPool(System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchPoolState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.AllocationState},System.Nullable{System.DateTimeOffset},System.String,Azure.Compute.Batch.VirtualMachineConfiguration,System.Nullable{System.TimeSpan},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.ResizeError},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.TimeSpan},Azure.Compute.Batch.AutoScaleRun,System.Nullable{System.Boolean},Azure.Compute.Batch.NetworkConfiguration,Azure.Compute.Batch.BatchStartTask,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchApplicationPackageReference},System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskSchedulingPolicy,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.UserAccount},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem},Azure.Compute.Batch.BatchPoolStatistics,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MountConfiguration},Azure.Compute.Batch.BatchPoolIdentity,System.Nullable{Azure.Compute.Batch.BatchNodeCommunicationMode},System.Nullable{Azure.Compute.Batch.BatchNodeCommunicationMode},Azure.Compute.Batch.UpgradePolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPool (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional url As String = Nothing, Optional eTag As String = Nothing, Optional lastModified As Nullable(Of DateTimeOffset) = Nothing, Optional creationTime As Nullable(Of DateTimeOffset) = Nothing, Optional state As Nullable(Of BatchPoolState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional allocationState As Nullable(Of AllocationState) = Nothing, Optional allocationStateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional vmSize As String = Nothing, Optional virtualMachineConfiguration As VirtualMachineConfiguration = Nothing, Optional resizeTimeout As Nullable(Of TimeSpan) = Nothing, Optional resizeErrors As IEnumerable(Of ResizeError) = Nothing, Optional resourceTags As IReadOnlyDictionary(Of String, String) = Nothing, Optional currentDedicatedNodes As Nullable(Of Integer) = Nothing, Optional currentLowPriorityNodes As Nullable(Of Integer) = Nothing, Optional targetDedicatedNodes As Nullable(Of Integer) = Nothing, Optional targetLowPriorityNodes As Nullable(Of Integer) = Nothing, Optional enableAutoScale As Nullable(Of Boolean) = Nothing, Optional autoScaleFormula As String = Nothing, Optional autoScaleEvaluationInterval As Nullable(Of TimeSpan) = Nothing, Optional autoScaleRun As AutoScaleRun = Nothing, Optional enableInterNodeCommunication As Nullable(Of Boolean) = Nothing, Optional networkConfiguration As NetworkConfiguration = Nothing, Optional startTask As BatchStartTask = Nothing, Optional applicationPackageReferences As IEnumerable(Of BatchApplicationPackageReference) = Nothing, Optional taskSlotsPerNode As Nullable(Of Integer) = Nothing, Optional taskSchedulingPolicy As BatchTaskSchedulingPolicy = Nothing, Optional userAccounts As IEnumerable(Of UserAccount) = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing, Optional stats As BatchPoolStatistics = Nothing, Optional mountConfiguration As IEnumerable(Of MountConfiguration) = Nothing, Optional identity As BatchPoolIdentity = Nothing, Optional targetNodeCommunicationMode As Nullable(Of BatchNodeCommunicationMode) = Nothing, Optional currentNodeCommunicationMode As Nullable(Of BatchNodeCommunicationMode) = Nothing, Optional upgradePolicy As UpgradePolicy = Nothing) As BatchPool" />
      <MemberSignature Language="F#" Value="static member BatchPool : string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchPoolState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.AllocationState&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.Compute.Batch.VirtualMachineConfiguration * Nullable&lt;TimeSpan&gt; * seq&lt;Azure.Compute.Batch.ResizeError&gt; * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * string * Nullable&lt;TimeSpan&gt; * Azure.Compute.Batch.AutoScaleRun * Nullable&lt;bool&gt; * Azure.Compute.Batch.NetworkConfiguration * Azure.Compute.Batch.BatchStartTask * seq&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskSchedulingPolicy * seq&lt;Azure.Compute.Batch.UserAccount&gt; * seq&lt;Azure.Compute.Batch.MetadataItem&gt; * Azure.Compute.Batch.BatchPoolStatistics * seq&lt;Azure.Compute.Batch.MountConfiguration&gt; * Azure.Compute.Batch.BatchPoolIdentity * Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt; * Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt; * Azure.Compute.Batch.UpgradePolicy -&gt; Azure.Compute.Batch.BatchPool" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPool (id, displayName, url, eTag, lastModified, creationTime, state, stateTransitionTime, allocationState, allocationStateTransitionTime, vmSize, virtualMachineConfiguration, resizeTimeout, resizeErrors, resourceTags, currentDedicatedNodes, currentLowPriorityNodes, targetDedicatedNodes, targetLowPriorityNodes, enableAutoScale, autoScaleFormula, autoScaleEvaluationInterval, autoScaleRun, enableInterNodeCommunication, networkConfiguration, startTask, applicationPackageReferences, taskSlotsPerNode, taskSchedulingPolicy, userAccounts, metadata, stats, mountConfiguration, identity, targetNodeCommunicationMode, currentNodeCommunicationMode, upgradePolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPool</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="eTag" Type="System.String" />
        <Parameter Name="lastModified" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="creationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchPoolState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="allocationState" Type="System.Nullable&lt;Azure.Compute.Batch.AllocationState&gt;" />
        <Parameter Name="allocationStateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="vmSize" Type="System.String" />
        <Parameter Name="virtualMachineConfiguration" Type="Azure.Compute.Batch.VirtualMachineConfiguration" />
        <Parameter Name="resizeTimeout" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="resizeErrors" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResizeError&gt;" />
        <Parameter Name="resourceTags" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="currentDedicatedNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="currentLowPriorityNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="targetDedicatedNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="targetLowPriorityNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="enableAutoScale" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="autoScaleFormula" Type="System.String" />
        <Parameter Name="autoScaleEvaluationInterval" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="autoScaleRun" Type="Azure.Compute.Batch.AutoScaleRun" />
        <Parameter Name="enableInterNodeCommunication" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="networkConfiguration" Type="Azure.Compute.Batch.NetworkConfiguration" />
        <Parameter Name="startTask" Type="Azure.Compute.Batch.BatchStartTask" />
        <Parameter Name="applicationPackageReferences" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt;" />
        <Parameter Name="taskSlotsPerNode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="taskSchedulingPolicy" Type="Azure.Compute.Batch.BatchTaskSchedulingPolicy" />
        <Parameter Name="userAccounts" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAccount&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
        <Parameter Name="stats" Type="Azure.Compute.Batch.BatchPoolStatistics" />
        <Parameter Name="mountConfiguration" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MountConfiguration&gt;" />
        <Parameter Name="identity" Type="Azure.Compute.Batch.BatchPoolIdentity" />
        <Parameter Name="targetNodeCommunicationMode" Type="System.Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt;" />
        <Parameter Name="currentNodeCommunicationMode" Type="System.Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt;" />
        <Parameter Name="upgradePolicy" Type="Azure.Compute.Batch.UpgradePolicy" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        <param name="displayName"> The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="url"> The URL of the Pool. </param>
        <param name="eTag"> The ETag of the Pool. This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime. </param>
        <param name="lastModified"> The last modified time of the Pool. This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state. </param>
        <param name="creationTime"> The creation time of the Pool. </param>
        <param name="state"> The current state of the Pool. </param>
        <param name="stateTransitionTime"> The time at which the Pool entered its current state. </param>
        <param name="allocationState"> Whether the Pool is resizing. </param>
        <param name="allocationStateTransitionTime"> The time at which the Pool entered its current allocation state. </param>
        <param name="vmSize"> The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        <param name="virtualMachineConfiguration"> The virtual machine configuration for the Pool. This property must be specified. </param>
        <param name="resizeTimeout"> The timeout for allocation of Compute Nodes to the Pool. This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes. </param>
        <param name="resizeErrors"> A list of errors encountered while performing the last resize on the Pool. This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady. </param>
        <param name="resourceTags"> The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'. </param>
        <param name="currentDedicatedNodes"> The number of dedicated Compute Nodes currently in the Pool. </param>
        <param name="currentLowPriorityNodes"> The number of Spot/Low-priority Compute Nodes currently in the Pool. Spot/Low-priority Compute Nodes which have been preempted are included in this count. </param>
        <param name="targetDedicatedNodes"> The desired number of dedicated Compute Nodes in the Pool. </param>
        <param name="targetLowPriorityNodes"> The desired number of Spot/Low-priority Compute Nodes in the Pool. </param>
        <param name="enableAutoScale"> Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false. </param>
        <param name="autoScaleFormula"> A formula for the desired number of Compute Nodes in the Pool. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        <param name="autoScaleEvaluationInterval"> The time interval at which to automatically adjust the Pool size according to the autoscale formula. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        <param name="autoScaleRun"> The results and errors from the last execution of the autoscale formula. This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        <param name="enableInterNodeCommunication"> Whether the Pool permits direct communication between Compute Nodes. This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool. </param>
        <param name="networkConfiguration"> The network configuration for the Pool. </param>
        <param name="startTask"> A Task specified to run on each Compute Node as it joins the Pool. </param>
        <param name="applicationPackageReferences"> The list of Packages to be installed on each Compute Node in the Pool. Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool. </param>
        <param name="taskSlotsPerNode"> The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256. </param>
        <param name="taskSchedulingPolicy"> How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread. </param>
        <param name="userAccounts"> The list of user Accounts to be created on each Compute Node in the Pool. </param>
        <param name="metadata"> A list of name-value pairs associated with the Pool as metadata. </param>
        <param name="stats"> Utilization and resource usage statistics for the entire lifetime of the Pool. This property is populated only if the CloudPool was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </param>
        <param name="mountConfiguration"> A list of file systems to mount on each node in the pool. This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. </param>
        <param name="identity"> The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        <param name="targetNodeCommunicationMode"> The desired node communication mode for the pool. If omitted, the default value is Default. </param>
        <param name="currentNodeCommunicationMode"> The current state of the pool communication mode. </param>
        <param name="upgradePolicy"> The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPool" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPool" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolCreateContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolCreateContent BatchPoolCreateContent (string id = default, string displayName = default, string vmSize = default, Azure.Compute.Batch.VirtualMachineConfiguration virtualMachineConfiguration = default, TimeSpan? resizeTimeout = default, System.Collections.Generic.IDictionary&lt;string,string&gt; resourceTags = default, int? targetDedicatedNodes = default, int? targetLowPriorityNodes = default, bool? enableAutoScale = default, string autoScaleFormula = default, TimeSpan? autoScaleEvaluationInterval = default, bool? enableInterNodeCommunication = default, Azure.Compute.Batch.NetworkConfiguration networkConfiguration = default, Azure.Compute.Batch.BatchStartTask startTask = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences = default, int? taskSlotsPerNode = default, Azure.Compute.Batch.BatchTaskSchedulingPolicy taskSchedulingPolicy = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAccount&gt; userAccounts = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt; metadata = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MountConfiguration&gt; mountConfiguration = default, Azure.Compute.Batch.BatchNodeCommunicationMode? targetNodeCommunicationMode = default, Azure.Compute.Batch.UpgradePolicy upgradePolicy = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolCreateContent BatchPoolCreateContent(string id, string displayName, string vmSize, class Azure.Compute.Batch.VirtualMachineConfiguration virtualMachineConfiguration, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; resizeTimeout, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; resourceTags, valuetype System.Nullable`1&lt;int32&gt; targetDedicatedNodes, valuetype System.Nullable`1&lt;int32&gt; targetLowPriorityNodes, valuetype System.Nullable`1&lt;bool&gt; enableAutoScale, string autoScaleFormula, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; autoScaleEvaluationInterval, valuetype System.Nullable`1&lt;bool&gt; enableInterNodeCommunication, class Azure.Compute.Batch.NetworkConfiguration networkConfiguration, class Azure.Compute.Batch.BatchStartTask startTask, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences, valuetype System.Nullable`1&lt;int32&gt; taskSlotsPerNode, class Azure.Compute.Batch.BatchTaskSchedulingPolicy taskSchedulingPolicy, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.UserAccount&gt; userAccounts, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MetadataItem&gt; metadata, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.MountConfiguration&gt; mountConfiguration, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchNodeCommunicationMode&gt; targetNodeCommunicationMode, class Azure.Compute.Batch.UpgradePolicy upgradePolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolCreateContent(System.String,System.String,System.String,Azure.Compute.Batch.VirtualMachineConfiguration,System.Nullable{System.TimeSpan},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},Azure.Compute.Batch.NetworkConfiguration,Azure.Compute.Batch.BatchStartTask,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchApplicationPackageReference},System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskSchedulingPolicy,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.UserAccount},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MetadataItem},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.MountConfiguration},System.Nullable{Azure.Compute.Batch.BatchNodeCommunicationMode},Azure.Compute.Batch.UpgradePolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolCreateContent (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional vmSize As String = Nothing, Optional virtualMachineConfiguration As VirtualMachineConfiguration = Nothing, Optional resizeTimeout As Nullable(Of TimeSpan) = Nothing, Optional resourceTags As IDictionary(Of String, String) = Nothing, Optional targetDedicatedNodes As Nullable(Of Integer) = Nothing, Optional targetLowPriorityNodes As Nullable(Of Integer) = Nothing, Optional enableAutoScale As Nullable(Of Boolean) = Nothing, Optional autoScaleFormula As String = Nothing, Optional autoScaleEvaluationInterval As Nullable(Of TimeSpan) = Nothing, Optional enableInterNodeCommunication As Nullable(Of Boolean) = Nothing, Optional networkConfiguration As NetworkConfiguration = Nothing, Optional startTask As BatchStartTask = Nothing, Optional applicationPackageReferences As IEnumerable(Of BatchApplicationPackageReference) = Nothing, Optional taskSlotsPerNode As Nullable(Of Integer) = Nothing, Optional taskSchedulingPolicy As BatchTaskSchedulingPolicy = Nothing, Optional userAccounts As IEnumerable(Of UserAccount) = Nothing, Optional metadata As IEnumerable(Of MetadataItem) = Nothing, Optional mountConfiguration As IEnumerable(Of MountConfiguration) = Nothing, Optional targetNodeCommunicationMode As Nullable(Of BatchNodeCommunicationMode) = Nothing, Optional upgradePolicy As UpgradePolicy = Nothing) As BatchPoolCreateContent" />
      <MemberSignature Language="F#" Value="static member BatchPoolCreateContent : string * string * string * Azure.Compute.Batch.VirtualMachineConfiguration * Nullable&lt;TimeSpan&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * string * Nullable&lt;TimeSpan&gt; * Nullable&lt;bool&gt; * Azure.Compute.Batch.NetworkConfiguration * Azure.Compute.Batch.BatchStartTask * seq&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskSchedulingPolicy * seq&lt;Azure.Compute.Batch.UserAccount&gt; * seq&lt;Azure.Compute.Batch.MetadataItem&gt; * seq&lt;Azure.Compute.Batch.MountConfiguration&gt; * Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt; * Azure.Compute.Batch.UpgradePolicy -&gt; Azure.Compute.Batch.BatchPoolCreateContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolCreateContent (id, displayName, vmSize, virtualMachineConfiguration, resizeTimeout, resourceTags, targetDedicatedNodes, targetLowPriorityNodes, enableAutoScale, autoScaleFormula, autoScaleEvaluationInterval, enableInterNodeCommunication, networkConfiguration, startTask, applicationPackageReferences, taskSlotsPerNode, taskSchedulingPolicy, userAccounts, metadata, mountConfiguration, targetNodeCommunicationMode, upgradePolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolCreateContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="vmSize" Type="System.String" />
        <Parameter Name="virtualMachineConfiguration" Type="Azure.Compute.Batch.VirtualMachineConfiguration" />
        <Parameter Name="resizeTimeout" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="resourceTags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="targetDedicatedNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="targetLowPriorityNodes" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="enableAutoScale" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="autoScaleFormula" Type="System.String" />
        <Parameter Name="autoScaleEvaluationInterval" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="enableInterNodeCommunication" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="networkConfiguration" Type="Azure.Compute.Batch.NetworkConfiguration" />
        <Parameter Name="startTask" Type="Azure.Compute.Batch.BatchStartTask" />
        <Parameter Name="applicationPackageReferences" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt;" />
        <Parameter Name="taskSlotsPerNode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="taskSchedulingPolicy" Type="Azure.Compute.Batch.BatchTaskSchedulingPolicy" />
        <Parameter Name="userAccounts" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAccount&gt;" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MetadataItem&gt;" />
        <Parameter Name="mountConfiguration" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.MountConfiguration&gt;" />
        <Parameter Name="targetNodeCommunicationMode" Type="System.Nullable&lt;Azure.Compute.Batch.BatchNodeCommunicationMode&gt;" />
        <Parameter Name="upgradePolicy" Type="Azure.Compute.Batch.UpgradePolicy" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Pool within the Account. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two Pool IDs within an Account that differ only by case). </param>
        <param name="displayName"> The display name for the Pool. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="vmSize"> The size of virtual machines in the Pool. All virtual machines in a Pool are the same size. For information about available VM sizes for Pools using Images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration), see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series). </param>
        <param name="virtualMachineConfiguration"> The virtual machine configuration for the Pool. This property must be specified. </param>
        <param name="resizeTimeout"> The timeout for allocation of Compute Nodes to the Pool. This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        <param name="resourceTags"> The user-specified tags associated with the pool. The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'. </param>
        <param name="targetDedicatedNodes"> The desired number of dedicated Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both. </param>
        <param name="targetLowPriorityNodes"> The desired number of Spot/Low-priority Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both. </param>
        <param name="enableAutoScale"> Whether the Pool size should automatically adjust over time. If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false. </param>
        <param name="autoScaleFormula"> A formula for the desired number of Compute Nodes in the Pool. This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the Pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see 'Automatically scale Compute Nodes in an Azure Batch Pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/). </param>
        <param name="autoScaleEvaluationInterval"> The time interval at which to automatically adjust the Pool size according to the autoscale formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        <param name="enableInterNodeCommunication"> Whether the Pool permits direct communication between Compute Nodes. Enabling inter-node communication limits the maximum size of the Pool due to deployment restrictions on the Compute Nodes of the Pool. This may result in the Pool not reaching its desired size. The default value is false. </param>
        <param name="networkConfiguration"> The network configuration for the Pool. </param>
        <param name="startTask"> A Task specified to run on each Compute Node as it joins the Pool. The Task runs when the Compute Node is added to the Pool or when the Compute Node is restarted. </param>
        <param name="applicationPackageReferences"> The list of Packages to be installed on each Compute Node in the Pool. When creating a pool, the package's application ID must be fully qualified (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}). Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool. </param>
        <param name="taskSlotsPerNode"> The number of task slots that can be used to run concurrent tasks on a single compute node in the pool. The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256. </param>
        <param name="taskSchedulingPolicy"> How Tasks are distributed across Compute Nodes in a Pool. If not specified, the default is spread. </param>
        <param name="userAccounts"> The list of user Accounts to be created on each Compute Node in the Pool. </param>
        <param name="metadata"> A list of name-value pairs associated with the Pool as metadata. The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        <param name="mountConfiguration"> Mount storage using specified file system for the entire lifetime of the pool. Mount the storage using Azure fileshare, NFS, CIFS or Blobfuse based file system. </param>
        <param name="targetNodeCommunicationMode"> The desired node communication mode for the pool. If omitted, the default value is Default. </param>
        <param name="upgradePolicy"> The upgrade policy for the Pool. Describes an upgrade policy - automatic, manual, or rolling. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolCreateContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolCreateContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolIdentity">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolIdentity BatchPoolIdentity (Azure.Compute.Batch.BatchPoolIdentityType type = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAssignedIdentity&gt; userAssignedIdentities = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolIdentity BatchPoolIdentity(valuetype Azure.Compute.Batch.BatchPoolIdentityType type, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.UserAssignedIdentity&gt; userAssignedIdentities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolIdentity(Azure.Compute.Batch.BatchPoolIdentityType,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.UserAssignedIdentity})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolIdentity (Optional type As BatchPoolIdentityType = Nothing, Optional userAssignedIdentities As IEnumerable(Of UserAssignedIdentity) = Nothing) As BatchPoolIdentity" />
      <MemberSignature Language="F#" Value="static member BatchPoolIdentity : Azure.Compute.Batch.BatchPoolIdentityType * seq&lt;Azure.Compute.Batch.UserAssignedIdentity&gt; -&gt; Azure.Compute.Batch.BatchPoolIdentity" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolIdentity (type, userAssignedIdentities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Azure.Compute.Batch.BatchPoolIdentityType" />
        <Parameter Name="userAssignedIdentities" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.UserAssignedIdentity&gt;" />
      </Parameters>
      <Docs>
        <param name="type"> The identity of the Batch pool, if configured. The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        <param name="userAssignedIdentities"> The list of user identities associated with the Batch account. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolIdentity" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolIdentity" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolNodeCounts">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolNodeCounts BatchPoolNodeCounts (string poolId = default, Azure.Compute.Batch.BatchNodeCounts dedicated = default, Azure.Compute.Batch.BatchNodeCounts lowPriority = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolNodeCounts BatchPoolNodeCounts(string poolId, class Azure.Compute.Batch.BatchNodeCounts dedicated, class Azure.Compute.Batch.BatchNodeCounts lowPriority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolNodeCounts(System.String,Azure.Compute.Batch.BatchNodeCounts,Azure.Compute.Batch.BatchNodeCounts)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolNodeCounts (Optional poolId As String = Nothing, Optional dedicated As BatchNodeCounts = Nothing, Optional lowPriority As BatchNodeCounts = Nothing) As BatchPoolNodeCounts" />
      <MemberSignature Language="F#" Value="static member BatchPoolNodeCounts : string * Azure.Compute.Batch.BatchNodeCounts * Azure.Compute.Batch.BatchNodeCounts -&gt; Azure.Compute.Batch.BatchPoolNodeCounts" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolNodeCounts (poolId, dedicated, lowPriority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolNodeCounts</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="dedicated" Type="Azure.Compute.Batch.BatchNodeCounts" />
        <Parameter Name="lowPriority" Type="Azure.Compute.Batch.BatchNodeCounts" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool. </param>
        <param name="dedicated"> The number of dedicated Compute Nodes in each state. </param>
        <param name="lowPriority"> The number of Spot/Low-priority Compute Nodes in each state. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolNodeCounts" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolNodeCounts" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolResourceStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolResourceStatistics BatchPoolResourceStatistics (DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, float avgCpuPercentage = 0, float avgMemoryGiB = 0, float peakMemoryGiB = 0, float avgDiskGiB = 0, float peakDiskGiB = 0, long diskReadIOps = 0, long diskWriteIOps = 0, float diskReadGiB = 0, float diskWriteGiB = 0, float networkReadGiB = 0, float networkWriteGiB = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolResourceStatistics BatchPoolResourceStatistics(valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, float32 avgCpuPercentage, float32 avgMemoryGiB, float32 peakMemoryGiB, float32 avgDiskGiB, float32 peakDiskGiB, int64 diskReadIOps, int64 diskWriteIOps, float32 diskReadGiB, float32 diskWriteGiB, float32 networkReadGiB, float32 networkWriteGiB) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolResourceStatistics(System.DateTimeOffset,System.DateTimeOffset,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int64,System.Int64,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolResourceStatistics (Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional avgCpuPercentage As Single = 0, Optional avgMemoryGiB As Single = 0, Optional peakMemoryGiB As Single = 0, Optional avgDiskGiB As Single = 0, Optional peakDiskGiB As Single = 0, Optional diskReadIOps As Long = 0, Optional diskWriteIOps As Long = 0, Optional diskReadGiB As Single = 0, Optional diskWriteGiB As Single = 0, Optional networkReadGiB As Single = 0, Optional networkWriteGiB As Single = 0) As BatchPoolResourceStatistics" />
      <MemberSignature Language="F#" Value="static member BatchPoolResourceStatistics : DateTimeOffset * DateTimeOffset * single * single * single * single * single * int64 * int64 * single * single * single * single -&gt; Azure.Compute.Batch.BatchPoolResourceStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolResourceStatistics (startTime, lastUpdateTime, avgCpuPercentage, avgMemoryGiB, peakMemoryGiB, avgDiskGiB, peakDiskGiB, diskReadIOps, diskWriteIOps, diskReadGiB, diskWriteGiB, networkReadGiB, networkWriteGiB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolResourceStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="avgCpuPercentage" Type="System.Single" />
        <Parameter Name="avgMemoryGiB" Type="System.Single" />
        <Parameter Name="peakMemoryGiB" Type="System.Single" />
        <Parameter Name="avgDiskGiB" Type="System.Single" />
        <Parameter Name="peakDiskGiB" Type="System.Single" />
        <Parameter Name="diskReadIOps" Type="System.Int64" />
        <Parameter Name="diskWriteIOps" Type="System.Int64" />
        <Parameter Name="diskReadGiB" Type="System.Single" />
        <Parameter Name="diskWriteGiB" Type="System.Single" />
        <Parameter Name="networkReadGiB" Type="System.Single" />
        <Parameter Name="networkWriteGiB" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="avgCpuPercentage"> The average CPU usage across all Compute Nodes in the Pool (percentage per node). </param>
        <param name="avgMemoryGiB"> The average memory usage in GiB across all Compute Nodes in the Pool. </param>
        <param name="peakMemoryGiB"> The peak memory usage in GiB across all Compute Nodes in the Pool. </param>
        <param name="avgDiskGiB"> The average used disk space in GiB across all Compute Nodes in the Pool. </param>
        <param name="peakDiskGiB"> The peak used disk space in GiB across all Compute Nodes in the Pool. </param>
        <param name="diskReadIOps"> The total number of disk read operations across all Compute Nodes in the Pool. </param>
        <param name="diskWriteIOps"> The total number of disk write operations across all Compute Nodes in the Pool. </param>
        <param name="diskReadGiB"> The total amount of data in GiB of disk reads across all Compute Nodes in the Pool. </param>
        <param name="diskWriteGiB"> The total amount of data in GiB of disk writes across all Compute Nodes in the Pool. </param>
        <param name="networkReadGiB"> The total amount of data in GiB of network reads across all Compute Nodes in the Pool. </param>
        <param name="networkWriteGiB"> The total amount of data in GiB of network writes across all Compute Nodes in the Pool. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolResourceStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolResourceStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolStatistics BatchPoolStatistics (string url = default, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, Azure.Compute.Batch.BatchPoolUsageStatistics usageStats = default, Azure.Compute.Batch.BatchPoolResourceStatistics resourceStats = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolStatistics BatchPoolStatistics(string url, valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, class Azure.Compute.Batch.BatchPoolUsageStatistics usageStats, class Azure.Compute.Batch.BatchPoolResourceStatistics resourceStats) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolStatistics(System.String,System.DateTimeOffset,System.DateTimeOffset,Azure.Compute.Batch.BatchPoolUsageStatistics,Azure.Compute.Batch.BatchPoolResourceStatistics)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolStatistics (Optional url As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional usageStats As BatchPoolUsageStatistics = Nothing, Optional resourceStats As BatchPoolResourceStatistics = Nothing) As BatchPoolStatistics" />
      <MemberSignature Language="F#" Value="static member BatchPoolStatistics : string * DateTimeOffset * DateTimeOffset * Azure.Compute.Batch.BatchPoolUsageStatistics * Azure.Compute.Batch.BatchPoolResourceStatistics -&gt; Azure.Compute.Batch.BatchPoolStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolStatistics (url, startTime, lastUpdateTime, usageStats, resourceStats)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="usageStats" Type="Azure.Compute.Batch.BatchPoolUsageStatistics" />
        <Parameter Name="resourceStats" Type="Azure.Compute.Batch.BatchPoolResourceStatistics" />
      </Parameters>
      <Docs>
        <param name="url"> The URL for the statistics. </param>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="usageStats"> Statistics related to Pool usage, such as the amount of core-time used. </param>
        <param name="resourceStats"> Statistics related to resource consumption by Compute Nodes in the Pool. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolUsageMetrics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolUsageMetrics BatchPoolUsageMetrics (string poolId = default, DateTimeOffset startTime = default, DateTimeOffset endTime = default, string vmSize = default, float totalCoreHours = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolUsageMetrics BatchPoolUsageMetrics(string poolId, valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset endTime, string vmSize, float32 totalCoreHours) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolUsageMetrics(System.String,System.DateTimeOffset,System.DateTimeOffset,System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolUsageMetrics (Optional poolId As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional endTime As DateTimeOffset = Nothing, Optional vmSize As String = Nothing, Optional totalCoreHours As Single = 0) As BatchPoolUsageMetrics" />
      <MemberSignature Language="F#" Value="static member BatchPoolUsageMetrics : string * DateTimeOffset * DateTimeOffset * string * single -&gt; Azure.Compute.Batch.BatchPoolUsageMetrics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolUsageMetrics (poolId, startTime, endTime, vmSize, totalCoreHours)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolUsageMetrics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.DateTimeOffset" />
        <Parameter Name="vmSize" Type="System.String" />
        <Parameter Name="totalCoreHours" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool whose metrics are aggregated in this entry. </param>
        <param name="startTime"> The start time of the aggregation interval covered by this entry. </param>
        <param name="endTime"> The end time of the aggregation interval covered by this entry. </param>
        <param name="vmSize"> The size of virtual machines in the Pool. All VMs in a Pool are the same size. For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        <param name="totalCoreHours"> The total core hours used in the Pool during this aggregation interval. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolUsageMetrics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolUsageMetrics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchPoolUsageStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchPoolUsageStatistics BatchPoolUsageStatistics (DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan dedicatedCoreTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchPoolUsageStatistics BatchPoolUsageStatistics(valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, valuetype System.TimeSpan dedicatedCoreTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolUsageStatistics(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchPoolUsageStatistics (Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional dedicatedCoreTime As TimeSpan = Nothing) As BatchPoolUsageStatistics" />
      <MemberSignature Language="F#" Value="static member BatchPoolUsageStatistics : DateTimeOffset * DateTimeOffset * TimeSpan -&gt; Azure.Compute.Batch.BatchPoolUsageStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchPoolUsageStatistics (startTime, lastUpdateTime, dedicatedCoreTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchPoolUsageStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="dedicatedCoreTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="dedicatedCoreTime"> The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchPoolUsageStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchPoolUsageStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchStartTaskInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchStartTaskInfo BatchStartTaskInfo (Azure.Compute.Batch.BatchStartTaskState state = default, DateTimeOffset startTime = default, DateTimeOffset? endTime = default, int? exitCode = default, Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo = default, Azure.Compute.Batch.BatchTaskFailureInfo failureInfo = default, int retryCount = 0, DateTimeOffset? lastRetryTime = default, Azure.Compute.Batch.BatchTaskExecutionResult? result = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchStartTaskInfo BatchStartTaskInfo(valuetype Azure.Compute.Batch.BatchStartTaskState state, valuetype System.DateTimeOffset startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, valuetype System.Nullable`1&lt;int32&gt; exitCode, class Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo, class Azure.Compute.Batch.BatchTaskFailureInfo failureInfo, int32 retryCount, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastRetryTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskExecutionResult&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchStartTaskInfo(Azure.Compute.Batch.BatchStartTaskState,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskContainerExecutionInfo,Azure.Compute.Batch.BatchTaskFailureInfo,System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchTaskExecutionResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchStartTaskInfo (Optional state As BatchStartTaskState = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional exitCode As Nullable(Of Integer) = Nothing, Optional containerInfo As BatchTaskContainerExecutionInfo = Nothing, Optional failureInfo As BatchTaskFailureInfo = Nothing, Optional retryCount As Integer = 0, Optional lastRetryTime As Nullable(Of DateTimeOffset) = Nothing, Optional result As Nullable(Of BatchTaskExecutionResult) = Nothing) As BatchStartTaskInfo" />
      <MemberSignature Language="F#" Value="static member BatchStartTaskInfo : Azure.Compute.Batch.BatchStartTaskState * DateTimeOffset * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskContainerExecutionInfo * Azure.Compute.Batch.BatchTaskFailureInfo * int * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt; -&gt; Azure.Compute.Batch.BatchStartTaskInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchStartTaskInfo (state, startTime, endTime, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchStartTaskInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="Azure.Compute.Batch.BatchStartTaskState" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="exitCode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="containerInfo" Type="Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />
        <Parameter Name="failureInfo" Type="Azure.Compute.Batch.BatchTaskFailureInfo" />
        <Parameter Name="retryCount" Type="System.Int32" />
        <Parameter Name="lastRetryTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="result" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt;" />
      </Parameters>
      <Docs>
        <param name="state"> The state of the StartTask on the Compute Node. </param>
        <param name="startTime"> The time at which the StartTask started running. This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running). </param>
        <param name="endTime"> The time at which the StartTask stopped running. This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running. </param>
        <param name="exitCode"> The exit code of the program specified on the StartTask command line. This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        <param name="containerInfo"> Information about the container under which the Task is executing. This property is set only if the Task runs in a container context. </param>
        <param name="failureInfo"> Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered a failure. </param>
        <param name="retryCount"> The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        <param name="lastRetryTime"> The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        <param name="result"> The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchStartTaskInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchStartTaskInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSubtask">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchSubtask BatchSubtask (int? id = default, Azure.Compute.Batch.BatchNodeInfo nodeInfo = default, DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, int? exitCode = default, Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo = default, Azure.Compute.Batch.BatchTaskFailureInfo failureInfo = default, Azure.Compute.Batch.BatchSubtaskState? state = default, DateTimeOffset? stateTransitionTime = default, Azure.Compute.Batch.BatchSubtaskState? previousState = default, DateTimeOffset? previousStateTransitionTime = default, Azure.Compute.Batch.BatchTaskExecutionResult? result = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchSubtask BatchSubtask(valuetype System.Nullable`1&lt;int32&gt; id, class Azure.Compute.Batch.BatchNodeInfo nodeInfo, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, valuetype System.Nullable`1&lt;int32&gt; exitCode, class Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo, class Azure.Compute.Batch.BatchTaskFailureInfo failureInfo, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchSubtaskState&gt; state, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchSubtaskState&gt; previousState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; previousStateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskExecutionResult&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchSubtask(System.Nullable{System.Int32},Azure.Compute.Batch.BatchNodeInfo,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskContainerExecutionInfo,Azure.Compute.Batch.BatchTaskFailureInfo,System.Nullable{Azure.Compute.Batch.BatchSubtaskState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchSubtaskState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchTaskExecutionResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchSubtask (Optional id As Nullable(Of Integer) = Nothing, Optional nodeInfo As BatchNodeInfo = Nothing, Optional startTime As Nullable(Of DateTimeOffset) = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional exitCode As Nullable(Of Integer) = Nothing, Optional containerInfo As BatchTaskContainerExecutionInfo = Nothing, Optional failureInfo As BatchTaskFailureInfo = Nothing, Optional state As Nullable(Of BatchSubtaskState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional previousState As Nullable(Of BatchSubtaskState) = Nothing, Optional previousStateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional result As Nullable(Of BatchTaskExecutionResult) = Nothing) As BatchSubtask" />
      <MemberSignature Language="F#" Value="static member BatchSubtask : Nullable&lt;int&gt; * Azure.Compute.Batch.BatchNodeInfo * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskContainerExecutionInfo * Azure.Compute.Batch.BatchTaskFailureInfo * Nullable&lt;Azure.Compute.Batch.BatchSubtaskState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchSubtaskState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt; -&gt; Azure.Compute.Batch.BatchSubtask" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchSubtask (id, nodeInfo, startTime, endTime, exitCode, containerInfo, failureInfo, state, stateTransitionTime, previousState, previousStateTransitionTime, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchSubtask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="nodeInfo" Type="Azure.Compute.Batch.BatchNodeInfo" />
        <Parameter Name="startTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="exitCode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="containerInfo" Type="Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />
        <Parameter Name="failureInfo" Type="Azure.Compute.Batch.BatchTaskFailureInfo" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchSubtaskState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="previousState" Type="System.Nullable&lt;Azure.Compute.Batch.BatchSubtaskState&gt;" />
        <Parameter Name="previousStateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="result" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The ID of the subtask. </param>
        <param name="nodeInfo"> Information about the Compute Node on which the subtask ran. </param>
        <param name="startTime"> The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running. </param>
        <param name="endTime"> The time at which the subtask completed. This property is set only if the subtask is in the Completed state. </param>
        <param name="exitCode"> The exit code of the program specified on the subtask command line. This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        <param name="containerInfo"> Information about the container under which the Task is executing. This property is set only if the Task runs in a container context. </param>
        <param name="failureInfo"> Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered a failure. </param>
        <param name="state"> The current state of the subtask. </param>
        <param name="stateTransitionTime"> The time at which the subtask entered its current state. </param>
        <param name="previousState"> The previous state of the subtask. This property is not set if the subtask is in its initial running state. </param>
        <param name="previousStateTransitionTime"> The time at which the subtask entered its previous state. This property is not set if the subtask is in its initial running state. </param>
        <param name="result"> The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchSubtask" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchSubtask" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSupportedImage">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchSupportedImage BatchSupportedImage (string nodeAgentSkuId = default, Azure.Compute.Batch.ImageReference imageReference = default, Azure.Compute.Batch.OSType osType = default, System.Collections.Generic.IEnumerable&lt;string&gt; capabilities = default, DateTimeOffset? batchSupportEndOfLife = default, Azure.Compute.Batch.ImageVerificationType verificationType = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchSupportedImage BatchSupportedImage(string nodeAgentSkuId, class Azure.Compute.Batch.ImageReference imageReference, valuetype Azure.Compute.Batch.OSType osType, class System.Collections.Generic.IEnumerable`1&lt;string&gt; capabilities, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; batchSupportEndOfLife, valuetype Azure.Compute.Batch.ImageVerificationType verificationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchSupportedImage(System.String,Azure.Compute.Batch.ImageReference,Azure.Compute.Batch.OSType,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.ImageVerificationType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchSupportedImage (Optional nodeAgentSkuId As String = Nothing, Optional imageReference As ImageReference = Nothing, Optional osType As OSType = Nothing, Optional capabilities As IEnumerable(Of String) = Nothing, Optional batchSupportEndOfLife As Nullable(Of DateTimeOffset) = Nothing, Optional verificationType As ImageVerificationType = Nothing) As BatchSupportedImage" />
      <MemberSignature Language="F#" Value="static member BatchSupportedImage : string * Azure.Compute.Batch.ImageReference * Azure.Compute.Batch.OSType * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.ImageVerificationType -&gt; Azure.Compute.Batch.BatchSupportedImage" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchSupportedImage (nodeAgentSkuId, imageReference, osType, capabilities, batchSupportEndOfLife, verificationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchSupportedImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeAgentSkuId" Type="System.String" />
        <Parameter Name="imageReference" Type="Azure.Compute.Batch.ImageReference" />
        <Parameter Name="osType" Type="Azure.Compute.Batch.OSType" />
        <Parameter Name="capabilities" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="batchSupportEndOfLife" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="verificationType" Type="Azure.Compute.Batch.ImageVerificationType" />
      </Parameters>
      <Docs>
        <param name="nodeAgentSkuId"> The ID of the Compute Node agent SKU which the Image supports. </param>
        <param name="imageReference"> The reference to the Azure Virtual Machine's Marketplace Image. </param>
        <param name="osType"> The type of operating system (e.g. Windows or Linux) of the Image. </param>
        <param name="capabilities"> The capabilities or features which the Image supports. Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service. </param>
        <param name="batchSupportEndOfLife"> The time when the Azure Batch service will stop accepting create Pool requests for the Image. </param>
        <param name="verificationType"> Whether the Azure Batch service actively verifies that the Image is compatible with the associated Compute Node agent SKU. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchSupportedImage" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchSupportedImage" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTask">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTask BatchTask (string id = default, string displayName = default, string url = default, string eTag = default, DateTimeOffset? lastModified = default, DateTimeOffset? creationTime = default, Azure.Compute.Batch.ExitConditions exitConditions = default, Azure.Compute.Batch.BatchTaskState? state = default, DateTimeOffset? stateTransitionTime = default, Azure.Compute.Batch.BatchTaskState? previousState = default, DateTimeOffset? previousStateTransitionTime = default, string commandLine = default, Azure.Compute.Batch.BatchTaskContainerSettings containerSettings = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResourceFile&gt; resourceFiles = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.OutputFile&gt; outputFiles = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt; environmentSettings = default, Azure.Compute.Batch.AffinityInfo affinityInfo = default, Azure.Compute.Batch.BatchTaskConstraints constraints = default, int? requiredSlots = default, Azure.Compute.Batch.UserIdentity userIdentity = default, Azure.Compute.Batch.BatchTaskExecutionInfo executionInfo = default, Azure.Compute.Batch.BatchNodeInfo nodeInfo = default, Azure.Compute.Batch.MultiInstanceSettings multiInstanceSettings = default, Azure.Compute.Batch.BatchTaskStatistics stats = default, Azure.Compute.Batch.BatchTaskDependencies dependsOn = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences = default, Azure.Compute.Batch.AuthenticationTokenSettings authenticationTokenSettings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTask BatchTask(string id, string displayName, string url, string eTag, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastModified, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; creationTime, class Azure.Compute.Batch.ExitConditions exitConditions, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskState&gt; state, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; stateTransitionTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskState&gt; previousState, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; previousStateTransitionTime, string commandLine, class Azure.Compute.Batch.BatchTaskContainerSettings containerSettings, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.ResourceFile&gt; resourceFiles, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.OutputFile&gt; outputFiles, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.EnvironmentSetting&gt; environmentSettings, class Azure.Compute.Batch.AffinityInfo affinityInfo, class Azure.Compute.Batch.BatchTaskConstraints constraints, valuetype System.Nullable`1&lt;int32&gt; requiredSlots, class Azure.Compute.Batch.UserIdentity userIdentity, class Azure.Compute.Batch.BatchTaskExecutionInfo executionInfo, class Azure.Compute.Batch.BatchNodeInfo nodeInfo, class Azure.Compute.Batch.MultiInstanceSettings multiInstanceSettings, class Azure.Compute.Batch.BatchTaskStatistics stats, class Azure.Compute.Batch.BatchTaskDependencies dependsOn, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences, class Azure.Compute.Batch.AuthenticationTokenSettings authenticationTokenSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTask(System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.ExitConditions,System.Nullable{Azure.Compute.Batch.BatchTaskState},System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchTaskState},System.Nullable{System.DateTimeOffset},System.String,Azure.Compute.Batch.BatchTaskContainerSettings,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.ResourceFile},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.OutputFile},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.EnvironmentSetting},Azure.Compute.Batch.AffinityInfo,Azure.Compute.Batch.BatchTaskConstraints,System.Nullable{System.Int32},Azure.Compute.Batch.UserIdentity,Azure.Compute.Batch.BatchTaskExecutionInfo,Azure.Compute.Batch.BatchNodeInfo,Azure.Compute.Batch.MultiInstanceSettings,Azure.Compute.Batch.BatchTaskStatistics,Azure.Compute.Batch.BatchTaskDependencies,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchApplicationPackageReference},Azure.Compute.Batch.AuthenticationTokenSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTask (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional url As String = Nothing, Optional eTag As String = Nothing, Optional lastModified As Nullable(Of DateTimeOffset) = Nothing, Optional creationTime As Nullable(Of DateTimeOffset) = Nothing, Optional exitConditions As ExitConditions = Nothing, Optional state As Nullable(Of BatchTaskState) = Nothing, Optional stateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional previousState As Nullable(Of BatchTaskState) = Nothing, Optional previousStateTransitionTime As Nullable(Of DateTimeOffset) = Nothing, Optional commandLine As String = Nothing, Optional containerSettings As BatchTaskContainerSettings = Nothing, Optional resourceFiles As IEnumerable(Of ResourceFile) = Nothing, Optional outputFiles As IEnumerable(Of OutputFile) = Nothing, Optional environmentSettings As IEnumerable(Of EnvironmentSetting) = Nothing, Optional affinityInfo As AffinityInfo = Nothing, Optional constraints As BatchTaskConstraints = Nothing, Optional requiredSlots As Nullable(Of Integer) = Nothing, Optional userIdentity As UserIdentity = Nothing, Optional executionInfo As BatchTaskExecutionInfo = Nothing, Optional nodeInfo As BatchNodeInfo = Nothing, Optional multiInstanceSettings As MultiInstanceSettings = Nothing, Optional stats As BatchTaskStatistics = Nothing, Optional dependsOn As BatchTaskDependencies = Nothing, Optional applicationPackageReferences As IEnumerable(Of BatchApplicationPackageReference) = Nothing, Optional authenticationTokenSettings As AuthenticationTokenSettings = Nothing) As BatchTask" />
      <MemberSignature Language="F#" Value="static member BatchTask : string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.ExitConditions * Nullable&lt;Azure.Compute.Batch.BatchTaskState&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchTaskState&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.Compute.Batch.BatchTaskContainerSettings * seq&lt;Azure.Compute.Batch.ResourceFile&gt; * seq&lt;Azure.Compute.Batch.OutputFile&gt; * seq&lt;Azure.Compute.Batch.EnvironmentSetting&gt; * Azure.Compute.Batch.AffinityInfo * Azure.Compute.Batch.BatchTaskConstraints * Nullable&lt;int&gt; * Azure.Compute.Batch.UserIdentity * Azure.Compute.Batch.BatchTaskExecutionInfo * Azure.Compute.Batch.BatchNodeInfo * Azure.Compute.Batch.MultiInstanceSettings * Azure.Compute.Batch.BatchTaskStatistics * Azure.Compute.Batch.BatchTaskDependencies * seq&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; * Azure.Compute.Batch.AuthenticationTokenSettings -&gt; Azure.Compute.Batch.BatchTask" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTask (id, displayName, url, eTag, lastModified, creationTime, exitConditions, state, stateTransitionTime, previousState, previousStateTransitionTime, commandLine, containerSettings, resourceFiles, outputFiles, environmentSettings, affinityInfo, constraints, requiredSlots, userIdentity, executionInfo, nodeInfo, multiInstanceSettings, stats, dependsOn, applicationPackageReferences, authenticationTokenSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="eTag" Type="System.String" />
        <Parameter Name="lastModified" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="creationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="exitConditions" Type="Azure.Compute.Batch.ExitConditions" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskState&gt;" />
        <Parameter Name="stateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="previousState" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskState&gt;" />
        <Parameter Name="previousStateTransitionTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="commandLine" Type="System.String" />
        <Parameter Name="containerSettings" Type="Azure.Compute.Batch.BatchTaskContainerSettings" />
        <Parameter Name="resourceFiles" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResourceFile&gt;" />
        <Parameter Name="outputFiles" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.OutputFile&gt;" />
        <Parameter Name="environmentSettings" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt;" />
        <Parameter Name="affinityInfo" Type="Azure.Compute.Batch.AffinityInfo" />
        <Parameter Name="constraints" Type="Azure.Compute.Batch.BatchTaskConstraints" />
        <Parameter Name="requiredSlots" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userIdentity" Type="Azure.Compute.Batch.UserIdentity" />
        <Parameter Name="executionInfo" Type="Azure.Compute.Batch.BatchTaskExecutionInfo" />
        <Parameter Name="nodeInfo" Type="Azure.Compute.Batch.BatchNodeInfo" />
        <Parameter Name="multiInstanceSettings" Type="Azure.Compute.Batch.MultiInstanceSettings" />
        <Parameter Name="stats" Type="Azure.Compute.Batch.BatchTaskStatistics" />
        <Parameter Name="dependsOn" Type="Azure.Compute.Batch.BatchTaskDependencies" />
        <Parameter Name="applicationPackageReferences" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt;" />
        <Parameter Name="authenticationTokenSettings" Type="Azure.Compute.Batch.AuthenticationTokenSettings" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. </param>
        <param name="displayName"> A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="url"> The URL of the Task. </param>
        <param name="eTag"> The ETag of the Task. This is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime. </param>
        <param name="lastModified"> The last modified time of the Task. </param>
        <param name="creationTime"> The creation time of the Task. </param>
        <param name="exitConditions"> How the Batch service should respond when the Task completes. </param>
        <param name="state"> The current state of the Task. </param>
        <param name="stateTransitionTime"> The time at which the Task entered its current state. </param>
        <param name="previousState"> The previous state of the Task. This property is not set if the Task is in its initial Active state. </param>
        <param name="previousStateTransitionTime"> The time at which the Task entered its previous state. This property is not set if the Task is in its initial Active state. </param>
        <param name="commandLine"> The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). </param>
        <param name="containerSettings"> The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files. </param>
        <param name="resourceFiles"> A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. </param>
        <param name="outputFiles"> A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed. </param>
        <param name="environmentSettings"> A list of environment variable settings for the Task. </param>
        <param name="affinityInfo"> A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task. </param>
        <param name="constraints"> The execution constraints that apply to this Task. </param>
        <param name="requiredSlots"> The number of scheduling slots that the Task requires to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1. </param>
        <param name="userIdentity"> The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task. </param>
        <param name="executionInfo"> Information about the execution of the Task. </param>
        <param name="nodeInfo"> Information about the Compute Node on which the Task ran. </param>
        <param name="multiInstanceSettings"> An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance Task. </param>
        <param name="stats"> Resource usage statistics for the Task. </param>
        <param name="dependsOn"> The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. </param>
        <param name="applicationPackageReferences"> A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. </param>
        <param name="authenticationTokenSettings"> The settings for an authentication token that the Task can use to perform Batch service operations. If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTask" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTask" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskAddCollectionResult">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskAddCollectionResult BatchTaskAddCollectionResult (System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskAddResult&gt; value = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskAddCollectionResult BatchTaskAddCollectionResult(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchTaskAddResult&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskAddCollectionResult(System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchTaskAddResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskAddCollectionResult (Optional value As IEnumerable(Of BatchTaskAddResult) = Nothing) As BatchTaskAddCollectionResult" />
      <MemberSignature Language="F#" Value="static member BatchTaskAddCollectionResult : seq&lt;Azure.Compute.Batch.BatchTaskAddResult&gt; -&gt; Azure.Compute.Batch.BatchTaskAddCollectionResult" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskAddCollectionResult value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskAddCollectionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskAddResult&gt;" />
      </Parameters>
      <Docs>
        <param name="value"> The results of the add Task collection operation. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskAddCollectionResult" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskAddCollectionResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskAddResult">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskAddResult BatchTaskAddResult (Azure.Compute.Batch.BatchTaskAddStatus status = default, string taskId = default, string eTag = default, DateTimeOffset? lastModified = default, string location = default, Azure.Compute.Batch.BatchError error = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskAddResult BatchTaskAddResult(valuetype Azure.Compute.Batch.BatchTaskAddStatus status, string taskId, string eTag, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastModified, string location, class Azure.Compute.Batch.BatchError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskAddResult(Azure.Compute.Batch.BatchTaskAddStatus,System.String,System.String,System.Nullable{System.DateTimeOffset},System.String,Azure.Compute.Batch.BatchError)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskAddResult (Optional status As BatchTaskAddStatus = Nothing, Optional taskId As String = Nothing, Optional eTag As String = Nothing, Optional lastModified As Nullable(Of DateTimeOffset) = Nothing, Optional location As String = Nothing, Optional error As BatchError = Nothing) As BatchTaskAddResult" />
      <MemberSignature Language="F#" Value="static member BatchTaskAddResult : Azure.Compute.Batch.BatchTaskAddStatus * string * string * Nullable&lt;DateTimeOffset&gt; * string * Azure.Compute.Batch.BatchError -&gt; Azure.Compute.Batch.BatchTaskAddResult" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskAddResult (status, taskId, eTag, lastModified, location, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskAddResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="Azure.Compute.Batch.BatchTaskAddStatus" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="eTag" Type="System.String" />
        <Parameter Name="lastModified" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="location" Type="System.String" />
        <Parameter Name="error" Type="Azure.Compute.Batch.BatchError" />
      </Parameters>
      <Docs>
        <param name="status"> The status of the add Task request. </param>
        <param name="taskId"> The ID of the Task for which this is the result. </param>
        <param name="eTag"> The ETag of the Task, if the Task was successfully added. You can use this to detect whether the Task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the Job in the meantime. </param>
        <param name="lastModified"> The last modified time of the Task. </param>
        <param name="location"> The URL of the Task, if the Task was successfully added. </param>
        <param name="error"> The error encountered while attempting to add the Task. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskAddResult" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskAddResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskContainerExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskContainerExecutionInfo BatchTaskContainerExecutionInfo (string containerId = default, string state = default, string error = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskContainerExecutionInfo BatchTaskContainerExecutionInfo(string containerId, string state, string error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskContainerExecutionInfo(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskContainerExecutionInfo (Optional containerId As String = Nothing, Optional state As String = Nothing, Optional error As String = Nothing) As BatchTaskContainerExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchTaskContainerExecutionInfo : string * string * string -&gt; Azure.Compute.Batch.BatchTaskContainerExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskContainerExecutionInfo (containerId, state, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskContainerExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerId" Type="System.String" />
        <Parameter Name="state" Type="System.String" />
        <Parameter Name="error" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="containerId"> The ID of the container. </param>
        <param name="state"> The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect". </param>
        <param name="error"> Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect". </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskContainerExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskCounts">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskCounts BatchTaskCounts (int active = 0, int running = 0, int completed = 0, int succeeded = 0, int failed = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskCounts BatchTaskCounts(int32 active, int32 running, int32 completed, int32 succeeded, int32 failed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCounts(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskCounts (Optional active As Integer = 0, Optional running As Integer = 0, Optional completed As Integer = 0, Optional succeeded As Integer = 0, Optional failed As Integer = 0) As BatchTaskCounts" />
      <MemberSignature Language="F#" Value="static member BatchTaskCounts : int * int * int * int * int -&gt; Azure.Compute.Batch.BatchTaskCounts" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCounts (active, running, completed, succeeded, failed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskCounts</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="active" Type="System.Int32" />
        <Parameter Name="running" Type="System.Int32" />
        <Parameter Name="completed" Type="System.Int32" />
        <Parameter Name="succeeded" Type="System.Int32" />
        <Parameter Name="failed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="active"> The number of Tasks in the active state. </param>
        <param name="running"> The number of Tasks in the running or preparing state. </param>
        <param name="completed"> The number of Tasks in the completed state. </param>
        <param name="succeeded"> The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'. </param>
        <param name="failed"> The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskCounts" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskCounts" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskCountsResult">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskCountsResult BatchTaskCountsResult (Azure.Compute.Batch.BatchTaskCounts taskCounts = default, Azure.Compute.Batch.BatchTaskSlotCounts taskSlotCounts = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskCountsResult BatchTaskCountsResult(class Azure.Compute.Batch.BatchTaskCounts taskCounts, class Azure.Compute.Batch.BatchTaskSlotCounts taskSlotCounts) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCountsResult(Azure.Compute.Batch.BatchTaskCounts,Azure.Compute.Batch.BatchTaskSlotCounts)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskCountsResult (Optional taskCounts As BatchTaskCounts = Nothing, Optional taskSlotCounts As BatchTaskSlotCounts = Nothing) As BatchTaskCountsResult" />
      <MemberSignature Language="F#" Value="static member BatchTaskCountsResult : Azure.Compute.Batch.BatchTaskCounts * Azure.Compute.Batch.BatchTaskSlotCounts -&gt; Azure.Compute.Batch.BatchTaskCountsResult" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCountsResult (taskCounts, taskSlotCounts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskCountsResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskCounts" Type="Azure.Compute.Batch.BatchTaskCounts" />
        <Parameter Name="taskSlotCounts" Type="Azure.Compute.Batch.BatchTaskSlotCounts" />
      </Parameters>
      <Docs>
        <param name="taskCounts"> The number of Tasks per state. </param>
        <param name="taskSlotCounts"> The number of TaskSlots required by Tasks per state. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskCountsResult" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskCountsResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskCreateContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskCreateContent BatchTaskCreateContent (string id = default, string displayName = default, Azure.Compute.Batch.ExitConditions exitConditions = default, string commandLine = default, Azure.Compute.Batch.BatchTaskContainerSettings containerSettings = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResourceFile&gt; resourceFiles = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.OutputFile&gt; outputFiles = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt; environmentSettings = default, Azure.Compute.Batch.AffinityInfo affinityInfo = default, Azure.Compute.Batch.BatchTaskConstraints constraints = default, int? requiredSlots = default, Azure.Compute.Batch.UserIdentity userIdentity = default, Azure.Compute.Batch.MultiInstanceSettings multiInstanceSettings = default, Azure.Compute.Batch.BatchTaskDependencies dependsOn = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences = default, Azure.Compute.Batch.AuthenticationTokenSettings authenticationTokenSettings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskCreateContent BatchTaskCreateContent(string id, string displayName, class Azure.Compute.Batch.ExitConditions exitConditions, string commandLine, class Azure.Compute.Batch.BatchTaskContainerSettings containerSettings, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.ResourceFile&gt; resourceFiles, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.OutputFile&gt; outputFiles, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.EnvironmentSetting&gt; environmentSettings, class Azure.Compute.Batch.AffinityInfo affinityInfo, class Azure.Compute.Batch.BatchTaskConstraints constraints, valuetype System.Nullable`1&lt;int32&gt; requiredSlots, class Azure.Compute.Batch.UserIdentity userIdentity, class Azure.Compute.Batch.MultiInstanceSettings multiInstanceSettings, class Azure.Compute.Batch.BatchTaskDependencies dependsOn, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchApplicationPackageReference&gt; applicationPackageReferences, class Azure.Compute.Batch.AuthenticationTokenSettings authenticationTokenSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCreateContent(System.String,System.String,Azure.Compute.Batch.ExitConditions,System.String,Azure.Compute.Batch.BatchTaskContainerSettings,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.ResourceFile},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.OutputFile},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.EnvironmentSetting},Azure.Compute.Batch.AffinityInfo,Azure.Compute.Batch.BatchTaskConstraints,System.Nullable{System.Int32},Azure.Compute.Batch.UserIdentity,Azure.Compute.Batch.MultiInstanceSettings,Azure.Compute.Batch.BatchTaskDependencies,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchApplicationPackageReference},Azure.Compute.Batch.AuthenticationTokenSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskCreateContent (Optional id As String = Nothing, Optional displayName As String = Nothing, Optional exitConditions As ExitConditions = Nothing, Optional commandLine As String = Nothing, Optional containerSettings As BatchTaskContainerSettings = Nothing, Optional resourceFiles As IEnumerable(Of ResourceFile) = Nothing, Optional outputFiles As IEnumerable(Of OutputFile) = Nothing, Optional environmentSettings As IEnumerable(Of EnvironmentSetting) = Nothing, Optional affinityInfo As AffinityInfo = Nothing, Optional constraints As BatchTaskConstraints = Nothing, Optional requiredSlots As Nullable(Of Integer) = Nothing, Optional userIdentity As UserIdentity = Nothing, Optional multiInstanceSettings As MultiInstanceSettings = Nothing, Optional dependsOn As BatchTaskDependencies = Nothing, Optional applicationPackageReferences As IEnumerable(Of BatchApplicationPackageReference) = Nothing, Optional authenticationTokenSettings As AuthenticationTokenSettings = Nothing) As BatchTaskCreateContent" />
      <MemberSignature Language="F#" Value="static member BatchTaskCreateContent : string * string * Azure.Compute.Batch.ExitConditions * string * Azure.Compute.Batch.BatchTaskContainerSettings * seq&lt;Azure.Compute.Batch.ResourceFile&gt; * seq&lt;Azure.Compute.Batch.OutputFile&gt; * seq&lt;Azure.Compute.Batch.EnvironmentSetting&gt; * Azure.Compute.Batch.AffinityInfo * Azure.Compute.Batch.BatchTaskConstraints * Nullable&lt;int&gt; * Azure.Compute.Batch.UserIdentity * Azure.Compute.Batch.MultiInstanceSettings * Azure.Compute.Batch.BatchTaskDependencies * seq&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt; * Azure.Compute.Batch.AuthenticationTokenSettings -&gt; Azure.Compute.Batch.BatchTaskCreateContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskCreateContent (id, displayName, exitConditions, commandLine, containerSettings, resourceFiles, outputFiles, environmentSettings, affinityInfo, constraints, requiredSlots, userIdentity, multiInstanceSettings, dependsOn, applicationPackageReferences, authenticationTokenSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskCreateContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="exitConditions" Type="Azure.Compute.Batch.ExitConditions" />
        <Parameter Name="commandLine" Type="System.String" />
        <Parameter Name="containerSettings" Type="Azure.Compute.Batch.BatchTaskContainerSettings" />
        <Parameter Name="resourceFiles" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.ResourceFile&gt;" />
        <Parameter Name="outputFiles" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.OutputFile&gt;" />
        <Parameter Name="environmentSettings" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.EnvironmentSetting&gt;" />
        <Parameter Name="affinityInfo" Type="Azure.Compute.Batch.AffinityInfo" />
        <Parameter Name="constraints" Type="Azure.Compute.Batch.BatchTaskConstraints" />
        <Parameter Name="requiredSlots" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="userIdentity" Type="Azure.Compute.Batch.UserIdentity" />
        <Parameter Name="multiInstanceSettings" Type="Azure.Compute.Batch.MultiInstanceSettings" />
        <Parameter Name="dependsOn" Type="Azure.Compute.Batch.BatchTaskDependencies" />
        <Parameter Name="applicationPackageReferences" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchApplicationPackageReference&gt;" />
        <Parameter Name="authenticationTokenSettings" Type="Azure.Compute.Batch.AuthenticationTokenSettings" />
      </Parameters>
      <Docs>
        <param name="id"> A string that uniquely identifies the Task within the Job. The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a Job that differ only by case). </param>
        <param name="displayName"> A display name for the Task. The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        <param name="exitConditions"> How the Batch service should respond when the Task completes. </param>
        <param name="commandLine"> The command line of the Task. For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). </param>
        <param name="containerSettings"> The settings for the container under which the Task runs. If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files. </param>
        <param name="resourceFiles"> A list of files that the Batch service will download to the Compute Node before running the command line. For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. </param>
        <param name="outputFiles"> A list of files that the Batch service will upload from the Compute Node after running the command line. For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed. </param>
        <param name="environmentSettings"> A list of environment variable settings for the Task. </param>
        <param name="affinityInfo"> A locality hint that can be used by the Batch service to select a Compute Node on which to start the new Task. </param>
        <param name="constraints"> The execution constraints that apply to this Task. If you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the Job, the maxWallClockTime is infinite, and the retentionTime is 7 days. </param>
        <param name="requiredSlots"> The number of scheduling slots that the Task required to run. The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1. </param>
        <param name="userIdentity"> The user identity under which the Task runs. If omitted, the Task runs as a non-administrative user unique to the Task. </param>
        <param name="multiInstanceSettings"> An object that indicates that the Task is a multi-instance Task, and contains information about how to run the multi-instance Task. </param>
        <param name="dependsOn"> The Tasks that this Task depends on. This Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. If the Job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob. </param>
        <param name="applicationPackageReferences"> A list of Packages that the Batch service will deploy to the Compute Node before running the command line. Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. </param>
        <param name="authenticationTokenSettings"> The settings for an authentication token that the Task can use to perform Batch service operations. If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskCreateContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskCreateContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskExecutionInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskExecutionInfo BatchTaskExecutionInfo (DateTimeOffset? startTime = default, DateTimeOffset? endTime = default, int? exitCode = default, Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo = default, Azure.Compute.Batch.BatchTaskFailureInfo failureInfo = default, int retryCount = 0, DateTimeOffset? lastRetryTime = default, int requeueCount = 0, DateTimeOffset? lastRequeueTime = default, Azure.Compute.Batch.BatchTaskExecutionResult? result = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskExecutionInfo BatchTaskExecutionInfo(valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, valuetype System.Nullable`1&lt;int32&gt; exitCode, class Azure.Compute.Batch.BatchTaskContainerExecutionInfo containerInfo, class Azure.Compute.Batch.BatchTaskFailureInfo failureInfo, int32 retryCount, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastRetryTime, int32 requeueCount, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lastRequeueTime, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.BatchTaskExecutionResult&gt; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskExecutionInfo(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskContainerExecutionInfo,Azure.Compute.Batch.BatchTaskFailureInfo,System.Int32,System.Nullable{System.DateTimeOffset},System.Int32,System.Nullable{System.DateTimeOffset},System.Nullable{Azure.Compute.Batch.BatchTaskExecutionResult})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskExecutionInfo (Optional startTime As Nullable(Of DateTimeOffset) = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional exitCode As Nullable(Of Integer) = Nothing, Optional containerInfo As BatchTaskContainerExecutionInfo = Nothing, Optional failureInfo As BatchTaskFailureInfo = Nothing, Optional retryCount As Integer = 0, Optional lastRetryTime As Nullable(Of DateTimeOffset) = Nothing, Optional requeueCount As Integer = 0, Optional lastRequeueTime As Nullable(Of DateTimeOffset) = Nothing, Optional result As Nullable(Of BatchTaskExecutionResult) = Nothing) As BatchTaskExecutionInfo" />
      <MemberSignature Language="F#" Value="static member BatchTaskExecutionInfo : Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskContainerExecutionInfo * Azure.Compute.Batch.BatchTaskFailureInfo * int * Nullable&lt;DateTimeOffset&gt; * int * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt; -&gt; Azure.Compute.Batch.BatchTaskExecutionInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskExecutionInfo (startTime, endTime, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, requeueCount, lastRequeueTime, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskExecutionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="exitCode" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="containerInfo" Type="Azure.Compute.Batch.BatchTaskContainerExecutionInfo" />
        <Parameter Name="failureInfo" Type="Azure.Compute.Batch.BatchTaskFailureInfo" />
        <Parameter Name="retryCount" Type="System.Int32" />
        <Parameter Name="lastRetryTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requeueCount" Type="System.Int32" />
        <Parameter Name="lastRequeueTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="result" Type="System.Nullable&lt;Azure.Compute.Batch.BatchTaskExecutionResult&gt;" />
      </Parameters>
      <Docs>
        <param name="startTime"> The time at which the Task started running. 'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state. </param>
        <param name="endTime"> The time at which the Task completed. This property is set only if the Task is in the Completed state. </param>
        <param name="exitCode"> The exit code of the program specified on the Task command line. This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        <param name="containerInfo"> Information about the container under which the Task is executing. This property is set only if the Task runs in a container context. </param>
        <param name="failureInfo"> Information describing the Task failure, if any. This property is set only if the Task is in the completed state and encountered a failure. </param>
        <param name="retryCount"> The number of times the Task has been retried by the Batch service. Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        <param name="lastRetryTime"> The most recent time at which a retry of the Task started running. This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        <param name="requeueCount"> The number of times the Task has been requeued by the Batch service as the result of a user request. When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons. </param>
        <param name="lastRequeueTime"> The most recent time at which the Task has been requeued by the Batch service as the result of a user request. This property is set only if the requeueCount is nonzero. </param>
        <param name="result"> The result of the Task execution. If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskExecutionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskExecutionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskFailureInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskFailureInfo BatchTaskFailureInfo (Azure.Compute.Batch.ErrorCategory category = default, string code = default, string message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt; details = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskFailureInfo BatchTaskFailureInfo(valuetype Azure.Compute.Batch.ErrorCategory category, string code, string message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.NameValuePair&gt; details) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskFailureInfo(Azure.Compute.Batch.ErrorCategory,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.NameValuePair})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskFailureInfo (Optional category As ErrorCategory = Nothing, Optional code As String = Nothing, Optional message As String = Nothing, Optional details As IEnumerable(Of NameValuePair) = Nothing) As BatchTaskFailureInfo" />
      <MemberSignature Language="F#" Value="static member BatchTaskFailureInfo : Azure.Compute.Batch.ErrorCategory * string * string * seq&lt;Azure.Compute.Batch.NameValuePair&gt; -&gt; Azure.Compute.Batch.BatchTaskFailureInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskFailureInfo (category, code, message, details)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskFailureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="Azure.Compute.Batch.ErrorCategory" />
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="details" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt;" />
      </Parameters>
      <Docs>
        <param name="category"> The category of the Task error. </param>
        <param name="code"> An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the Task error, intended to be suitable for display in a user interface. </param>
        <param name="details"> A list of additional details related to the error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskFailureInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskFailureInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskInfo BatchTaskInfo (string taskUrl = default, string jobId = default, string taskId = default, int? subtaskId = default, Azure.Compute.Batch.BatchTaskState taskState = default, Azure.Compute.Batch.BatchTaskExecutionInfo executionInfo = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskInfo BatchTaskInfo(string taskUrl, string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; subtaskId, valuetype Azure.Compute.Batch.BatchTaskState taskState, class Azure.Compute.Batch.BatchTaskExecutionInfo executionInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskInfo(System.String,System.String,System.String,System.Nullable{System.Int32},Azure.Compute.Batch.BatchTaskState,Azure.Compute.Batch.BatchTaskExecutionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskInfo (Optional taskUrl As String = Nothing, Optional jobId As String = Nothing, Optional taskId As String = Nothing, Optional subtaskId As Nullable(Of Integer) = Nothing, Optional taskState As BatchTaskState = Nothing, Optional executionInfo As BatchTaskExecutionInfo = Nothing) As BatchTaskInfo" />
      <MemberSignature Language="F#" Value="static member BatchTaskInfo : string * string * string * Nullable&lt;int&gt; * Azure.Compute.Batch.BatchTaskState * Azure.Compute.Batch.BatchTaskExecutionInfo -&gt; Azure.Compute.Batch.BatchTaskInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskInfo (taskUrl, jobId, taskId, subtaskId, taskState, executionInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="taskUrl" Type="System.String" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="subtaskId" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="taskState" Type="Azure.Compute.Batch.BatchTaskState" />
        <Parameter Name="executionInfo" Type="Azure.Compute.Batch.BatchTaskExecutionInfo" />
      </Parameters>
      <Docs>
        <param name="taskUrl"> The URL of the Task. </param>
        <param name="jobId"> The ID of the Job to which the Task belongs. </param>
        <param name="taskId"> The ID of the Task. </param>
        <param name="subtaskId"> The ID of the subtask if the Task is a multi-instance Task. </param>
        <param name="taskState"> The current state of the Task. </param>
        <param name="executionInfo"> Information about the execution of the Task. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskSlotCounts">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskSlotCounts BatchTaskSlotCounts (int active = 0, int running = 0, int completed = 0, int succeeded = 0, int failed = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskSlotCounts BatchTaskSlotCounts(int32 active, int32 running, int32 completed, int32 succeeded, int32 failed) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskSlotCounts(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskSlotCounts (Optional active As Integer = 0, Optional running As Integer = 0, Optional completed As Integer = 0, Optional succeeded As Integer = 0, Optional failed As Integer = 0) As BatchTaskSlotCounts" />
      <MemberSignature Language="F#" Value="static member BatchTaskSlotCounts : int * int * int * int * int -&gt; Azure.Compute.Batch.BatchTaskSlotCounts" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskSlotCounts (active, running, completed, succeeded, failed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskSlotCounts</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="active" Type="System.Int32" />
        <Parameter Name="running" Type="System.Int32" />
        <Parameter Name="completed" Type="System.Int32" />
        <Parameter Name="succeeded" Type="System.Int32" />
        <Parameter Name="failed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="active"> The number of TaskSlots for active Tasks. </param>
        <param name="running"> The number of TaskSlots for running Tasks. </param>
        <param name="completed"> The number of TaskSlots for completed Tasks. </param>
        <param name="succeeded"> The number of TaskSlots for succeeded Tasks. </param>
        <param name="failed"> The number of TaskSlots for failed Tasks. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskSlotCounts" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskSlotCounts" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchTaskStatistics">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.BatchTaskStatistics BatchTaskStatistics (string url = default, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCpuTime = default, TimeSpan kernelCpuTime = default, TimeSpan wallClockTime = default, long readIOps = 0, long writeIOps = 0, float readIOGiB = 0, float writeIOGiB = 0, TimeSpan waitTime = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.BatchTaskStatistics BatchTaskStatistics(string url, valuetype System.DateTimeOffset startTime, valuetype System.DateTimeOffset lastUpdateTime, valuetype System.TimeSpan userCpuTime, valuetype System.TimeSpan kernelCpuTime, valuetype System.TimeSpan wallClockTime, int64 readIOps, int64 writeIOps, float32 readIOGiB, float32 writeIOGiB, valuetype System.TimeSpan waitTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskStatistics(System.String,System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Int64,System.Int64,System.Single,System.Single,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BatchTaskStatistics (Optional url As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional lastUpdateTime As DateTimeOffset = Nothing, Optional userCpuTime As TimeSpan = Nothing, Optional kernelCpuTime As TimeSpan = Nothing, Optional wallClockTime As TimeSpan = Nothing, Optional readIOps As Long = 0, Optional writeIOps As Long = 0, Optional readIOGiB As Single = 0, Optional writeIOGiB As Single = 0, Optional waitTime As TimeSpan = Nothing) As BatchTaskStatistics" />
      <MemberSignature Language="F#" Value="static member BatchTaskStatistics : string * DateTimeOffset * DateTimeOffset * TimeSpan * TimeSpan * TimeSpan * int64 * int64 * single * single * TimeSpan -&gt; Azure.Compute.Batch.BatchTaskStatistics" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.BatchTaskStatistics (url, startTime, lastUpdateTime, userCpuTime, kernelCpuTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, waitTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.BatchTaskStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="lastUpdateTime" Type="System.DateTimeOffset" />
        <Parameter Name="userCpuTime" Type="System.TimeSpan" />
        <Parameter Name="kernelCpuTime" Type="System.TimeSpan" />
        <Parameter Name="wallClockTime" Type="System.TimeSpan" />
        <Parameter Name="readIOps" Type="System.Int64" />
        <Parameter Name="writeIOps" Type="System.Int64" />
        <Parameter Name="readIOGiB" Type="System.Single" />
        <Parameter Name="writeIOGiB" Type="System.Single" />
        <Parameter Name="waitTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="url"> The URL of the statistics. </param>
        <param name="startTime"> The start time of the time range covered by the statistics. </param>
        <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        <param name="userCpuTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task. </param>
        <param name="kernelCpuTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task. </param>
        <param name="wallClockTime"> The total wall clock time of the Task. The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries. </param>
        <param name="readIOps"> The total number of disk read operations made by the Task. </param>
        <param name="writeIOps"> The total number of disk write operations made by the Task. </param>
        <param name="readIOGiB"> The total gibibytes read from disk by the Task. </param>
        <param name="writeIOGiB"> The total gibibytes written to disk by the Task. </param>
        <param name="waitTime"> The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.). </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.BatchTaskStatistics" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.BatchTaskStatistics" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileProperties">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.FileProperties FileProperties (DateTimeOffset? creationTime = default, DateTimeOffset lastModified = default, long contentLength = 0, string contentType = default, string fileMode = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.FileProperties FileProperties(valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; creationTime, valuetype System.DateTimeOffset lastModified, int64 contentLength, string contentType, string fileMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.FileProperties(System.Nullable{System.DateTimeOffset},System.DateTimeOffset,System.Int64,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FileProperties (Optional creationTime As Nullable(Of DateTimeOffset) = Nothing, Optional lastModified As DateTimeOffset = Nothing, Optional contentLength As Long = 0, Optional contentType As String = Nothing, Optional fileMode As String = Nothing) As FileProperties" />
      <MemberSignature Language="F#" Value="static member FileProperties : Nullable&lt;DateTimeOffset&gt; * DateTimeOffset * int64 * string * string -&gt; Azure.Compute.Batch.FileProperties" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.FileProperties (creationTime, lastModified, contentLength, contentType, fileMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.FileProperties</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="lastModified" Type="System.DateTimeOffset" />
        <Parameter Name="contentLength" Type="System.Int64" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="fileMode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="creationTime"> The file creation time. The creation time is not returned for files on Linux Compute Nodes. </param>
        <param name="lastModified"> The time at which the file was last modified. </param>
        <param name="contentLength"> The length of the file. </param>
        <param name="contentType"> The content type of the file. </param>
        <param name="fileMode"> The file mode attribute in octal format. The file mode is returned only for files on Linux Compute Nodes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.FileProperties" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.FileProperties" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageReference">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.ImageReference ImageReference (string publisher = default, string offer = default, string sku = default, string version = default, string virtualMachineImageId = default, string exactVersion = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.ImageReference ImageReference(string publisher, string offer, string sku, string version, string virtualMachineImageId, string exactVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.ImageReference(System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ImageReference (Optional publisher As String = Nothing, Optional offer As String = Nothing, Optional sku As String = Nothing, Optional version As String = Nothing, Optional virtualMachineImageId As String = Nothing, Optional exactVersion As String = Nothing) As ImageReference" />
      <MemberSignature Language="F#" Value="static member ImageReference : string * string * string * string * string * string -&gt; Azure.Compute.Batch.ImageReference" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.ImageReference (publisher, offer, sku, version, virtualMachineImageId, exactVersion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.ImageReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publisher" Type="System.String" />
        <Parameter Name="offer" Type="System.String" />
        <Parameter Name="sku" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="virtualMachineImageId" Type="System.String" />
        <Parameter Name="exactVersion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="publisher"> The publisher of the Azure Virtual Machines Marketplace Image. For example, Canonical or MicrosoftWindowsServer. </param>
        <param name="offer"> The offer type of the Azure Virtual Machines Marketplace Image. For example, UbuntuServer or WindowsServer. </param>
        <param name="sku"> The SKU of the Azure Virtual Machines Marketplace Image. For example, 18.04-LTS or 2019-Datacenter. </param>
        <param name="version"> The version of the Azure Virtual Machines Marketplace Image. A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'. </param>
        <param name="virtualMachineImageId"> The ARM resource identifier of the Azure Compute Gallery Image. Compute Nodes in the Pool will be created using this Image Id. This is of the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName}/versions/{VersionId} or /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageDefinitionName} for always defaulting to the latest image version. This property is mutually exclusive with other ImageReference properties. The Azure Compute Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. </param>
        <param name="exactVersion"> The specific version of the platform image or marketplace image used to create the node. This read-only field differs from 'version' only if the value specified for 'version' when the pool was created was 'latest'. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.ImageReference" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.ImageReference" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InboundEndpoint">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.InboundEndpoint InboundEndpoint (string name = default, Azure.Compute.Batch.InboundEndpointProtocol protocol = default, string publicIpAddress = default, string publicFQDN = default, int frontendPort = 0, int backendPort = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.InboundEndpoint InboundEndpoint(string name, valuetype Azure.Compute.Batch.InboundEndpointProtocol protocol, string publicIpAddress, string publicFQDN, int32 frontendPort, int32 backendPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.InboundEndpoint(System.String,Azure.Compute.Batch.InboundEndpointProtocol,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InboundEndpoint (Optional name As String = Nothing, Optional protocol As InboundEndpointProtocol = Nothing, Optional publicIpAddress As String = Nothing, Optional publicFQDN As String = Nothing, Optional frontendPort As Integer = 0, Optional backendPort As Integer = 0) As InboundEndpoint" />
      <MemberSignature Language="F#" Value="static member InboundEndpoint : string * Azure.Compute.Batch.InboundEndpointProtocol * string * string * int * int -&gt; Azure.Compute.Batch.InboundEndpoint" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.InboundEndpoint (name, protocol, publicIpAddress, publicFQDN, frontendPort, backendPort)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.InboundEndpoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="protocol" Type="Azure.Compute.Batch.InboundEndpointProtocol" />
        <Parameter Name="publicIpAddress" Type="System.String" />
        <Parameter Name="publicFQDN" Type="System.String" />
        <Parameter Name="frontendPort" Type="System.Int32" />
        <Parameter Name="backendPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the endpoint. </param>
        <param name="protocol"> The protocol of the endpoint. </param>
        <param name="publicIpAddress"> The public IP address of the Compute Node. </param>
        <param name="publicFQDN"> The public fully qualified domain name for the Compute Node. </param>
        <param name="frontendPort"> The public port number of the endpoint. </param>
        <param name="backendPort"> The backend port number of the endpoint. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.InboundEndpoint" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.InboundEndpoint" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceViewStatus">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.InstanceViewStatus InstanceViewStatus (string code = default, string displayStatus = default, Azure.Compute.Batch.StatusLevelTypes? level = default, string message = default, DateTimeOffset? time = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.InstanceViewStatus InstanceViewStatus(string code, string displayStatus, valuetype System.Nullable`1&lt;valuetype Azure.Compute.Batch.StatusLevelTypes&gt; level, string message, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; time) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.InstanceViewStatus(System.String,System.String,System.Nullable{Azure.Compute.Batch.StatusLevelTypes},System.String,System.Nullable{System.DateTimeOffset})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstanceViewStatus (Optional code As String = Nothing, Optional displayStatus As String = Nothing, Optional level As Nullable(Of StatusLevelTypes) = Nothing, Optional message As String = Nothing, Optional time As Nullable(Of DateTimeOffset) = Nothing) As InstanceViewStatus" />
      <MemberSignature Language="F#" Value="static member InstanceViewStatus : string * string * Nullable&lt;Azure.Compute.Batch.StatusLevelTypes&gt; * string * Nullable&lt;DateTimeOffset&gt; -&gt; Azure.Compute.Batch.InstanceViewStatus" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.InstanceViewStatus (code, displayStatus, level, message, time)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.InstanceViewStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="displayStatus" Type="System.String" />
        <Parameter Name="level" Type="System.Nullable&lt;Azure.Compute.Batch.StatusLevelTypes&gt;" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="time" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
      </Parameters>
      <Docs>
        <param name="code"> The status code. </param>
        <param name="displayStatus"> The localized label for the status. </param>
        <param name="level"> Level code. </param>
        <param name="message"> The detailed status message. </param>
        <param name="time"> The time of the status. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.InstanceViewStatus" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.InstanceViewStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameValuePair">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.NameValuePair NameValuePair (string name = default, string value = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.NameValuePair NameValuePair(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.NameValuePair(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NameValuePair (Optional name As String = Nothing, Optional value As String = Nothing) As NameValuePair" />
      <MemberSignature Language="F#" Value="static member NameValuePair : string * string -&gt; Azure.Compute.Batch.NameValuePair" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.NameValuePair (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.NameValuePair</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"> The name in the name-value pair. </param>
        <param name="value"> The value in the name-value pair. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.NameValuePair" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.NameValuePair" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecentBatchJob">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.RecentBatchJob RecentBatchJob (string id = default, string url = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.RecentBatchJob RecentBatchJob(string id, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.RecentBatchJob(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RecentBatchJob (Optional id As String = Nothing, Optional url As String = Nothing) As RecentBatchJob" />
      <MemberSignature Language="F#" Value="static member RecentBatchJob : string * string -&gt; Azure.Compute.Batch.RecentBatchJob" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.RecentBatchJob (id, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.RecentBatchJob</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The ID of the Job. </param>
        <param name="url"> The URL of the Job. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.RecentBatchJob" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.RecentBatchJob" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizeError">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.ResizeError ResizeError (string code = default, string message = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt; values = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.ResizeError ResizeError(string code, string message, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.NameValuePair&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.ResizeError(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.NameValuePair})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResizeError (Optional code As String = Nothing, Optional message As String = Nothing, Optional values As IEnumerable(Of NameValuePair) = Nothing) As ResizeError" />
      <MemberSignature Language="F#" Value="static member ResizeError : string * string * seq&lt;Azure.Compute.Batch.NameValuePair&gt; -&gt; Azure.Compute.Batch.ResizeError" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.ResizeError (code, message, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.ResizeError</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.NameValuePair&gt;" />
      </Parameters>
      <Docs>
        <param name="code"> An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically. </param>
        <param name="message"> A message describing the Pool resize error, intended to be suitable for display in a user interface. </param>
        <param name="values"> A list of additional error details related to the Pool resize error. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.ResizeError" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.ResizeError" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBatchServiceLogsContent">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.UploadBatchServiceLogsContent UploadBatchServiceLogsContent (string containerUrl = default, DateTimeOffset startTime = default, DateTimeOffset? endTime = default, Azure.Compute.Batch.BatchNodeIdentityReference identityReference = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.UploadBatchServiceLogsContent UploadBatchServiceLogsContent(string containerUrl, valuetype System.DateTimeOffset startTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endTime, class Azure.Compute.Batch.BatchNodeIdentityReference identityReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.UploadBatchServiceLogsContent(System.String,System.DateTimeOffset,System.Nullable{System.DateTimeOffset},Azure.Compute.Batch.BatchNodeIdentityReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UploadBatchServiceLogsContent (Optional containerUrl As String = Nothing, Optional startTime As DateTimeOffset = Nothing, Optional endTime As Nullable(Of DateTimeOffset) = Nothing, Optional identityReference As BatchNodeIdentityReference = Nothing) As UploadBatchServiceLogsContent" />
      <MemberSignature Language="F#" Value="static member UploadBatchServiceLogsContent : string * DateTimeOffset * Nullable&lt;DateTimeOffset&gt; * Azure.Compute.Batch.BatchNodeIdentityReference -&gt; Azure.Compute.Batch.UploadBatchServiceLogsContent" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.UploadBatchServiceLogsContent (containerUrl, startTime, endTime, identityReference)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.UploadBatchServiceLogsContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerUrl" Type="System.String" />
        <Parameter Name="startTime" Type="System.DateTimeOffset" />
        <Parameter Name="endTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="identityReference" Type="Azure.Compute.Batch.BatchNodeIdentityReference" />
      </Parameters>
      <Docs>
        <param name="containerUrl"> The URL of the container within Azure Blob Storage to which to upload the Batch Service log file(s). If a user assigned managed identity is not being used, the URL must include a Shared Access Signature (SAS) granting write permissions to the container. The SAS duration must allow enough time for the upload to finish. The start time for SAS is optional and recommended to not be specified. </param>
        <param name="startTime"> The start of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. </param>
        <param name="endTime"> The end of the time range from which to upload Batch Service log file(s). Any log file containing a log message in the time range will be uploaded. This means that the operation might retrieve more logs than have been requested since the entire log file is always uploaded, but the operation should not retrieve fewer logs than have been requested. If omitted, the default is to upload all logs available after the startTime. </param>
        <param name="identityReference"> The reference to the user assigned identity to use to access Azure Blob Storage specified by containerUrl. The identity must have write access to the Azure Blob Storage container. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.UploadBatchServiceLogsContent" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.UploadBatchServiceLogsContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadBatchServiceLogsResult">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.UploadBatchServiceLogsResult UploadBatchServiceLogsResult (string virtualDirectoryName = default, int numberOfFilesUploaded = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.UploadBatchServiceLogsResult UploadBatchServiceLogsResult(string virtualDirectoryName, int32 numberOfFilesUploaded) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.UploadBatchServiceLogsResult(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UploadBatchServiceLogsResult (Optional virtualDirectoryName As String = Nothing, Optional numberOfFilesUploaded As Integer = 0) As UploadBatchServiceLogsResult" />
      <MemberSignature Language="F#" Value="static member UploadBatchServiceLogsResult : string * int -&gt; Azure.Compute.Batch.UploadBatchServiceLogsResult" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.UploadBatchServiceLogsResult (virtualDirectoryName, numberOfFilesUploaded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.UploadBatchServiceLogsResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDirectoryName" Type="System.String" />
        <Parameter Name="numberOfFilesUploaded" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="virtualDirectoryName"> The virtual directory within Azure Blob Storage container to which the Batch Service log file(s) will be uploaded. The virtual directory name is part of the blob name for each log file uploaded, and it is built based poolId, nodeId and a unique identifier. </param>
        <param name="numberOfFilesUploaded"> The number of log files which will be uploaded. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.UploadBatchServiceLogsResult" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.UploadBatchServiceLogsResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserAssignedIdentity">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.UserAssignedIdentity UserAssignedIdentity (string resourceId = default, string clientId = default, string principalId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.UserAssignedIdentity UserAssignedIdentity(string resourceId, string clientId, string principalId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.UserAssignedIdentity(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UserAssignedIdentity (Optional resourceId As String = Nothing, Optional clientId As String = Nothing, Optional principalId As String = Nothing) As UserAssignedIdentity" />
      <MemberSignature Language="F#" Value="static member UserAssignedIdentity : string * string * string -&gt; Azure.Compute.Batch.UserAssignedIdentity" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.UserAssignedIdentity (resourceId, clientId, principalId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.UserAssignedIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceId" Type="System.String" />
        <Parameter Name="clientId" Type="System.String" />
        <Parameter Name="principalId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resourceId"> The ARM resource id of the user assigned identity. </param>
        <param name="clientId"> The client id of the user assigned identity. </param>
        <param name="principalId"> The principal id of the user assigned identity. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.UserAssignedIdentity" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.UserAssignedIdentity" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualMachineInfo">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.VirtualMachineInfo VirtualMachineInfo (Azure.Compute.Batch.ImageReference imageReference = default, string scaleSetVmResourceId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.VirtualMachineInfo VirtualMachineInfo(class Azure.Compute.Batch.ImageReference imageReference, string scaleSetVmResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.VirtualMachineInfo(Azure.Compute.Batch.ImageReference,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VirtualMachineInfo (Optional imageReference As ImageReference = Nothing, Optional scaleSetVmResourceId As String = Nothing) As VirtualMachineInfo" />
      <MemberSignature Language="F#" Value="static member VirtualMachineInfo : Azure.Compute.Batch.ImageReference * string -&gt; Azure.Compute.Batch.VirtualMachineInfo" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.VirtualMachineInfo (imageReference, scaleSetVmResourceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.VirtualMachineInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageReference" Type="Azure.Compute.Batch.ImageReference" />
        <Parameter Name="scaleSetVmResourceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageReference"> The reference to the Azure Virtual Machine's Marketplace Image. </param>
        <param name="scaleSetVmResourceId"> The resource ID of the Compute Node's current Virtual Machine Scale Set VM. Only defined if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.VirtualMachineInfo" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.VirtualMachineInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VMExtensionInstanceView">
      <MemberSignature Language="C#" Value="public static Azure.Compute.Batch.VMExtensionInstanceView VMExtensionInstanceView (string name = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InstanceViewStatus&gt; statuses = default, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InstanceViewStatus&gt; subStatuses = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Compute.Batch.VMExtensionInstanceView VMExtensionInstanceView(string name, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.InstanceViewStatus&gt; statuses, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.InstanceViewStatus&gt; subStatuses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.ComputeBatchModelFactory.VMExtensionInstanceView(System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.InstanceViewStatus},System.Collections.Generic.IEnumerable{Azure.Compute.Batch.InstanceViewStatus})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VMExtensionInstanceView (Optional name As String = Nothing, Optional statuses As IEnumerable(Of InstanceViewStatus) = Nothing, Optional subStatuses As IEnumerable(Of InstanceViewStatus) = Nothing) As VMExtensionInstanceView" />
      <MemberSignature Language="F#" Value="static member VMExtensionInstanceView : string * seq&lt;Azure.Compute.Batch.InstanceViewStatus&gt; * seq&lt;Azure.Compute.Batch.InstanceViewStatus&gt; -&gt; Azure.Compute.Batch.VMExtensionInstanceView" Usage="Azure.Compute.Batch.ComputeBatchModelFactory.VMExtensionInstanceView (name, statuses, subStatuses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.VMExtensionInstanceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="statuses" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InstanceViewStatus&gt;" />
        <Parameter Name="subStatuses" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.InstanceViewStatus&gt;" />
      </Parameters>
      <Docs>
        <param name="name"> The name of the vm extension instance view. </param>
        <param name="statuses"> The resource status information. </param>
        <param name="subStatuses"> The resource status information. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.Compute.Batch.VMExtensionInstanceView" />. </summary>
        <returns> A new <see cref="T:Azure.Compute.Batch.VMExtensionInstanceView" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
